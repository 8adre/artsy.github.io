<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xcode | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/xcode/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2016-06-27T18:11:13+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Xcode's Schemes to run a subset of your tests]]></title>
    <link href="http://artsy.github.io/blog/2016/04/06/Testing-Schemes/"/>
    <updated>2016-04-06T12:09:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/04/06/Testing-Schemes</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/artsy/eigen">Eigen</a> has hit the point where testing is a chore. This is a positive sign, the app has grown in terms of size, complexity, and number of developers considerably over the last 3 years. The test suite makes us feel comfortable making changes.</p>

<p>On my fastest computer, we're just under a minute - <code>Executed 1105 tests, with 1 failure (0 unexpected) in 43.221 (48.201) seconds</code>  for the whole suite. I think I could probably live with 20 seconds max. So I studied how <a href="https://www.jetbrains.com/objc/">AppCode</a> handles running tests, and this will be an illustrated guide as to how you can easily run the subset of tests in Xcode based on their techniques.</p>

<p> I <a href="https://github.com/orta/life/issues/71">have ideas</a> on how to improve time for testing in general, based on <a href="http://artsy.github.io/blog/2016/03/05/iOS-Code-Injection/">Code Injection</a>, but they aren't fully fleshed out and I expect it to be time-intensive to pull off. Time I haven't made yet.</p>

<!-- more -->


<h3>What are Schemes?</h3>

<blockquote><p>An Xcode scheme defines a collection of targets to build, a configuration to use when building, and a collection of tests to execute.</p>

<p>You can have as many schemes as you want, but only one can be active at a time. You can specify whether a scheme should be stored in a project—in which case it’s available in every workspace that includes that project, or in the workspace—in which case it’s available only in that workspace. When you select an active scheme, you also select a run destination (that is, the architecture of the hardware for which the products are built).</p></blockquote>

<p>To <a href="https://developer.apple.com/library/ios/featuredarticles/XcodeConcepts/Concept-Schemes.html">quote Apple</a>.</p>

<h3>Hatching a Scheme</h3>

<p>The Eigen Test Suite is around 50 test classes, these look a bit like this:</p>

<p><img src="/images/2016-04-06-Testing-Schemes/tests.png" alt="Tests" /></p>

<p>Before you start, you want to be able to say, "I want to only run tests for the Fairs section of Eigen", as that is where I will be working for the next few days. To get started, I need to create a new Scheme. You will have seen the schemes before when you click on the Target side of this Targer/Sim button in the top left of Xcode.</p>

<p><img src="/images/2016-04-06-Testing-Schemes/empty_scheme.png" alt="Empty Scheme" /></p>

<p>This is what it looks like on mine, we want to create a new scheme. This brings up a modal window where you need to choose your App's target (this is so you can continue running by pressing <code>cmd + r</code>.)</p>

<p><img src="/images/2016-04-06-Testing-Schemes/new_scheme.png" alt="New Scheme" /></p>

<p>I've called mine "Artsy just for Fairs", as I'm the only person who would see it, I can name it whatever I want. Clicking "OK" selects it, and hides the modal. You now need to go back to the target selector, and go to "Edit Schemes ..." to continue though.</p>

<p><img src="/images/2016-04-06-Testing-Schemes/edit_schemes.png" alt="Edit Schemes" /></p>

<h3>Making Amends</h3>

<p>OK, click on "Test" in the sidebar, and now you're in the Schemes Test editor. This is where you do the work.</p>

<p><img src="/images/2016-04-06-Testing-Schemes/empty_edit_schemes.png" alt="Empty Edit Schemes" /></p>

<p>You need to hit the "+" in order to add your Test Target to the Scheme</p>

<p><img src="/images/2016-04-06-Testing-Schemes/test_scheme.png" alt="Test Scheme" /></p>

<p>Select and "Add" you Targets. This adds the target, you then need to click the disclosure arrow in order to show all the Test Classes.</p>

<p><em>OK, here's some magic</em>. Hold <code>alt</code> and click on the blue tickbox to the right of your test target to turn it off. Then click again, without <code>alt</code>. It should then deselect all of the classes. This is standard in all Mac apps, so go wild there.</p>

<p><img src="/images/2016-04-06-Testing-Schemes/deselect_all.png" alt="Deselect All" /></p>

<p>This means you can go find the classes you do want to run, in my case that is the Test Classes relating to Fairs.</p>

<p><img src="/images/2016-04-06-Testing-Schemes/just_the_good_tests.png" alt="Just The Good Tests" /></p>

<p>Now when I press <code>cmd + u</code> it will only run those test classes.</p>

<h3>Wrapping Up</h3>

<p>Which means I can now get back to work at a reasonable pace. <code>Executed 15 tests, with 0 failures (0 unexpected) in 0.277 (0.312) seconds</code>. I can then run the full suite whenever I go and make a cup of tea.</p>

<p><em>Note:</em> If you want to avoid using the mouse to change scheme, the <a href="/images/2016-04-06-Testing-Schemes/next_prev.png">key commands</a> to change between visible schemes is <code>cmd + ctrl + [</code> and  <code>cmd + ctrl + ]</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Injection for Xcode]]></title>
    <link href="http://artsy.github.io/blog/2016/03/05/iOS-Code-Injection/"/>
    <updated>2016-03-05T12:09:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/03/05/iOS-Code-Injection</id>
    <content type="html"><![CDATA[<p>I have been writing code for roughly a decade. A large chunk of that time has been sitting waiting for my project to compile. It's a nice excuse to <a href="https://xkcd.com/303/">practice sword fighting</a> in the office, but really, deep down. It's frustrating. It's so easy to become <a href="https://xkcd.com/356/">nerd-sniped</a> when you wait for a long time.</p>

<p>As we integrate Swift into our projects, I've been seeing our compile times increase. So, I took some time to look at ways to improve this. The best option, so far, has been dynamic code injection via <a href="https://github.com/johnno1962/injectionforxcode">Injection Plugin for Xcode</a>. In a gist: This means that we don't recompile and re-launch, instead we inject new bits of code into a running application. This reduced the compile cycle on Eigen from 7 seconds to 1 second.</p>

<p>I took some time over the weekend to try and put together a video showing how I used code injection on a trivial app to create a view controller in code. It covers the technique I've <a href="https://github.com/artsy/eigen/pull/1236">started using in Eigen</a> and talks a little bit about how the pieces come together.</p>

<p>Jump <a href="https://www.youtube.com/watch?v=uftvtmyZ8TM">to YouTube</a> for the video, or click more for a smaller inline preview.</p>

<!-- more -->


<p></div></div><iframe width='100%' height='600' src='https://www.youtube.com/embed/uftvtmyZ8TM ' frameborder='0' allowfullscreen></iframe><div class='meta-container'><header>&nbsp;</header></div><div class='content-container'><div class='entry-content'></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Artsy's first closed source Pod]]></title>
    <link href="http://artsy.github.io/blog/2014/06/20/artsys-first-closed-source-pod/"/>
    <updated>2014-06-20T17:53:00+00:00</updated>
    <id>http://artsy.github.io/blog/2014/06/20/artsys-first-closed-source-pod</id>
    <content type="html"><![CDATA[<p>When I joined Artsy, <a href="http://code.dblock.org">dB</a> pitched me this idea: <em>Open source as default.</em></p>

<p>I took this to heart. I genuinely believe the idea behind the philosophy. It's cool that our real product isn't our implementations on the web or native but the data which powers it - <a href="https://artsy.net/theartgenomeproject">the Art Genome Project</a>. Similarly, I spend a bunch of time <a href="https://github.com/AshFurrow/ARCollectionViewMasonryLayout">on</a> <a href="https://github.com/dblock/ARASCIISwizzle">open</a> <a href="https://github.com/dblock/ios-snapshot-test-case-expecta">sourcing</a> <a href="https://github.com/dblock/ARTiledImageView">solid</a> <a href="https://github.com/dstnbrkr/DRBOperationTree">abstractions</a> <a href="https://github.com/orta/ORSimulatorKeyboardAccessor">from</a> <a href="https://github.com/orta/ORStackView">our</a> <a href="https://github.com/orta/ARAnalytics">apps</a>, always taking the opinion if something is used in more than one place, it should be open sourced.</p>

<p>This week I pushed some libraries that were a bit different, read on to find out why.</p>

<!-- more -->


<h2>The problem</h2>

<p>I was modernizing a section of <a href="http://orta.github.io/#folio-header-unit">Folio</a> that hasn't changed in 2 years to use custom UILabel subclasses consistent with <a href="https://iphone.artsy.net">the Artsy iOS app</a> and realized I was copying and pasting a large amount of code from one app to the other. This got me thinking about ways to keep this code in one place, as we might start another project which needs these same styles soon.</p>

<h2>The solution</h2>

<p>I didn't want to put it on the public CocoaPods Spec Repo, because it's not very relevant to the larger community, but in keeping with our philosophy of "open source by default," I definitely wanted to publish it as an example for others. The most elegant answer was to create our own <a href="https://github.com/artsy/specs">public Specs Repo</a>, which serves as a good reference when people want to know what a private specs repo looks like.</p>

<p>Like anyone who has tried to modularize a pretty large code-base, it turns out a lot of things were connected together. I couldn't just build my <a href="http://github.com/Artsy/Artsy-UILabels">Artsy+UILabels</a> repo and put everything in there. Instead I had to also build Artsy+UIFonts and <a href="http://github.com/Artsy/Artsy-UIColors">Artsy+UIColors</a>.</p>

<p>One of the good things about having to build three libraries is that I became very familiar with <code>pod lib create</code>. This is a command for building the scaffolding around a CocoaPod, making it much easier to create something fast. We had been holding off doing a <a href="https://github.com/CocoaPods/pod-template/pull/33">big update</a> to the command because no-one knew what WWDC would bring. Now we know, so I've worked on a new version of the command that programmatically manipulates an example project via <a href="https://github.com/CocoaPods/Xcodeproj">xcodeproj</a>. I've used it in creating all of these libraries. Expect to see it on the CocoaPods blog soon.</p>

<h2>Caveat</h2>

<p>I built three libraries, but one of them is unique. I modelled Artsy+UIFonts from <a href="http://kylefuller.co.uk">Kyle Fuller</a>'s <a href="https://github.com/kylef/OpenSans-pod">OpenSans-pod</a>, where the CocoaPod has the font resources and installing it moves them into your project. This is great for a free or open-source font, but would break commercial font licenses. For that reason, we don't have the ability to open source that project. Thus Artsy Mobile's first closed-source library.</p>

<p>This is a great example of how you can build a private specs repo, whilst the public-private aspect is not applicable to most companies. I find it to be a nice halfway house between open source as default, and keeping something internal. For more info on setting up your own private specs repos, <a href="http://guides.cocoapods.org/making/private-cocoapods.html">check the guides</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building the Xcode Plugin Snapshots]]></title>
    <link href="http://artsy.github.io/blog/2014/06/17/building-the-xcode-plugin-snapshots/"/>
    <updated>2014-06-17T10:50:00+00:00</updated>
    <id>http://artsy.github.io/blog/2014/06/17/building-the-xcode-plugin-snapshots</id>
    <content type="html"><![CDATA[<p>I'm the kind of guy who thinks better tooling means better outcomes. But when good tooling isn't available, it's time to build it yourself. It's this attitude that lead to my work on <a href="http://cocoadocs.org">CocoaDocs.org</a>, and then to <a href="http://cocoapods.org">CocoaPods.org</a> &amp; its documentation.</p>

<p>We've been trying to apply this to testing, and in order to pull this off I've had to extend Xcode to show off the results of failing tests in a more visual way. To that end, I've extended Xcode to show the results of failing <a href="https://github.com/facebook/ios-snapshot-test-case">view tests</a> in a more visual way by building <a href="https://github.com/orta/snapshots">Snapshots for Xcode</a>.  Let's go through the process of building an Xcode plugin so you can do this too. Screw stability.</p>

<!-- more -->


<h2>Getting started</h2>

<p>Lets start of with some Xcode inception. The nicest way to start working on Xcode plugins is to install <a href="http://alcatraz.io">Alcatraz</a> the Xcode plugin package manager:</p>

<pre><code>curl -fsSL https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh | sh
</code></pre>

<p>From Alcatraz you should have <a href="https://github.com/edwardaux/XcodeExplorer">XcodeExplorer</a> installed. This lets you dig through internal notifications and the Xcode view heriarchy for debugging. Then you'll want <a href="http://delisa.me">Delisa Mason</a>'s <a href="https://github.com/kattrali/Xcode5-Plugin-Template">Xcode 5 Plugin</a> template which also comes from Alcatraz. Now you can create a new project and pick <em>"Xcode 5 Plugin"</em>. This will do a bunch of the boring work around getting set up on a project, though it misses one bit that to me is essential, setting the Scheme Target. Once setup go to the Scheme editor and make it open Xcode as the target.</p>

<p><img src="/images/2014-06-17-building-the-xcode-plugin-snapshots/scheme.png" alt="Go set you target dangit" /></p>

<p>This means that when you do <code>cmd + r</code> on your project it will open a new instance of Xcode with your plugin installed, making the dev cycle for a plugin as simple as a normal OS X app. From here I can't tell you how to build your plugin. It's just normal development, however I can offer some general advice:</p>

<ul>
<li>When you see a class you don't know, google it, chances are Luis Solano has you covered with <a href="https://github.com/luisobo/Xcode-RuntimeHeaders">Xcode-RuntimeHeaders</a>.</li>
<li>Use id with fake class interfaces to get around having the headers for Xcode's classes.</li>
<li>Avoid 3rd party dependencies as much as possible as all plugin classes are in the same runtime.</li>
<li>A lot of work is done in notifications, so it's easy to hook in to state changes.</li>
<li>Swizzle as little as possible</li>
<li>Wrap code you're not 100% on with <code>@try {} @catch {}</code> once it's working to crash elegantly</li>
<li>Look at the source code of other plugins</li>
<li>Read <a href="https://github.com/kattrali/Xcode5-Plugin-Template#notes">the notes</a> on the Xcode5 Plugin Template</li>
</ul>


<h2>Releasing</h2>

<p>Next up you want to get it on Alcatraz, this is just a pull request to the <a href="https://github.com/supermarin/alcatraz-packages">alcatraz-packages repo</a>, it's like the old days of CocoaPods! Then you have a plugin, and people will always be using the master HEAD version of your plugin, so be wary around putting unstable code on that branch.</p>

<p>It's easy to forget that if you build apps you have all the tools you need to improve your workflow, one improvement that saves you an hour today could save thousands of human-hours once it's out in the community.</p>
]]></content>
  </entry>
  
</feed>
