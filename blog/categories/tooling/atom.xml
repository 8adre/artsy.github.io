<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tooling | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/tooling/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2019-02-04T20:51:30+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why We Run Our Own Blog]]></title>
    <link href="http://artsy.github.io/blog/2019/01/30/why-we-run-our-blog/"/>
    <updated>2019-01-30T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2019/01/30/why-we-run-our-blog</id>
    <content type="html"><![CDATA[<p>This blog just passed the 7 year mark from our initial <a href="/blog/2012/01/05/hello-world/">"Hello World"</a> post. We've always built and hosted our
own blog, initially <a href="/blog/2012/01/18/octopress-and-jekyll/">using OctoPress</a> but eventually migrating to just plain old Jekyll.</p>

<p>Artsy uses 3 separate editorial platforms now, we built our own for <a href="https://www.artsy.net/articles">Artsy Magazine</a>, use Medium for our <a href="https://www.artsy.net/life-at-artsy">Life
at Artsy blog</a> and Jekyll for the engineering blog. There was a healthy debate about whether we would migrate
to one, or two systems, but I had pretty strong opinions on migrating the engineering blog to Medium and nipped
that in the bud pretty quickly.</p>

<p>With <a href="https://m.signalvnoise.com/signal-v-noise-exits-medium/">Signal vs Noise</a> being a high profile of a example of migrating to Medium and back again, I thought it's
worth taking the time to examine our reasoning for doing it ourselves.</p>

<!-- more -->


<a name="Dependencies"></a>
<h2>Dependencies</h2>

<p>In programming, the process of creation rely on you depending on others. That ranges from operating systems, to
system dependencies like SQLite or VSCode to app level dependencies from CocoaPods/Node/Whatever. For this blog,
that we rely on GitHub's static site hosting, RubyGems + Bundler and Jekyll. Luckily for us, there are powerful
incentives for those projects to continue long into the future.</p>

<p>That's not even too much of a worry either:</p>

<ul>
<li>If GitHub pages stop being a priority, we can switch Netlify or plain S3 in an hour (we already ship to netlify
for post draft previews)</li>
<li>If RubyGems or Jekyll goes down, we can switch to another static site builder in another language,</li>
</ul>


<p>Because the code is some markdown, some HTML and CSS - that's all portable to whatever we want.</p>

<p>We call the process of making sure you understand and vet the full stack your dependencies <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#own-your-dependencies">"Owning your
Dependencies"</a>, and in this case we're sitting on a long-lived and mature set of dependencies.</p>

<p>To switch from our mature set of dependencies to a start-up which still hasn't found out how it can make money
greatly increases the long-term risks.</p>

<p>Medium is totally incentivized to get your post in front of as many people as possible, and that's awesome.
However, as a business they've not found a way to be profitable, and have taken a lot of <a href="https://www.crunchbase.com/organization/medium">VC cash</a> which
eventually needs to be paid back. (Artsy has too, so yeah, that's kinda hypocritical, but we're not aiming to
disrupt &amp; replace the existing "writing online" market we're <a href="https://www.theverge.com/2017/7/18/15983712/artsy-fine-art-galleries-online-auction-sales">augmenting</a> the existing Art Industry.)</p>

<p>When newspapers like <a href="https://www.forbes.com/sites/theodorecasey/2017/08/14/why-medium-doesnt-matter-anymore/#1fea7cdf49ad">Forbes</a> and <a href="https://www.bloomberg.com/opinion/articles/2017-01-05/why-medium-failed-to-disrupt-the-media">Bloomberg</a> are worried about the Medium business model, then
it doesn't look great for the longevity of your companies blog. For example, today Medium <a href="https://write.as/blog/ending-our-medium-integration">removed the developer
API</a> for your posts. Folks who used Medium to make money have <a href="http://www.niemanlab.org/2018/05/medium-abruptly-cancels-the-membership-programs-of-its-21-remaining-publisher-partners/">found themselves surprised</a> time
and time again when that changes.</p>

<p>It's important to note here that I think a lot of this churn is reasonable, they are a start-up and that is
literally what start-ups do. Start-ups iterate through business plan ideas until they find one that scales in a way
that they want and that process takes time. It's when that ambiguity about what a company does or doesn't do with
your writing which makes it a dependency which doesn't pay its weight.</p>

<a name="L.branding"></a>
<h2>#branding</h2>

<p></article>
<a href='/images/hosting-our-own-blog/1.png' style="">
  <img src="/images/hosting-our-own-blog/1.png" alt="Screenshots" style="">
</a>
<article class="post">
</p>

<p>I consider our blog, and the rest of the site, to be the canonical representation of the Artsy Engineering team
online. We've carefully grown an Artsy Engineering aesthetic around it.</p>

<p>In contrast, had we chosen to host on Medium, we'd get a few templates and a highlight color. For example, check
out: <a href="https://medium.com/airbnb-engineering">AirBnB</a>, <a href="https://medium.com/harrys-engineering">Harrys</a>,
<a href="https://medium.com/@Pinterest_Engineering">Pintrest</a>, <a href="https://medium.com/vimeo-engineering-blog">Vimeo</a> or
<a href="https://eng.lyft.com">Lyft</a>'s pages.</p>

<p>Not memorable at all, because you can't really work with the design constraints to do anything creative other than
a banner image and a color.</p>

<p>These constrains become worse on a post page, where you completely lose any sense of connection with the company,
and the team the moment someone scrolls an inch until the footer. Your team's writing becomes just "a medium post"
at that point. You've got limited options for attaching images, and no ability to use HTML/JS to showcase
<a href="/blog/2017/07/06/React-Native-for-iOS-devs/#React">problems</a> <a href="/blog/2018/03/18/ar/">interactively</a> or explore <a href="http://artsy.github.io/blog/2019/01/23/artsy-engineering-hiring/">new post styles</a>.</p>

<p>These aren't blockers in any way, most of our posts don't do that - but the constraints mean you will never think
to try and explain something outside of those constraints.</p>

<p>Then at the bottom of your post, readers are redirected to other posts from other teams. For example, when I opened
a post on Vimeo's announcement of <a href="https://medium.com/vimeo-engineering-blog/announcing-psalm-v3-76ec78e312ce">Psalm v3</a> (a cool looking PHP dev tool), there were three recommended
posts: one was about missiles being fired in Syria, another was a beginners guide to PHP and then a third was how
to set up Docker to work with a PHP framework. They're not that related, maybe they all have the keyword of PHP
behind the scenes?</p>

<p></article>
<a href='/images/hosting-our-own-blog/3.jpg' style="">
  <img src="/images/hosting-our-own-blog/3.jpg" alt="Artsy x React Native" style="">
</a>
<article class="post">
</p>

<p>Writing takes a lot of time, and provides so much value. It should be presented as <a href="https://github.com/artsy/README/blob/cb73cb/culture/what-is-artsy.md#quality-worthy-of-art">quality worthy of art</a>.
By using to a generic platform for your writing, you're trading that simplicity for building your team's online
presence.</p>

<a name="Breaking.the.Sandbox"></a>
<h2>Breaking the Sandbox</h2>

<p>We've grown to need to showcase quite a few different types of posts:</p>

<ul>
<li>Small posts that with only a few paragraphs</li>
<li>Long-form posts that take forever to read</li>
<li>Long-form interview style posts for many contributors</li>
<li>Sequential posts, in the form of a series</li>
<li>YouTube embed posts</li>
<li>Announcements</li>
<li>Guest Posts</li>
</ul>


<p>None of these need to be treated the same, and since we created the blog, we've added:</p>

<ul>
<li>Category pages - <a href="/blog/categories/graphql/">GraphQL</a></li>
<li>Author pages - <a href="/author/orta/">mine</a></li>
<li>Site series - <a href="/series/react-native-at-artsy/">React Native at Artsy</a></li>
<li><a href="https://github.com/artsy/artsy.github.io/tree/9f65b5/_layouts">4 separate post layouts</a></li>
<li>Multi-author posts - <a href="/blog/2018/10/19/pair-programming/">Pair Programming</a></li>
<li><a href="/blog/2017/07/15/Comments-are-on/">GitHub Issue Powered Comments</a></li>
<li>Real-time <a href="https://github.com/artsy/artsy.github.io/pull/332">search</a> on our static pages</li>
</ul>


<p>When we've wanted to add a new feature to the blog to fit a particular post, we added the feature. This gave us the
chance to not constrain ourselves in ideas. For example, we've explored <a href="https://github.com/artsy/artsy.github.io/issues/355#issuecomment-315605280">building a podcast</a> into our blog
treating it as a first class feature in ways that no-one would ever build if it was a platform. Or we're interested
in making a way to highlight useful links for the</p>

<p>All of those features were made by people whose background was iOS development, which gave us the chance to expand
the horizons of our engineers knowledge.</p>

<a name="Blog.as.Code"></a>
<h2>Blog as Code</h2>

<p>Because our <a href="https://github.com/artsy/artsy.github.io/tree/9f65b5/_posts">blog posts</a> are markdown in a <a href="https://github.com/artsy/artsy.github.io">GitHub repo</a>, we don't treat a review for a blog post any
different than a normal pull request for code. It means our <a href="https://github.com/artsy/README/blob/master/culture/peril.md">company Peril rules</a> will run, and all of
engineering has the ability to contribute to the review process.</p>

<p>Having a static site in a GitHub repo means we don't have to special case our writing in comparison to every-day
work.</p>

<a name="Call.to.Action"></a>
<h2>Call to Action</h2>

<p>Using Medium is a very reasonable call if you are just trying to get some writing out and online as fast as
possible. If you want to be scrappy and announce something - do it. If you want to do something more serious
though, you should really consider owning your engineering blog and identity. Giving that away to Medium in
exchange for hosting your content and getting more eyeballs isn't a great trade.</p>

<p>There aren't many shortcuts for getting folks to visit your blog, and relying on Mediums' recommendations or SEO
isn't a good path compared to say Twitter adverts or just writing interesting stuff and letting folks know via a
mailing list.</p>

<p>If self-hosting is an issue, Medium is not the only payer in eco-system, <a href="https://wordpress.com">Wordpress</a>'s company
<a href="https://automattic.com">Automattic</a> has been profitable for years and hosts all sorts of really big blogs. It's not going anywhere,
and you have the ability to customize it to your style and use a whole massive marketplace of plugins (free and
paid for) - it's a really great choice.</p>

<p>However, it's really worth noting how low the barrier to entry it is now to create a blog using a static site
generator:</p>

<ul>
<li><a href="https://jekyllrb.com">Jekyll</a> - Ruby, the default for GitHub pages and lowest barrier to entry.</li>
</ul>


<pre><code class="sh">gem install jekyll bundler
jekyll new myblog
cd myblog
bundle exec jekyll serve
</code></pre>

<ul>
<li><a href="https://www.gatsbyjs.org">Gatsby</a> - JS, the project we regularly consider moving our blog to. JS folks have such a great focus on
developer experience, and the abstraction of having an in-direction layer for your content via an internal
GraphQL API for your static site is a very, very smart abstraction which will take them a long way.</li>
</ul>


<pre><code class="sh">npx gatsby new myblog https://github.com/gatsbyjs/gatsby-starter-blog
cd myblog
yarn dev
</code></pre>

<ul>
<li><a href="https://gohugo.io">Hugo</a> - Go, looks pretty reasonable if you have strong opinions against the others somehow</li>
</ul>


<pre><code class="sh">brew install hugo
hugo new site myblog
cd myblog

git init
git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke
echo 'theme = "ananke"' &gt;&gt; config.toml

hugo new posts/my-first-post.md
hugo server -D
</code></pre>

<p>All of these come with some sort of theme or templating support so getting started could probably take about an
hour to get a static site up and running using a host like <a href="https://pages.github.com">GitHub Pages</a>, <a href="https://www.netlify.com">Netlify</a> or <a href="https://zeit.co/now">Now</a>.
All three of these you can set up automatic hosting from GitHub in about 10-15m.</p>

<!-- prettier-ignore-start -->


<!-- prettier-ignore-end -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Debug Jest Tests]]></title>
    <link href="http://artsy.github.io/blog/2018/08/24/How-to-debug-jest-tests/"/>
    <updated>2018-08-24T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2018/08/24/How-to-debug-jest-tests</id>
    <content type="html"><![CDATA[<p>Hey there! My name is Anson and I work on the Platform team at Artsy. Recently, we faced an issue where a certain <a href="https://github.com/airbnb/enzyme">Enzyme</a> test we wrote using mock tracking was failing, but we couldn't figure out why. Luckily, with some help from <a href="/author/orta">Orta</a> and some clever thinking, we figured out what was going on.</p>

<!-- more -->


<p>We thought it was an issue with the mock testing library we had written. We tried to fix the problem by sprinkling <code>console.log</code> calls throughout the test, but it was still hard to figure out what was going on, especially without knowing how to peek into the properties of certain objects.</p>

<p>Instead, <a href="/author/orta">Orta</a> suggested we used the Chrome Node DevTools. Since the Enzyme test is run via <code>yarn jest</code>, yarn is acting as a frontend for running the Enzyme test with Node. This means that we can use the Chrome Node DevTools as a debugger to run the Enzyme test. This was super useful since the one thing we needed was to be able to peek inside certain objects to see what they looked like and how they were failing. It was a much faster, more methodical way to approach debugging this test. Here are the steps we took:</p>

<ul>
<li>First, insert a new line in your test where you think it might be failing and type <code>debugger</code>. This will serve as a break point for the debugger to stop at.</li>
<li>Open up Chrome and type in the address bar : <code>chrome://inspect</code></li>
<li>Click on "Open dedicated DevTools for Node"</li>
<li>In your terminal, instead of typing <code>yarn jest &lt;path_to_test&gt;</code>, type this:</li>
</ul>


<pre><code class="bash">node --inspect node_modules/.bin/jest --runInBand &lt;path_to_test&gt;
</code></pre>

<p>Or you can add it to your <code>package.json</code> as a script:</p>

<pre><code class="diff">  {
    "scripts" : {
+    "test:debug": "node --inspect node_modules/.bin/jest --runInBand",
    }
  }
</code></pre>

<p>Which you can then run as <code>yarn test:debug &lt;path_to_test&gt;</code>.</p>

<p>Voila! Your test should now be running in the Chrome debugger. And you get your handy console to poke around all sorts of stuff!</p>

<p>You also have the option of using this with Jest's <code>--watch</code> mode in order easily re-run tests, after changes to app or test code.</p>

<pre><code class="bash">node --inspect node_modules/.bin/jest --watch --runInBand &lt;path_to_test&gt;
</code></pre>

<p>Now simply hit Enter in the terminal running your Jest process anytime you want to re-run your currently selected specs. You'll be dropped right back into the Chrome debugger.</p>

<p>You might be wondering how this fixed our tests. Well, turns out that we missed a <code>jest.unmock()</code> call at the top of the test file. <em>Facepalm.</em> To prevent this from biting other developers in the future, <a href="/author/orta">Orta</a> whipped up a <a href="https://github.com/artsy/reaction/pull/1174">pull request</a> to add a rule in our TypeScript linter, check it out!</p>

<p>Either way, in the future, this will probably be my first step in debugging non-obvious issues in tests, if only to eliminate possible sources of the issues. I'm glad I was able to learn with <a href="/author/orta">Orta</a> about a methodical way to debug test failures. Hope this helps, and happy hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Context Switching]]></title>
    <link href="http://artsy.github.io/blog/2018/08/10/On-Context-Switching/"/>
    <updated>2018-08-10T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2018/08/10/On-Context-Switching</id>
    <content type="html"><![CDATA[<p>Programming generally requires getting into a good <a href="https://en.wikipedia.org/wiki/Flow_(psychology)">flow state</a> and working on a tricky problem for some time.
In the last 2 years, most of my work at Artsy (and in the OSS world) has been less about longer-term building of
hard things, but working on many smaller tasks across a lot of different areas.</p>

<p>Somehow, during this period I managed to end up in the top of "most active" <a href="https://gist.github.com/paulmillr/2657075">GitHub members</a>, I feel like a
lot of this is due to doing <a href="http://artsy.github.io/series/open-source-by-default/">Open Source by Default</a> at Artsy and second to being good at context switching. I
want to try and talk though some of my techniques for handling context switching, as well as a bit of philosophy
around adopting and owning your tools.</p>

<!-- more -->


<a name="Shallow.and.Wide.Work"></a>
<h2>Shallow and Wide Work</h2>

<p>I want to encourage as many people as possible to work on fun, deep-flow projects at Artsy. One of the most
successful ways of achieving this, that I've found, is to spend most of my time working on shallower tasks. An
example from my last few weeks is hiring. The communication aspects require dozens of emails and internal updates
that can't be scheduled into safe blocks. <em>(<a href="https://www.artsy.net/jobs#engineering">Totally related BTW, we're hiring</a>.)</em></p>

<p>For programming work I have a few techniques for trying to accomplish a lot of shallow tasks across many repos.</p>

<p>Start off by making yourself accountable to someone. For my OSS, this tends to either be <a href="https://github.com/orta/cocoapods-fix-react-native#contributing-back">setting expectations</a>
in README or using <a href="https://github.com/danger/danger-js/blob/master/VISION.md#danger-for-js">a VISION</a> file. For Artsy work we have product managers and engineers who own the
projects I'm contributing to. For this blog post, it's my <a href="http://artsy.github.io/author/chris/">buddy Chris</a>.</p>

<p>I would then strive to get <em>anything</em> out, this could be a work-in-progress PR or via declaratively via
<a href="https://tom.preston-werner.com/2010/08/23/readme-driven-development.html">README-driven-development</a>. Part of this is because you might end up being dragged off into something else,
and another is that you're less likely to grok the domain better than your reviewers. Whilst not every change is an
improvement, every improvement adds up - even in small increments.</p>

<p>One way to instantly get rich domain knowledge is by pairing with someone who is more involved. This is a perfect
way to understand how decisions were made and provides great insight into how someone works on a project. While
pairing, you might also find additional ways to improve the daily workflow for someone else too!</p>

<p>Trying to have a shallow and wide understanding of many systems means accepting that you can't know the finer
details about how everything works. You want to know when really big interesting things are happening, but most work
should be iterative and less relevant to external folk like you.</p>

<p>With this in mind you can change your perspective to aim for having overviews on many things, but not get bogged
down in the useful discussion.</p>

<p>Techniques for this are:</p>

<ul>
<li><p>Making a custom stream of updates and not being too concerned about reading every single one of them. For Artsy,
with many contributors and contexts - I create slack channels like: <code>#front-end-ios-notifs</code>,
<code>#front-end-web-notifs</code>, <code>#orta-misc-notifs</code> and business specific ones like <code>#consignments-notifs</code> that contain
PR or Issue information creation from GitHub but nothing with more details. I do the same but smaller for Danger
and CocoaPods.</p></li>
<li><p>I set <a href="https://get.slack.help/hc/en-us/articles/201398467-Set-up-keyword-notifications">Slack keywords</a> to key GitHub repo names, or internal facing app names that I care about. This
means I don't have to monitor every channel.</p></li>
<li><p>I don't read my email. All 13,489 of them right now. I read the subjects and decide if it's worth reading. Every
few months I declare inbox zero so others are less distracted by the number.</p></li>
</ul>


<p>The tricky thing with this sort of work is trying not to be a blocker for someone else. A lot of this is about being
cautious about what you strive to help with, and about finding ways to boost others asynchronously. Am I good at
this? Sometimes. It's easier in OSS thanks to the the limited liability clauses, but in work-work that can be hard.</p>

<p>When my contributions are larger and I know the domain well, for example in a front-end JavaScript project, I am
willing to take longer than I'd like to ensure that it is reference level quality. A recent example came up in a
retrospective last month when an engineering team at Artsy said that one of <a href="https://github.com/artsy/emission/tree/master/src/lib/Components/Consignments">my projects</a> was a key
reference for testing and React Native form handling for them. Pulling off this can definitely take longer than
expected, but if you're not going to be the one maintaining it then holding yourself to a higher standard is worth
it.</p>

<a name="Deep.Automation"></a>
<h2>Deep Automation</h2>

<p>Remove as much ambiguity as possible for discussion. Project tools like <a href="https://prettier.io">prettier</a> really help focus code review
away from the petty formatting issues. Linters like <a href="https://github.com/palantir/tslint">tslint</a>, <a href="https://eslint.org">eslint</a> and <a href="https://www.github.com/bbatsov/rubocop">rubocop</a> remove another series of
discussion points. When you find yourself surprised by a cultural rule for a codebase, add <a href="https://danger.systems">a danger</a> rule
so you and others have it codified. Use tools like <a href="https://github.com/typicode/husky">husky</a> and <a href="https://github.com/okonet/lint-staged">lint-staged</a> to get that feedback when you're
still in a development context. Danger can even run as a <a href="http://danger.systems/js/tutorials/fast-feedback.html">git-hook/husky task</a> too, so that feedback
can be <em>blazing</em> too.</p>

<p>You can automate via tools, sure, but you can also encourage independent work via documentation.(TO DO: saves your
time, but isn't "automation") If something is confusing enough that, as an outsider, you don't get it without
asking, you should start adding documentation. I can't tell you what that looks like because it's different
per-project, but at least try to make it so the next person doesn't need to ask.</p>

<p>I strive to use my time on a project to encourage more consolidation, in the case of front-end that's moving closer
to <a href="https://www.youtube.com/watch?v=1Z3loALSVQM">the Artsy omakase</a>. In the case of servers that could be encouraging new APIs to use GraphQL, or to adopt
some of our newer ideas about schema management.</p>

<a name="Impact.per.Keystroke"></a>
<h2>Impact per Keystroke</h2>

<p>I'm a firm believer in customising your environment. Does that suck for pair programming? Yes. Can we deal with it?
Yes. I'm gong to assume you're on a Mac. An out of the box Mac comes with some solid developer tools, and Apple are
good at <a href="http://artsy.github.io/blog/2017/02/05/Retrospective-Swift-at-Artsy/#Developer.Experience">taking</a> some of the communities good ideas and giving it to everyone.</p>

<p>However, there's definitely space for independent apps. Here's a list of apps broken into genres. You should be
running at least one from each genre, and have it's features deeply committed to memory. The ones in bold are what I
use.</p>

<ul>
<li>Window Management: <a href="https://manytricks.com/moom/"><strong>Moom</strong></a>, <a href="http://magnet.crowdcafe.com">Magnet</a>,
<a href="https://www.spectacleapp.com">Spectacles</a>, <a href="http://mizage.com/divvy/">Divvy</a></li>
<li>Effective Keyboard Shortcuts: <a href="https://shortcatapp.com"><strong>Shortcat</strong></a>, <a href="https://keytty.com">Keytty</a>,
<a href="https://vimium.github.io">Vimium</a>/<a href="https://github.com/guyht/vimari"><strong>Vimari</strong></a></li>
<li>Clipboard Manager: <a href="https://www.alfredapp.com"><strong>Alfred</strong></a>, <a href="https://tapbots.com/pastebot/">Pastebot</a>,
<a href="http://www.keyboardmaestro.com/main/">Keyboard Meastro</a></li>
<li>Recently changed files: <a href="http://www.ironicsoftware.com/fresh/"><strong>Fresh</strong></a>,
<a href="http://www.ironicsoftware.com/fresh/"><strong>Alfred</strong></a></li>
<li>Text Snippets: <a href="https://www.alfredapp.com"><strong>Alfred</strong></a>, <a href="https://textexpander.com/">TextExpander</a>, macOS System
Settings</li>
<li>Terminal: <a href="https://iterm2.com"><strong>iTerm 2</strong></a>, <a href="https://hyper.is">Hyper</a></li>
<li>Learning Keyboard Shortcuts: <a href="https://www.mediaatelier.com/CheatSheet/"><strong>CheatSheet</strong></a></li>
<li>Shell: <a href="https://github.com/robbyrussell/oh-my-zsh">Oh my ZSH</a>, <strong><a href="http://fishshell.com">Fish</a> +
<a href="https://fisherman.github.io">Fisherman</a></strong></li>
<li><em>Simple</em> Note Taking: <a href="http://brettterpstra.com/projects/nvalt/"><strong>nvalt</strong></a>,
<a href="https://culturedcode.com/things/"><strong>Things</strong></a>, Notes.app, <a href="https://evernote.com">Evernote</a></li>
</ul>


<p>Use native apps by default, they are better for your time. Native apps will usually conform to the <a href="https://developer.apple.com/design/human-interface-guidelines/macos/overview/themes/">Human Interface
Guidelines</a>, which means logical shortcuts and great accessibility support. This is good because tools like
<a href="https://shortcatapp.com">Shortcat</a> rely on that.</p>

<p>Electron-y apps made the most sense when there is a big
<a href="https://unix.stackexchange.com/questions/137820/whats-the-difference-of-the-userland-vs-the-kernel">user-land</a>
customization scene. So, basically if there's a community around extending the app (<a href="https://hyper.is">Hyper</a> is a
reasonable example, <a href="https://code.visualstudio.com">Visual Studio Code</a> and <a href="https://atom.io">Atom</a> are the best
example) then Electron apps make sense.</p>

<p>Some highlights for non-native apps are <a href="https://mailplaneapp.com">Mailplane</a> and
<a href="https://code.visualstudio.com">Visual Studio Code</a>.</p>

<p>Every second you're at a computer you should be feeling like it's 1-2-3 hotkeys away from whatever you want to do
next. For example:</p>

<ul>
<li>Your terminal should be a <a href="https://www.youtube.com/watch?v=ETskRNFeuGM">single keypress away</a></li>
<li><a href="https://github.com/orta/keyboard_shortcuts#using-a-mac">Learn the keys for OS X</a> so you can jump/delete words</li>
<li><a href="https://www.youtube.com/watch?v=4CRbJwOctMo">Resize/move windows with modal commands</a></li>
<li><a href="https://www.neat.io/bee/">Making a new Jira ticket with a hotkey</a></li>
<li><a href="/images/context-switching/sketch.mov">Open any recent file per-app</a></li>
<li><a href="https://krausefx.com/blog/use-custom-shortcuts-for-every-application">Use a shortcut for every Mac app you use regularly</a></li>
</ul>


<p>App-wise there's always more all of us can do, but constant improvement is key to getting there.</p>

<p>I think it's worth stressing here that I believe in paying for my tools. I want to support independent devs, and my
time is worth orders of magnitude more than the cost of entry for this software. There may be similar versions of
what I noted above for free, they could be open source too - but I'd rather have more people working on our tools
full-time than people doing it in their spare-time.</p>

<a name="Terminal.Context.Switching"></a>
<h2>Terminal Context Switching</h2>

<p>macOS's UNIX underpinnings mean that a lot of common GUI activities have a CLI counter-part. To handle regular
context switching in the terminal you'll need to customise the shell to give you information as you arrive in a new
context. Things that I find useful in a shell are:</p>

<ul>
<li>What folder am I in?</li>
<li>Is it a git repo?</li>
<li>What branch am I on, or are there existing changes?</li>
<li>Did the last command fail?</li>
<li>Sometimes, what version of node/ruby is setup for this project?</li>
</ul>


<p>I think it's also really useful to be able to jump between many development folders, you can use
<a href="https://github.com/rupa/z"><strong>z</strong></a>, <a href="https://github.com/wting/autojump">j</a> or
<a href="https://github.com/iridakos/goto">goto</a> for this. Or set up some custom
<a href="https://shapeshed.com/unix-alias/">aliases</a> for the most common folders.</p>

<p>As you'll be spending a good chunk of time, it's worth feeling comfortable that you know a few of the flags for
<code>cd</code>, <code>ls</code>, <code>mkdir</code>, <code>rm</code>, <code>cat</code>, <code>touch</code> and <code>grep</code>. Ideally, you have tab completion set up, and
<a href="https://stackoverflow.com/questions/6205157/iterm-2-how-to-set-keyboard-shortcuts-to-jump-to-beginning-end-of-line#10485061">natural keybindings</a>
set up in your terminal input.</p>

<a name="Regular.Re-tooling"></a>
<h2>Regular Re-tooling</h2>

<p>Take the time every few years to re-think your previous decisions, I try to start from scratch every 2-3 years, I'm
writing this on a MacBook that's a week old and I've still not installed something from all of the above categories.
It's a good time to re-evaluate your software priorities as your personal/professional aims/responsibilities change.</p>

<p>A pattern I aim to strive for with tools is:</p>

<ul>
<li>Start with overkill to learn what you need.</li>
<li>Migrate to smaller and simpler once you know what you want.</li>
</ul>


<a name="Small.and.Often"></a>
<h2>Small and Often</h2>

<p>It's not a very traditional way to work as a programmer, but it fits my personality type and can really rack up the
commits and contributions across the board. Being able to quickly jump contexts makes a lot more sense in the node
ecosystem - where the boundaries between projects can be as small as per-function.</p>

<p>Working this way can make it really hard to monitor what you've done on a regular basis, a technique I've used to
stay on top of is <a href="https://github.com/kamranahmedse/git-standup">git-standup</a> and a dev folder structure that corresponds to <a href="https://twitter.com/orta/status/1028764128310185984">areas of work</a>. For
example, here's what a week roughly looks like on a slow week for Danger/Peril for me:</p>

<pre><code class="sh">~/dev/projects/danger
❯ git standup -m 7 -d 7
/Users/orta/dev/projects/danger/hazmat/peril
c1d6893 - Update danger (2 days ago) &lt;Orta Therox&gt;
/Users/orta/dev/projects/danger/danger-js
a90d74c - Version bump, and peril fix (2 days ago) &lt;Orta Therox&gt;
f4836a1 - Version bump (2 days ago) &lt;Orta Therox&gt;
fbbcc1c - Adds a create/update label function to the github utils func (2 days ago) &lt;Orta Therox&gt;
702e51d - More dep updates (4 days ago) &lt;Orta Therox&gt;
</code></pre>

<p>Working this way requires trust from others that you're doing things that are valuable, which can be tricky when
your responses to "what did you get up to yesterday" end up being a bit ephemeral. Tools like <code>git-standup</code> help on
the code front, and <a href="https://www.rescuetime.com">RescueTime</a> can help you understand how much time you've spent in greenhouse.</p>

<p>It's your time, you should use it fastly.</p>

<p>Do you have any useful ideas for speeding up context switching? I'm open to improvements.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On our implementation of React Native]]></title>
    <link href="http://artsy.github.io/blog/2016/08/24/On-Emission/"/>
    <updated>2016-08-24T12:17:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/08/24/On-Emission</id>
    <content type="html"><![CDATA[<center>
 <img src="/images/emission/emission-logo-artsy.svg" style="height:300px;margin-bottom: 60px;">
</center>


<p>I arrived fashionably late to the <a href="/blog/2016/08/15/React-Native-at-Artsy/">React Native party</a> in Artsy. I had been a part of our <a href="/blog/2016/08/09/the-tech-behind-live-auction-integration/">Auctions Team</a>, where we worked in Swift with <a href="https://cocoapods.org/pods/Interstellar">some light-FRP</a>. We were not affected by the 4 months of simultaneous work on moving to React Native, at all.</p>

<p>It was a quiet revolution. I did not have to install <code>npm</code>, I made zero changes to the code for auctions and the whole app's infrastructure barely changed. Yet we moved to making all new code inside our 3 year old iOS app use React Native. What gives?</p>

<p>Well, first up we weren't planning a re-write, we don't have that kind of luxury and the scope of our app is too big compared to the team working on it. Second, we reused existing dependency infrastructure to support JavaScript based apps. Read on to find out what that looks like.</p>

<!-- more -->


<a name="Why.we.were.in.a.good.position.to.do.this"></a>
<h3>Why we were in a good position to do this</h3>

<p>Let's talk a little about the Artsy flagship app, <a href="https://github.com/artsy/eigen/">Eigen</a>. It's an app that aimed to comprehensively cover the art world. From <a href="https://www.artsy.net/shows">Shows</a> to <a href="https://www.artsy.net/galleries">Galleries</a>, <a href="https://www.artsy.net/art-fairs">Fairs</a> to <a href="https://www.artsy.net/auctions">Auctions</a>, <a href="https://www.artsy.net/institutions">Museums</a> to <a href="https://www.artsy.net/articles">Magazines</a>.</p>

<p>It all looks a bit like this:</p>

<p></article>
<a href='/images/emission/eigen-overview.jpg' style="">
  <img src="/images/emission/eigen-overview.jpg" alt="Overview of Emission" style="width:100%;">
</a>
<article class="post">
</p>

<p>Our app neatly splits into two areas of view controllers, ones that act as a browser chrome, and individual view controllers that normally map 1:1 to <a href="https://github.com/artsy/eigen/blob/master/Artsy/App/ARSwitchBoard.m#L122">routes</a> on the Artsy website.</p>

<p>For example, the route <code>artsy.net/artwork/glenn-brown-suffer-well</code> maps to the native <code>ARArtworkViewController</code>.</p>

<p></article>
<a href='/images/emission/eigen.svg' style="">
  <img src="/images/emission/eigen.svg" alt="Overview of Eigen" style="">
</a>
<article class="post">
</p>

<p>Just as a browser knows very little about the individual content of the pages that it's rendering, the eigen chrome exists <em>relatively</em> independent of the view controllers that are showing.</p>

<p>Each view controller also knows very little about each-other, so actions that trigger a new view controller are generally done by creating a string route and passing it through the routing system. I've wrote about this pattern in <a href="https://artsy.github.io/blog/2015/08/15/Cocoa-Architecture-Router-Pattern/">Cocoa Architecture: Router Pattern</a>.</p>

<p>Interestingly, if the router cannot route a view controller, it will pass through to a web view. This is why we consider the app a <a href="http://artsy.github.io/blog/2015/08/24/Cocoa-Architecture-Hybrid-Apps/">hybrid app</a>. This pattern means adding new view controllers is extremely easy.</p>

<a name="Introducing.Emission"></a>
<h3>Introducing Emission</h3>

<p>Emission is what we use to contain all of our React Native components. Our flagship app Eigen, can depend on and use without needing to bother with the implementation details of React Native. At it's core, Emission is:</p>

<ul>
<li>A node module.</li>
<li>A CocoaPod.</li>
<li>An iOS App.</li>
</ul>


<a name="The.Node.Module"></a>
<h4>The Node Module</h4>

<p>Emission itself, is a node module. In our case, it is a JavaScript library that exposes 3 JavaScript objects.</p>

<pre><code class="javascript">/* @flow */
'use strict';

import Containers from './lib/containers';
import Components from './lib/components';
import Routes from './lib/relay/routes';

import './lib/relay/config';
import './lib/app_registry';

export default {
  Containers,
  Components,
  Routes,
};
</code></pre>

<p>Another node project can have Emission as a dependency - then can access our <code>Container</code>s, <code>Component</code>s and <code>Route</code>s. A container is a <a href="https://facebook.github.io/relay/docs/api-reference-relay-container.html">Relay container</a>, a component is a <a href="https://facebook.github.io/react/docs/component-api.html">React Component</a> and a Route is a <a href="https://facebook.github.io/relay/docs/guides-routes.html#content">Relay Route</a>.</p>

<p>The thing that's interesting from the integration side, is that each <code>Container</code> is effectively a View Controller that Emission provides to a host application. React Native ignores  the concept of view controllers from the Cocoa world, so we have an <a href="https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Pod/Classes/ViewControllers/ARComponentViewController.m">ARComponentViewController</a> which is subclassed for each exposed <code>Component</code> class.</p>

<a name="The.iOS.App"></a>
<h4>The iOS App</h4>

<p>The iOS app acts as a host target for the CocoaPod, and provides an instance of an <a href="https://github.com/artsy/emission/blob/master/Pod/Classes/Core/AREmission.m">AREmission</a> object to the view controllers using React Native. The app is nothing special, it is the default app that is created using <code>pod lib create</code>. We then <a href="https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Example/Podfile">use CocoaPods</a> to bring in React from inside the <code>node_modules/</code> folder the Emission node module creates.</p>

<p>The <code>AREmission</code> instance is the intermediary between the host-app (<a href="https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Example/Emission/AppDelegate.m#L56">The Emission Example app</a>, or <a href="https://github.com/artsy/eigen/blob/41b00f6fe497de9e902315104089370dea417017/Artsy/App/ARAppDelegate%2BEmission.m">Eigen</a>.) It has an API for handling routing, and passing authentication credentials into the React Native world.</p>

<p>We use the example app to do development inside React Native. As of right now, it is simply a tableview that provides a list of view controllers <a href="https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Example/Emission/AppDelegate.m#L159-L169">that represent an exposed Container</a>. Once you are in the right view controller, you can rely on <a href="http://facebook.github.io/react-native/releases/0.31/docs/debugging.html#automatic-reloading">Hot Reloading</a> to simplify your work.</p>

<a name="The.Pod"></a>
<h4>The Pod</h4>

<p>An important part of working with React Native, is that you can choose to use native code when appropriate. The <a href="https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Emission.podspec">Pod for</a> Emission, created entirely in Objective-C, provides:</p>

<ul>
<li>Communication between React Native and the host app objects via <a href="https://facebook.github.io/react-native/docs/native-modules-ios.html">native modules</a>.</li>
<li><code>UIViewController</code> subclasses for Host apps to consume.</li>
<li>Bridges for existing native views (like our <a href="https://github.com/artsy/extraction/blob/d6a32186f7098eb2ec5d05e2fb5302a8378eff70/Extraction/Classes/ARSwitchView.m">SwitchView</a>) into React Native.</li>
</ul>


<p>The choice of Objective-C is for simplicity, and language stability. Swift is technically an option, but it's not  worth the complications for <a href="https://github.com/artsy/emission/tree/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Pod/Classes">a few simple objects</a>.</p>

<p>In order to share native views with our host app, Eigen, we created a library to just hold the shared UI components, <a href="https://github.com/artsy/extraction">Extraction</a>. These are <a href="https://github.com/artsy/extraction/tree/d6a32186f7098eb2ec5d05e2fb5302a8378eff70/Extraction/Classes">factored out of Eigen</a>, and into a pod. Emission and Eigen have this as a dependency.</p>

<a name="Pod.Deployment"></a>
<h4>Pod Deployment</h4>

<p>What makes this work well, from the perspective of Eigen is that the React Native comes in atomically. The Podspec <a href="https://github.com/artsy/emission/blob/master/Emission.podspec#L17-L18">references</a> the few native classes, and a single JavaScript file.</p>

<p>This JavaScript file is the bundled version of all our React Native code. It's <a href="https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/package.json#L7">updated  by running</a> <code>npm run bundle</code>. This generates both the minified JS, and a source map so that we can transcribe the error reports into the code we write.</p>

<p>Using the CocoaPod, Emission can provide native view controllers that use React Native under the hood. The host app does not need to know the underlying details like <code>npm</code>.</p>

<a name="On.Emission"></a>
<h3>On Emission</h3>

<p>Whether this is a pattern other apps can follow is hard to say, we were in a great position to do this. Our app has view controllers that have very little communication with each other and the host app does not need to bridge large amounts of information.</p>

<p>As ever, our work is open source, and we ensure that anyone can download and run Emission, so if you'd like to understand more, clone <a href="https://github.com/artsy/emission#reactions--emissions">artsy/emission</a> and study the implementation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using VS Code for JavaScript]]></title>
    <link href="http://artsy.github.io/blog/2016/08/15/vscode/"/>
    <updated>2016-08-15T22:17:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/08/15/vscode</id>
    <content type="html"><![CDATA[<center>
 <img src="/images/vscode/vscode_logo_artsy.svg" style="width:300px;">
</center>


<p>I'm an old school TextMate user, who has also been using Xcode for the last decade. These two sit at a very opposite ends of an "editor" spectrum.</p>

<p>TextMate is extremely bare bones at the core, but introduced the idea of bundles as plugins. Making it really easy for others to build their own plugins for their own contexts. Xcode on the other-hand includes a 3D scene editor, the best interface builder I've seen, super rich debugging tools and close to zero support for improving it yourself.</p>

<p>As we agreed on moving to React Native, we needed to decide what the team should use for <a href="https://github.com/artsy/emission/blob/master/docs/vscode.md">working in that environment</a>. After experimentation with many editors, we decided on Microsoft's <a href="https://code.visualstudio.com/">Visual Studio Code</a>.</p>

<p>We wanted to keep a lot of the best features from Xcode, while working in a completely JavaScript environment. For example: debuggers, inline errors, auto-complete, symbol mapping and to ideally have them all inside a single editor.</p>

<p>Let's dig into the principals of how Visual Studio Code works, what makes it a better option for us, and what parts of it really shine.</p>

<!-- more -->


<hr />

<a name="What.is.Visual.Studio.Code."></a>
<h3>What is Visual Studio Code?</h3>

<p>Visual Studio Code (VS Code) is <em>yet another</em>, JavaScript-based text editor. It's built atop of GitHub's <a href="http://electron.atom.io">Electron</a>. Electron is a framework for writing native apps as easy as building websites. It started as a web component for some Microsoft web-service, and eventually evolved into a fully-fledged text editor.</p>

<a name="IDE.-.Editor.hybrid"></a>
<h4>IDE - Editor hybrid</h4>

<p>Visual Studio Code (VS Code) believes that the sweet-spot between and IDE and a plain Text Editor, is somewhere a little bit closer to the IDE side.</p>

<p></article>
<a href='/images/vscode/editors.png' style="">
  <img src="/images/vscode/editors.png" alt="Editors" style="width:100%;">
</a>
<article class="post">
</p>

<p>This means instead of the Text-Editor style folder based approach, VS Code expects to set up a project structure per-project to start supporting from of the more useful IDE-like features.</p>

<p>It supports TextMate style plugins (called Extensions) through a controlled, but expanding <a href="https://code.visualstudio.com/docs/extensions/overview">extension API</a>. The extension API work takes an <a href="https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingXPCServices.html">Apple-like</a> approach to ensuring stability by having all extensions run outside of the host process. <a href="https://code.visualstudio.com/docs/extensions/our-approach">This approach</a> ensures any extension crash does not take down the editor.</p>

<p>It's also smart about deciding when to load an extension, for example, my <a href="https://marketplace.visualstudio.com/items?itemName=Orta.vscode-danger">Danger</a> extension will <a href="https://github.com/orta/vscode-danger/blob/a21ccc101b2b1c1be595b10565bca9c88242fb6f/package.json#L18-L20">only load</a> if there is a <code>Dangerfile</code> in the root of the workspace.</p>

<p>These two approaches to extensions are specifically aimed at <a href="https://discuss.atom.io/t/why-is-atom-so-slow/11376">addressing issues</a> seen inside Atom, where any user actions can be / are blocked by extensions, and extensions have full-reign to make any change they want. Even on my Mac Pro, there is a noticable lag. I initially assumed this was the "JavaScript tax" for all Electron apps, but VS Code is fast.</p>

<a name="Making.Intellisense"></a>
<h3>Making Intellisense</h3>

<p>By default a JavaScript project does not have a way to provide auto-completion, or in VS Code's terminology: Intellisense. Trying to make auto-complete based on a <a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL</a> can only get you so far, because it has to be wary against functions with side-effects. Other alternatives are to build an <a href="http://jointjs.com/demos/javascript-ast">AST</a> from the code, and then introspect that.</p>

<p>In Xcode the auto-complete tools are powered by the type systems of Objective-C and Swift. This means that you can know the structure of an object, without having to dig inside it, potentially breaking it in the process. Vanilla JavaScript does not have a type system. There are a few root classes though: String, Object, Number etc.</p>

<p>To work around this problem, VS Code uses <a href="http://www.typescriptlang.org">TypeScript</a> behind the scenes. TypeScript is a language that compiles down to JavaScript which provides a typing structure on top of JavaScript. This is a similar approach to how <a href="https://flowtype.org">Flow works</a> too, which is the language <a href="https://github.com/artsy/emission/pull/220">we write React Native</a> in.</p>

<p>This can work out really well for your own classes if you are declaring your types, but the npm ecosystem is <em>full</em> of untyped JavaScript, and a lot of your work is about sitting atop those abstractions. The fix for this is offered via <a href="http://definitelytyped.org">DefinitelyTyped</a> which provides type definitions for popular npm modules. For example here is <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/redux/redux.d.ts">one for Redux</a> - these act like <a href="https://github.com/artsy/eigen/blob/master/Artsy/App/ARSwitchBoard.h">header files in Objective-C</a> - offering inline documentation, and the shape of the object.</p>

<p>I use an extension to keep these up to date and to have them installed in every project I work in: <a href="https://marketplace.visualstudio.com/items?itemName=jvitor83.types-autoinstaller">Types auto installer</a>. Here's an example of auto-complete for <a href="http://redux.js.org/docs/api/Store.html">a Redux store</a>.</p>

<p></article>
<a href='/images/vscode/redux.png' style="">
  <img src="/images/vscode/redux.png" alt="Redux" style="width:100%;">
</a>
<article class="post">
</p>

<p>It'll also provide information about the parameters, which is a life-saver for me. Having grown up with <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html">named</a> <a href="https://robots.thoughtbot.com/ruby-2-keyword-arguments">parameters</a>.</p>

<p></article>
<a href='/images/vscode/redux-params.png' style="">
  <img src="/images/vscode/redux-params.png" alt="Redux Params" style="width:100%;">
</a>
<article class="post">
</p>

<a name="Runtime"></a>
<h3>Runtime</h3>

<p>Using console logs to debug isn't an acceptable answer when debugging for me anymore. <a href="http://blog.cleancoder.com/uncle-bob/2016/07/27/TheChurn.html">That's churn</a> that I'm not willing to lose time to. Luckily for me, VS Code supports debugging across many languages.</p>

<p>It does this by having a generic VS Code <a href="https://code.visualstudio.com/docs/extensions/example-debuggers">Debug Protocol</a> which lets extensions use their own processes to run the debugger. So the ruby debugger runs on the <a href="https://github.com/rubyide/vscode-ruby#debugger"><code>ruby-debug-ide</code></a> gem, and for node-based projects it uses the debugger built into node.</p>

<p>So, here is a common case. I want to start up my web-server, so I need to run <code>npm dev</code>. I can run this from VS Code:</p>

<p></article>
<a href='/images/vscode/start.png' style="">
  <img src="/images/vscode/start.png" alt="Editors" style="width:100%;">
</a>
<article class="post">
</p>

<p>Once that's running - I can attach a debugger. This is listing all of the available node processes on my computer:</p>

<p></article>
<a href='/images/vscode/attatch.png' style="">
  <img src="/images/vscode/attatch.png" alt="Editors" style="width:100%;">
</a>
<article class="post">
</p>

<p>Then I can add a breakpoint, and when it is triggered, I have a full stack trace and REPL. The REPL is very barebones, for example - there's no auto-complete. However, it's good for quick exploration. I keep <a href="https://www.objc.io/issues/19-debugging/lldb-debugging/#printing-objects">accidentally prefixing</a> my REPL code with <code>po</code>.</p>

<p></article>
<a href='/images/vscode/debug.png' style="">
  <img src="/images/vscode/debug.png" alt="Editors" style="width:100%;">
</a>
<article class="post">
</p>

<p>The breakpoint works through a <a href="http://blog.teamtreehouse.com/introduction-source-maps">source map</a>, and so the line you expect is the one that you're working in. That stuff is all pretty magic to me. Good on Microsoft, and the node community for pulling that off.</p>

<a name="Wrapup"></a>
<h3>Wrapup</h3>

<p>I still feel a little bit uncomfortable in JavaScript projects, as a long-time native developer. However feel like VS Code is a nice mix of the freeform "just do something" style of Text Editors, which work across a lot of systems and the tight-knit IDEs that are bound to a specific domain. It can be a bridge between worlds.</p>

<p>VS Code has become my main editor in Ruby and JavaScript, due to having great support for the projects and being an OSS project which I feel like I can contribute to. No more being <a href="https://github.com/alcatraz/Alcatraz/issues/475">locked out</a> of improving my editor. Awesome!</p>
]]></content>
  </entry>
  
</feed>
