<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: open source | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/open-source/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2015-11-13T17:23:14+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using OCR To Fix a Hilarious Big]]></title>
    <link href="http://artsy.github.io/blog/2015/11/05/Using-OCR-To-Fix-A-Hilarious-Bug/"/>
    <updated>2015-11-05T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2015/11/05/Using-OCR-To-Fix-A-Hilarious-Bug</id>
    <content type="html"><![CDATA[<p>For a little while, we would get very strange bug reports. People would complain that artist thumbnails (viewed in several different contexts across the web and our iOS apps) would not be an image of the artist's work, but rather text, which had inexplicably become an actual JPG. This wasn't just text appearing in a <code>div</code> that should contain an <code>img</code> or something like that, these were actual JPG's that were pictures of text.</p>

<p>We would fix these as they came up, chalking the strangeness up to some relic of an old image processing pipeline, data being migrated, etc.</p>

<p>However, the reports kept coming in. This blog post is about how we diagnosed this actual bug, and how we used a simple Ruby script and OCR to help us detect and fix the existing images.</p>

<!-- more -->


<p>Here's an example of a bug report where the thumbnail for <a href="https://www.artsy.net/artist/marina-abramovic-1">Marina Abramović</a> became the text of her bio.</p>

<p><img src="/images/2015-11-12-hilarious-bug/search.png" alt="Bad Search" /></p>

<p>Here's one from our <a href="https://github.com/artsy/eigen">iOS app</a> showing that thumbnails for related artists are set to their bios as well.</p>

<p><img src="/images/2015-11-12-hilarious-bug/eigen.png" alt="Bad Related Artists" /></p>

<p>Weird right? We eventually tracked down what was going on, and it's actually perfectly summarized in <a href="https://github.com/blueimp/jQuery-File-Upload/pull/3356">this issue</a>. We immediately suspected something with <code>pasteZone</code>, and the bug was easy to reproduce - have an image in your clipboard and paste anywhere on the page.</p>

<p>We have an admin panel that allows some metadata about an artist to be edited. This includes their bio, as well as a place to upload a representative image as their 'cover thumbnail'.</p>

<p>As the issue describes, we had some text input fields, as well as a file upload form using <a href="https://github.com/blueimp/jQuery-File-Upload">Blueimp's jQuery File Upload</a>. When you don't specify a <code>pasteZone</code> it defaults to the entire document. This means that a paste event anywhere on the page will trigger that event.</p>

<p>Our editorial team was using Microsoft Excel and Word to organize some data about the artist, including bios. When ready, a team member would copy and paste the bio into the bio input text field. This would also immediately fire the event for the image upload, which now automagically became an actual picture of the text of the bio. Our API and image processing pipeline would happily accept that, leading to the incredibly bizarre bug reports.</p>

<p>My immediate fix was to specify and scope <code>pasteZone</code> (and similarly, <code>dropZone</code>) to the element the file upload widget was bound to. That would prevent the problem from happening again. Taking a quick look art some random samples of artists, it looked like potentially thousands of records might have been affected and I became interested in a programmatic way to detect these images. A manual approach would have been very cumbersome.</p>

<p>Since the images were that of text, I decided to use OCR to remove artist thumbnails that it determined had 'too much text'. This may have unset valid covers from artists that use lots of text in their work, such as <a href="https://www.artsy.net/artist/joseph-kosuth">Joseph Kosuth</a>. However, this was safe to do since we have some custom logic to fall back to an image of an iconic artwork by the artist in the case of a missing thumbnail.</p>

<p>To get OCR functionality in Ruby, I decided to use <a href="https://github.com/tesseract-ocr/tesseract">Tesseract</a>, a great OSS library. Once I had it installed, I used a <a href="https://github.com/meh/ruby-tesseract-ocr">ruby wrapper</a> to make using it easier.</p>

<p>The script eventually turned into something like:</p>

<pre><code class="ruby"># initialize and configure Tesseract
engine = Tesseract::Engine.new do |config|
  config.language  = :eng
  config.blacklist = '|'
end

# iterate over artists and pull their thumbnails
# given the URL to a publicly accessible image at img

text = engine.text_for(img)
text = text.gsub(/[^a-z ]/i, '').gsub(' ', '')
if text.length &gt; 30
  puts "Found problematic artist #{artist_doc['last']}"
  # ...
end
</code></pre>

<p>So all we do is find all the text in an image, and then remove any garbage characters or artificats from the OCR analysis, and then use 30 as an arbitrary cutoff to determine if an image was problematic. If the image had more than 30 characters as detected by the OCR library, we wound up unsetting it from the artist.</p>

<p>The additional logic to set artist covers from their iconic artworks was already in place, and I ran this script in production, identifying and unsetting over 1000 problematic thumbnails. And we haven't gotten any new reports of this bug since then :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVVM in Swift]]></title>
    <link href="http://artsy.github.io/blog/2015/09/24/mvvm-in-swift/"/>
    <updated>2015-09-24T16:13:00+00:00</updated>
    <id>http://artsy.github.io/blog/2015/09/24/mvvm-in-swift</id>
    <content type="html"><![CDATA[<p>Model View ViewModel has become the default way I write apps on iOS – it makes writing iOS apps a joy. I've written <a href="https://www.objc.io/issues/13-architecture/mvvm/">about it</a> <a href="http://www.teehanlax.com/blog/model-view-viewmodel-for-ios/">again</a> and <a href="https://speakerdeck.com/ashfurrow/reactivecocoa-at-mdevcon-2014">again</a> and <a href="https://leanpub.com/iosfrp">oh my</a>.</p>

<p>But last Autumn, as our team was all-hands-on-deck to wrap up the <a href="http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/">auctions kiosk app</a>, we chose not to use MVVM. Why not?</p>

<p>We were building a <em>new app</em> in a <em>new language</em> using a <em>non-Swift framework</em> for functional reactive programming. I was also teaching colleagues what they needed to know about ReactiveCocoa to help write the app. We used the MVC pattern because the relative cost of MVVM was too high.</p>

<p>"... <em>was</em> ..."</p>

<!-- more -->


<p>Since then, I've been <a href="https://github.com/artsy/eidolon/issues/333">pecking away</a> at converting small view controllers away from MVC, to figure out what MVVM on iOS written in Swift might look like. My goal has been getting ready to cut down our behemoth main view controller and create a view model for it. Before the rewrite, it was nearly 600 lines of code and was responsible for:</p>

<ul>
<li>networking.</li>
<li>syncing auction lot states.</li>
<li>user interaction.</li>
<li>collection view layouts.</li>
<li>image caching.</li>
<li>background-thread data processing.</li>
</ul>


<p>It's quite terrifying now that I think about it!</p>

<p>Well, <a href="https://github.com/artsy/eidolon/pull/503/files">finally I was ready</a>. The view controller is now down to 224 lines, and is responsible for only things like displaying data. Calculating <em>what</em> to display and <em>when</em> to display it is now contained within the view model. In true MVVM form, our view controller doesn't even have direct access to the models it displays!</p>

<p>So what does MVVM in Swift look like? Well, our answer is just that – <em>our</em> answer. Others exist, and they have merits and faults of their own.</p>

<p>I'm not here to preach a definitive definition of MVVM in Swift. Instead, I want to talk about some of the lessons we learnt in the process of building a solution that worked for us.</p>

<hr />

<p>Programming boils down to getting certain bits of code to communicate with other bits in an intelligent way. Software <em>patterns</em> are ways of constraining programmers to make it easier to program.</p>

<p>MVVM, roughly, has the following constraints:</p>

<ul>
<li>Models don't talk to anybody (same as MVC).</li>
<li>View models only talk to models.</li>
<li>View controllers can't talk to models directly; they only interact with view models and views.</li>
<li>Views only talk to the view <em>controllers</em>, notifying them of interaction events (same as MVC).</li>
</ul>


<p>And that's pretty much it. It's not that different from MVC – the key differences are:</p>

<ul>
<li>There's a new "view model" class.</li>
<li>The view controller no longer has access to the model.</li>
</ul>


<p><img src="/images/2015-09-24-mvvm-in-swift/mvvm.png" alt="MVVM Diagram" /></p>

<p>Additionally, MVVM on iOS acknowledges the one-to-one relationship between views and view controllers. I tend to think of them as one entity that just happens to be split across a <code>.swift</code> file and a Storyboard.</p>

<p>The view model's job is to handle all presentation logic. If a model contains an <code>NSDate</code>, the <code>NSDateFormatter</code> to format that date would live in the view model.</p>

<p>View models don't have <em>any</em> access to the user interface. You should not even <code>import UIKit</code> in a view model. Typically, a view controller observes the view model somehow to know when there's new data to display. This can be done through KVO or FRP.</p>

<p>MVVM and MVC share a common weakness: neither defines where the network logic of an app should go. I've put it in the view model for now, but I plan on separating it out into its own object soon. That object will be owned by the view model.</p>

<hr />

<p>So let's talk about some specific challenges we had.</p>

<h2>User Interface Structure</h2>

<p>Part of our user interface consists of a segment control near the top of the screen. The currently selected segment determines the sort order of the collection view cells, as well as the collection view's layout. We had previously defined an enum to store the titles and sort order corresponding to each segmented control; the order of the enum cases implies the order of the controls in the UI.</p>

<pre><code class="swift">enum SwitchValues: Int {
    case Grid = 0
    case LeastBids
    case MostBids
    case HighestCurrentBid
    case LowestCurrentBid
    case Alphabetical
}
</code></pre>

<p>So where does this enum live in MVVM? Since the logic for sorting models, the button titles, and the order of the buttons are all pieces of presentation logic, the enum seems like it belongs in the view model.</p>

<p>However, the decision of which layout for the collection view to use is slightly more nuanced. The layout doesn't affect what data we show the user or how they interact with it; it only affects the visuals how the information is presented. This suggests the logic for deciding layouts might belong in the view controller.</p>

<p>My solution was to put the enum in the view model, and have the view model expose a signal defining which of the two layouts should be used. Based on the selected segment index, the view model decides which layout should be used and sends that value on a signal. The view controller is responsible for mapping that signal into a configured layout, then setting that layout on the collection view.</p>

<pre><code class="swift">// Respond to changes in layout, driven by switch selection.
viewModel.gridSelectedSignal.map { [weak self] (gridSelected) -&gt; AnyObject! in
    switch gridSelected as? Bool {
    case .Some(true):
        return ListingsViewController.masonryLayout()
    default:
        return ListingsViewController.tableLayout(CGRectGetWidth(self?.switchView.frame ?? CGRectZero))
    }
}.subscribeNext { [weak self] layout -&gt; Void in
    self?.collectionView.setCollectionViewLayout(layout as! UICollectionViewLayout, animated: false)
}
</code></pre>

<p>The view controller also uses this signal to define which cell reuse identifier should be used.</p>

<pre><code class="swift">// Map switch selection to cell reuse identifier.
RAC(self, "cellIdentifier") &lt;~ viewModel.gridSelectedSignal.map { gridSelected -&gt; AnyObject! in
    switch gridSelected as? Bool {
    case .Some(true):
        return MasonryCellIdentifier
    default:
        return TableCellIdentifier
    }
}
</code></pre>

<h2>Structuring a View Model</h2>

<p>The most common question from iOS developers about MVVM and FRP concerns how the view model exposes data to the view controller. The view controller needs to be notified about changes to the underlying model, but what mechanism to we use to do this? There are two options:</p>

<ol>
<li>Use (dynamic) properties on the view model, which can be observed using KVO (or wrapped in a signal/sequence using FRP).</li>
<li>Use signals/sequences/futures as properties on the view model, which can be consumed by their corresponding async frameworks.</li>
</ol>


<p>The first option is appealing since it gives your view controller a choice of how to observe the properties. However, I'd recommend against it; Swift doesn't have type-checking on KVO (you need to cast from <code>AnyObject!</code> a lot).</p>

<p>The second option is what I prefer, and it seems the most "Swift" way of doing things. When we do move away from RAC's Objective-C interface, the view model will replace its <code>RACSignal</code> properties with sequences based on Swift generics, which will provide compile-time type-checking 💯</p>

<p>Defining these signals on a view model can be tricky. Swift initializers have <a href="http://ashfurrow.com/blog/swift-initializers/">strict rules</a> around when properties are assigned. The signals need access to the internal state of the view model, so they need to be created <em>after</em> calling <code>super.init()</code>. However, we can't call <code>super.init()</code> until all our properties have been assigned to, including the signal properties.</p>

<p>It's your standard chicken-and-the-egg problem 🐣</p>

<p>I took the easy way out and used implicitly-unwrapped optionals, defined with <code>var</code>, which can be assigned to <em>after</em> the call to <code>super.init()</code>. It's not a perfect solution. We could instead use <code>lazy var</code> properties assigned to self-evaluating closures, or just use computed properties. I'm hoping to explore other options when we move away from RAC 2's Objective-C API.</p>

<h2>Handling User Interaction</h2>

<p>The next problem I had was presenting details based on user interaction. Users tap a button, which is handled in the view controller, which presents the details. However, the view controller should not have access to the models, so how can it configure the details to present them?</p>

<p>My solution took advantage of the interchangeability of Swift functions and closures. First I defined a closure type in the view model.</p>

<pre><code class="swift">typealias ShowDetailsClosure = (SaleArtwork) -&gt; Void
</code></pre>

<p>Then I added a property to the view model and a corresponding parameter to the initializer.</p>

<pre><code class="swift">class ListingsViewModel {
    let showDetails: ShowDetailsClosure

    init(...
         showDetails: ShowDetailsClosure,
         ...
</code></pre>

<p>Next I need to actually call the closure. I defined a function on the view model that the view controller can invoke, passing in the context that's necessary to decide which model's details should be presented. This context is just an index path.</p>

<pre><code class="swift">func showDetailsForSaleArtworkAtIndexPath(indexPath: NSIndexPath) {
    showDetails(sortedSaleArtworks[indexPath.item])
}
</code></pre>

<p>Nice! So now when the user selects a cell, we can call this function on the view model with the index path that the user selected. The view model decides which model to use, and calls the closure.</p>

<p>The final piece of the puzzle is being clever about creating the view model. We need to pass a closure to its initializer, one that shows the model's details. I defined a function on the view controller that matched the <code>ShowDetailsClosure</code> signature.</p>

<pre><code class="swift">func showDetailsForSaleArtwork(saleArtwork: SaleArtwork) {
    performSegueWithIdentifier(SegueIdentifier.ShowSaleArtworkDetails.rawValue, sender: saleArtwork)
}
</code></pre>

<p>And then use lazy loading (discussed below) to call the view model's initializer. I pass in a reference to the above function as the closure parameter.</p>

<pre><code class="swift">lazy var viewModel: ListingsViewModelType = {
    return ListingsViewModel(..., showDetails: self.showDetailsForSaleArtwork, ...)
}()
</code></pre>

<p>So let's review what happens when a user makes a selection.</p>

<p></div></div><a href='/images/2015-09-24-mvvm-in-swift/selection.png'><img src="/images/2015-09-24-mvvm-in-swift/selection.png" title="Selection diagram" ></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Here are the steps:</p>

<ol>
<li>User taps a cell.</li>
<li>A callback on the view controller is invoked with the selected index path.</li>
<li>The view controller tells the view model which index path was selected.</li>
<li>The view model looks up the corresponding model.</li>
<li>The view model invokes the <code>showDetails</code> closure given to it when it was initialized.</li>
<li>The <code>showDetails</code> "closure" performs a segue with the model.</li>
</ol>


<p>It's not an ideal solution since it still exposes the model to the view controller (even under very strict conditions), but it's a reasonable compromise. As we continue to use more view models, I'm curious to see how this solution scales.</p>

<h2>Testing</h2>

<p>Earlier I mentioned the lazy closure property in the view controller. This is a trick that lets the view controller customize the view model by using references to <code>self</code>.</p>

<pre><code class="swift">lazy var viewModel: ListingsViewModelType = {
    return ListingsViewModel(
        selectedIndexSignal: self.switchView.selectedIndexSignal,
        showDetails: self.showDetailsForSaleArtwork,
        presentModal: self.presentModalForSaleArtwork
    )
}()
</code></pre>

<p>The <code>viewModel</code> property is first accessed by the view controller in <code>viewDidLoad()</code>, which means that we can replace the property by a test double any time before that.</p>

<p>The view controller is tested using <a href="https://github.com/facebook/ios-snapshot-test-case">snapshots</a> to verify the user interface hasn't been inadvertently changed. Testing is straightforward:</p>

<ol>
<li>Create a view controller to test.</li>
<li>Create a stubbed view model, customized for each test.</li>
<li>Give the view controller the stubbed view model before <code>viewDidLoad()</code> is called.</li>
<li>Verify the view controller renders correctly.</li>
</ol>


<p>While writing tests, I found it difficult to subclass the existing view model (for stubbing purposes). Since the view model's initializer has side-effects (starting recurring network requests 😬), I can't call <code>super.init()</code>. Instead, I made a <code>ListingsViewModelType</code> protocol. The view controller only interacts with the view model through this protocol – it has no reference to the class itself. Now creating a stubbed view model is as easy as conforming to a protocol.</p>

<p>Seems more "Swift", too.</p>

<p>Now that the view model and view controller are separate objects, we no longer have to test presentation logic in the view controller at all. The view model now takes care of network requests, data processing, etc – this is now all tested <em>independently</em> of the user interface 🎉</p>

<p>In my opinion, the key benefits of MVVM boil down to the following:</p>

<ol>
<li>Separating the view model from the user interface makes it easier to test presentation logic.</li>
<li>Separating the view controller from the presentation logic makes it easier to test the user interface.</li>
</ol>


<hr />

<p>This is only a description of what we've come up with so far. As our community and the Swift language continue to evolve, hand-in-hand, we'll re-evaluate our answer to the question of what MVVM with Swift looks like. For now, I'm quite pleased with the step we've taken, and I'm looking forward to continuing to explore programming patterns in Swift.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Releasecop Tracks Stale Releases]]></title>
    <link href="http://artsy.github.io/blog/2015/09/01/releasecop-tracks-stale-releases/"/>
    <updated>2015-09-01T17:30:00+00:00</updated>
    <id>http://artsy.github.io/blog/2015/09/01/releasecop-tracks-stale-releases</id>
    <content type="html"><![CDATA[<p>Artsy practices a sort of <a href="http://en.wikipedia.org/wiki/Continuous_delivery">continuous delivery</a>. We keep release cycles short and the process of reviewing, testing, and deploying our software as reliable, fast, and automated as possible. (This blog has touched on these practices <a href="http://artsy.github.io/blog/categories/testing/">multiple</a> <a href="http://artsy.github.io/blog/categories/continuous-integration">times</a>.)</p>

<p>Usually, commits that have been reviewed and merged are immediately built and tested. Successfully built versions of the codebase are often automatically deployed to a staging environment. On an automated or frequent-but-manual basis, that version is deployed to a production environment. Thus, commits form a pipeline:</p>

<ul>
<li>From developers' working branches</li>
<li>To the master branch</li>
<li>Through a hopefully-successful build</li>
<li>To a staging environment</li>
<li>To production</li>
</ul>


<p>The number of apps and services we deploy has grown to <em>dozens</em> per team, so sometimes things fall through the cracks. We've been using <a href="https://github.com/joeyAghion/releasecop">Releasecop</a> for the last few months to get gentle email reminders when an environment could use a deploy.</p>

<!-- more -->


<pre><code>gem install releasecop
releasecop edit
</code></pre>

<p>This opens a <em>manifest</em> file where you can describe the sequence of git remotes and branches that make up your own release pipeline. For example:</p>

<pre><code>{
  "projects": {
    "charge": [
      { "name": "master", "git": "git@github.com:artsy/charge.git" },
      { "name": "staging", "git": "git@heroku.com:charge-staging.git" },
      { "name": "production", "git": "git@heroku.com:charge-production.git" }
    ],
    "gravity": [
      { "name": "master", "git": "git@github.com:artsy/gravity.git" },
      { "name": "master-succeeded", "git": "git@github.com:artsy/gravity.git", "branch": "master-succeeded" },
      { "name": "staging", "git": "git@github.com:artsy/gravity.git", "branch": "staging" },
      { "name": "production", "git": "git@github.com:artsy/gravity.git", "branch": "production" }
    ]
  }
}
</code></pre>

<p>The <code>charge</code> app is a typical deployment to Heroku. Work progresses from the <code>master</code> branch to a <code>charge-staging</code> app to a <code>charge-production</code> app. The <code>gravity</code> app is a more complicated, non-Heroku deployment. It updates git branches to reflect what has been merged (<code>master</code>), tested (<code>master-succeeded</code>), deployed to staging, and deployed to production.</p>

<p>Run the <code>releasecop check [app]</code> command to report the status of your apps' releases:</p>

<pre><code>$ releasecop check --all
charge...
  staging is up-to-date with master
  production is up-to-date with staging
gravity...
  master-succeeded is up-to-date with master
  staging is up-to-date with master-succeeded
  production is behind staging by:
    06ca969 2015-09-04 [config] Replace Apple Push Notification certificates that expire today. (Eloy Durán)
    171121f 2015-09-03 Admin-only API for cancelling a bid (Matthew Zikherman)
    4c5feea 2015-09-02 install mongodb client in Docker so that import rake tasks can run (Barry Hoggard)
    95347d1 2015-08-31 Update to delayed_job cookbook that works with Chef 11.10 (Joey Aghion)
2 project(s) checked. 1 environment(s) out-of-date.
</code></pre>

<p>A nightly <a href="https://jenkins-ci.org/">Jenkins</a> job emails us the results, but a cron job could work equally well.</p>

<p><a href="https://github.com/joeyAghion/releasecop">Releasecop</a> reminds us to deploy ready commits and close the loop on in-progress work. We hope you find it useful. (Pull requests are welcome!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Trek 2: The Wrath of count()]]></title>
    <link href="http://artsy.github.io/blog/2015/08/27/swift-trek-2-the-wrath-of-count/"/>
    <updated>2015-08-27T05:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2015/08/27/swift-trek-2-the-wrath-of-count</id>
    <content type="html"><![CDATA[<p>On Tuesday at our mobile practice standup, I mentioned that I was in-between projects and looking for something to do. Orta suggested migrating Eidolon, the Artsy bidding kiosk app, to Swift 2.</p>

<p>Our CI is <a href="https://github.com/artsy/eidolon/pull/466">broken anyway</a>, so now is the perfect opportunity to make changes that would break CI. Additionally, Swift 2 seems to have more-or-less stabilized in the latest betas, so we don't expect many gotchas leading up to the GM. Finally, this is an enterprise-distributed app, so we don't have to worry about submitting to the App Store using betas of Xcode.</p>

<p>So Swift 2 it is!</p>

<!-- more -->


<p><img src="http://media1.giphy.com/media/7PzALWNJotBxS/giphy.gif" alt="When your boss tells you that you can use the new Swift version." /></p>

<p>I didn't think it would take long, but Orta was less optimistic. I knew that we would need to start with the dependencies, which was tricky since I was updating to the latest beta (only one day old at this point). Our <a href="https://github.com/artsy/eidolon/commit/b77a9c2add780a52aac2c48b9cd3a5eb257ab003#diff-4a25b996826623c4a3a4910f47f10c30R59">Podfile needed some changes</a>, but a lot of this was work I had done before when initially moving Eidolon to CocoaPods frameworks, then to Swift 1.2.</p>

<p>Dependencies are weird. Different libraries take different approaches to Swift changes, so I had to evaluate each one individually. Usually it was a matter of telling CocoaPods to use the branch that the library was using for Swift 2 support. It took about an hour or two, but I got our dependencies working.</p>

<p><img src="http://i.imgur.com/IO1QU8E.gif" alt="When pod update works." /></p>

<p>Two of our dependencies, <a href="https://github.com/Quick/Quick">Quick</a> and <a href="https://github.com/Quick/Nimble">Nimble</a>, were a breeze to update – even though we were using way out-of-date versions. We're really impressed by the well thought-out foundations of their libraries.</p>

<p>The next thing was getting <em>our own</em> code to work. This was a lot more work than I had anticipated, since the automatic migrator in Xcode didn't work.</p>

<p><img src="http://i.imgur.com/abykDJa.gif" alt="When the Xcode migrator fails." /></p>

<p>No problem – a lot of the time, Xcode's autosuggest worked fine, like adding labels to function calls. But it doesn't catch everything. It turns out that a few hours of manually changing <code>count(array)</code> to <code>array.count</code> etc was a great way to zone out and enjoy a summer afternoon.</p>

<p>After the low-hanging fruit, it was time to move on to the more... esoteric problems. For example, Swift was getting confused by the ambiguity of the <code>&lt;~</code> we use for ReactiveCocoa 2.x bindings, vs the <code>&lt;~</code> operator ReactiveCocoa 3.x uses for bindings. Weird.</p>

<p>I tracked down the problem to precedence. ReactiveCocoa's <code>&lt;~</code> has a <a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/5b19af9b2777462e37ead2dfea95e1fea74b7d63/ReactiveCocoa/Swift/Property.swift#L193">precedence of 93</a>. After I changed <a href="https://github.com/ashfurrow/Swift-RAC-Macros/commit/57b041d8a99a3e2a90583709ed7ed91f8ca271b8">ours to match</a>, everything was fine.</p>

<p><img src="http://media3.giphy.com/media/PrAMyghZaYjm/giphy.gif" alt="When your code compiles but you don't know why." /></p>

<p>I noticed a lot of changes surrounding the way Swift handles strings. Apple themselves <a href="https://developer.apple.com/swift/blog/?id=30">have discussed changes</a>, which were fine. I tried to use their <code>.isEmpty</code> property where I could, but I often had to test if a string <em>wasn't</em> empty. <code>!str.isEmpty</code> doesn't really sit well with me, so we used <code>str.isEmpty == false</code>.</p>

<p>However, the problem was further compounded by the changes to <code>UITextField</code>, whose <code>text</code> property now returns an <em>optional</em> string. So there was a lot of this code:</p>

<pre><code class="swift">if (textField.text ?? "").isEmpty == false { ...
</code></pre>

<p><em>Gross</em>. We've since moved onto <a href="https://github.com/artsy/eidolon/pull/498">something nicer</a>, an experiment with Swift 2's power protocols. The above code can now be written as:</p>

<pre><code class="swift">if textField.text.isNotNilNotEmpty
</code></pre>

<p>Very neat.</p>

<p><img src="https://38.media.tumblr.com/tumblr_m8mpwh1gTe1qciljio1_500.gif" alt="It works!" /></p>

<p>While Orta and I reviewed the <a href="https://github.com/artsy/eidolon/pull/496">pull request</a>, we noted some things we liked, and some things we didn't like. I <em>really</em> like that UIKit now uses Objective-C generic NSArrays so I don't have to cast so much. I really <em>don't</em> like that libraries, mostly the ones that we maintain, don't use that feature of Objective-C yet. That's now <a href="https://github.com/artsy/mobile/issues/54">on our todo list</a>.</p>

<p><img src="http://media3.giphy.com/media/52VjAeGgj78GY/giphy.gif" alt="When you put it on your todo list." /></p>

<p>I am amazed at how quickly Swift is changing – as a community, we are still seeing new patterns and methodologies emerge. Not all of them will catch on, of course. But what I'm really excited about is that Swift's engineers are building tools that let us do <em>so much</em>. They aren't making architectural decisions for us, but letting us experiment and discover for ourselves what works and what doesn't. The future of iOS development has never felt more exciting.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Peer Lab]]></title>
    <link href="http://artsy.github.io/blog/2015/08/10/peer-lab/"/>
    <updated>2015-08-10T10:57:00+00:00</updated>
    <id>http://artsy.github.io/blog/2015/08/10/peer-lab</id>
    <content type="html"><![CDATA[<p>When I was living in Amsterdam, I participated in plenty of <a href="https://appsterdam.rs">Appsterdam</a> events. Things like the weekly Meeten en Drinken. I even helped lead a class in Swift. One of the events I liked the most was called Peer Lab, organized every Saturday morning by <a href="https://twitter.com/samuelgoodwin">Samuel Goodwin</a>.</p>

<p>The idea of Peer Lab is pretty simple, but also somewhat profound: developers gather in a physical space to work on things. If someone has a question, they ask the group. If you can help, you offer assistance. The goal is to foster a collaborative learning environment where everyone feels fulfilled.</p>

<!-- more -->


<p>Samuel held Peer Lab on Saturday mornings to dissuade recruiters from attending. The café where we met had wifi and good coffee, which is all you really need when you're trying to get something accomplished on a Saturday morning.</p>

<p></div></div><a href='http://photos.ashfurrow.com/autumn-in-amsterdam'><img src="/images/2015-08-10-peer-lab/amsterdam.jpg" title="Amsterdam" ></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Before I moved to New York, I talked to Orta about organizing something similar at the Artsy offices. He was very receptive and excited to see it happen. I would be there every Saturday from 10:30-12:30 to host, and Artsy would provide the space, the wifi, and some free coffee and snacks. Pretty minimal costs. Orta offered the <a href="http://www.meetup.com/CocoaPods-NYC/events/222362372/">CocoaPods NYC meetup group</a> as a place to promote the event. We've also been mentioning it to people we meet at other tech events in New York.</p>

<p>It's been about six months, and I feel that the Peer Lab has been a fantastic success. Every week, I get to meet developers – some regulars and some newcomers. We sit around, talk shop, code, and hang out until pizza arrives for lunch.</p>

<p>From my perspective, it's been great. I get to meet other developers in a really chill setting, and it gets me out of the house early on Saturday. It sets an awesome tone for the rest of the weekend.</p>

<p></div></div><a href='https://instagram.com/p/5dlU_MyORN/'><img src="/images/2015-08-10-peer-lab/coffee.jpg" title="Nothing like a cup of coffee" ></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Everyone seems to have a good time – people meet, chat, work away on their projects or open source or whatever. Attendance includes iOS experts, iOS beginners, and everyone in between. Non-iOS developers are always welcome, but the CocoaPods branding – and the network of people Orta and I know – make it somewhat iOS-centric. We're working on that.</p>

<p>We've been doing our best to create an inclusive environment, with an emphasis placed on <a href="http://cocoapods.org/legal">CocoaPods' Code of Conduct</a>. Importantly, the event creates a space where developers can meet, work, and socialize outside of the regular alcohol-soaked meetup scene. There's nothing wrong with booze at tech meetups, but it's nice to have a space where people can socialize outside that context.</p>

<p>The Peer Lab is a cost-effective way for Artsy to get respect from the NYC developer scene. This is good for <a href="http://ashfurrow.com/blog/sharing-is-selfish/">all manner of reasons</a>, and it only costs a pizza every week.</p>

<p></div></div><a href='https://instagram.com/p/31tKTiGZVC/'><img src="/images/2015-08-10-peer-lab/classroom.jpg" width="1280" title="The Classroom at Artsy" ></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>So I'm happy, the people who attend are happy, and Artsy is happy.</p>

<p>But there's a problem.</p>

<p>Not everyone can make it to Artsy's lower Manhattan office every Saturday morning. Some developers live too far away, or have family/work obligations Saturday morning.</p>

<p>...</p>

<p>I want to see more Peer Labs pop up across New York, and across the world. I want you, reader, to consider starting one. It's super easy to do, I promise!</p>

<p>You don't even need a company or sponsor to organize something like this. You'll be surprised how easy it is.</p>

<p>I have a few friends living near Toronto that get together weekly at a café to work together. They tweet about it and invite others. It's nothing formal, but it's valuable time for them.</p>

<p>A Peer Lab by any other name is still an awesome idea.</p>

<p>If you <em>are</em> a company, and you're looking for an easy way to meet talented developers, hosting or sponsoring a Peer Lab is definitely worth considering. There are a <em>tonne</em> of meetups in tech, but most revolve around evening drinks, maybe pizza, maybe a talk. A Peer Lab can help you stand out – even people who don't attend are thinking "oh, that's cool."</p>

<p>Nice job, company.</p>

<p></div></div><a href='https://instagram.com/p/yNNXtKJqrk/'><img src="/images/2015-08-10-peer-lab/couch.jpg" width="1280" title="Bart the Art Plant" ></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>How to Peer Lab in four simple steps:</p>

<ol>
<li><strong>Pick a Time</strong>. When are <em>you</em> free to do this? Do you like working in the evenings? Awesome! Do it then. Are Sunday afternoons your jam? Sweet. Whenever works for you.</li>
<li><strong>Find a Space</strong>. This is easier than it sounds, trust me. As an organizer, you need a space that's convenient <em>for you</em>. I use my workplace because I live nearby. Samuel used a café by his apartment. Anywhere that has wifi. Pick a place that works for your time – for example, if you're meeting in the morning, a place with coffee is a good idea.</li>
<li><strong>Let the World Know</strong>. Tweet it, send it to some friends, whatever works. You could ask your employer to pay for a Meetup account. Send details to popular developers in your city and ask them to help spread the word 🎉</li>
<li><strong>Show Up</strong>. Most of success is just showing up. At the very least, you've got a nice time to jam every week, and hopefully you'll meet some other people to jam with.</li>
</ol>


<p>Keep things as simple as possible so Peer Lab stays something fun that you look forward to, and doesn't become a chore. Like I said, six months in and I still love it.</p>

<hr />

<p>Peer Lab is a fun and rewarding activity. From my perspective, from attendees' perspectives, and from Artsy's perspective. It's simply awesome.</p>

<p>Whether you're a developer or a company, an expert or a beginner, I highly encourage you to start one of your own.</p>

<p></div></div><a href='https://ortastuff.s3.amazonaws.com/gifs/three-hands.gif'><img src="https://ortastuff.s3.amazonaws.com/gifs/three-hands.gif" width="1280" title="Thumbs Up" ></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>
]]></content>
  </entry>
  
</feed>
