<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: video | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/video/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2016-02-02T17:08:41+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Being a Good OSS Citizen]]></title>
    <link href="http://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen/"/>
    <updated>2016-01-28T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen</id>
    <content type="html"><![CDATA[<p>Let's take a look at the day in the life of an open source citizen: me. On our app, I was given <a href="https://github.com/artsy/eigen/issues/971">an issue</a> that would allow users to refine what kinds of sale artworks they were looking at, and it included this <em>awesome</em> slider control so they could set min/max price ranges.</p>

<!-- more -->


<p></div></div><a href='/images/2016-01-28-being-a-good-open-source-citizen/design.png'><img src="/images/2016-01-28-being-a-good-open-source-citizen/design.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Nice.</p>

<p>But iOS doesn't have a slider like that built into UIKit, so I headed to <a href="https://cocoapods.org">CocoaPods.org</a> to find something that would work for me. Searching for "range slider" yielded a bunch of results, and I looked through three or four of them.</p>

<p>I picked <a href="https://cocoapods.org/pods/MARKRangeSlider">this one</a> because it did <em>almost exactly</em> what I needed, provided a reasonable level of customization, and had a history of development leading up to a recent v1.0.</p>

<p>But I said it did "almost exactly" what I needed, which meant I'd have to modify it. At this point, many developers either look for a different library or abandon the idea of using an existing library altogether and invent one themselves. That's a shame, because it's almost always faster and easier to improve an existing library than it is to build your own.</p>

<p>So let's step through what I did to modify this library for my needs. First, I checked to see if there was an issue for my feature already opened on the repository; maybe someone else had tried this, and I could benefit from their experience! That wasn't the case, so I forked the library to my personal account and cloned my fork locally. Now I can modify the library's code and commit it to my fork.</p>

<p>Next I add the library to my <code>Podfile</code>, but I'm clever about it.</p>

<pre><code class="rb">pod 'MARKRangeSlider', :path =&gt; '../MARKRangeSlider'
</code></pre>

<p>This tells CocoaPods that I'm <em>working</em> on the pod, and, it is stored in a local directory (the one where I cloned my fork). This makes it a "development pod", so that the files in Xcode are actually the ones I've cloned locally.</p>

<p>This is a really important, but subtle point. Normally, CocoaPods downloads copies of the files and stores those copies, but in this case, it refers to the existing files. It doesn't copy them at all: any changes I make to the library while working on my app are to the files I cloned. That means they can be easily committed and pushed up to my fork.</p>

<p>That's exactly what I did. I made my changes from within the app until I was satisfied, and <a href="https://github.com/ashfurrow/MARKRangeSlider/commit/aefbeb181b62c8c257a7d0ada1e75834489b1909">pushed them to my fork</a>, then pointed the <code>Podfile</code> to my fork of the pod.</p>

<pre><code class="rb">pod 'MARKRangeSlider', :git =&gt; 'https://github.com/ashfurrow/MARKRangeSlider.git'
</code></pre>

<p>Nice. At this point, I continued on as a developer, running a <code>pod install</code> to download the forked library with my commits as usual. I finished building the feature and <a href="https://github.com/artsy/eigen/pull/1075">PR'd it using my fork</a>.</p>

<p><img src="/images/2016-01-28-being-a-good-open-source-citizen/done.gif" alt="" /></p>

<p>I could've stopped here, but that'd be a shame. Someone else might want the same changes I made, and I should submit them back. I <a href="https://github.com/vadymmarkov/MARKRangeSlider/pull/22">opened a PR</a> on the library to contribute my changes back, and I made sure to explain <em>why</em> my changes were necessary. Because our app is open source, I was even able to link to <em>our</em> PR to show the library author how their work was being used.</p>

<p>The next morning, I woke up to find my PR had been merged, and after the author pushed an updated version of the library (including my changes), I updated our app's <code>Podfile</code> once more.</p>

<pre><code class="rb">pod 'MARKRangeSlider'
</code></pre>

<p>Then ran <code>pod update MARKRangeSlider</code> so it would update <em>just</em> that pod, and point it to the new release. I re-ran the unit tests to make sure I hadn't broken anything, and <a href="https://github.com/artsy/eigen/pull/1077">PR'd the change</a>.</p>

<p>This sounds like a lot, and having written it all out, I guess it is. But it's a series of small steps, not big ones, and I've worked like this long enough that it's second-nature to me now.</p>

<hr />

<p>I believe that using existing open source libraries is almost always better than writing your own, and I believe that improvements made to open source ought to be shared. Those beliefs shape my behaviour as a developer, and as a person.</p>

<p>Making your first contribution to a project may seem scary, but we all <a href="https://github.com/B-Sides/ELCSlider/pull/1">start somewhere</a>. It gets easier, and in time, you will become a paragon of open source citizenry.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Teaching Swift at Artsy]]></title>
    <link href="http://artsy.github.io/blog/2016/01/26/swift-at-artsy/"/>
    <updated>2016-01-26T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/01/26/swift-at-artsy</id>
    <content type="html"><![CDATA[<p>While the Artsy engineering team includes many disciplines, tech stacks, and personalities, we all share a few things in common: a respect for each other, an appreciation of art-meets-science, and a celebration of learning. These are actually traits shared with our entire company, even non-engineers. So last Summer when Orta and I had some down time, it occurred to us how we could do something super-productive that was congruent with our values: we could teach the company Swift.</p>

<!-- more -->


<p>Like most project ideas, the first step was to create a <a href="https://github.com/orta/Swift-at-Artsy">GitHub repo</a>. We made it open source because <a href="http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html">why not</a>. Orta and I chatted and realized that to teach the company Swift, we would need two tracks:</p>

<ul>
<li>A track for newcomers who may have never programmed before.</li>
<li>A track for anyone who could explain what "object-oriented programming" meant.</li>
</ul>


<p>It was really important to us to include beginners who had no exposure to programming – the digital marketing and genoming teams specifically were keen to learn how to program.</p>

<p>I'm a big believer in using "newcomer" and "informed" to describe the two groups of developers – it helps prevent newcomers from feeling inadequate and better describes the expectations for students.</p>

<p>We also focused on Swift-only, no iOS. That allowed us to focus on the language – which was fun because it let us focus on us learning new stuff, too – and we kept the course to five one-hour sessions (per track).</p>

<p>Next step was obviously to create a Slack chatroom. We re-purposed the oft-neglected room dedicated to Taylor Swift and turned it into a place where anyone could ask questions and share resources. It's also a helpful place to @channel everyone to remind them about the classes.</p>

<p></div></div><a href='/images/2016-01-26-swift-at-artsy/chatroom.png'><img src="/images/2016-01-26-swift-at-artsy/chatroom.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Orta taught the beginner course and I TA'd it, answering questions as he instructed and offering suggestions when I felt something should be clarified (kind of like pair-programming except for teaching). We switched roles for the informed class. Preparing course materials was done through GitHub pull requests, which integrated well into our existing workflow on the mobile team.</p>

<p>We ran into some troubles in the first classes of both tracks: Swift 2 was in beta, and getting everyone on the correct versions of Xcode proved... difficult. Keeping them up-to-date as Xcode betas continued to be released over five weeks was also challenging. This was a problem in both tracks, but some problems were track-specific.</p>

<p>Explaining fundamental concepts like variables and for-loops to beginners is challenging. It reminded me of when I TA'd intro-to-Java courses in University (while the code then was obviously much uglier, <code>javac</code> is arguably more user-friendly than Xcode). Having the pair-programming approach worked well to help explain these concepts.</p>

<p>The biggest challenge with the informed class was rounding everyone up to actually attend the classes. Engineers are addicted to being busy, and like most side-projects, everyone was initially very excited about the course, but that interest dropped off quickly. Orta would help by physically going to our colleagues' desks and gently reminding them.</p>

<p>Regardless of the challenges, the course had a significant impact, both within Artsy and in the larger Swift community. Some of the course materials have been <a href="https://github.com/orta/Swift-at-Artsy/blob/master/Beginners/Lesson%20One/README_ZH.md">translated into Chinese</a> and we regularly received suggestions (and occasionally corrections) about our content. Newcomers to programming gained insights into <em>what exactly engineers do</em> and why bugs happen, while informed colleagues saw parallels between Swift and their own favourite languages (most often Scala). The course materials have also helped other mobile team members (who usually write only Objective-C) get started with Swift.</p>

<p>The beginner students really appreciated <a href="https://github.com/orta/Swift-at-Artsy/tree/master/Beginners/Lesson%20Three">lesson three</a> because we used real-world (scaled down) data structures that Artsy actually uses. We presented problems to solve – problems our colleagues were familiar with from their day-to-day work – and we showed how they can be solved with programming. <a href="https://github.com/orta/Swift-at-Artsy/tree/master/Beginners/Lesson%20Four">Lesson four </a> was the most well-received lesson as it featured some concrete "making the computer do cool stuff" material.</p>

<p>Finally, there was just a great sense of accomplishment. Orta and I had taken time during a downtime in engineering work and turned it into something that helped the company and helped the community. We got thanked internally and externally, and that felt great; helping others has a lot of tangible benefits, but feeling good about it is one of my favourites.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eidolon: Code Review]]></title>
    <link href="http://artsy.github.io/blog/2016/01/14/eidolon-code-review/"/>
    <updated>2016-01-14T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/01/14/eidolon-code-review</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/artsy/eidolon">Eidolon</a> is the third app from Artsy's mobile team, and it was the <a href="http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/">first to be developed totally in the open</a>. It's often used as a reference for what an app written in Swift, or written using FRP, should look like. Given how interested the community seems to be around the app, it's about time we did a walkthrough of the code.</p>

<!-- more -->


<p>This was done as a part of the engineering team's weekly lunch and learn sessions, where we get together and share what we've been working on. Since most of you aren't Artsy engineers, and so you can't ask questions in-person, please feel free to <a href="https://github.com/artsy/eidolon/issues/new">open an issue</a> to ask for any clarifications.</p>

<p>Jump <a href="https://www.youtube.com/watch?v=LAAMk7oLrmg">to YouTube</a> for the video, or click more for a smaller inline preview.</p>

<p></div></div><iframe width='100%' height='600' src='https://www.youtube.com/embed/LAAMk7oLrmg ' frameborder='0' allowfullscreen></iframe><div class='meta-container'><header>&nbsp;</header></div><div class='content-container'><div class='entry-content'></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Licenses for OSS Code]]></title>
    <link href="http://artsy.github.io/blog/2015/12/10/License-and-You/"/>
    <updated>2015-12-10T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2015/12/10/License-and-You</id>
    <content type="html"><![CDATA[<p>As a part of our internal Lunch and Learn series, I  gave a talk to our developers with an overview of the different types of source code licenses available.</p>

<p>We always recommend MIT within Artsy, but understanding what the other ones are and <a href="http://artsy.github.io/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy/">why we made</a> the choices we have done is valuable.</p>

<p>Jump <a href="https://www.youtube.com/watch?v=0r7JcN3Q_LY">to YouTube</a> for the video, or click more for a smaller inline preview, as well as all of the speakers notes.</p>

<!-- more -->


<p></div></div><iframe width='100%' height='600' src='https://www.youtube.com/embed/0r7JcN3Q_LY ' frameborder='0' allowfullscreen></iframe><div class='meta-container'><header>&nbsp;</header></div><div class='content-container'><div class='entry-content'></p>

<h3>Licenses For Code</h3>

<p>Attn:<em>I am not a lawyer</em>, but I have to care about this from an app dev perspective, and a dependency manager perspective.</p>

<p>Recommendation for further reading:</p>

<ul>
<li>http://choosealicense.com</li>
<li>https://tldrlegal.com/</li>
</ul>


<p>We'll talk about 3 types of licenses:</p>

<ul>
<li>Permissive: MIT/BSD, used by jQuery, Rails, Artsy OSS</li>
<li>Mostly Permissive: Apache/Mozzila, used by SVN, Firefox</li>
<li>Copyleft: GPL, used by Git, Linux, Wordpress</li>
</ul>


<h3>Common Components</h3>

<p>All share one important thing:</p>

<ul>
<li>YOU MAY USE THIS</li>
<li>NO WARRANTY</li>
<li>DISCLAIMER OF LIABILITY</li>
</ul>


<p>Which is basically the crux of how we can all actually use and write OSS without ending up bankrupt. E.g. when a major component of your infrastructure "fails" - it's not the fault of the author. Example: <a href="https://en.wikipedia.org/wiki/Shellshock_(software_bug">Shellshock</a>) - no-one tried suing the maintainers of Bash.</p>

<h3>License Free</h3>

<p>By choosing to not include a license, you only applying your copyright to the code. All code is the copyright of someone, because creation of anything is covered by copyright. Copyright is, err, complex. Roughly speaking though, there is no contract between you and someone using your code. This means <em>all</em> of the power is in favour of the library author. A library consumer would need to email the author and ask for permission on a case by case basis, even then there is nothing stopping a developer revoking the ability for you to use their library after the fact. It's also different depending on the country the library author is in. However in the end the default copyright is not a license, so add one.</p>

<p><a href="http://blog.codinghorror.com/pick-a-license-any-license/">This is basically the default license for code. </a></p>

<p>This means that code on a blog could not be safe to use unless they've declared its license, whereas for something like stack overflow all of the contents there are licensed under the Creative Commons. Which I'll talk about later.</p>

<p>Just uploading some code to GitHub actually does put it under a license of sort, which includes the ability for someone to fork and view the code. It's explicit in the GitHub T&amp;C, they could not have those features without it. Other than that though, you offer no contract with the library user.</p>

<h3>OSI</h3>

<p>So when we say Open Source license, we are talking about licenses that come from the Open Source Initiative. They are a pragmatic group who say whether a license should be classed as 'open source' or not. A bit weird, but they generally just debate a lot of the legal stuff in these licenses and try to find holes so that everyone is protected. It's basically a seal of approval. There are very few licenses that are not OSI approved, the one you might know is the WTFPL - which is basically default copyright anyway.</p>

<p>On the mobile team we requested that dependencies of ours convert from WTFPL so that we don’t have the issue mention about the public domain, we as Artsy have little protection against the library authors future wishes.</p>

<h3>Permissive</h3>

<p>What you think of as open source is the modern day permissive license.</p>

<p>These are the least restrictive, and are considered "business friendly." They apply very little rules between author and library consumer.</p>

<p>People use permissive licenses because conceptually they allow the most programmer freedom to use, change and improve a library.</p>

<p>They also protect the author, in the sense that a consumer cannot claim that the author created the product the consumer made. They protect the author from liability.</p>

<h4>The one thing</h4>

<p>For example someone could take your library, and rename it, then apply a different license. Not breaking any rules, unless they ignore attribution.</p>

<p>This happened this year with <a href="https://github.com/Microsoft/WinObjC">WinObjC</a>
Microsoft's version of Objective-C, which also aimed for API compatibility with Apple's developer frameworks. They built it up with a lot of other source code, but didn't provide attribution.</p>

<p>https://github.com/Microsoft/WinObjC/issues/35
https://news.ycombinator.com/item?id=10024377</p>

<blockquote><p>The ONE SINGLE requirement of the Cocotron MIT license is that the license text, including copyright holders, remains in the source. THAT'S IT, can you please manage to do that.</p></blockquote>

<h3>Patently Permissive</h3>

<p>Moving up in terms WRT strength of the contract, there is the permissive+patent libraries. These allow library authors to have patents on the software. This can make it more business friendly, depending on the business goals. The most common are Apache and the Mozilla Public License.</p>

<h3>Viral</h3>

<p>The GPL, and it's crew. Roughly speaking, they say that if you want to include any GPL'd code in your projects, you need to make your entire project GPL. There is an important distinction in the GPL in that version 2, and version 3 differ in important ways. The one that I think is most important is that GPL 3 allows sub-licensing. This means that you can say "I can give Artsy a license for this code under BSD terms", allowing for some flexibility in how you apply the license.</p>

<p>It's considered viral because if you have any GPL code anywhere, then everything becomes GPL.  Rule of thumb is to avoid this license, however I'd like to offer a reason why Artsy might ship GPL code.</p>

<p>On the OSS iOS side, we release all of our apps as MIT. I could be quite worried about people shipping copies of our applications. For example there could be fake versions of the Artsy app on the App Store, or competitors could use it to bootstrap. If I was very, very worried I would ship it as GPL 3 with an MIT sublicense to Artsy. This means that anyone who ships a copy of our app to the app store without our express permission for a sublicense that allows DRM.</p>

<p>Generally though we don’t need to do this because we have the ability to revoke an app’s access to the API, meaning it cannot talk to Artsy, and our apps are pretty useless at that point.</p>

<h3>Creative Commons</h3>

<p>So, the Creative Commons is a license on content like videos, images and corpuses of text. They are not OSI approved, and <a href="https://wiki.creativecommons.org/wiki/Frequently_Asked_Questions#Can_I_use_a_Creative_Commons_license_for_software.3F">actively recommend</a> that people use an OSI license for code. This is because software licenses have more to care about: distribution, compilation  and working with other license / patents. Things that you don't have to deal with WRT other types of content.</p>

<p>All CC-licensed code requires attribution of <a href="http://blog.stackoverflow.com/2009/06/attribution-required/">some sort</a>.</p>

<p>In CocoaPods all the design assets are released under CC, but all the code is BSD.</p>

<h2>Twitter Q &amp; A</h2>

<h3>Can I re-license after the fact?</h3>

<p>So, have you wondered why sometimes you have to sign a CLA ( contributors license agreement ) to work on a repo? Relicensing is one of these things. Let's take 3 examples.</p>

<ul>
<li><p><em>VLC</em> - Wanted to put an app on the app store, VLC was GPL. As each contributor owned their contributions if one single party who had contributed to the codebase didn't agree with putting an app on the store then they couldn't ship. It took an extra year and a half to get VLC re-licensed to get on the store.</p></li>
<li><p><em>Swift</em> - New language by Apple, they <em>specifically</em> ensure that people keep the rights to their contributions. This means Apple are not special. They cannot decide to suddenly switch license if Google decide it to be the new language for Android. There is no self destruct button.</p></li>
<li><p><em>Solaris</em> - When Sun got bought by Oracle a bunch of projects got canned, one of the ways that they were able to do this and to nuke the code was because they owned all the copyrights to every contribution made to the codebases owned by Sun. They closed the source for the entire OS. It was totally within their rights.</p></li>
</ul>


<p><a href="https://news.ycombinator.com/item?id=10669891">Sources</a>, <a href="https://www.youtube.com/watch?v=-zRN7XLCRhc">History of Solaris</a></p>

<h3>Do I need to include a copyright banner on every file?</h3>

<p>No, it's possible that if it's likely that specific files will be used outside of the project ( e.g. your code is not totally atomic ) then it's valuable to note the license multiple times. However as long as a license is shipped with the code then you're good, if that license states something to the effect of “this software and associated documentation files (the "Software")”.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emergence: Code Review]]></title>
    <link href="http://artsy.github.io/blog/2015/11/05/Emergence-Code-Review/"/>
    <updated>2015-11-05T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2015/11/05/Emergence-Code-Review</id>
    <content type="html"><![CDATA[<p>We released the fourth app from the mobile team, <a href="https://github.com/artsy/Emergence/">Emergence</a>, on day one for the new Apple TV and are currently getting around 2k downloads a day. The codebase was created by a single developer, and we didn't want to keep that knowledge siloed. So, I ran an hour long code review session last night where I talked through the codebase, explained why some decisions were made and about the differences between tvOS and UIKit.</p>

<p>Given that I had been asked to write a blog post about tvOS in general, I felt that making the code review public for anyone to watch would be a nice alternative to the usual long-form writing on this blog.</p>

<p>Jump <a href="https://www.youtube.com/watch?v=NErVWhEzIBM">to YouTube</a> for the video, or click more for a smaller inline preview.</p>

<!-- more -->


<p></div></div><iframe width='100%' height='600' src='https://www.youtube.com/embed/NErVWhEzIBM ' frameborder='0' allowfullscreen></iframe><div class='meta-container'><header>&nbsp;</header></div><div class='content-container'><div class='entry-content'></p>
]]></content>
  </entry>
  
</feed>
