<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2015-01-21T15:59:56-05:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[Artsy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[We open sourced our Isomorphic Javascript website]]></title>
    <link href="http://artsy.github.io/blog/2014/09/05/we-open-sourced-our-isomorphic-javascript-website/"/>
    <updated>2014-09-05T15:09:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/09/05/we-open-sourced-our-isomorphic-javascript-website</id>
    <content type="html"><![CDATA[<p><img src="/images/2014-09-05-we-open-sourced-our-isomorphic-javascript-website/force.png" alt="May The Force be With You" /></p>

<p>Today we're happy to announce we've open sourced the entire Artsy.net web app, <a href="https://github.com/artsy/force-public">Force</a>.</p>

<p>Over the past few months, we've rewritten our web front-end to move off Rails and on to a <a href="http://nodejs.org/">Node.js</a> stack that shares Javascript code and rendering between the server and client, otherwise known as <a href="http://nerds.airbnb.com/isomorphic-JavaScript-future-web-apps/">Isomorphic Javascript</a>. After migrating to this new stack, we open-sourced our boilerplate, <a href="http://ezeljs.com">Ezel</a>, and have now gone a step further and open sourced Artsy.net.</p>

<!-- more -->


<h2>Isomorphic vs Monolithic</h2>

<p>Our transition to an isomorphic Javascript stack has been very successful albeit with some speed bumps. If you're interested in the details we've written <a href="http://artsy.github.io/blog/2013/11/30/rendering-on-the-server-and-client-in-node-dot-js/">a blog post</a>, given a talk at <a href="https://www.joyent.com/developers/videos/node-js-on-the-road-nyc-craig-spaeth-brennan-moore">Node on the Road</a> (slides <a href="http://www.slideshare.net/craigspaeth/artsy-node-on-the-roady-slides">here</a>), and another more extensive talk at <a href="http://www.hakkalabs.co/articles/monolithic-to-distributed-how-artsy-transitioned-from-ruby-on-rails-to-node-js-and-isomorphic-javascript#">this meetup</a>.</p>

<p>The short story is that we moved from a monolithic rails app to a couple of Node servers on Heroku. This vastly improved the performance of our site and our own development speed. Using the patters in Ezel, we are able to tailor assets packages to specific pages and render some of the page on the server. This cut our page-load in half (from 6.5 seconds to under 3 seconds) and our tests take about 5 minutes (down from around 5 hours!) with little reduction in coverage. Performance numbers aside, our real win was dramatically improved development speed due to some architecture decisions we made.</p>

<h2>Modularity</h2>

<p><a href="https://artsy.net/artwork/nathan-sawaya-red-head"><img src="/images/2014-09-05-we-open-sourced-our-isomorphic-javascript-website/sawaya.jpg" alt="Nathan Sawaya, Red Head, 2009" /></a></p>

<p>One of the biggest takeaways from the transition is the pleasure of modularity. By breaking our project up into smaller reusable pieces such as <a href="https://github.com/artsy/ezel#project-vs-apps-vs-components">apps &amp; components</a> we make it easier to experiment, test, and refactor with confidence knowing our code is encapsulated into clearly defined pieces.</p>

<p>For instance, we recently redesigned our <a href="https://artsy.net/about">about</a> page. To gradually introduce the new page, we simply started a new about2 app along side our old about app which you can see <a href="https://github.com/artsy/force-public/tree/0d5a49da08e94a91b3f23c7cd1005c1e83da7ba5/apps">a little back in Force's history</a>. This let us push code into the new about2 app with confidence it wasn't touching other parts of the stack. When it was time to ship it, we simply deleted the old about app folder and search and replaced "about2" to "about". There was no need to dig around various stylesheets, views, etc. folders looking for places where code for the old about page might still live.</p>

<p><a href="https://github.com/artsy/ezel#components">Components</a> are particularly useful for re-usability. For instance building <a href="https://artsy.net/gene/abstract-expressionism">this gene page</a> (source code <a href="https://github.com/artsy/force-public/tree/master/apps/gene">here</a>) was mostly a matter of pulling in various components like a <a href="https://github.com/artsy/force-public/tree/master/components/follow_button">follow button</a>, a <a href="https://github.com/artsy/force-public/tree/master/components/filter">filter</a> component, this <a href="https://github.com/artsy/force-public/tree/master/components/artist_fillwidth_list">artist fill-width layout</a>, etc. Because the CSS for those components are clearly self-contained it's easy to build up a small asset package that uses only the minimal CSS needed which you can see <a href="https://github.com/artsy/force-public/blob/master/assets/gene.styl">here</a>.</p>

<p>We're so convinced this encapsulation is important that we've updated Ezel to <a href="https://github.com/artsy/ezel/tree/master/src/js-example/apps/commits/public/images">use app/component-level public folders</a> by default so you can even modularize static assets, like images, and keep them coupled with their respective apps/components.</p>

<h2>Open Source by Default</h2>

<p><img src="/images/2014-09-05-we-open-sourced-our-isomorphic-javascript-website/octocat.jpg" alt="Ocotcat" /></p>

<p>Even though Force isn't a library, we have open-soured many of its components and libraries. Before open sourcing Force, we open sourced app-specific modules such as <a href="https://github.com/artsy/artsy-backbone-mixins">these backbone mixins</a> <a href="https://github.com/artsy/artsy-passport">this Artsy API authentication library</a>, or <a href="https://github.com/artsy/backbone-cache-sync">this module</a> we use to cache server-side Backbone requests.</p>

<p>Open-sourcing Force was pretty straightforward but we needed to make our sensitive keys/secrets private while not complicating development. To do this we wrote a .env file and uploaded it as a private gist that gets downloaded when setting up the app. We wanted to spread this open-source-by-default culture so we decided to update Ezel's configuration to be able to use a .env file in this way as well. This makes it easy keep your sensitive configuration data private while allowing the rest of your app code to be open source. You can read more about this in Ezel's <a href="https://github.com/artsy/ezel#build-scripts--configuration">Build Scripts &amp; Configuration docs</a>.</p>

<h2>Spreading The Love</h2>

<p>Force serves as an example of how we structured a large <a href="http://ezeljs.com">Ezel</a> project and contains the full commit history of its construction. Unfortunately, due to image licensing issues, we cannot open up the Artsy API and therefore this repository can't serve as a runnable clone of our website. However, we will continue to merge our production code into it. If you have any questions feel free to hit us up on twitter: <a href="https://twitter.com/craigspaeth">@craigspaeth</a>, <a href="https://twitter.com/dzucconi">@dzucconi</a>, <a href="https://twitter.com/zamiang">@zamiang</a>.</p>

<p>We're excited to continue pushing open source at Artsy. For more exciting open source projects take a look at <a href="https://github.com/artsy">our Github profile</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rendering on the Server and Client in Node.js]]></title>
    <link href="http://artsy.github.io/blog/2013/11/30/rendering-on-the-server-and-client-in-node-dot-js/"/>
    <updated>2013-11-30T22:38:00-05:00</updated>
    <id>http://artsy.github.io/blog/2013/11/30/rendering-on-the-server-and-client-in-node-dot-js</id>
    <content type="html"><![CDATA[<p><img src="/images/2013-12-18-rendering-on-the-server-and-client-in-node-dot-js/isomorphic.png" alt="Diagram of Shared Server/Client Architecture" /></p>

<p>At Artsy we've been building <a href="http://nodejs.org/">Node.js</a> applications that share code and rendering between the server and browser. We've seen many benefits from this -- pages load faster, we can optimize SEO, developers are more productive, and JavaScript coding is just an overall better experience.</p>

<p>Today we're happy to announce <a href="http://ezeljs.com/">Ezel</a>, our open source boilerplate we use to bootstrap our Node projects and the <a href="https://github.com/artsy/benv">various</a> <a href="https://github.com/artsy/backbone-super-sync">node</a> <a href="https://github.com/artsy/sharify">modules</a> that built up to it.</p>

<p>In his article, <a href="http://nerds.airbnb.com/isomorphic-JavaScript-future-web-apps/"><em>Isomorphic JavaScript: The Future of Web Apps</em></a>, Spike Brehm from AirBnB describes this growing trend well and we're excited to be a part of it. In this article I'll tell Artsy's story of moving from a single monolithic application to modular <a href="http://backbonejs.org/">Backbone</a> apps that run in Node and the browser and consume our external API.</p>

<!-- more -->


<h2>Growing Pains</h2>

<p><img src="/images/2013-12-18-rendering-on-the-server-and-client-in-node-dot-js/rails-evolution.png" alt="Evolution of Artsy SOA Diagramm" /></p>

<p>Artsy started as a mostly standard <a href="http://rubyonrails.org/">Rails</a> app almost three years ago. In these beginnings we were wildly productive and owe a lot of props to this great framework. However as time went on we started to deviate from the conventional Rails path until we were hardly leveraging much Rails at all. To support an early iOS app we used <a href="https://github.com/intridea/grape">Grape</a> to build an API. While building our API we wrote a lot of client-side JavaScript and soon integrated <a href="http://backbonejs.org/">Backbone</a> for organization. Eventually we cleanly separated our project into a single page Backbone app talking to our API all on inside of this original repository.</p>

<p>We knew we were outgrowing this monolithic project because we had some clear problems...</p>

<ul>
<li>Slow initial page loads because of lacking server-side rendering. Twitter <a href="https://blog.twitter.com/2012/improving-performance-twittercom">describes this problem well</a>.</li>
<li>Slow following client-side renders because of downloading large asset packages without clear ways to break them up.</li>
<li>SEO issues like building <a href="https://developers.google.com/webmasters/ajax-crawling/docs/specification">escaped fragment</a> pages in Ruby on the server while our users saw what JavaScript rendered on the client.</li>
<li>Maintaining duplicated Ruby/JavaScript code such as templates, date libraries, etc.</li>
<li>Very slow and brittle tests. We had a massive integration test suite consisting of over 3000 <a href="https://github.com/jnicklas/capybara">Capybara</a> tests that took hours to run because we lacked good JavaScript testing tools.</li>
<li>Poor mobile experience from trying to responsively scale down a large single page app with bloated and unused assets.</li>
<li>Slow asset compilation, server boot, and general build times. Productivity suffered greatly as more code was added to the same monolithic project.</li>
</ul>


<h2>There's Got to Be a Better Way</h2>

<p>A monolithic app that treats it's client-side code as a second class citizen was clearly not going to scale. Our poor mobile web experience was a good candidate to try something new. So we started building a separate mobile optimized website (m.artsy.net).</p>

<p>Some goals became clear:</p>

<ul>
<li>Better client-side tools from JavaScript testing to package managers.</li>
<li>Share rendering code server/client to reduce duplication and optimize initial page load.</li>
<li>Flexibility. We needed a way to divide our app into smaller chunks with smaller asset packages.</li>
</ul>


<h2>Choosing Technology</h2>

<p><img src="/images/2013-12-18-rendering-on-the-server-and-client-in-node-dot-js/tech.png" alt="Logos of Browserify, Express, and Backbone" /></p>

<p>Node was a clear choice because it made sharing rendering code server/client possible where other languages and frameworks struggle to do so. There were some existing Node projects that accomplish this such as <a href="http://derbyjs.com/">Derby</a> and <a href="https://github.com/airbnb/rendr">Rendr</a>. However, adopting these had challenges of their own including being difficult to integrate with our API, learning unnecessary conventions, or being early prototypes with lacking documentation.</p>

<p>We wanted an approach that breaks our app into smaller, more flexible, pieces. Not all of Artsy needs to be a thick-client app, or even use much client-side JavaScript at all. Adopting an existing solution and combining most of the server and client into a shared abstraction seemed like an unnecessary black box. After trying many other frameworks we found a combination of lower-level tools to be a clear winner.</p>

<p>We open sourced this combination of tools and patterns into <a href="http://ezeljs.com/">Ezel</a>. Ezel is a light-weight boilerplate project using <a href="http://expressjs.com/">Express</a> and <a href="http://backbonejs.org/">Backbone</a> for structure, and <a href="http://browserify.org/">Browserify</a> to compose modules that can be shared server/client.</p>

<h2>Sharing and Rendering Server/Client</h2>

<p><img src="/images/2013-12-18-rendering-on-the-server-and-client-in-node-dot-js/rendering.png" alt="Diagram of Server + Client Render" /></p>

<p>To share rendering code server/client we had to make sure our templates and objects being passed in to them could work the same server/client.</p>

<h3>Sharing Objects (Backbone Models)</h3>

<p><a href="http://browserify.org/">Browserify</a> lets you write modules that can run in Node or the browser. Since Backbone is able to be required on the server out of the box, it's easy to write models and collections that can be required on both sides with Browserify. However, there are two main speed bumps in doing this:</p>

<ol>
<li><p>Backbone uses AJAX for persistence.</p>

<p>We needed a Backbone.sync adapter that makes HTTP requests server-side, so we wrote one and <a href="https://github.com/artsy/backbone-super-sync">it's open sourced.</a></p></li>
<li><p>Data from the server needed to be shared in modules that are used server/client.</p>

<p>For instance, our API is an external URL stored in an environment variable. We needed to use this variable in a module that will be required on the server and the client with Browserify. <a href="http://backbonejs.org/#FAQ-bootstrap">Bootstrapping data</a> is a common technique to share data from the server by embedding JavaScript in the initial HTML and exposing that data globally to the client. To avoid exposing globals we open sourced a tiny module called <a href="https://github.com/artsy/sharify">sharify</a>.</p></li>
</ol>


<h3>Sharing Templates</h3>

<p>Browserify even lets you share non-JavaScript components server/client using <a href="https://github.com/substack/node-browserify#list-of-source-transforms">transforms</a>. To reuse our <a href="http://jade-lang.com/">jade</a> templates server/client it was a simple matter of using the <a href="https://github.com/OliverJAsh/node-jadeify2">jadeify</a> transform.</p>

<h3>All Together Now</h3>

<p>With templates and models require-able server/client, sharing rendering code became much simpler. Below is an example using the same artwork model and detail template server/client.</p>

<p>Shared Backbone "Artwork" model to be required server/client:</p>

<p>``` javascript models/artwork.js
var Backbone = require('backbone'),
    API_URL = require('sharify').data.API_URL;</p>

<p>module.exports = Artwork = Backbone.Model.extend({</p>

<p>  url: API_URL + '/api/v1/artwork'</p>

<p>});
```</p>

<p>Shared partial jade template used server/client:</p>

<p><code>jade templates/artwork-details.jade
h1= artwork.get('artist').name
h2= artwork.get('title')
</code></p>

<p>Full server-side page template including the partial:</p>

<p><code>jade templates/artwork-page.jade
doctype 5
html
  head
    title Artsy | #{artwork.get('title')}
  body
    include artwork-details
    != sharify.script()
</code></p>

<p>Route handler that uses the model server-side:</p>

<p>``` javascript app.js
//...
var Artwork = require('models/artwork.js');</p>

<p>app.get('/artwork/:id', function(req, res) {
  new Artwork({ id: req.params.id }).fetch({
    success: function(artwork) {
      // Boostrap artwork data into sharify
      res.locals.sharify.data.ARTWORK_JSON = artwork.toJSON();
      res.render('artwork-page', { artwork: artwork });
    }
  });
});
```</p>

<p>Client side code that requires the partial template and model:</p>

<p>``` javascript client.js
var Artwork = require('models/artwork.js'),
    ARTWORK_JSON = require('sharify').data.ARTWORK_JSON,
    detailsTemplate = require('templates/artwork-details.jade');</p>

<p>var artwork = new Artwork(ARTWORK_JSON);
artwork.on('change', function() {
  $('body').html(detailsTemplate({ artwork: artwork }));
});
```</p>

<h2>Developer Happiness</h2>

<p><img src="/images/2013-12-18-rendering-on-the-server-and-client-in-node-dot-js/so-much-win.png" alt="Happy Developer Image" /></p>

<p>Not only does sharing code server/client let you easily optimize page rendering for fast page loads, but development becomes a lot nicer because we can reuse server-side JavaScript tools including...</p>

<h3>Package Managers</h3>

<p>With Browserify we were able to use npm as a package manager for server or client-side dependencies. There are <a href="http://bower.io/">other</a> <a href="http://component.io/">package</a> <a href="http://jamjs.org/">managers</a> for the client-side. However, because we were already using npm (and npm supports git urls), we could usually point to the project hosted on npm or Github without having to fork it.</p>

<p>For projects that don't support CommonJS modules (or npm), often one can still use npm and requires like so:</p>

<p><code>json
"devDependencies": {
  "zepto": "git://github.com/madrobby/zepto.git#c074a94f0f26dc946f1c501f5f45d603adada44d"
}
</code></p>

<p><code>javascript client.js
// Require the base Zepto library (attaches `Zepto` to window)
require('zepto/src/zepto.js');
// Attach Zepto's plugins
require('zepto/src/event.js');
require('zepto/src/detect.js');
// ....
</code></p>

<h3>Testing</h3>

<p>Testing is light-years ahead because you can test all of your code in Node headless. I wrote <a href="/blog/2013/06/14/writing-headless-backbone-tests-with-node-dot-js/">an article</a> on this a while back, and now with Browserify it's even better.</p>

<p>Models, templates, and other modules that are shared server/client can be required into <a href="http://visionmedia.github.io/mocha/">mocha</a> and tested server-side without extra effort. For more view-like client-side code that depends on DOM APIs, pre-rendered HTML, etc., we open sourced a library called <a href="https://github.com/craigspaeth/benv">benv</a> to help build a fake browser environment in Node for testing.</p>

<h3>Modularity</h3>

<p>We wanted to avoid a monolithic organization that groups code by type such as "stylesheets", "javascripts", "controllers", etc.. Not only is this a maintenance problem as it makes boundaries of your app unclear, but it also affects your users because it encourages grouping assets into large monolithic packages that take a long time to download.</p>

<p>Instead, we borrowed a page from <a href="http://stackoverflow.com/questions/2472984/django-and-project-application-organization">Django</a> and broke up our project into smaller conceptual pieces called "apps" (small express sub-applications mounted into the main project) and "components" (portions of reusable UI such as a modal widget). This let us easily maintain decoupled segments of our project and build up smaller asset packages through Browserify's <code>require</code>s and <a href="http://learnboost.github.io/stylus/docs/import.html">Stylus</a>' <code>import</code>s. For more details on how this is done please check out <a href="http://ezeljs.com/">Ezel</a>, its <a href="https://github.com/artsy/ezel#project-vs-apps-vs-components">organization</a>, and <a href="https://github.com/artsy/ezel#asset-pipeline">asset pipeline</a> docs.</p>

<p>It's also worth noting, to avoid CSS spaghetti we followed a simple convention of name-spacing all of our classes/ids by the app or component name it was a part of. This was inspired by a <a href="http://philipwalton.com/articles/css-architecture/">blog post from Philip Walton</a>.</p>

<h2>Success!</h2>

<p>With this new architecture and set of Node tools we've seen enormous benefits compared to the pains of developing Backbone in a monolithic project with lacking JavaScript tools. Our mobile web experience is much better, we can render more content on the server for SEO and faster page loads, our test/build/deploy cycles went from hours to minutes, our developer on-boarding time went from days to minutes, and overall developer happiness has significantly improved.</p>

<p>It's an exciting time to be developing JavaScript apps and we will continue to open source our efforts wherever possible. Thanks and <a href="https://github.com/artsy">follow us on Github</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The perils of iOS user agent strings]]></title>
    <link href="http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/"/>
    <updated>2012-10-18T15:19:00-04:00</updated>
    <id>http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing</id>
    <content type="html"><![CDATA[<p>There is a great deal of misinformation on the web about detecting an
iPad or an iPhone in JavaScript. The
<a href="http://stackoverflow.com/a/4617648">top answer on stackoverflow</a> -
and many <a href="http://www.sitepoint.com/identify-apple-iphone-ipod-ipad-visitors/">blog posts</a> using <a href="http://www.askdavetaylor.com/detect_apple_iphone_user_web_site_server.html">this technique</a> - are all incorrect.</p>

<p>The conventional wisdom is that iOS devices have a user agent for
Safari and a user agent for the UIWebView. This assumption is
incorrect as iOS apps can and do
<a href="http://stackoverflow.com/a/8666438">customize their user agent</a>. The
main offender here is Facebook, whose iOS app alone accounts for about
1-3% of Artsy's daily traffic.</p>

<p>Compare these user agent strings from iOS devices:
```</p>

<h1>iOS Safari</h1>

<p>iPad: Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3
iPhone: Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3</p>

<h1>UIWebView</h1>

<p>iPad: Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/98176
iPhone: Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_1 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Mobile/8B117</p>

<h1>Facebook UIWebView</h1>

<p>iPad: Mozilla/5.0 (iPad; U; CPU iPhone OS 5_1_1 like Mac OS X; en_US) AppleWebKit (KHTML, like Gecko) Mobile [FBAN/FBForIPhone;FBAV/4.1.1;FBBV/4110.0;FBDV/iPad2,1;FBMD/iPad;FBSN/iPhone OS;FBSV/5.1.1;FBSS/1; FBCR/;FBID/tablet;FBLC/en_US;FBSF/1.0]
iPhone: Mozilla/5.0 (iPhone; U; CPU iPhone OS 5_1_1 like Mac OS X; ru_RU) AppleWebKit (KHTML, like Gecko) Mobile [FBAN/FBForIPhone;FBAV/4.1;FBBV/4100.0;FBDV/iPhone3,1;FBMD/iPhone;FBSN/iPhone OS;FBSV/5.1.1;FBSS/2; tablet;FBLC/en_US]
```</p>

<!-- more -->


<p>The old way to identify iPhone / iPad in JavaScript:
<code>javascript
IS_IPAD = navigator.userAgent.match(/iPad/i) != null;
IS_IPHONE = navigator.userAgent.match(/iPhone/i) != null) || (navigator.userAgent.match(/iPod/i) != null);
</code></p>

<p>If you were to go with this approach for detecting iPhone and iPad,
you would end up with IS_IPHONE <em>and</em> IS_IPAD both being true if a user
comes from Facebook on an iPad. That could create some odd behavior!</p>

<p>The correct way to identify iPhone / iPad in JavaScript:
<code>javascript
IS_IPAD = navigator.userAgent.match(/iPad/i) != null;
IS_IPHONE = (navigator.userAgent.match(/iPhone/i) != null) || (navigator.userAgent.match(/iPod/i) != null);
if (IS_IPAD) {
  IS_IPHONE = false;
}
</code></p>

<p>We simply declare <code>IS_IPHONE</code> to be <code>false</code> on iPads to cover for the
bizarre Facebook UIWebView iPad user agent. This is one example of how
<em>user agent sniffing is unreliable</em>. The more iOS apps that customize
their user agent, the more issues user agent sniffing will have. If
you can avoid user agent sniffing (hint: CSS Media Queries), DO
IT.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So you want to do a CSS3 3D transform?]]></title>
    <link href="http://artsy.github.io/blog/2012/10/18/so-you-want-to-do-a-css3-3d-transform/"/>
    <updated>2012-10-18T00:00:00-04:00</updated>
    <id>http://artsy.github.io/blog/2012/10/18/so-you-want-to-do-a-css3-3d-transform</id>
    <content type="html"><![CDATA[<p>This post details the first of many challenges we faced in 3D
transforming the <a href="http://artsy.net">homepage of Artsy</a> (inspired by
<a href="https://github.com/hakimel/meny">Meny</a>): detecting CSS 3D transform
support.</p>

<p>Front-end development is messy in today's fragmented world. At Artsy,
our goal is to do what it takes to provide an incredible experience
for <em>all</em> of our users (IE8+, iOS and the usual suspects). Deploying
bleeding edge tech, like CSS 3D transforms, is an exercise in
compromising principals for practicality -- and managing these
"compromises" in well-documented code.</p>

<p>We looked to <a href="http://modernizr.com/">Modernizr's</a> feature detection approach to provide us with
a reliable way to detect CSS3 3D transform support across browsers. They have some
<a href="https://github.com/Modernizr/Modernizr/issues/590">well</a>-
<a href="https://github.com/Modernizr/Modernizr/issues/465">documented</a>
<a href="https://github.com/Modernizr/Modernizr/issues/240">struggles</a> around
the issue. After flipping most of the tables in the office ┻━┻ ︵ヽ
(`Д´)ﾉ︵﻿ ┻━┻ , we settled on user agent sniffing as the most robust
method for detecting CSS3 3D transform support. But why did none
of the available methods work for us?</p>

<!-- more -->


<p>CSS3 3D transforms involve interaction between the browser and the
graphics card. The browser may be able to parse the 3D declarations
but may not be able to properly instruct the graphics card in how to
render your page. There are many possible outcomes ranging from the
page rendering with lines across it (Safari 4) to the page rendering
beautifully then crashing the browser seconds later (Safari on
iOS4). Any 'feature detection' approach would unacceptably flag these
as 'supports CSS3 3D transforms'. This is one case where 'feature
detection' fails and user agent sniffing (and lots of testing) wins
hands down.</p>

<p>Most feature detection assumes a "supports" or "does not support"
binary. This is not the case with CSS3 3D transforms -- there is a
"gradient of support". Additionally, enabling 3D transforms causes the
page to be re-rendered in an entirely different rendering engine which
then causes other problems (more on this in a later post).</p>

<p>CSS3 3D transform support can be separated into 4 levels:</p>

<ol>
<li>Reliably supports 3D transforms across most machines. For example:
Safari 6.</li>
<li>Can parse and apply 3D transform declarations but ignores the 3D
parts. For example: Chrome on a Retina MacBook Pro.</li>
<li>Can parse and apply 3D transform declarations but renders in
unacceptable ways. For example: Safari 4 and Safari 4/5 on Windows
show lines across the page.</li>
<li>Cannot apply 3D transform declarations in any way. For example:
IE or Firefox &lt; v10.</li>
</ol>


<p>Here are a few popular ways of detecting CSS3 3D transform support and why
they don't work for us:</p>

<p><em>Meny / Hakim's method</em></p>

<p>```coffeescript</p>

<h1>apply these styles to the body in css then see if they are applied in JS</h1>

<p>docStyle = document.body.style
supports3DTransforms =  'WebkitPerspective' in docStyle or
                        'MozPerspective' in docStyle or
                        'msPerspective' in docStyle or
                        'OPerspective' in docStyle or
                        'perspective' in docStyle
```
This works best and is straightforward code. The only
issue is that it throws a positive for iOS4 causing the browser to
crash and a positive for Safari on Windows and Safari 4 OSX which both
display a grid over the page when using the 3D renderer.</p>

<p><em>iScroll4 method</em></p>

<p><code>coffeescript
has3D = -&gt; 'WebKitCSSMatrix' in window &amp;&amp; 'm11' in new WebKitCSSMatrix()
</code>
This only works reliably Safari in our testing.</p>

<p><em>Modernizer method</em></p>

<p><code>coffeescript
ret = !!testPropsAll('perspective')
if ( ret and 'webkitPerspective' in docElement.style )
  # create a dib and see if it moves
  injectElementWithStyles('@media (transform-3D), (-webkit-transform-3D){#modernizr{left:9px;position:absolute;height:3px;}}', (node, rule) -&gt;
    ret = node.offsetLeft === 9 &amp;&amp; node.offsetHeight === 3;
</code></p>

<p>This creates a div, transforms it, and then checks if it's position
has changed as expected. It only works in reliably in Safari.
It <a href="https://github.com/Modernizr/Modernizr/issues/590">sometimes works in Chrome</a>
but throws a false positive in the case of Chrome on Retina MacBook
Pro as the element does move -- just not in 3D space.</p>

<p><em>User Agent method</em></p>

<p>We want to maintain wide support of new tech while ensuring all users
have a great experience. Modernizr and the feature detection group
have their heart in the right place and do a great job most of the
time. That said, user agent sniffing is the only way to handle the
complex support scenarios inherent in bleeding edge CSS3 tech such as
3D transforms.</p>

<p>Here is our method/hack for identifying browsers that support CSS3 3D
transforms well:</p>

<p>```coffeescript
(->
  docElement = document.documentElement
  uagent = navigator.userAgent.toLowerCase()</p>

<p>  browsers = [
    ['webkit',  530]        # not well supported in Safari 4, Safari 5 webkit version is 530.17
    ['chrome',  12]
    ['mozilla', 10]
    ['opera',   Infinity]   # not supported
    ['msie',    Infinity] ] # not supported</p>

<p>  # From: http://api.jquery.com/jQuery.browser
  uaMatch = (ua) ->
    match =
      /(chrome)<a href="[\w.]+"> \/</a>/.exec(ua) or
      /(webkit)<a href="[\w.]+"> \/</a>/.exec(ua) or
      /(opera)(?:.<em>version|)<a href="[\w.]+"> \/</a>/.exec(ua) or
      /(msie) ([\w.]+)/.exec(ua) or
      ua.indexOf("compatible") &lt; 0 and /(mozilla)(?:.</em>? rv:([\w.]+)|)/.exec( ua ) or
      []
    { browser: (match[ 1 ] or ""), version: (match[2]?.split('.')[0] or 0) }</p>

<p>  addNo3DTransform = ->
    docElement.className = docElement.className.replace 'csstransforms3D', ''
    docElement.className += ' no-csstransforms3D'</p>

<p>  add3DTransform = ->
    docElement.className = docElement.className.replace 'no-csstransforms3D', ''
    docElement.className += ' csstransforms3D'</p>

<p>  # default to no CSS3 3D transform support
  addNo3DTransform()</p>

<p>  match = uaMatch uagent
  for browser in browsers
    if browser[0] == match.browser
      if match.version >= browser[1]
        add3DTransform()
      else
        addNo3DTransform()
      break</p>

<p>  IS_IPHONE = uagent.search('iphone') > -1 or uagent.search('ipod') > -1
  IS_IPAD = uagent.search('ipad') > -1
  IS_IOS = IS_IPHONE or IS_IPAD</p>

<p>  # iOS 6 is our support cut off for iPad
  match = /\os ([0-9]+)/.exec uagent
  IS_LT_IOS6 = match and match[1] and Number(match[1]) &lt; 6</p>

<p>  # 3D transforms are supported but do not work well on iPhone
  if IS_IPHONE
    addNo3DTransform()</p>

<p>  # disable 3D transform for older versions of Safari on iPad
  else if IS_IPAD and IS_LT_IOS6
    addNo3DTransform()</p>

<p>  # deactivate 3D transform for Safari on Windows
  else if navigator.userAgent.search('Safari') > -1 and navigator.userAgent.search('Windows') > -1
    addNo3DTransform()
)()
```</p>

<p>If you would like to take issue with or improve this code please check
it out <a href="https://github.com/zamiang/detect-css3-3D-transform">on Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing #! Routes with PushState Using Backbone.js]]></title>
    <link href="http://artsy.github.io/blog/2012/06/25/replacing-hashbang-routes-with-pushstate/"/>
    <updated>2012-06-25T11:35:00-04:00</updated>
    <id>http://artsy.github.io/blog/2012/06/25/replacing-hashbang-routes-with-pushstate</id>
    <content type="html"><![CDATA[<blockquote><p>The only constant is change, continuing change, inevitable change, that is the dominant factor in society
[and web apps!] today. No sensible decision can be made any longer without taking into account not only
the world as it is, but the world as it will be.</p>

<p>&ndash; Isaac Asimov</p></blockquote>

<h2>R.I.P #!</h2>

<p>It did not take us long to discover we shared the concerns of Twitter's
<a href="http://danwebb.net/2011/5/28/it-is-about-the-hashbangs">Dan Webb on hashbang routes</a>,
but it was almost a year before we were able to remove them from Artsy. Here's how it went down.</p>

<p>Artsy relies on the <a href="http://documentcloud.github.com/backbone/">Backbone.js</a> framework for our client application
which offers a solid pushState routing scheme. This includes a seamless hashtag fallback for
<a href="http://caniuse.com/#feat=history">browsers that don't support the HTML5 History API</a> (looking at you IE 9).</p>

<p>The pushState routing is optional, but <em>"the world as it should be"</em> suggests we say "Yes!" (or true) to pushState.
<code>coffeescript
Backbone.history.start({ pushState: true })
</code></p>

<!-- more -->


<h3>The Client</h3>

<p>At Artsy, we had left Backbone out of the loop for most of our internal linking. Our markup href attributes all
began with '/#!' and expected the browser's default hash behavior to keep the page from refreshing. For a proper
pushState scheme, the app's internal linking should begin with an absolute route. Backbone.js defaults to '/', but
this is configurable.
```coffeescript</p>

<h1>Optional root attribute defaults to '/'</h1>

<p>Backbone.history.start
  pushState: true
  root: "/specialized/client/"
```</p>

<h4>Internal Links</h4>

<p>All internal links need to begin with your configured root ('/' for Artsy).
Be sure to leave out your domain (<del>http://artsy.net</del>).
```html
<a href="http://artsy.github.io/">Home</a></p>

<p><a href="http://artsy.github.io/artwork/matthew-abbott-lobby-and-supercomputer">My Favorite Work</a>
```</p>

<p>We now needed a global link handler that will leverage Backbone's <code>navigate</code> method which takes
care of updating the URL and avoiding a page refresh or alternatively wiring up the hashtag fallback.
Since we follow the convention of starting all <code>href</code> attributes with our application's root, we
can match on that in our selector to get all anchors whose link begins with our root, <code>a[href^='/']</code>.
This link handler is a great place to ensure backward compatibility while #!s are removed from
internal links.</p>

<p>```coffeescript</p>

<h1>Globally capture clicks. If they are internal and not in the pass</h1>

<h1>through list, route them through Backbone's navigate method.</h1>

<p>$(document).on "click", "a[href^='/']", (event) -></p>

<p>  href = $(event.currentTarget).attr('href')</p>

<p>  # chain 'or's for other black list routes
  passThrough = href.indexOf('sign_out') >= 0</p>

<p>  # Allow shift+click for new tabs, etc.
  if !passThrough &amp;&amp; !event.altKey &amp;&amp; !event.ctrlKey &amp;&amp; !event.metaKey &amp;&amp; !event.shiftKey
    event.preventDefault()</p>

<pre><code># Remove leading slashes and hash bangs (backward compatablility)
url = href.replace(/^\//,'').replace('\#\!\/','')

# Instruct Backbone to trigger routing events
App.router.navigate url, { trigger: true }

return false
</code></pre>

<pre><code>Thank you TenFarms for the excellent write up on [proper link handling for pushState enabled browsers](http://dev.tenfarms.com/posts/proper-link-handling).

#### External Links
The application will need a small check early in the initialization process to redirect external
links still expecting the #! routing scheme.
```coffeescript
# Our Backbone App namespace
window.App =
  # Namespace Backbone components
  Models: {}
  Collections: {}
  Views: {}
  redirectHashBang: -&gt;
    window.location = window.location.hash.substring(2)

# DOM is ready, are we routing a #!?
$ -&gt;
  if window.location.hash.indexOf('!') &gt; -1
    return App.redirectHashBang()
  # else... continue on with initialization
</code></pre>

<h3>The Server</h3>

<p>Now that our app will receive requests to full URLs
'https://artsy.net/artwork/mattew-abbott-lobby-and-supercomputer'
instead of 'https://artsy.net/#!/artwork/mattew-abbott-lobby-and-supercomputer',
we need to update our Rails setup.</p>

<p>Below is an excerpt from our Rails application's router.
Note references to our home and artworks controllers. Both use a <code>before</code> filter
to determine a user's authentication state and serve a different layout, with
unique assets or Backbone applications.</p>

<p>Controllers related to specific models now have the opportunity to
bootstrap associated JSON or mark up and we now get expected 404 (file not found)
error behavior without extra work required by a hash routing scheme.</p>

<p>```ruby</p>

<h1>Server - Rails</h1>

<p>Application.routes.draw do</p>

<p>  root :to => "home#index"</p>

<p>  # Controller logic determines the layout and could bootstrap data
  resources :artworks, path: "artwork", only: :show</p>

<p>  # Plural to singular redirect - mistakes happen!
  get "/artworks/:id" => redirect('/artwork/%{id}')</p>

<p>  # No match? Rails handles routing the 404 error.</p>

<p>end
```</p>

<p>An added bonus here is a near one to one mapping with the Rails and client routes.</p>

<p>```coffeescript</p>

<h1>Backbone.js - Client</h1>

<p>class App.Routers.Client extends Backbone.Router</p>

<p>  routes:
    ''            : 'home'
    'artwork/:id' : 'artwork'
    'artworks/:id': 'redirectToArtwork'
```</p>

<h2>URLs R 4 Ever</h2>

<p>Dan Webb's assertion that <a href="http://danwebb.net/2011/5/28/it-is-about-the-hashbangs">URLs are forever</a> is correct,
but so is Isaac Asimov's statement on change. You can't predict the future.
You make decisions based on the best data you have at the time. We started our app with hashtag routing
in early 2011 and added the ! around five months later (about the same time Dan Webb wrote his post).
Had we started Artsy today, even six months ago, I'm confident we would have enabled Backbone's pushState routing.
There's no need to look back. The future is here and its URLs are #! free!</p>

<h3>Footnotes</h3>

<ul>
<li><a href="http://documentcloud.github.com/backbone">Backbone.js</a></li>
<li><a href="https://developers.google.com/webmasters/ajax-crawling/docs/getting-started">Google offers #! to aid the crawlability of AJAX hash routed applications</a></li>
<li><a href="http://caniuse.com/#feat=history">Browser support for the HTML5 History API (aka pushState)</a></li>
<li><a href="http://www.adequatelygood.com/2011/2/Thoughts-on-the-Hashbang">Twitter advocates #!</a></li>
<li><a href="http://danwebb.net/2011/5/28/it-is-about-the-hashbangs">Dan Webb's critique <em>It's About the Hashbangs</em></a></li>
<li><a href="http://engineering.twitter.com/2012/05/improving-performance-on-twittercom.html">Twitter ditches #!</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
