<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: process | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/process/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2020-03-02T19:59:31+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What I Learned Having a Coffee with Every Engineer]]></title>
    <link href="http://artsy.github.io/blog/2019/04/19/having-a-coffee-with-every-engineer/"/>
    <updated>2019-04-19T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2019/04/19/having-a-coffee-with-every-engineer</id>
    <content type="html"><![CDATA[<p>In early 2018, I was set to begin my fifth year working at Artsy. Something about my imminent Artsyversary had me
thinking about my role within the Engineering team. Not my role as an engineer <em>per se</em>, but my role as a
<em>colleague</em>. This is the longest I've ever worked for one company, and as Artsy started growing the team last year,
I wanted to <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#leverage-your-impact">leverage my impact</a> as a longtime colleague to help scale its culture.</p>

<p>Artsy collects quarterly, anonymous, company-wide surveys through <a href="https://www.cultureamp.com">Culture Amp</a> to determine how everyone is
doing. These are great for answering quantitative questions about the team, like "how engaged are we on average?",
and I always check out the breakdown of answers in the Engineering team. But there's something unsatisfying about
these reports â€“ they're super-valuable, but they feel impersonal to me.</p>

<p>If I wanted to leverage my impact, I needed to play to my strengths and interests. I'm keenly interested in people
â€“ as individuals â€“ so I decided that the best way for me to contribute to the team was to get to know everyone as
individuals. To become someone the team could talk to. Someone outside the typical manager/employee structure, who
could use their history at Artsy to answer questions (or at least point them in the right direction).</p>

<p>So, I set off on a project to meet with every member of Artsy's Engineering team for a one-on-one. With no explicit
goals or expectations, but in line with Artsy's <a href="https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#people-are-paramount">People are Paramount</a> value, I got to know my colleagues
better.</p>

<!-- more -->


<p>I didn't want this project to interfere with my product work, so I decided to take things slow. I started with a
list of every Artsy engineer and then removed anyone I already had a close working relationship with. Next, I
prioritized the team leads and randomized the rest of the list. I set up a recurring task (yay OmniFocus) to
schedule a coffee with an engineer every week. When we met, I'd cross them off my list.</p>

<p>That was over a year ago, so what did I learn? Well, a lot, actually! But to get a sense of the impact my project
had, you'll need some context.</p>

<p>2018 was a complex year for Artsy, where we both gained and lost more engineers than usual. The increase in
engineering turnover was generally attributable to what I'll call "cultural churn." Scaling a team comes with new
challenges, and our team leadership tried to meet those challenges with changes to the team's structure. Some of
these changes turned out to be tougher than we'd hoped. Our team is in a great spot <em>now</em>, but we didn't get from
there to here via a straight line.</p>

<p>In the midst of this cultural churn, I was trying to have a one-on-one with every engineer. I was asking
people "hey, how are you doing? Want to grab a coffee?" And that actually had a pretty big impact: if I met someone
and they told me "this situation is stressing me out" or "this feels bad", it was really validating for them to
hear me respond "yeah, I'm feeling this too. It's not just you." This dovetailed with my contemporaneous research
into <a href="https://ashfurrow.com/blog/building-better-software-by-building-better-teams/">building compassionate teams</a>, which I leveraged throughout this project.</p>

<p>Turns out: people feel better when they know the problems they have are shared by others. <em>Sharing</em> suffering is
actually one way to <em>minimize</em> suffering, and minimizing suffering is at the core of my beliefs on compassionate
teams.</p>

<p>Once I knew something was wrong with our team culture, I went to my manager to discuss the broad-strokes themes of
what I was hearing from my peers. I would never betray the confidence of a colleague, but being able to say "lots
of people are all feeling X" provided an important data point. While leadership already knew that <em>something</em> was
not quite right, this data point was a strong indicator that leadership had to intervene quickly. I'll skip the
details of how we ultimately addressed our cultural churn (tl;dr it involved our leaders asking IC's questions, and
then listening to what they had say). I'm quite happy to say that things are a lot better now!</p>

<p>While my "have a one-on-one with everyone" project obviously didn't "fix" the situation, it put me in a position to
<em>help</em> fix it. In addition to getting to know everyone as individuals, I got to help identify and help address our
cultural churn.</p>

<p>So what next? Well, a lot, actually! Even more engineers have since joined Artsy, and I admittedly haven't had a
one-on-one with all of them. But through this project, I realized that I'm very keen to do more of this kind of
people-work. When my manager recently brought up the possibility of becoming a tech lead, <a href="https://ashfurrow.com/blog/reflecting-on-5-years-at-artsy/">I jumped on the
opportunity</a>. I started last week.</p>

<p>My initial goal, to have a coffee with everyone, remains unfulfilled. It probably won't ever be, considering that I
now have even less free time in my new role. I'm not an IC anymore â€“ my one-on-ones have to now be focused on <em>my</em>
team. While the goal of meeting everyone for a one-on-one will never be accomplished, the journey turned out to be
more important.</p>

<p>Important both to me â€“ getting to know my colleagues (and myself!) better â€“ but also important for the team. I got
to help our team's culture scale up, and through that experience, I found and expanded the perimeter of my sphere
of influence as an IC.</p>

<p>I can't thank Artsy enough for giving me the freedom, as an IC, to research team dynamics, to pursue this project,
and for taking all my feedback seriously. If you're a senior engineer wondering what's next, try turning your
attention to your team. I would bet that you'll learning something worthwhile.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why we added an RFC process to Artsy]]></title>
    <link href="http://artsy.github.io/blog/2019/04/11/on-an-rfcs-process/"/>
    <updated>2019-04-11T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2019/04/11/on-an-rfcs-process</id>
    <content type="html"><![CDATA[<p>Growth is tricky. Whether in terms of raw headcount or people's evolving career stages. As a team you want to
provide ways in which members can experiment with new ideas, and provide tools to help them offer new perspectives.
One of our greatest tools for instituting change at Artsy is our RFC process.</p>

<p>An RFC is a Request For Comments, and it is a structured document (in the form of GitHub issue normally) which
offers a change to something. The format is used in large open source projects like: React
(<a href="https://github.com/reactjs/rfcs/blob/master/README.md">Overview</a>,
<a href="https://github.com/reactjs/rfcs/blob/master/0000-template.md">Template</a>), Swift
(<a href="https://github.com/apple/swift-evolution/blob/master/process.md#how-to-propose-a-change">Overview</a>,
<a href="https://github.com/apple/swift-evolution/blob/master/0000-template.md">Template</a>) and Rust
(<a href="https://github.com/rust-lang/rfcs#rust-rfcs">Overview</a>,
<a href="https://github.com/rust-lang/rfcs/blob/master/0000-template.md">Template</a>). To give core &amp; non-core contributors a
chance to propose an idea to everyone before implementing a change.</p>

<p>We <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#own-your-dependencies">took</a> this idea and applied to the process of making any cultural change in the company. Read on to find out
why we needed it, how we refined it, some of the tooling we built around it, and what other options are available.</p>

<!-- more -->


<a name="Why.did.we.create.an.RFC.process."></a>
<h2>Why did we create an RFC process?</h2>

<p>We created the RFC process in parallel with <a href="https://github.com/danger/peril">Peril</a> being <a href="/blog/2017/09/04/Introducing-Peril/">introduced at Artsy</a>. Prior to
Peril, most changes to culture were localised in different teams. However, once Peril gave us the ability to create
cultural rules across all engineering repos in GitHub we also needed a way to let people know and provide feedback
about these changes.</p>

<p>We started with the <a href="https://github.com/artsy/peril-settings/pull/4">smallest possible implementation</a> of an RFC and a <a href="https://artsy.slack.com/archives/C02BC3HEJ/p1503690782000372">notification service</a>ðŸ”’. You
would write an issue with this template:</p>

<pre><code>Title: "RFC: Add an emoji for when a node package is version bumped"

Proposal: If the repo has a `package.json`, we should look to see if its version has
          changed and then submit a tada emoji.

Reasoning: A release is important, we should cherish them.

Exceptions: None
</code></pre>

<p>This RFC came with a Peril rule that would post a notification into slack about an RFC being created:</p>

<p><img src="/images/intro-rfcs/first-rfc.png" alt="" /></p>

<p>Which meant everyone had the chance to know in-advance that a change was being discussed because it crossed team
communication boundaries. Here's <a href="https://github.com/artsy/artsy-danger/issues/5">the first RFC</a> used at Artsy.</p>

<p>This was specifically built to be the minimum possible to get an idea of what we actually wanted from an RFC
process for cultural changes.</p>

<a name="How.did.it.evolve."></a>
<h2>How did it evolve?</h2>

<p>Version 2 of our RFC process is what we've stuck with for the last 2 years. The second version expanded the scope
from just making Peril changes to being comprehensive enough to cover most cultural changes we wanted.</p>

<pre><code>Title: "RFC: Add a Markdown Spell Checker to all Markdown docs in PR"

## Proposal:

Apply a spell checker to every markdown document that appears in a PR.

## Reasoning

We want to have polished documents, both internally and externally. Having a spellcheck
happening without any effort on a developers part means that we'll get a second look at
any documentation improvements on any repo.

## Exceptions:

This won't be perfect, but it is better to get something working than to not have it at all.
I added the ability to ignore files: so CHANGELOGs which tend to be really jargon heavy will
be avoided in every repo.

Other than that, we can continue to build up a global list of words to ignore.

## Additional Context:

You can see our discussion [in slack here](/link/to/slack.com)
</code></pre>

<p>This version also came with a recommendation on how to resolve the RFC, after a week you would add a comment and
close the issue:</p>

<pre><code>## Resolution
We decided to do it.

## Level of Support
3: Majority acceptance, with conflicting feedback.

#### Additional Context:
Some people were in favor of it, but some people said they didn't want to do it for project X.

## Next Steps
We will implement it.

#### Exceptions
We will not implement it on project X. We will revisit the decision in 1 year.
</code></pre>

<p>We've evolved the closing an RFC process since then:</p>

<ul>
<li>To <a href="https://github.com/artsy/README/issues/162">be more specific on how/when to close an RFC</a>. Which introduces a stalled state. Turns out some
discussions take longer to resolve than a week</li>
<li>Peril would post <a href="https://github.com/artsy/peril-settings/pull/46">multiple notifications</a> over the course of a week to make sure people don't miss the
chance to contribute</li>
<li>We added a weekly summary of open RFCs into Slack for our <a href="https://github.com/artsy/README/blob/master/events/open-standup.md#during-standup">team standup</a></li>
</ul>


<p><img src="/images/intro-rfcs/summary.png" alt="/images/intro-rfcs/summary.png" /></p>

<a name="What.are.the.alternatives."></a>
<h2>What are the alternatives?</h2>

<p>This RFC process is not without it's trade-offs.</p>

<p>An RFC is built with an action in mind, and it explicitly defaults towards this. This process purposely bakes in
silence as positive indifference from observers. When being used as a consensus device, an RFC process really isn't
that great. It's an asynchronous, flat conversation, which makes it hard to discuss all avenues with many
simultaneous voices and can sometimes feel like whoever posts the most often kinda wins.</p>

<p>For consensus tools you really are better off with a meeting. There are all sorts of structured meetings which do a
great job of finding agreement across many opinions.</p>

<p>For example, we wanted to try and get consensus on how to build APIs at Artsy. The RFC for that would probably have
been something like "Move to use GraphQL in all new APIs", which is a nuanced technical mandate that would require
buy in from many people. While it does have an direct action, trying to feel like everyone agrees and will work
this way in the future would have probably not worked out in a single-threaded long-form issue. Instead, we opted
to use a <a href="https://en.wikipedia.org/wiki/Town_hall_meeting">town-hall style</a> meeting, where people who had strong opinions would have time to present them - then
at the end all developers would have the chance for feedback.</p>

<a name="Where.does.it.work.best."></a>
<h2>Where does it work best?</h2>

<p>This RFC process is good for "I would like to improve this, does that make sense?" - and it's a really great case
of <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#minimal-viable-process">Minimum Viable Process</a> where one issue can spark a great team discussion. Here's some of my favourite
ones from Artsy:</p>

<ul>
<li><a href="https://github.com/artsy/README/issues/171">Provide explicit recommendations when PDDE should take time off </a></li>
<li><a href="https://github.com/artsy/README/issues/131">Document the rationale for why Artsy's various closed source repositories aren't open</a></li>
<li><a href="https://github.com/artsy/README/issues/86">Relaunch the Platform practice</a></li>
<li><a href="https://github.com/artsy/README/issues/76">New Hire Buddies</a></li>
<li><a href="https://github.com/artsy/README/issues/31">All GraphQL API servers have a root <code>_schema.graphql</code> file </a></li>
<li><a href="https://github.com/artsy/README/issues/117">New dependencies to Emission/Reaction go through the RFC process</a></li>
<li><a href="https://github.com/artsy/README/issues/108">Creating a public facing status page</a></li>
<li><a href="https://github.com/artsy/README/issues/130">Updates to On-Call Process: Jira Ops + Status Page</a></li>
<li><a href="https://github.com/artsy/README/issues/10">Rename the Artsy Omakase to [Something]</a></li>
</ul>


<p>We sometimes have RFCs which we don't want to discuss in public, for those we use our private version of README
called potential. That said, our notification system works on any repo, so if it makes sense to have an RFC on a
repo specifically, that's no problem too.</p>

<p>You can see all of our <a href="https://github.com/search?q=org%3Aartsy+is%3Aissue+label%3ARFC+is%3Aopen">current open RFCs on the Artsy org here</a>, and I've opened comments for folks
to talk below about whether they've enacted something similar - would love to see how this can be improved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Artsy Hires Engineers]]></title>
    <link href="http://artsy.github.io/blog/2019/01/23/artsy-engineering-hiring/"/>
    <updated>2019-01-23T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2019/01/23/artsy-engineering-hiring</id>
    <content type="html"><![CDATA[<p>Interviewing is hard. Interviewers want to make sure they're hiring the person who will add the most value to their
team; candidates want to make sure they're joining a company that aligns with their goals and perspectives.</p>

<p>Recent trends in hiring are white-boarding sessions, trivia questions, and hours of take-home assignments. At
Artsy, we don't use any of these. We often get asked why not - and how we assess technical skill without them.</p>

<!-- more -->


<p>We think our interview process at Artsy is unique, but we also think our interview process is great. We'd love to
see the tech community examine its hiring practices, and hopefully to adopt some of what's made our hiring process
successful. Focusing on knowledge and facts that are already acquired is one way to approach hiring; we prefer to
look at how a person can fill a gap in our team and help us grow.</p>

<p><aside class="dialogue">
  <div class="question">
    <h3>What surprised you about the hiring process at Artsy while you were a candidate?</h3>
  </div>
  <div class="answer">
    <img src="/images/dialogue/ash.jpg">
    <p class="intro">Ash Furrow says...</p>
    <p>What most surprised me at the time was <em>who</em> was interviewing me. I had a teleconference screening with Artsy's now-CTO before moving on to in-person interviews. Since I was living in Amsterdam at the time, Artsy flew me to its nascent London office to meet two interviewers: a data engineer and a member of (what was then) the Arts team.</p>
    <p>I was surprised, but encouraged, to be speaking with someone who wasn't an engineer. They asked me questions to find out what motivated me, to evaluate how well those motivations would help Artsy achieve its mission. It was a natural fit!</p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/lily.jpg">
    <p class="intro">Lily Pace says...</p>
    <p>Everything. I was pleasantly surprised by how different the interview process at Artsy was from my previous experiences, which felt more like standardized tests than conversations. The underlying presumption with "traditional" tech hiring practices is that candidates are somehow trying to trick their way into positions they arenâ€™t qualified for. It's no wonder that impostor syndrome is so prevalent in underrepresented groups when the interview process is set up like an interrogation.</p>
    <p>I felt like the interviewers at Artsy had read my resume and cv and taken it at face value, so the interview was spent diving deeper into my skill-set and personality and determining compatibility, instead of trying to identify gaps in my knowledge.</p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>With 20 years (!!!) of experience as a software engineer, I've seen my share of interviews - from both sides. On the hiring side, I've said for years that technical interviews are unnecessary. If I can get a 30 minute conversation with a candidate, I feel like I can learn enough about them to know if they can do the job from a technical perspective. It's much less about knowing trivia or syntax, and much more about having the personality to solve problems.</p>
    <p>I'd never experienced that on the candidate side, though. When I did, I definitely felt like Artsy had forgotten part of the interview. Where was the whiteboard? The homework? People looking over my shoulder while I coded an anagram-checker? A technical challenge has been a part of every interview I've done as a candidate - until Artsy.</p>
  </div>
</aside></p>

<p>Artsy's process of hiring new engineers was created and is maintained <em>by</em> our current engineers. It has evolved
over time as we learn new lessons and new perspectives join our team. Our process has always been driven by a
top-down culture of respect for candidates, which aligns with
<a href="https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#artsy-values">our company values</a>. Our team
currently has 36 engineers, and we refreshed our hiring practices last year to support our team's growth; we hired
a dozen engineers in 2018. We don't use recruiters (though we did to hire our recent VP of Engineering).</p>

<p>Our former Director of Web Engineering has a blog post where he
<a href="https://www.zamiang.com/post/learning-from-artsy-how-to-hire-awesome-engineers">describes Artsy's hiring process</a>.
Though some specifics have since changed, the foundations remain the same.</p>

<blockquote><p>If Artsy has a secret sauce, it is how it hires. All else falls from the assumption that they have hired the best
people who want to work together to achieve Artsyâ€™s mission.</p></blockquote>

<p>Our hiring process starts with an informational, where candidates are met for a coffee or over a teleconference
call. We have <a href="https://github.com/artsy/README/blob/master/playbooks/informationals.md">public documentation</a> so
candidates can know what to expect. We do a lot of these and move candidates who we think would succeed at Artsy on
to in-person interviews. The interviews last 3 hours and are split across four 45-minute
<a href="https://www.livecareer.com/career/advice/interview/behavioral-interviewing">behavioral interviews</a>, conducted by
engineers and other colleagues, ranging from gallery liaisons to product managers to editorial writers. Artsy
generally, and Engineering specifically, have both significantly invested in helping interviewers be effective and
consistent; this includes documentation, question banks, and <a href="https://managingbias.fb.com">unconscious bias</a>
training.</p>

<p>Each interviewer is given key areas to focus on, based on the candidate's background. We have documentation
specifying how to evaluate each of these areas, including example questions. These areas include, but aren't
limited to:</p>

<ul>
<li>Comprehension of Artsy</li>
<li>Artsy company values alignment</li>
<li>Ability to communicate complex ideas</li>
<li>Learning and adaptation</li>
<li>Self-learning and drive</li>
<li>Independence and teamwork</li>
<li>Systems development</li>
<li>Product knowledge</li>
</ul>


<p>After the interview, feedback is written up as quickly as possible. To limit bias, interviewers can't see each
other's feedback until after they write up their own. The write-up includes a recommendation: do you think we
should move on to reference checks? Answers are either "strong yes", "yes", "no", or "strong no"; after everyone
has completed their write-ups, the interviewers debrief and reflect on how to do a better job next time. Their
feedback is used by the hiring manager to decide whether to move on to reference checks.</p>

<p>Quoting again from our former Director of Web's blog post:</p>

<blockquote><p>Artsy believes that 'references are not a defense against hiring poorly, they are a way to hire great people'.</p></blockquote>

<p>Artsy's reference checks are in-depth and deserve their own blog post; they are <em>key</em> to our hiring process. We
know that job interviewers only evaluate how good someone is at interviewing, so we put a larger emphasis than most
companies on references. The most accurate predictor of future job performance is past job performance, not how
well someone can perform in an interview.</p>

<p>If we decide to hire the candidate, we make them a job offer. Artsy offers what we think is a fair wage based on
the local market and the candidate; we do not low-ball candidates and we don't negotiate on compensation.</p>

<a name="What.s.wrong.with.typical.hiring.practices."></a>
<h2>What's wrong with typical hiring practices?</h2>

<p>There are many tactics for assessing a candidate's technical abilities, but we've found that many are unfair to the
candidate. Some strategies put unnecessary pressure on the candidate. Some select against qualified candidates who
have competing responsibilities outside work. Some unwittingly weed out underrepresented applicants, even at a time
when companies are trying to diversify their teams.</p>

<a name="In-person.coding.challenges"></a>
<h3>In-person coding challenges</h3>

<p>The intention of in-person coding challenges is to verify that the engineer can "actually write code." This
strategy puts excessive pressure on the candidate to perform in front of an audience. This is usually not a good
reflection of what the candidate would be doing if they were hired. Sometimes it <strong>is</strong> a reflection of the
stressful conditions on the team, and the act of applying pressure to the candidate is intentional, to measure
their ability to handle it. In either case, we don't feel like this is how we want to measure engineers; it just
doesn't reflect reality.</p>

<a name="Whiteboard.interviews"></a>
<h3>Whiteboard interviews</h3>

<p>One intention of whiteboard interviews is to reduce the stress on the candidate, because they don't have to worry
about code syntax while under a microscope. These types of interviews still lead to
<a href="https://code.dblock.org/2012/12/08/five-ways-to-torture-candidates-in-a-technical-interview.html">stressful conditions</a>,
though, and they don't provide a good measure of what makes a great teammate or even a great developer. Again,
sometimes the pressure is intentional, to see how the candidate reacts.</p>

<p>It can be very difficult to find a problem that is succinct enough for a whiteboard exercise but still reflective
of the work the candidate will actually be doing on the job. The ability to write an algorithm to search a binary
tree might be reflective of whether a candidate has a traditional Computer Science degree, but doesn't necessarily
speak to their ability to build complex interfaces or streamline performance. More importantly, whether or not they
can write a binary search tree from scratch on a whiteboard doesn't even necessarily speak to their ability to
<em>use</em> search trees in day-to-day work. Questions like this can eliminate excellent developers who took a
non-traditional approach to their knowledge building but are still highly capable.</p>

<a name="Sample.code"></a>
<h3>Sample code</h3>

<p>Sometimes a company will request a code sample from candidates - after all, what shows off their ability to code
better than their actual code? The downfall of this strategy is that it eliminates developers who don't have code
they can share. Many great engineers work for closed-source companies; many great engineers have family
responsibilities that prevent them from contributing to open-source at night.</p>

<p>It is also important to consider the insularity and biases that exist in the open source community that can make
contributing more difficult for developers from underrepresented groups. A study published in the PeerJ Computer
Science journal found that womenâ€™s contributions to open source projects were accepted more frequently than menâ€™s
contributions when the gender of the contributor was unknown. However, when the gender of the contributor was
apparent, men's contributions were
<a href="https://code.likeagirl.io/gender-bias-in-open-source-d1deda7dec28">accepted more frequently than women's</a>.</p>

<a name="Take-home.challenges"></a>
<h3>Take-home challenges</h3>

<p>The most recent trend in hiring is the take-home exercise. The goal is honorable - have the candidate produce code
on their own time, so they aren't overwhelmed with the pressure of an audience. Weâ€™ve found that requiring this
early in the process is unfair, and including it later in the process is uninformative; by the time a take-home
challenge would be appropriate, we have already evaluated the candidate's technical skills to our satisfaction
(more on that later).</p>

<p>This strategy also assumes the candidate has time to work on homework. Many single parents do not for example, nor
do engineers who care for family members. There can also be misalignment on the expected time to complete a
take-home challenge. While the exercise might take a current engineer at the company 2 hours to complete, that
doesn't consider several factors: (1) a candidate might not be familiar with all technologies requested, and can
easily lose time to research and learning; (2) the candidate wants to look good, so they're likely to work longer
than you expect; and (3) the candidate might be interviewing for several companies at once, and have multiple
competing assignments to work on.</p>

<p>Many companies use take-home challenges early in the hiring process to shift the burden of evaluation from the
company on to the candidates themselves. This unfairly excludes lots of potentially amazing colleagues.</p>

<p><aside class="dialogue">
  <div class="question">
    <h3>Why do you think these kinds of bad hiring practices are so common in the tech industry? And what sets hiring practices in tech apart from hiring in other industries?</h3>
  </div>
    <div class="answer">
    <img src="/images/dialogue/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>We are very logical people in the tech industry. We want to create algorithms or heuristics for everything, including hiring. Using a yardstick like "Fizz Buzz" or trivia questions allows us to easily narrow down the candidate pool. It's a simple, intentional form of gate-keeping. The hiring algorithm is much easier to write when it's "Oh, you don't know what a closure is? Sorry, we're not interested." It's much harder to write a hiring algorithm that respects nuance: "well...it depends. Maybe you have different experiences than I do. It'll take some digging to find out if our experiences will complement each other."</p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/lily.jpg">
    <p class="intro">Lily Pace says...</p>
    <p>I think the tech industry has an elitism problem, and this is reflected in the way candidates are evaluated. Thereâ€™s a general feeling in some parts of the industry that what we do is different and somehow elevated from other professions, that engineering is a skill that only a select few are capable of, not something that anyone can learn with the right training and enthusiasm. Making candidates go through a gauntlet of challenges during the interview process reinforces this idea.</p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/ash.jpg">
    <p class="intro">Ash Furrow says...</p>
    <p>I think when looking at the current state of the computer programming industry, and its hiring practices, we need to pay special attention to its history. The original computer programmers of the twentieth century were women, but they were <a href="https://www.theguardian.com/careers/2017/aug/10/how-the-tech-industry-wrote-women-out-of-history">systematically pushed out of the industry</a>. One way they were pushed out was through discriminatory hiring practices, especially interview questions and techniques specifically designed to exclude non-white, non-male applicants. Sadly, these hiring practices persist, even if their original motivations have been obscured by time.</p>
  </div>
</aside></p>

<a name="What.we.do.instead"></a>
<h2>What we do instead</h2>

<p>In addition to the above strategies not being fair, we've found that they measure things that are secondary to what
we're looking for.</p>

<p>Artsy is more complicated than FizzBuzz. Too complicated for any one engineer to build, in fact. Individual
engineers working alone canâ€™t build the software Artsy needs to succeed â€“ they must work together. So the skills we
evaluate for are things like empathy, communication, and kindness. Not that technical skills arenâ€™t important, but
the ability to communicate and learn is more important.</p>

<p>Engineers who excel at empathy, communication, and kindness can pick up the technical stuff once they're hired;
personal and interpersonal skills are harder to teach. Adding a colleague to the team who lacks these skills could
harm the culture we've built.</p>

<p>When you interview with Artsy as an engineer, you won't just meet other engineers and a manager. You'll meet with
people from other departments too. If you're hired as an Artsy engineer, you're going to work with folks from all
across the company - we want to make sure you can communicate with them because that's something we do every day.</p>

<p><aside class="dialogue">
  <div class="question">
    <h3>How has this impacted your day-to-day work at Artsy so far?</h3>
  </div>
  <div class="answer">
    <img src="/images/dialogue/lily.jpg">
    <p class="intro">Lily Pace says...</p>
    <p>I had a negative experience in the past with a coworker who lacked empathy and boundaries and made me feel unwelcome and othered as the only woman on the team and someone from a non-traditional background. It made me afraid to ask for help and stifled my progress. This experience made me hesitant to open up to new coworkers, especially when I needed assistance. Because Artsy evaluates candidates based on empathy, communication, and kindness, I arrived with a <a href="https://medium.com/artsy-blog/what-it-feels-like-to-work-in-a-supportive-environment-for-female-engineers-3c994a001007">level of trust in my new coworkers</a> that usually takes weeks or months to develop. </p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>In most of my previous jobs, it's taken me a while to learn who I can be vulnerable around and who I can't. At Artsy I have quickly learned that I don't need to worry about it. I feel an incredible sense of psychological safety with the Artsy team. I can be vocal about not understanding something, and I can ask for help without feeling like a burden or fool.</p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/ash.jpg">
    <p class="intro">Ash Furrow says...</p>
    <p>I'm a sensitive person. I don't like pointless or inflammatory conflict â€“ I find it distracting and counterproductive. However, I can relax and let my guard down at Artsy. My sensitivity to how others are feeling is a part of my contributions to the team, and I'm able to fold the emotional wellbeing that <strong>I</strong> get from everyone back into our team: a sort of constantly-accelerating feedback loop of good feelings.</p>
  </div>
</aside></p>

<a name="But.we.still.evaluate.technical.aptitude"></a>
<h2>But we still evaluate technical aptitude</h2>

<p>Technical aptitude is less important to us than interpersonal skills, but it is still important. Note that we said
"aptitude," not "skills": we don't expect our engineers to already know everything about the tech stack we're
using. Instead, we expect them to have a strong ability to learn our stack and use it effectively once they have.
(This is touched on in our docs on
<a href="https://github.com/artsy/README/blob/master/careers/juniors.md">what we look for in junior engineers</a>.)</p>

<p>So if we skip all the usual tactics for evaluating technical aptitude, how do we do it? <strong>By talking to people</strong>.</p>

<p>We learn a lot about candidates in their interviews. We'll have a conversation with them about technology. Instead
of white-boarding, we ask them to describe what they like about their favorite library, or what they wish they
could change. We ask them to describe some legacy code theyâ€™ve worked with, and ask them how they think it got that
way. Weâ€™re looking for a mix of technical skills as well as empathy and an ability to communicate nuanced ideas.</p>

<a name="References.are.important.to.us"></a>
<h2>References are important to us</h2>

<p>We also learn a lot through reference checks. Our reference checks aren't simply validation of your employment
history - they are a 30 minute-long conversation with each of your three references that go into detail about your
work history and career growth. It's quite an in-depth conversation, with questions structured to dig into
specifics about the candidate's behavior.</p>

<p>An Artsy reference call might include the following structured questions:</p>

<blockquote><p>In your capacity as [relationship to the candidate], how many people have you worked with in the candidate's
role?</p>

<p>Okay, in <em>just</em> terms of job performance, how you rank the candidate out of that [X] many people?</p>

<p>Okay, finally, what's the difference between [the candidate's rank] and number one? How would the candidate need
to grow to get to number one?</p></blockquote>

<p>The first question establishes the context for the reference. The second question primes the reference to use that
context when answering the next question. The third question is what we're <em>actually</em> interested in. These aren't
easy or comfortable questions, but they give us an insight into the candidate's career, history, and areas to grow.</p>

<p>Fully half of our decision to make an offer or not is based on our reference checks. Artsy Engineering candidates
go through the same reference check process as anyone applying for a job at Artsy, with Engineers sitting in on the
call with Artsy's hiring staff.</p>

<a name="But.seriously..we.really.care.about.the.personal.side"></a>
<h3>But seriously, we really care about the personal side</h3>

<p>We also make sure every interview ends amicably. No candidate should feel bad after interviewing with Artsy, even
if we don't give them an offer. This seems self-evident to us, given our values, but it makes a lot of business
sense to maintain our reputation as an engineering team.</p>

<a name="Our.hiring.practice.philosophy"></a>
<h2>Our hiring practice philosophy</h2>

<p>One of our core values at Artsy is that
<a href="https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#people-are-paramount">People Are Paramount</a>.
We like to think that our interview process was built to reflect this.</p>

<p>We see the interview process as an opportunity to build a relationship with a candidate. We talk to them to find
out if they're a good fit for Artsy, and we help them decide if Artsy is a good fit for them. Our hiring process
focuses more on human skills than most processes do. It's not perfect, but it has served us well.</p>

<p><aside class="dialogue">
  <div class="question">
    <h3>Where do you still think Artsy has to grow, in terms of how it hires engineers?</h3>
  </div>
  <div class="answer">
    <img src="/images/dialogue/lily.jpg">
    <p class="intro">Lily Pace says...</p>
    <p>I think Artsy is really unique and innovative in how it evaluates candidates and I think the more we can express this in our job postings the better. Stressing alignment with our values and an ability to learn and posting fewer hard requirements are some simple ways to convey to potential applicants that we evaluate differently.</p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/ash.jpg">
    <p class="intro">Ash Furrow says...</p>
    <p>I think one area we've historically struggled with, and still do, is sourcing candidates from a wide range of backgrounds. Artsy Engineering's hiring pool still draws heavily from the professional networks of existing Artsy staff; while this has a lot of benefits, it also has the potential to exclude groups who aren't already represented on our team.</p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>I agree with Ash. I think all companies hire based on their employees' networks, because that's the easiest way to find people. <a href="https://twitter.com/seldo/">Laurie Voss</a> talked about this recently on <a href="https://reactpodcast.simplecast.fm/33">the React Podcast</a>. He pointed out that diversity at NPM has been better than average since the company started; and that the ratios of diversity have been consistent from the beginning, as a result of hiring from their own networks. I'd love to see Artsy hire beyond our networks (and as a result expand our networks).</p>
  </div>
</aside></p>

<p>Our hiring process will never be "finished" because we're always improving on it. Some recent improvements are
inward-facing to help <em>us</em> get better, like:</p>

<ul>
<li>Starting a #dev-ersity Slack channel for talking about how to diversify our team and the industry at large.</li>
<li>Integrating hiring updates into our weekly standup.</li>
<li>Creating a Slack bot for engineers to monitor our hiring pipeline.</li>
<li>Periodically rotating hiring managers to spread institutional knowledge and get new perspectives.</li>
<li>Many, many docs written on guiding the process.</li>
</ul>


<p>Artsy engineers, guided by our company values, created the hiring process for new engineers. Combined with an
iterative process and a desire to constantly improve, we've created a hiring process that is fair, effective, and
respectful. This kind of engineering-led approach is gaining popularity; for example, Microsoft recently
<a href="https://blog.usejournal.com/rethinking-how-we-interview-in-microsofts-developer-division-8f404cfd075a">revamped its hiring process</a>
with this approach.</p>

<p>We hope this catches on.</p>

<p>So what can <em>you</em> do? A great first step is to send this post to your HR rep. Another great step is to open source
your hiring documentation; you'd be surprised how motivating this can be, and it's a great opportunity to get
feedback from other companies. Leave a comment below, let's brainstorm on other ways to improve the state of hiring
in software engineering!</p>

<p>And remember: while <em>you</em> might be motivated based on what feels "right", businesses are motivated by bottom lines.
Fortunately for us, the evidence is on our side: this is a better way to hire, for everyone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Work Offline More]]></title>
    <link href="http://artsy.github.io/blog/2015/09/30/Work-Offline-More/"/>
    <updated>2015-09-30T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2015/09/30/Work-Offline-More</id>
    <content type="html"><![CDATA[<p>Want to know what I love writing in a pull request? <em>Sorry this is such a big PR, but I was working offlineâ€¦</em> It is one of <a href="https://github.com/artsy/Emergence/pull/23">the</a> <a href="https://github.com/artsy/Emergence/pull/39">key</a> <a href="https://github.com/artsy/Emergence/pull/45">reasons</a> I managed to get our <a href="https://github.com/artsy/emergence">Artsy Shows TV</a> app released ahead of schedule with a looming unknown App Store <a href="https://github.com/artsy/Emergence/issues?q=milestone%3A%221.0+Ship+to+Apple%22">deadline</a>. Offering more time for polish like thumbnail image <a href="https://github.com/artsy/Emergence/compare/84855a310d47e071419b52b78978d14d751ec4e0...40966752111a309a20b4878e00a1c8e27cb53261">pre-caching</a>.</p>

<p>During the last week before shipping I was scheduled to get a H1B VISA stamp for my passport, which means a trip to London. London is basically a <strong>million</strong> miles away from where I occasionally live in Huddersfield. So I opted for a coach. On the 5 and a half hours of travel, I had gone from behind schedule to feature complete prototype. On the way back, I had started to remove the word prototype from what we were looking at.</p>

<p>I <em>always</em> optimise to work offline on every iOS project. Here's some tips on how we do it in all our apps.</p>

<!-- more -->


<a name="Easiest.way"></a>
<h3>Easiest way</h3>

<p>Eigen, our biggest app, has a complicated relationship with our API. There are too many networking calls to effectively stub for development in the app, this I know because I wrote <a href="https://github.com/artsy/eigen/pull/575">the PR</a> forcing us to stub all networking in tests.</p>

<p>I found a great workaround though: there is a tool for storing an entire networking session, so that you can use it again and get determinate results called <a href="http://cocoapods.org/pods/VCRURLConnection">VCRURLConnection</a>. This is normally done in tests but it can easily be used in your app code instead.</p>

<p>We already had an admin panel within our app. So I added the ability to start <a href="https://github.com/artsy/eigen/blob/06aeb6f7ce4b95155729aa37c36fddc54767931f/Artsy/View_Controllers/Admin/ARAdminSettingsViewController.m#L171-L206">saving the networking session</a>.</p>

<p><img src="/images/2015-09-30-offline/eigen-admin.png" alt="Eigen Admin Panel" /></p>

<p>When you hit save, every networking request is saved into memory, and then once you hit save, this is stored in a JSON file that the app will use that for all networking data on the next few runs.</p>

<a name="The..requires.some.work..but.is.worth.it..way"></a>
<h3>The "requires some work, but is worth it" way</h3>

<p><a href="https://github.com/Moya/Moya">Moya</a> is a networking client we created where stubbed data is a first-class citizen. This means converting your app's networking from "uses the API" to "uses the <a href="https://github.com/artsy/eidolon/blob/master/Kiosk/App/StubResponses.m">locally stored stubbed examples</a>." Is a quick change in your apps code.</p>

<a name="The..let.s.just.get.it.done..way"></a>
<h3>The "let's just get it done" way</h3>

<p>When I was working offline on the coach, I took a technique we use for testing and applied it to our application code. We use an abstraction called network models that separates what you want vs. what the API does to get it. In the case of Emergence I created <a href="https://github.com/artsy/Emergence/blob/18e501a4d6925ea5fb0f35174a6c0c3c96f70533/Emergence/Contexts/Presenting%20a%20Show/ShowNetworkingModel.swift">requests</a> that would pass along stubbed models instead of doing the real work.</p>

<p>It's nothing fancy, but I didn't need too much to work with at this point. It's enough to start building, which is what counts, you can go and test properly once you're online.</p>

<a name="Motivation"></a>
<h3>Motivation</h3>

<p>I don't use 3G on my phone, I rely entirely on Wi-Fi for internet access, and don't particularly have a problem with the lack of connection. The outside world is distracting enough. Being able to work offline means I can shut the world out for a while and just focus on getting something done.</p>

<p>It's possible to not just have less distractions, but to be able to work faster. <code>VCRURLConnection</code> and using stubs are faster than normal networking, so you can iterate faster on your app, too.</p>

<p>True to my word, I'm writing this blog post offline, I have 7 hours and 23 more minutes before the plane lands in JFK.</p>

<p>I'm going to use the rest of this time to try ship something hard.</p>

<p><code>&lt;edit&gt;</code>I built this: <a href="https://github.com/artsy/energy/pull/86">artsy/energy/pull/86</a>. <code>&lt;/edit&gt;</code></p>
]]></content>
  </entry>
  
</feed>
