<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: culture | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/culture/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2019-11-14T17:06:08+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Diagnosing our Radiation Problems]]></title>
    <link href="http://artsy.github.io/blog/2019/11/14/diagnosing-our-radiation-problems/"/>
    <updated>2019-11-14T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2019/11/14/diagnosing-our-radiation-problems</id>
    <content type="html"><![CDATA[<p>Email! Electronic mail! What a concept! Like many companies, Artsy has built products on top of email, but this is
a decision that (like many companies) Artsy periodically regrets. But overall, our email systems work well!</p>

<p>But what about when it doesn't? Well that's what today's blog post is about: what happens when things break and you
don't know why?</p>

<!-- more -->


<p>I have learned a lot
<a href="https://artsy.github.io/blog/2018/05/30/my-first-week-on-call/">since my first on-call shift</a>, but going on call
still gives me a little stage fright. As I start a shift, I'm on the look-out for things that might break, and soon
after starting a recent on-call shift, "breaking" is exactly what things did.</p>

<p><img src="/images/2019-11-07-diagnosing-our-radiation-problems/alert.png" alt="Screenshot of Slack alert" /></p>

<p>We got an automated alert on Slack that one of our email services, code-named "Radiation", had really high response
times. We <em>then</em> received an alert that too many requests to Radiation were failing completely. Yikes. The next
twenty two hours was a deep dive into Heroku, New Relic, Rails, and PostgreSQL, all to isolate the problem and
produce a solution.</p>

<p>The nice thing about email, as a protocol, is that it's based on a store-and-forward concept. That means that if a
message delivery fails, email servers will try again later (typically with an exponential backoff). SendGrid, our
email processor, has built their REST API around this same store-and-forward concept. While the Radiation server
was unresponsive, SendGrid wouldn't receive successful HTTP responses from the webhook deliveries, so it would
attempt to re-deliver the failing emails later. Email deliveries would be delayed, but the emails themselves would
not be dropped. We wasted no time addressing the problem, but we were also confident that once we fixed the issue,
the data would be okay.</p>

<p>After the alert, Ashkan (Radiation's point-person) and I communicated with our colleagues (engineers and affected
non-engineers) about the problem. With the help of Chung-Yi, we began investigating the immediate problem (with a
focus on <em>mitigating</em> it, rather than necessarily <em>fixing</em> it). Oh, we tried it all: spinning up more Heroku Dynos
to handle requests, increasing concurrency on the individual Dynos, restarting Redis and PostgreSQL stores. Each
time, things would work briefly before the Radiation API would begin timing out again. More accurately, the
requests sent to Radiation were taking longer than the Heroku router was giving them (30 seconds) before the router
gave up and timed out the request. We started examining the Radiation code and database (keeping our <em>ion the
prize</em>: mitigation).</p>

<p>Ashkan investigated slow database queries. We added new PostgreSQL indexes to speed up queries, and restructured
others to avoid expensive joins. Unfortunately, all this accomplished was extending the time after a Dyno reboot
that things would work (before beginning to timeout again). Because
<a href="https://artsy.github.io/blog/2017/05/30/database-encryption/">Artsy stores emails as encrypted-at-rest</a>, it was
difficult to pinpoint which exact message could be causing the timeouts. And Radiation itself didn't have much in
the way of logging, which would normally help us debug the problem.</p>

<p>It was frustrating to try to fix something but only manage to improve how long it took to break again. We had
enhanced Radiation's performance to the point where it was taking 10 minutes after a Dyno reboot to begin timing
out again, up from 30 seconds at the beginning of the incident. Despite an afternoon and evening spent trying to
fix the problem, we were stuck. We decided that the best course of action was a good night's sleep; we would ask
for help in the morning.</p>

<p>The next day, Ashkan and I got <em>up and atom</em> to address the problem. We brought my on-call partner Devon up to
speed, detailing the incident symptoms and what we had tried so far. While Devon and Ashkan worked on additional
logging and new timeout strategies, I took another approach.</p>

<p>Artsy has been moving to <a href="https://www.datadoghq.com">DataDog</a> for server performance monitoring, but Radiation was
still using <a href="https://newrelic.com">New Relic</a>. My background is in iOS app development and I had never really dug
into New Relic before, but I <em>am</em> very experienced at profiling iOS applications, and the Ruby and Objective-C
runtimes have more in common than they have have differences. I used New Relic to profile a production Radiation
Dyno for five minutes and, to our collective surprise, we found that more than 90% of CPU time was being spent in
<a href="https://github.com/thoughtbot/griddler/blob/ff2ad16949bf5190f93df1a3e83eb0192f136c6d/app/controllers/griddler/emails_controller.rb#L4-L10">an innocuous function of a dependency</a>,
the open source library <a href="https://github.com/thoughtbot/griddler">Griddler</a>.</p>

<p>Artsy uses Griddler to parse and sanitize emails that we receive from <a href="https://sendgrid.com">SendGrid</a>. Griddler
contained the problematic code, which was responsible for parsing email responses from threaded replies. So if an
email body received by Radiation looks like this:</p>

<pre><code>This is the most recent reply in this email conversation.

On September 28th, 2019, Someone Else Wrote:

[The rest of the email thread]
</code></pre>

<p>Then Griddler parses out the string "This is the most recent reply in this email conversation." for Radiation to
process. This is really important because some of the threads in Radiation are <em>thousands</em> of emails long. In fact,
I learned that Radiation has Artsy's largest production database.</p>

<p>Griddler does this processing via regular expressions. Ashkan had the insight to look for existing issues from
other Griddler users who ran into similar problems, and to our delight,
<a href="https://github.com/thoughtbot/griddler/pull/310">we found a pull request</a> that appeared to address the <em>exact</em>
issue that we were having.</p>

<p>It turns out that emails with large amounts of repeated newline characters would totally stall Griddler's regex.
Heroku's router would timeout any request after 30 seconds, but would leave the Ruby code churning on that regex.
That would leave the Rails server unable to respond to subsequent HTTP requests, causing more timeouts. And because
of email's store-and-forward nature, SendGrid would begin sending more problematic emails pretty quickly after any
Radiation reboot. A small change to add a regex group was all that was necessary to fix the issue.</p>

<p>Phew! We forked Griddler to Artsy's GitHub organization and applied the change from the pull request. We were
concerned about security implications of using a different regex, but my
<a href="https://artsy.github.io/blog/2018/02/06/apogee-technical-retrospective/">previous work in regular expressions</a>
helped me vet the change. We pointed Radiation's Gemfile to Artsy's fork and deployed the change.</p>

<p><img src="/images/2019-11-07-diagnosing-our-radiation-problems/heroku.png" alt="Screenshot of Heroku Dashboard, indicating a drop in load" /></p>

<p>Then, we waited. Would the system start timing out again? It took a half hour for any of us to breathe a sigh of
relief. But things appeared to be stable: response times were normal and Dyno load dropped precipitously. Our
<em>Curie</em> worked. (Okay, enough radiation puns.)</p>

<p>During our weekly incident review, Devon guided the rest of our team through our incident response and what we
learned. Radiation is now in a much better state, so that future problems will be easier to track down. We
responded to the Griddler pull request, encouraging the maintainers to merge the commit so other teams would avoid
this problem. The incident review meeting explored a number of options to mitigate future issues, including
migrating Radiation to our Kubernetes cluster, and Sam (our VP of Engineering) suggested writing this post. So here
we are.</p>

<p>Ashkan also followed up with peer feedback for Devon, Chung-Yi, and myself. In part, it read:</p>

<blockquote><p>It's rare and odd to say dealing with incident was fun, but with your help it actually was productive and fun.</p></blockquote>

<p>Which, honestly? One of my proudest accomplishments at Artsy.</p>

<p>In the end, we solved the problem and restored access to our email systems in under 24 hours. We kept our cool, we
communicated effectively with our non-engineering colleagues, and we learned a lot. What more could you want from a
Radiation incident?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unbearable Lightness of Refactoring]]></title>
    <link href="http://artsy.github.io/blog/2019/09/10/unbearable-lightness-of-refactoring/"/>
    <updated>2019-09-10T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2019/09/10/unbearable-lightness-of-refactoring</id>
    <content type="html"><![CDATA[<p>As engineers we are constantly in the process of building new features and improving our existing ones. Nowadays, with the help of tools and processes like code reviews one could argue the quality of the code being written has risen. At Artsy a pull request normally has one Assignee and possibly one or more Reviewers, so why do we still do a lot of refactoring?</p>

<blockquote><p>There is no means of testing which decision is better, because there is no basis for comparison. We live everything as it comes, without warning, like an actor going on cold. And what can life be worth if the first rehearsal for life is life itself?</p>

<p>― Milan Kundera, <a href="https://en.wikipedia.org/wiki/The_Unbearable_Lightness_of_Being">The Unbearable Lightness of Being</a></p></blockquote>

<p>Part of me wants to end this blogpost by Kundra’s quote, but for now let's get deeper.</p>

<!-- more -->


<a name="L.The.Refactor."></a>
<h2>"The Refactor"</h2>

<p>Recently we've started adding <a href="https://stripe.com/docs/strong-customer-authentication">Strong Customer Authentication (SCA)</a> support to one of our services. This service is relatively young in our stack and very well-reviewed. While the original code and approach looked nice and simple, as this service naturally grew and we started adding more logic to it, things got more and more complicated. During SCA support efforts, we realized it's time to refactor. The code I was trying to refactor was less than a year old and <a href="https://twitter.com/davidwalshblog/status/953663412013293569">originally written, well... by me</a>!</p>

<p>Should I be worried? Embarrassed? Well, not really. As engineers, when we build things we tend to look at current state of affairs, and we attempt to predict the future as much as possible. But the future is always changing, moving. SCA feature we were about to add to our existing logic weren't a requirement a year ago (a year ago I didn't know what SCA was). So first thing, <strong>never be embarrassed about refactoring</strong>, because the thing you're working on is often entirely unknown and you can't expect to get something unknown totally right the first time around. Looked at it in this light, refactoring is healthy.</p>

<a name="Lets.Get.More.Specific"></a>
<h3>Lets Get More Specific</h3>

<p>Back to our SCA change, we ended up having some discussions about how to improve our already complicated logic in a way that easily supports future updates. We started by trying to separate the different steps that an order has to go through to fully get submitted and try to simplify it, weighing the pros and cons of each approach. While pretty much all of our solutions would have some disadvantages, we managed to find our best option and started refactoring. Without getting too technical, lets look at the actual change.</p>

<pre><code class="ruby">## before refactor
order.submit! do
  order.line_items.each { |li| li.update!(commission_fee_cents: li.current_commission_fee_cents) }
  totals = BuyOrderTotals.new(order)
  order.update!(
   # set totals
  )
  order_processor.hold!
  raise Errors::InsufficientInventoryError if order_processor.failed_inventory?
  # in case of failed transaction, we need to rollback this block,
  # but still need to add transaction, so we raise an ActiveRecord::Rollback
  raise ActiveRecord::Rollback if order_processor.failed_payment? || order_processor.requires_action?

  order.update!(
    # set payment
  )
  order.transactions &lt;&lt; order_processor.transaction
  PostTransactionNotificationJob.perform_later(order_processor.transaction.id, user_id)
  raise Errors::FailedTransactionError.new(:charge_authorization_failed, order_processor.transaction) if order_processor.failed_payment?
  if order_processor.requires_action?
    # because of an issue with `ActiveRecord::Rollback` we have to force a reload here
    # rollback does not clean the model and calling update on it will raise error
    order.reload.update!(external_charge_id: order_processor.transaction.external_id)
    Exchange.dogstatsd.increment '******'
    raise Errors::PaymentRequiresActionError, order_processor.action_data
  end
end
</code></pre>

<p>In the original solution, we wrapped all of our changes in a database transaction within <code>order.submit!</code> to have a lock on that record. This was all good since we would ensure data integrity provided by database transaction. This way we ensure updates to <code>order</code> and <code>line_items</code> happen only in case of success. A failure in this block would rollback all changes which is good 👍</p>

<p>But things got complicated once some of the changes in the block <em>should</em> have been preserved, even in case of rollback. Specifically we want to make sure a <code>transaction</code> is stored on the <code>order</code> if it payment fails or requires action.
We found out that we can use <code>raise ActiveRecord::Rollback</code> which is a specific exception in Rails that only bubbles up in the surrounding transaction and does not get thrown outside of the block. This already makes things super complicated.</p>

<p>In order to make our code less complicated, we did a few things:</p>

<ul>
<li>We delegated more responsibility to a service class,<code>OrderProcessor</code>.</li>
<li>Instead of wrapping all code in one transaction, we now optimistically <code>submit</code> the order at the beginning and in case anything went wrong, we revert the changes.</li>
</ul>


<pre><code class="ruby">order_processor = OrderProcessor.new(order, user_id)
raise Errors::ValidationError, order_processor.validation_error unless order_processor.valid?

order_processor.advance_state(:submit!)
unless order_processor.deduct_inventory
  order_processor.revert!
  raise Errors::InsufficientInventoryError
end

order_processor.set_totals!
order_processor.hold
order_processor.store_transaction

if order_processor.failed_payment?
  order_processor.revert!
  raise Errors::FailedTransactionError.new(:charge_authorization_failed, order_processor.transaction)
elsif order_processor.requires_action?
  order_processor.revert!
  Exchange.dogstatsd.increment '******'
  raise Errors::PaymentRequiresActionError, order_processor.action_data
end
order_processor.on_success
</code></pre>

<p>Well, this at least is a lot more readable.</p>

<a name="Get.The.Change.to.Production"></a>
<h3>Get The Change to Production</h3>

<p>The next question is how to get this to production. We tried to isolate this specific refactoring by:</p>

<ul>
<li>Open a PR that only focuses on our refactoring</li>
<li>Make sure in the PR above we don't touch any API level tests and make sure all these tests still pass. This would give us more confidence that we are not impacting our existing clients.</li>
<li>Review and merge refactoring PR and test on staging.</li>
<li>Deploy everything in current pipeline to isolate the refactor deploy.</li>
<li>Deploy the refactoring PR to production.</li>
</ul>


<a name="How.Did.It.Go."></a>
<h2>How Did It Go?</h2>

<p>This plan worked for us, for the most part. We ended up having to rollback the deploy since we found a bug in a non-API part of our app. From this we learned that even if we already have tests written in different layers of our app, we still need to verify them and make sure they cover all cases. Relying too much on existing tests can often lead to trouble -- verify!</p>

<a name="Our.learnings"></a>
<h2>Our learnings</h2>

<ul>
<li>Don't be afraid of refactors. They are natural and a healthy engineering tool / practice.</li>
<li>Ensure that refactor PR's only include refactor-related changes. It's often tempting to fix other things along the way, but those fixes can take place in follow-up PRs.</li>
<li>Don't rely only on existing tests. Refactoring is a great opportunity to review and verify your tests. Verify them and make sure they cover all scenarios.</li>
</ul>


<p>Curious about the PR? At Artsy we believe in <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#open-source-by-default">Open Source By Default</a>, so check out the code <a href="https://github.com/artsy/exchange/pull/475/files">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Artsy Writing Office Hours]]></title>
    <link href="http://artsy.github.io/blog/2019/05/06/technical-writing-for-teams/"/>
    <updated>2019-05-06T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2019/05/06/technical-writing-for-teams</id>
    <content type="html"><![CDATA[<p>Welcome back to my series on writing for engineers. In the last post, we discussed <a href="https://ashfurrow.com/blog/technical-writing-on-the-web/">technical writing on the
web</a> from an individual's perspective: how do you get started? how do you leverage the web? how do you
improve? In today's post, I want to change directions; instead of focusing on how <em>individuals</em> write, we'll
discuss how <em>teams</em> write.</p>

<!-- more -->


<p>To get started, I want to return the quote that opened up my first post. When
<a href="https://open.nytimes.com/five-questions-with-orta-therox-d5bb9659c50b">interviewed by the New York Times developer blog</a>,
Artsy alumnus <a href="https://twitter.com/orta">Orta</a> said:</p>

<blockquote><p>One of my colleagues, Ash Furrow, is really the powerhouse behind improving the state of our public
documentation. He runs weekly writing workshops internally and always encourages achievements as being
post-worthy. Sometimes the best practice is to have someone who cares encouraging you. It works for me.</p></blockquote>

<p>This post is going to pick this quote apart, but first I want to address something upfront:</p>

<p><strong>If you're thinking about helping others write, then you should do it</strong>. Having the desire to help others write is
the only qualification for <em>actually helping</em>. You might think that in order to help others write, you should first
become a proficient writer yourself. This is backwards. I became the writing powerhouse that Orta mentions <em>by
helping others write</em>.</p>

<p>Let's think about this in terms of coding. When you help teach someone, <em>you also</em> learn a lot. Assisting others
solidifies concepts <em>for you</em> and helps <em>you</em> hone your own skills. We recognize that engineers are ready to mentor
other engineers long before they become <em>experts</em>; indeed, it's usually <em>through mentoring</em> that they become
experts.</p>

<p>This is how writing works, too.</p>

<p>Engineering teams really benefit from having a culture of writing (and of sharing knowledge in general). To
summarize the benefits of teams which write:</p>

<ul>
<li>Generally speaking, documentation is important – but writing and maintaining it is difficult. A team culture of
writing can help make it easier.</li>
<li>Public blog posts increase a team's reputation, which makes it easier for the team to hire (and onboard) new
members.</li>
<li>Teaching and learning from colleagues helps <a href="https://ashfurrow.com/blog/building-better-software-by-building-better-teams/">cultivate a sense of psychological safety</a>.</li>
</ul>


<p>I don't want to go into detail about the benefits here, but if you'd like to learn more, you can check out <a href="https://www.youtube.com/watch?v=SjjvnrqDjpM">this
talk</a>.</p>

<iframe width="100%" height="400" src="https://www.youtube.com/embed/SjjvnrqDjpM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<p>Okay let's dive in.</p>

<a name="Just.Show.Up"></a>
<h2>Just Show Up</h2>

<blockquote><p>[Ash] runs weekly writing workshops.</p></blockquote>

<p>Most of success is honestly just showing up. By itself, having a time and space set aside for colleagues to come
and write every week has pushed the team culture towards valuing writing. But it took time.</p>

<p>Six months after I started running weekly office hours, no one was really showing up. One or two people here and
there, but that was it. Orta said that he'd have cancelled the event by then, due to lack of interest. Here's the
thing, though: the value of the writing office hours transcends just what gets written. Having a weekly place to
come to write tells the team that <em>writing is important</em>. It says something, to have writing office hours, even if
no one shows up.</p>

<p>At first, writing office hours were aspirational. That's okay. There are still weeks where no one shows up. That's
okay, too. Besides, even if no one showed up, <em>I</em> still got an hour to write, so it was definitely worth my time.</p>

<p>But Orta had a point: people weren't showing up, so I looked at that problem. I asked around and it turned out that
people were interested in <em>sharing knowledge</em> but weren't always keen to write a blog post. So I changed my
approach.</p>

<p>Nowadays when I announce the writing office hours at our <a href="https://github.com/artsy/README/blob/master/events/open-standup.md">weekly engineering standup</a>, I am clear that it
isn't <em>just</em> for writing. I now let people know that this is a place where they can come for help with whatever
knowledge-sharing they're interested in. Let's take a look at a few examples:</p>

<ul>
<li>An engineer wanted to speak at a conference, so they brought their ideas and we outlined a talk proposal.</li>
<li>A product manager wanted to document how Artsy's product team works, so we worked on turning that documentation
into a public blog post.</li>
<li>An engineer was planning an architecture review meeting to get the team up to speed on how some of our systems
worked. They brought their slides and we went through the presentation together; I gave some feedback on what
worked well and what was unclear.</li>
<li>An engineer had an idea for a blog post, but the post was too big and they felt overwhelmed. They brought their
outline and we worked to break it into several smaller posts.</li>
</ul>


<p>So you can see that writing office hours grew to include more than just writing. And as the event helped more
people accomplish their knowledge-sharing goals, I folded those success stories into my weekly standup pitch.</p>

<p>I also knew I needed to make it easier to write blog posts. Lots of engineers wanted to write, but had a difficult
time starting. To help, I created some <a href="https://artsy.github.io/blog/2017/12/01/engineering-blog-post-templates/">engineering blog post templates</a> to kick-start new blog posts.
Sometimes, engineers just didn't know where to go to write a new blog post, so I did some pairing and lunch&amp;learns
demonstrating the blog's setup.</p>

<p>I still call the event "writing office hours" because it rolls of the tongue better than "knowledge-sharing office
hours", but that's basically what they've become!</p>

<a name="Frame.Deliverables.as.Blog.Posts"></a>
<h2>Frame Deliverables as Blog Posts</h2>

<blockquote><p>[Ash] always encourages achievements as being post-worthy.</p></blockquote>

<p>Here's my take: engineering work should be approached <em>primarily as a learning opportunity</em>. A traditional
engineering project might be structured around building some product, but my approach is to structure it around how
to <em>learn</em> how to build some product. As a team learns how to build it, the product is a natural consequence of
that learning. If you're familiar with my talk on <a href="https://ashfurrow.com/blog/building-compassionate-software/">building compassionate software</a>, this will sound familiar.
It's also reflected in Artsy's <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#psychological-safety">psychological safety engineering principle</a>.</p>

<p>A byproduct of this framing of work in terms of <em>learning</em> experiences is that it lends itself naturally to framing
work as <em>teaching</em> experiences (ie: blog posts or other knowledge-sharing). So if you're writing a new feature, or
fixing a difficult bug, or building a whole new app, then you should be thinking about the blog post as a
deliverable for that project. At least I do, anyway. The benefit of my approach is that others don't need to share
my views on teaching and learning – as long as I'm there to support them, we can work together to share what they
inevitably learn. We'll touch more on this in the next section.</p>

<p>A really common response I get to "hey have you thought about writing a blog post about this?" is that "this isn't
really worth writing a post about." I disagree. Even if a subject has been written about before, it has never been
written about from <em>your perspective</em>. And short posts are valuable, too – just think about how often you'll be
searching for an answer to a question and find a short, simple blog post that's unblocked you. Here is a selection
of short, focused posts from the Artsy blog:</p>

<ul>
<li><a href="https://artsy.github.io/blog/2015/11/05/Using-OCR-To-Fix-A-Hilarious-Bug/">Using OCR To Fix a Hilarious Bug</a> (bug fix becomes a blog post)</li>
<li><a href="https://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen/">Being a Good OSS Citizen</a> (an open source pull request becomes a blog post)</li>
<li><a href="https://artsy.github.io/blog/2018/01/19/upgrading-volt-to-circleci-two/">Upgrading Volt to CircleCI 2.0</a> (an infrastructure upgrade becomes a blog post)</li>
<li><a href="https://artsy.github.io/blog/2018/08/24/How-to-debug-jest-tests/">How To Debug Jest Tests</a> (learning a tool becomes a blog post)</li>
</ul>


<p>As you can see, each of these are small posts that represent significant engineering effort. Our time is valuable,
and only through sharing what we learn (<a href="https://ashfurrow.com/blog/contemporaneous-blogging/">as we learn it</a>) can we really honour the title of
<em>engineer</em>.</p>

<a name="Caring.is.Sharing"></a>
<h2>Caring is Sharing</h2>

<blockquote><p>Sometimes the best practice is to have someone who cares encouraging you.</p></blockquote>

<p>Yup, this is the part of the post where I talk about feelings. I don't think you can effectively lead <em>anything</em> –
not a blog, not a team – without caring about the people around you.</p>

<p>Another way I tried to increase attendance to writing office hours was to reach out to colleagues one-on-one to
offer my help (and mention the office hours). The first thing I did was look for engineers who <em>wanted</em> to write
more. Artsy uses <a href="https://lattice.com">Lattice</a> to help employees accomplish their goals, so I looked for anyone who had shared a goal
related to knowledge-sharing. I found a few and reached out to them to offer my help achieve those goals.</p>

<p>But that was just a one-off way to find people interested in writing; what I wanted to build was an ongoing way to
encourage more blog posts. I found this <em>one weird trick</em>: just pay attention to what people were working on.
That's it. If I heard that someone had experimented with a new technology, or shipped a new feature, or solved an
interesting bug, I would contact them privately to ask if they'd be interested in writing a post about it.
Sometimes over Slack, sometimes in person.</p>

<p>Over the years, I've perfected my pitch:</p>

<ul>
<li>Emphasize the learning experience they've gone through: "That must have been a difficult
feature/bug/investigation. Good job figuring it out!"</li>
<li>Ask them if they've thought about writing a blog post (in a lot of cases, they had!): "Have you thought about
writing a blog post about this? The engineering blog would be a great spot, or you could use your personal blog."</li>
<li>Describe the value of writing: "Lots of people have faced this same issue – a blog post would be really valuable
to the whole web developer community!"</li>
<li>Offer to help and tell them about weekly writing office hours: "I run writing office hours every Wednesday at
2:00, but feel free to ping me directly if I can help out before then."</li>
<li>Emphasize that, while I'm here to help, there is no pressure to write: "No pressure, of course! I know you're
busy with such-and-such project."</li>
</ul>


<p>Pitching them is only the first step – I'd then create recurring reminders in OmniFocus to follow-up with every few
weeks. I'd DM them to ask how the post was going and if I could help get them to the next step. So if they were
still working on an outline, I'd offer to help them finish it. Or if they had an outline and were working on
filling it out, I'd offer to read what they had so far and give feedback. It really depended on the person and
their goals. At two reminders, I'd offer to stop reminding them if it wasn't helpful. After five or so reminders,
with no progress, I'd quietly drop them from my OmniFocus list. No shame.</p>

<p>It might sound like a lot of work, but it's actually just a few small recurring tasks. With a little care and the
right system for managing my own time, I might spend 10 minutes a week following up with people. The important part
is just caring about the person and their knowledge-sharing goals (whatever they are).</p>

<p>I would estimate that my success rate was about 50%. That's pretty great, actually! Some blog posts just didn't go
anywhere, and that's okay. Everyone is busy. Some were months-long journeys that <em>did</em> eventually get posted. But
some blog posts grew to be much more than blog posts – in one case, it grew to an entire working group of engineers
who are now investing in everyone's capacity to grow as an engineer.</p>

<p>Like I said earlier, writing office hours became about more than <em>just</em> writing.</p>

<hr />

<p>We saw in the <a href="https://ashfurrow.com/blog/technical-writing-on-the-web/">last post</a> how to become a proficient technical writer. We saw in this post how to nurture
a culture of writing on a team. It's an ongoing process – as I learn more, I'll be sure to share what I learn with
all of you. Take care.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How did Artsy become OSS by Default?]]></title>
    <link href="http://artsy.github.io/blog/2019/04/29/how-did-artsy-become-oss-by-default/"/>
    <updated>2019-04-29T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2019/04/29/how-did-artsy-become-oss-by-default</id>
    <content type="html"><![CDATA[<p>One of the defining cultural features of the Artsy Engineering team is that we strive to be Open Source by Default.
This didn't happen over-night and was a multi-year effort from many people to push Artsy's engineering culture to
the point where it was acceptable and living up to the ideals still requires on-going effort today.</p>

<p>I think to understand this, we need to dive into the archives of some of member's older posts to grok their
intentions and ideas. Yes, this is a re-cap episode. Let's go.</p>

<!-- more -->


<a name="What.is..Open.Source.by.Default.."></a>
<h1>What is "Open Source by Default"?</h1>

<p>In short, it's the idea that working in the open should be your starting position for a new project and when
creating a new project you need to argue the value of closing the project instead. This turns into an axiom which
powers quite a lot of the <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#engineering-principles">Engineering Principles</a> which Artsy holds dear.</p>

<p>In 2015, as we were nearing working entirely in the open - our CTO at the time, <a href="https://code.dblock.org">dB.</a> wrote what became our
Open Source by Default north-star:</p>

<blockquote><p>When starting a new service, library or application I am going to default to open. I am going to weigh whether
there’s any advantage of keeping a project closed-source, knowing and presuming that there’re numerous
disadvantages.</p>

<p>Team heads, including myself, are making open-source their foundation. This means building non-core intellectual
property components as open source. That’s easily 2/3 of the code you write and we all want to focus on our core
competencies. Hence open-source is a better way to develop software, it’s like working for a company of the size
of Microsoft, without the centralized bureaucracy and true competition.</p>

<p>By default, I contribute to other people’s generic open-source solutions to save time and money by not
reinventing the wheel. Taking this further, I spend significant amount of time extracting non-domain-specific
code into new or existing open-source libraries, reducing the footprint of the proprietary applications I work
on.</p></blockquote>

<p>→ <a href="https://code.dblock.org/2015/02/09/becoming-open-source-by-default.html">Becoming Open Source by Default</a></p>

<a name="How.Did.We.Get.There."></a>
<h1>How Did We Get There?</h1>

<p>In 2011 Artsy hired <a href="https://code.dblock.org">dB.</a> to be our Head of Engineering, You can get a sense of his frustration in trying to do
Open Source work in prior companies via a post from 2010 on opensource.com.</p>

<blockquote><p>Armed with a healthy dose of idealism, I went to executive management and proposed we open source the tool. I was
hoping for a no-brainer and a quick decision at the division level. To my surprise, it took two years, a vast
amount of bureaucracy, and far more effort than I ever anticipated.</p></blockquote>

<p>→ <a href="https://opensource.com/life/10/12/corporate-change-contributing-open-source">Corporate change: Contributing to open source</a></p>

<p>In contrast today, in the culture he set up for Artsy Engineering - you actually have a (<a href="https://github.com/artsy/README/issues/131">tiny!</a>) bit more
bureaucracy if you wanted to create a new <em>closed</em> source project than an open source one.</p>

<a name="L2011.-.First.steps"></a>
<h2>2011 - First steps</h2>

<p>Towards the end of 2011, Artsy's first step into contributing to open source was via a project called <a href="https://github.com/sarcilav/heroku-bartender">Heroku
Bartender</a> (dB. has a <a href="https://code.dblock.org/2011/03/20/continuous-deployment-with-heroku-bartender.html">write up on it</a>).</p>

<p>Artsy is lucky because both of our co-founders have a technical background (<a href="https://www.forbes.com/special-report/2014/30-under-30/art-and-style.html">computer science at
Princeton</a>, and <a href="https://www.technyc.org/leadership-council/sebastian-cwilich">AT&amp;T Labs</a>) because our CEO then sent a team email which really hammered the internal
value of writing OSS and letting people know it exists:</p>

<blockquote><p>"Team, The Engineering team just open sourced an awesome tool called Heroku-Bartender. It was mentioned on Hacker
News with a link to its GitHub repository. It made it into the top posts. I want everyone to check it out and
read through the comments. Open source is a great way for us to establish engineering credibility while
contributing to the community-at-large. -Thank you and congratulations to Engineering."</p></blockquote>

<p>dB. reflects on how different the mentality for open source is different in a modern startup in contrast to
existing large corporations.</p>

<blockquote><p>My CEO has made giving back to the community and building karma part of our company culture. Investors look for
this because it attracts those top engineers who will ultimately execute the company’s vision. Open source is no
longer the way of the future—it is the way the new CEOs are wired.</p>

<p>The companies that don’t embrace these open movements will simply fail, because the culture of secrecy and fear
is a thing of the past.</p></blockquote>

<p>→ <a href="https://opensource.com/business/11/5/thinking-open-source-how-startups-destroy-culture-fear">Thinking open source: How startups destroy a culture of fear</a></p>

<a name="L2012.-.Open.Communications"></a>
<h2>2012 - Open Communications</h2>

<p>While Artsy started to ship a lot more libraries in 2012, probably the most important step we took during this
first year was creating this blog, and publishing 33 (<a href="/blog/archives/">!</a>) blog posts by 8 authors (close to the entire
team!).</p>

<p>This really helped established a baseline that external communications could be a foundation of openness, it might
not yet be code, but blog posts are an awesome start. I know my first blog during this time was specifically built
because I had solved a hard problem which I expected others would have. My answer wasn't generic enough to warrant
making a library but it was big enough to write a <a href="/blog/2012/05/11/on-making-it-personal--in-iOS-with-searchbars/">blog post sharing the code</a> and providing context.</p>

<p>We structured write-ups as being an important part of our work, and dB. as Head of Engineering started leading by
example by shipping about 2/3rds of our posts. Writing this many blog posts in our first year of creating a blog is
a pretty solid achievement in my opinion, and the blog has always represented Artsy's Engineering team in one way
or another:</p>

<blockquote><p>I consider our blog, and the rest of the site, to be the canonical representation of the Artsy Engineering team
online. We've carefully grown an Artsy Engineering aesthetic around it.</p></blockquote>

<p>→ <a href="/blog/2019/01/30/why-we-run-our-blog/">Why We Run Our Own Blog</a></p>

<p>Getting people into a space where they feel like contributions to this blog are not <em>big deals</em> but are <em>iterative
improvements</em> was step one towards OSS by Default.</p>

<blockquote><p>A commit says the what, a pull request the how and a blog post gives the why. Writing about our code allows us to
provide documentation for future employees with the context around how decisions were made. Nobody <em>wants</em> to
ship messy code, but a lot of the time you choose to in order to provide something positive.</p></blockquote>

<p>→ <a href="TODO">OSS Expectations</a></p>

<!--
require 'yaml'
a = YAML.load_file("config.yml")
a["oss_projects"].select { |o| o["created"].include? "2012" }.map { |o| '[' + o["title"] + '](' + o["repository"] + ')'  }.join(", ")
-->


<p>That said, the team wasn't sitting on our hands in terms of making shared infrastructure, we built libraries within
the Ruby and iOS communities: <a href="https://github.com/orta/ARAnalytics">ARAnalytics</a>,
<a href="https://github.com/aaw/resque-heroku-scaling-canary">resque-heroku-scaling-canary</a>,
<a href="https://github.com/dblock/heroku-forward">heroku-forward</a>, <a href="http://github.com/artsy/garner">Garner</a>,
<a href="https://github.com/joeyAghion/spidey">spidey</a>, <a href="https://github.com/dblock/guard-rack">guard-rack</a>,
<a href="https://github.com/dblock/rspec-rerun">rspec-rerun</a>,
<a href="https://github.com/aaw/hyperloglog-redis">hyperloglog-redis</a>,
<a href="https://github.com/aaw/cartesian-product">cartesian-product</a>,
<a href="https://github.com/aaw/space-saver-redis">space-saver-redis</a> &amp;
<a href="https://github.com/dblock/mongoid-cached-json">mongoid-cached-json</a>.</p>

<p>Some of which we still use today.</p>

<a name="L2013.-.Tools..amp..Libraries"></a>
<h2>2013 - Tools &amp; Libraries</h2>

<p>In 2013 Artsy took its first steps towards separating our front-ends from our back-ends. From a perspective of OSS
by Default this lowers the barriers a lot. We have been conservative with opening the source code for back-end
services, as they tended to contain more valuable business infrastructure.</p>

<p>As the web team explored building websites in Node, we took opportunities to use marketing websites like
<a href="https://iphone.artsy.net">iphone.artsy.net</a> (<a href="https://github.com/artsy/flare">flare</a>) and <a href="https://2013.artsy.net">2013.artsy.net</a>
(<a href="https://github.com/artsy/artsy-2013">artsy-2013</a>) to explore building a website in the open. These projects were
small, self contained and well scoped. I wasn't involved in the decision to make them open, but I'm pretty sure it
went something like <em>"Should this be private? Nah. Ok."</em> A single page web-app wasn't a risk.</p>

<p>The team also started exploring working on some more fundamental OSS infrastructure, we built out a framework for
building Node apps called <a href="/blog/2013/11/30/rendering-on-the-server-and-client-in-node-dot-js/">Ezel</a> (which we still use today <a href="/blog/2017/09/05/Modernizing-Force/">in Force</a>) and started work to
co-maintain CocoaPods and CocoaDocs.</p>

<a name="L2014.-.New.Apps"></a>
<h2>2014 - New Apps</h2>

<a name="artsy.net"></a>
<h3>artsy.net</h3>

<p>In 2014 we <a href="/blog/2014/09/05/we-open-sourced-our-isomorphic-javascript-website/">open-sourced the Artsy website</a>. This was a major step forward in OSS by Default, we played
it safe by having the open source aspect as being a public fork that engineers would push changes to. This meant
that GitHub issues and Pull Request discussion could happen in private. It was a good, safe, incremental step. We
took an application which was very dear to us, and found a way to reduce the risk in moving to be open.</p>

<p>We could move our main website to be open source because we had successfully shipped prior art. The problems were
more or less the same, just at a larger scale. We had to worry about leaking secrets in code and commits, but those
best practices we had baked into the website from its inception 10 months prior.</p>

<a name="Editorial.CMS..amp..Bidding.Kiosk"></a>
<h3>Editorial CMS &amp; Bidding Kiosk</h3>

<p>We scoped out building a <a href="https://github.com/artsy/positron">new CMS</a> for our editorial team, this new app started as open source from day one.</p>

<p>This step inspired the iOS team who were also exploring trying to move to be more open in their work. By this point
we had two large private iOS apps, but had the need for a new iOS app for covering bidding at auctions on-site.</p>

<blockquote><p>Orta and I met some friends over a weekend in Austria and, during our drive across the country, discussed the
possibility of developing this new iOS app as a completely open source project. We were both excited about the
prospect and had the support from dB. to make it open.</p></blockquote>

<p>→ <a href="https://artsy.github.io/blog/2014/11/13/eidolon-retrospective/">Developing a Bidding Kiosk for iOS in Swift</a></p>

<p>We built out some necessary community infrastructure for iOS apps to be built in the open, and worked exclusively
in the open on this project. Working in the open on the bidding kiosk proved to be very useful when communicating
with others about hard problems we were seeing with new tooling, as well as providing reference implementations for
community ideas.</p>

<a name="L2015.-.Backtracking.to.move.iOS.to.OSS.by.Default"></a>
<h2>2015 - Backtracking to move iOS to OSS by Default</h2>

<p>We were really starting to see what OSS by Default looks like by 2015. You can feel it in dB's and the mobile
team's writing:</p>

<blockquote><p>First, I recognize that becoming open-source by default is emotionally, organizationally and, sometimes,
technically hard. As such, this post is not a manifesto, it’s a step in the right direction that will guide my
career and technology choices in the future.</p>

<p>When starting a new service, library or application I am going to default to open. I am going to weigh whether
there’s any advantage of keeping a project closed-source, knowing and presuming that there’re numerous
disadvantage</p>

<p>I am going to default to the MIT License for all new projects, because it’s short and clear and protects everyone
[...]</p>

<p>Despite overwhelming evidence, many non-technical people are worried about risks surrounding open-source. I am
convinced that any business success depends a lot more on your ability to serve customers and partners, the brand
and culture and the commitment to hiring the best of the best in all fields, than on the hypothetical risks that
a competitor might gain by taking advantage of your open-source software.</p></blockquote>

<p>→ <a href="https://code.dblock.org/2015/02/09/becoming-open-source-by-default.html">Becoming Open Source by Default</a></p>

<blockquote><p>The Artsy mobile team is small, especially in contrast to the other teams in this issue of objc.io. Despite this,
we’re notable for our impact on the community. Members of our iOS development team are — and have been — involved
in almost all major open-source projects in the Cocoa community.</p>

<p>At the start of 2015, we finished open sourcing the Artsy iOS app, eigen. This is a process that took many
months; we needed to take considered, incremental steps both to prove that there was business value in open
sourcing our consumer-facing app, and to disprove any concerns around letting others see how the sausage is made.</p>

<p>Earlier, we said that being open source by default means that everything stays open unless there is a good reason
to keep it secret. The code we do share isn’t what makes Artsy unique or valuable. There is code at Artsy that
will necessarily stay closed forever.</p>

<p>Working in the open isn’t so different from typical software development. We open issues, submit pull requests,
and communicate over GitHub. When we see an opportunity to create a new library, the developer responsible for
that library creates it under his or her own GitHub account, not Artsy’s.</p>

<p>People often ask why we operate in the open as we do. We’ve already discussed our technical motivations, as well
as the sense of purpose it gives individual team members, but honestly, working in the open is just smart
business.</p></blockquote>

<p>→ <a href="https://www.objc.io/issues/22-scale/artsy/">iOS at Scale: Artsy</a></p>

<p>2015 was the year where the mobile team went back and open-sourced our previous iOS apps. We had two of them, we
started with the app the team worked on daily: Artsy for iOS (Eigen). We opened the repo in january, and had a
write-up on the process and changes needed to make it work a few months later once the dust has settled.</p>

<blockquote><p>Credit where credit is due, when we were working on Eidolon [the Bidding Kiosk], our CTO dB. just casually tossed
the idea that, really, Eigen should be open source too.</p>

<p>We devoted time at the end of 2014 to understand what the constraints were for getting the app opened. [...] We
opted to go for a total repo switch, removing all history. There were a lot of places where keys could have been
hiding within the app.</p>

<p>One of the things that we found a bit sad about the transition to a new repo, is that it's hard to give past
contributors recognition for their work.</p>

<p>It's one thing to think that it's possible, it's another to do it. I'm glad that I am in a position where I can
enact change. I felt no resistance in the process. I kept offering potential avenues for someone to stop me, too.
I emailed the entire team as I started the process 2 weeks before it happened, I talked to anyone who might write
issues or contribute from the design team. As I got further along the process and sent another email out that it
was going to happen tomorrow. All I got were 👍 and 🎉s in GIF form.</p></blockquote>

<p>→ <a href="https://artsy.github.io/blog/2015/04/28/how-we-open-sourced-eigen/">How we Open Source'd Eigen</a></p>

<p>Going through the process, and being certain in the trade-offs meant for the project gave the mobile team the
confidence to take the time to open source their oldest iOS project - a gallery portfolio tool, Folio.</p>

<blockquote><p>It's worth mentioning that we don't just talk externally about open source. Internally, the Mobile team runs
talks about open source for the rest of the Artsy staff. As well, we discuss the tooling and business
implications of having our work in public repos. Artsy strives for an open culture, in this case the development
team, on the whole, is just further along in the process.</p>

<p>The open Source app idea started with an experiment in the Summer of 2014, asking, "What does a truly open source
App look like?" The outcome of that was our Swift Kiosk app, Eidolon. Open from day one. We took the knowledge
from that and applied it to our public facing app, Eigen. Open from day 806. That made 2/3rds of our apps Open
Source. I'm going to talk about our final app, Energy. Open from day 1433 and ~3500 commits.</p>

<p>Folio is interesting in that it has competitors. To some extent the Kiosk app does too, but the cost of entry
there is really high in comparison. Folio on the other hand, has a handful of competing businesses who exist to
only build a Gallery/Museum/Collector portfolio app.</p>

<p>Energy, however, requires you have a Artsy partner account. So opening it up would mean that an OSS developer
hits the login screen and is stuck. In developing this app, I've slowly been creating my own partner gallery
account based on my paintings and photography. So now when you set up the app to be ran as an OSS app, it will
pre-load a known database of artworks and metadata from my test gallery.</p>

<p>Its easy to imagine that open sourcing something is an end-point, but from our perspective it is a journey. We
want to make sure that anyone can download this app, learn how and why it's structured and then run through the
app with a debugger to get a deeper sense of how everything connects. Just releasing the code would have been
underwhelming. Instead we're aiming high.</p></blockquote>

<p>→ <a href="https://artsy.github.io/blog/2015/08/06/open-sourcing-energy/">Open Sourcing Energy</a></p>

<p>This one is a good read, but extra worth the click because it includes an email I wrote to the entire of Artsy with
the intent of priming the company about opening the source code.</p>

<p>dB. and myself spent quite a lot of time talking to the rest of the company about the OSS ideals, our company's
values and open source fit. Here's <a href="https://vimeo.com/136554627">a 5m video</a> which is a great example of how we presented open source
internally:</p>

<blockquote><p>"Are there any advantages in keeping something closed? If there are no advantages, default to open."</p>

<p>"Instead of asking for permission, just communicate what you are doing and let other people suggest better ways
of doing it. Maybe sometimes a better way is closed."</p>

<p>"Artsy will stand behind your open source contributions as a team."</p>

<p>"Open Source will create more value, and it will positively impact our culture."</p></blockquote>

<a name="L2016.-.Web.OSS.by.Default"></a>
<h2>2016 - Web OSS by Default</h2>

<p>In 2016 we had really started to understand the differences in how we interact with the open source community:</p>

<blockquote><p>...and in over a year these expectations have been met. Some of our libraries have become big, and our apps have
received small feature PRs. We're pleasantly surprised when it happens, but we don't expect it.</p>

<p>I didn't expect to be told face to face how many people have read, and learned from our codebases. We get around
120 unique clones of our iOS apps every week. People tell us that it's where they found a certain technique, or
that they could see how the trade-offs were made for certain decisions.</p>

<p>I also under-estimated how useful open code is in encouraging a culture of writing.</p></blockquote>

<p>→ <a href="https://artsy.github.io/blog/2016/01/13/OSS-Expectations/">Open Source Expectations</a></p>

<p>Once we had proved that we could safely port our large, private iOS codebases to be public. That we could safely
work in the open on mobile project, we <a href="https://artsy.github.io/blog/2016/09/06/Milestone-on-OSS-by-Default/">brought that back to web</a>. We went back to take artsy.net from
being an open fork to working in the open:</p>

<blockquote><p>Though Force wasn't quite Open Source by Default, it represented a really important step for Artsy's OSS
perspective but was not the end goal. We were opening our source, but not opening our process.</p>

<p>... the web team started the process of opening our apps at Artsy, then the mobile team took the next big step.
Now the teams are both in lock-step, and if you work on the front-end at Artsy - OSS by Default is the way we all
work now.</p></blockquote>

<p>→ <a href="https://artsy.github.io/blog/2016/09/06/Milestone-on-OSS-by-Default/">Helping the Web Towards OSS by Default</a></p>

<a name="L2017-2019.Moving.the.Platform.forward"></a>
<h2>2017-2019 Moving the Platform forward</h2>

<p>As a gross simplification, Artsy is split between back-end and front-end engineers. With most all of the
front-end as open (well, maybe 90%, which is <em>good enough</em>™️) then the only space for improvement towards Open
Source by Default was within the back-end. We call the collection of engineers with the skill-sets for building
APIs and shared infrastructure the Platform team.</p>

<p>Our platform teams have always had a weaker stance towards opening their codebases. Most of our APIs are almost
100% business logic, and there's a good reason for a lot of our APIs to be closed source. Though in the the last
two years though there's been movement towards writing new services in the open:</p>

<p><strong>2017</strong> - <a href="https://github.com/artsy/bearden">artsy/bearden</a> &amp; <a href="https://github.com/artsy/rsvp">artsy/rsvp</a></p>

<p><strong>2018</strong> - <a href="https://github.com/artsy/APR">artsy/APR</a>, <a href="https://github.com/artsy/exchange/">artsy/exchange</a> &amp;
<a href="https://github.com/artsy/kaws/">artsy/kaws</a></p>

<p><strong>2019</strong> - <a href="https://github.com/artsy/volley">artsy/volley</a></p>

<p>Which over the course of the last two years seems to be about half of the new systems we've built. This is great!
Examples of private tools are analytics parsers, GDPR infrastructure and machine learning services. These had good
reasons to be closed and <a href="https://github.com/artsy/README/issues/131">have documented rationales for being closed</a>.</p>

<a name="L2019."></a>
<h2>2019+</h2>

<p>However, asking where do we go from here is a pretty tricky question. Most of the code that would be opened is now
open, and the projects which could move into the public be are very reasonably contentious.</p>

<a name="Does.that.mean.we..strong.are..strong..Open.Source.by.Default."></a>
<h2>Does that mean we <strong>are</strong> Open Source by Default?</h2>

<p>For people that joined post-2016, it certainly feels like it. People who apply to Artsy cite Open Source by Default
as being a strong factor in their decisions.</p>

<p>I'm not too sure personally though, maybe only in the axiomatic sense. Artsy operate by the rule of open by
default, but it takes time and effort to do the extra work which is derived from that idea: e.g. improving our
community engagement.</p>

<p>That's Artsy's biggest space for cultural growth now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Learned Having a Coffee with Every Engineer]]></title>
    <link href="http://artsy.github.io/blog/2019/04/19/having-a-coffee-with-every-engineer/"/>
    <updated>2019-04-19T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2019/04/19/having-a-coffee-with-every-engineer</id>
    <content type="html"><![CDATA[<p>In early 2018, I was set to begin my fifth year working at Artsy. Something about my imminent Artsyversary had me
thinking about my role within the Engineering team. Not my role as an engineer <em>per se</em>, but my role as a
<em>colleague</em>. This is the longest I've ever worked for one company, and as Artsy started growing the team last year,
I wanted to <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#leverage-your-impact">leverage my impact</a> as a longtime colleague to help scale its culture.</p>

<p>Artsy collects quarterly, anonymous, company-wide surveys through <a href="https://www.cultureamp.com">Culture Amp</a> to determine how everyone is
doing. These are great for answering quantitative questions about the team, like "how engaged are we on average?",
and I always check out the breakdown of answers in the Engineering team. But there's something unsatisfying about
these reports – they're super-valuable, but they feel impersonal to me.</p>

<p>If I wanted to leverage my impact, I needed to play to my strengths and interests. I'm keenly interested in people
– as individuals – so I decided that the best way for me to contribute to the team was to get to know everyone as
individuals. To become someone the team could talk to. Someone outside the typical manager/employee structure, who
could use their history at Artsy to answer questions (or at least point them in the right direction).</p>

<p>So, I set off on a project to meet with every member of Artsy's Engineering team for a one-on-one. With no explicit
goals or expectations, but in line with Artsy's <a href="https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#people-are-paramount">People are Paramount</a> value, I got to know my colleagues
better.</p>

<!-- more -->


<p>I didn't want this project to interfere with my product work, so I decided to take things slow. I started with a
list of every Artsy engineer and then removed anyone I already had a close working relationship with. Next, I
prioritized the team leads and randomized the rest of the list. I set up a recurring task (yay OmniFocus) to
schedule a coffee with an engineer every week. When we met, I'd cross them off my list.</p>

<p>That was over a year ago, so what did I learn? Well, a lot, actually! But to get a sense of the impact my project
had, you'll need some context.</p>

<p>2018 was a complex year for Artsy, where we both gained and lost more engineers than usual. The increase in
engineering turnover was generally attributable to what I'll call "cultural churn." Scaling a team comes with new
challenges, and our team leadership tried to meet those challenges with changes to the team's structure. Some of
these changes turned out to be tougher than we'd hoped. Our team is in a great spot <em>now</em>, but we didn't get from
there to here via a straight line.</p>

<p>In the midst of this cultural churn, I was trying to have a one-on-one with every engineer. I was asking
people "hey, how are you doing? Want to grab a coffee?" And that actually had a pretty big impact: if I met someone
and they told me "this situation is stressing me out" or "this feels bad", it was really validating for them to
hear me respond "yeah, I'm feeling this too. It's not just you." This dovetailed with my contemporaneous research
into <a href="https://ashfurrow.com/blog/building-better-software-by-building-better-teams/">building compassionate teams</a>, which I leveraged throughout this project.</p>

<p>Turns out: people feel better when they know the problems they have are shared by others. <em>Sharing</em> suffering is
actually one way to <em>minimize</em> suffering, and minimizing suffering is at the core of my beliefs on compassionate
teams.</p>

<p>Once I knew something was wrong with our team culture, I went to my manager to discuss the broad-strokes themes of
what I was hearing from my peers. I would never betray the confidence of a colleague, but being able to say "lots
of people are all feeling X" provided an important data point. While leadership already knew that <em>something</em> was
not quite right, this data point was a strong indicator that leadership had to intervene quickly. I'll skip the
details of how we ultimately addressed our cultural churn (tl;dr it involved our leaders asking IC's questions, and
then listening to what they had say). I'm quite happy to say that things are a lot better now!</p>

<p>While my "have a one-on-one with everyone" project obviously didn't "fix" the situation, it put me in a position to
<em>help</em> fix it. In addition to getting to know everyone as individuals, I got to help identify and help address our
cultural churn.</p>

<p>So what next? Well, a lot, actually! Even more engineers have since joined Artsy, and I admittedly haven't had a
one-on-one with all of them. But through this project, I realized that I'm very keen to do more of this kind of
people-work. When my manager recently brought up the possibility of becoming a tech lead, <a href="https://ashfurrow.com/blog/reflecting-on-5-years-at-artsy/">I jumped on the
opportunity</a>. I started last week.</p>

<p>My initial goal, to have a coffee with everyone, remains unfulfilled. It probably won't ever be, considering that I
now have even less free time in my new role. I'm not an IC anymore – my one-on-ones have to now be focused on <em>my</em>
team. While the goal of meeting everyone for a one-on-one will never be accomplished, the journey turned out to be
more important.</p>

<p>Important both to me – getting to know my colleagues (and myself!) better – but also important for the team. I got
to help our team's culture scale up, and through that experience, I found and expanded the perimeter of my sphere
of influence as an IC.</p>

<p>I can't thank Artsy enough for giving me the freedom, as an IC, to research team dynamics, to pursue this project,
and for taking all my feedback seriously. If you're a senior engineer wondering what's next, try turning your
attention to your team. I would bet that you'll learning something worthwhile.</p>
]]></content>
  </entry>
  
</feed>
