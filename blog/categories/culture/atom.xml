<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: culture | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/culture/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2019-04-12T20:21:43+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why we added an RFC process to Artsy]]></title>
    <link href="http://artsy.github.io/blog/2019/04/11/on-an-rfcs-process/"/>
    <updated>2019-04-11T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2019/04/11/on-an-rfcs-process</id>
    <content type="html"><![CDATA[<p>Growth is tricky. Whether in terms of raw headcount or people's evolving career stages. As a team you want to
provide ways in which members can experiment with new ideas, and provide tools to help them offer new perspectives.
One of our greatest tools for instituting change at Artsy is our RFC process.</p>

<p>An RFC is a Request For Comments, and it is a structured document (in the form of GitHub issue normally) which
offers a change to something. The format is used in large open source projects like: React
(<a href="https://github.com/reactjs/rfcs/blob/master/README.md">Overview</a>,
<a href="https://github.com/reactjs/rfcs/blob/master/0000-template.md">Template</a>), Swift
(<a href="https://github.com/apple/swift-evolution/blob/master/process.md#how-to-propose-a-change">Overview</a>,
<a href="https://github.com/apple/swift-evolution/blob/master/0000-template.md">Template</a>) and Rust
(<a href="https://github.com/rust-lang/rfcs#rust-rfcs">Overview</a>,
<a href="https://github.com/rust-lang/rfcs/blob/master/0000-template.md">Template</a>). To give core &amp; non-core contributors a
chance to propose an idea to everyone before implementing a change.</p>

<p>We <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#own-your-dependencies">took</a> this idea and applied to the process of making any cultural change in the company. Read on to find out
why we needed it, how we refined it, some of the tooling we built around it, and what other options are available.</p>

<!-- more -->


<a name="Why.did.we.create.an.RFC.process."></a>
<h2>Why did we create an RFC process?</h2>

<p>We created the RFC process in parallel with <a href="https://github.com/danger/peril">Peril</a> being <a href="/blog/2017/09/04/Introducing-Peril/">introduced at Artsy</a>. Prior to
Peril, most changes to culture were localised in different teams. However, once Peril gave us the ability to create
cultural rules across all engineering repos in GitHub we also needed a way to let people know and provide feedback
about these changes.</p>

<p>We started with the <a href="https://github.com/artsy/peril-settings/pull/4">smallest possible implementation</a> of an RFC and a <a href="https://artsy.slack.com/archives/C02BC3HEJ/p1503690782000372">notification service</a>ðŸ”’. You
would write an issue with this template:</p>

<pre><code>Title: "RFC: Add an emoji for when a node package is version bumped"

Proposal: If the repo has a `package.json`, we should look to see if its version has
          changed and then submit a tada emoji.

Reasoning: A release is important, we should cherish them.

Exceptions: None
</code></pre>

<p>This RFC came with a Peril rule that would post a notification into slack about an RFC being created:</p>

<p><img src="/images/intro-rfcs/first-rfc.png" alt="" /></p>

<p>Which meant everyone had the chance to know in-advance that a change was being discussed because it crossed team
communication boundaries. Here's <a href="https://github.com/artsy/artsy-danger/issues/5">the first RFC</a> used at Artsy.</p>

<p>This was specifically built to be the minimum possible to get an idea of what we actually wanted from an RFC
process for cultural changes.</p>

<a name="How.did.it.evolve."></a>
<h2>How did it evolve?</h2>

<p>Version 2 of our RFC process is what we've stuck with for the last 2 years. The second version expanded the scope
from just making Peril changes to being comprehensive enough to cover most cultural changes we wanted.</p>

<pre><code>Title: "RFC: Add a Markdown Spell Checker to all Markdown docs in PR"

## Proposal:

Apply a spell checker to every markdown document that appears in a PR.

## Reasoning

We want to have polished documents, both internally and externally. Having a spellcheck
happening without any effort on a developers part means that we'll get a second look at
any documentation improvements on any repo.

## Exceptions:

This won't be perfect, but it is better to get something working than to not have it at all.
I added the ability to ignore files: so CHANGELOGs which tend to be really jargon heavy will
be avoided in every repo.

Other than that, we can continue to build up a global list of words to ignore.

## Additional Context:

You can see our discussion [in slack here](/link/to/slack.com)
</code></pre>

<p>This version also came with a recommendation on how to resolve the RFC, after a week you would add a comment and
close the issue:</p>

<pre><code>## Resolution
We decided to do it.

## Level of Support
3: Majority acceptance, with conflicting feedback.

#### Additional Context:
Some people were in favor of it, but some people said they didn't want to do it for project X.

## Next Steps
We will implement it.

#### Exceptions
We will not implement it on project X. We will revisit the decision in 1 year.
</code></pre>

<p>We've evolved the closing an RFC process since then:</p>

<ul>
<li>To <a href="https://github.com/artsy/README/issues/162">be more specific on how/when to close an RFC</a>. Which introduces a stalled state. Turns out some
discussions take longer to resolve than a week</li>
<li>Peril would post <a href="https://github.com/artsy/peril-settings/pull/46">multiple notifications</a> over the course of a week to make sure people don't miss the
chance to contribute</li>
<li>We added a weekly summary of open RFCs into Slack for our <a href="https://github.com/artsy/README/blob/master/events/open-standup.md#during-standup">team standup</a></li>
</ul>


<p><img src="/images/intro-rfcs/summary.png" alt="/images/intro-rfcs/summary.png" /></p>

<a name="What.are.the.alternatives."></a>
<h2>What are the alternatives?</h2>

<p>This RFC process is not without it's trade-offs.</p>

<p>An RFC is built with an action in mind, and it explicitly defaults towards this. This process purposely bakes in
silence as positive indifference from observers. When being used as a consensus device, an RFC process really isn't
that great. It's an asynchronous, flat conversation, which makes it hard to discuss all avenues with many
simultaneous voices and can sometimes feel like whoever posts the most often kinda wins.</p>

<p>For consensus tools you really are better off with a meeting. There are all sorts of structured meetings which do a
great job of finding agreement across many opinions.</p>

<p>For example, we wanted to try and get consensus on how to build APIs at Artsy. The RFC for that would probably have
been something like "Move to use GraphQL in all new APIs", which is a nuanced technical mandate that would require
buy in from many people. While it does have an direct action, trying to feel like everyone agrees and will work
this way in the future would have probably not worked out in a single-threaded long-form issue. Instead, we opted
to use a <a href="https://en.wikipedia.org/wiki/Town_hall_meeting">town-hall style</a> meeting, where people who had strong opinions would have time to present them - then
at the end all developers would have the chance for feedback.</p>

<a name="Where.does.it.work.best."></a>
<h2>Where does it work best?</h2>

<p>This RFC process is good for "I would like to improve this, does that make sense?" - and it's a really great case
of <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#minimal-viable-process">Minimum Viable Process</a> where one issue can spark a great team discussion. Here's some of my favourite
ones from Artsy:</p>

<ul>
<li><a href="https://github.com/artsy/README/issues/171">Provide explicit recommendations when PDDE should take time off </a></li>
<li><a href="https://github.com/artsy/README/issues/131">Document the rationale for why Artsy's various closed source repositories aren't open</a></li>
<li><a href="https://github.com/artsy/README/issues/86">Relaunch the Platform practice</a></li>
<li><a href="https://github.com/artsy/README/issues/76">New Hire Buddies</a></li>
<li><a href="https://github.com/artsy/README/issues/31">All GraphQL API servers have a root <code>_schema.graphql</code> file </a></li>
<li><a href="https://github.com/artsy/README/issues/117">New dependencies to Emission/Reaction go through the RFC process</a></li>
<li><a href="https://github.com/artsy/README/issues/108">Creating a public facing status page</a></li>
<li><a href="https://github.com/artsy/README/issues/130">Updates to On-Call Process: Jira Ops + Status Page</a></li>
<li><a href="https://github.com/artsy/README/issues/10">Rename the Artsy Omakase to [Something]</a></li>
</ul>


<p>We sometimes have RFCs which we don't want to discuss in public, for those we use our private version of README
called potential. That said, our notification system works on any repo, so if it makes sense to have an RFC on a
repo specifically, that's no problem too.</p>

<p>You can see all of our <a href="https://github.com/search?q=org%3Aartsy+is%3Aissue+label%3ARFC+is%3Aopen">current open RFCs on the Artsy org here</a>, and I've opened comments for folks
to talk below about whether they've enacted something similar - would love to see how this can be improved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So You Want to Be an Engineer]]></title>
    <link href="http://artsy.github.io/blog/2019/03/12/so-you-want-to-be-an-engineer/"/>
    <updated>2019-03-12T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2019/03/12/so-you-want-to-be-an-engineer</id>
    <content type="html"><![CDATA[<p>First of all, that's very exciting! Software engineering is pretty darn coolâ€”you get to learn lots of new things,
understand the technology you use every day better, and contribute to the mysterious maw known as "the internet".</p>

<p>Last February, I also decided that I wanted to pursue computer engineering. I'd been at Artsy for a bit less than
two years at that point, first as a marketing intern working on SEO and then as a coordinator on the CRM (read:
email) team. I'd consistently been working on small technical projects; first doing
<a href="https://github.com/artsy/positron/commit/3176282a3ea94c626e9d851b7c0dd27a1bb0fcb4">some work</a> on a tool for SEO
optimization for our Editorial team, then building
<a href="http://artsy.github.io/blog/2018/11/19/mjml/">emails with MJML</a>, and a few other bits and bobs. But I didn't think
of it as a serious pursuit.</p>

<p>Mostly, that was due to my experience programming in the pastâ€”I did about half a CS major in undergrad. At the
time, I felt that programming wasn't right for me, and I dropped the major during my third year.</p>

<p>It was Artsy's Engineering team that convinced me that programming was something that I both wanted to and could
do. Our engineers have always welcomed learners and been happy to answer questions and empower other teams to do
technical work. I eventually realized that the parts of my work where I was coding were the parts I enjoyed the
most, and that I would likely feel more fulfilled if I made programming my full-time occupation.</p>

<p>Here's what that journey looked like. Hopefully my experience proves helpful to you as you begin (or finish) yours!</p>

<!-- more -->


<a name="Step.One:.Tell.People.What.You.Want"></a>
<h1>Step One: Tell People What You Want</h1>

<p>This might've been the single biggest learning I took away from this experience: <em>if you tell people you want
something, you might just get it.</em></p>

<p>That may sound super obvious. It wasn't for me. I've usually been very passive in my career decisions, taking the
path of least resistance and considering myself lucky when I was able to keep progressing. In this case, I was
making a substantial departure from that idea by being proactive about what it was I wanted.
<a href="https://engineering.gusto.com/i-didnt-want-to-be-a-manager-anymore-and-the-world-didnt-end/">This post</a> by
<a href="https://twitter.com/NoaElad">Noa Elad</a> does a great job with this topic and is certainly worth a read.</p>

<p>The first person I told at Artsy was <a href="https://twitter.com/orta">Orta</a>. He'd often encouraged me to develop my
technical skills, and since he knows Artsy's engineering team and stack better than just about anyone, I figured
he'd be able to point me in the right direction when it came to learning resources and navigating company politics
to get to my eventual goal.</p>

<p>The second person I told was my manager on the CRM team. I fortunately had a very good relationship with my manager
and was confident that she would help me if she could. And by telling her early, I was giving her more opportunity
to advocate for me and making it easier for her to replace me in the event that I was able to switch teams.</p>

<p>The third person I told was Artsy's CTO, <a href="https://www.dblock.org/">dB</a>. This was Orta's recommendationâ€”dB would be
able to tell me if and when a move might be possible, and he could suggest things I should do to improve my chances
of making the switch.</p>

<p>I also didn't keep it a secret from the rest of my team or the company. I didn't show up wearing a shirt that said
"ENGINEER" on it, but I told people, "I'm working on becoming an engineer. I'm really hoping to stay at Artsy, but
if there's not a role open for me, that's fineâ€”I'll search elsewhere."</p>

<p>The net outcome of these conversations was that there wasn't a role open right then (and that I still had lot to
learn before I'd be ready when one became available), but I also left with a better idea of what I should learn and
what I could expect from the coming months.</p>

<a name="Step.Two:.Figure.Out.What.You.Want.to.Learn"></a>
<h1>Step Two: Figure Out What You Want to Learn</h1>

<p>The answer to that question really depends on who you are, where you work, and where you <em>want</em> to work.</p>

<p>I wanted to work at Artsy, and I felt that I was most interested in front-end work. So I asked a few of our
engineers to help me understand our stack and to recommend frameworks/languages I should learn.</p>

<p>If you're interested in changing companies as well as careers, it's worth seeing if your target company or
companies have open source code you can check out. See if you can find them on <a href="https://www.github.com">GitHub</a> and
look at some of their recently updated repos. If you already have some coding experience, see if you can contribute
a little bitâ€”even fixing small bugs or typos is a good place to start, since you're both contributing to their
codebase (which will help you if you land an interview) and learning more about their stack. dB recommended that I
do this with Artsy's code.</p>

<p>As with most companies that have been around for more than a year or two, Artsy is home to projects with many
different stacks. However, most of our newer front-end stuffâ€”things that are recently updated or currently in
developmentâ€”is built on React using TypeScript. So my first question was "what do I need to know in order to write
TypeScript code in a React framework?"</p>

<p>Fortunately, a lot of other people have the same question.</p>

<a name="Step.Three:.Decide.How.You.Want.to.Learn.It"></a>
<h1>Step Three: Decide How You Want to Learn It</h1>

<p>First: <strong>there is no wrong way to go about learning to code</strong>. Whether it takes you 6 months or 6 years, whether
you learn one language or a dozen, whether you ask for a lot of help or do it all yourself, <strong>you are learning and
that is valuable</strong>. Learning to code is not a magical skill. Like just about everything, it's a matter of putting
in time. Just keep trying, even small things, and you <em>will</em> make progress.</p>

<p>Lots of people who want to become engineers go to coding bootcamps like <a href="https://flatironschool.com/">Flatiron</a> or
<a href="https://generalassemb.ly/">General Assembly</a>. That's a very reasonable thing to do! I had a decent grounding in CS
fundamentals thanks to my experience in undergrad, and as a result, I initially decided I wouldn't do a coding
bootcampâ€”I felt I had enough experience to benefit from the multitude of online courses and open source projects
out there.</p>

<p>However, there are definitely real and significant benefits do doing a bootcamp. Here are three that I can think
of:</p>

<ol>
<li>Clear curriculum. At times, I was overwhelmed by the possible ways to proceed and stopped making progress as a
result. Bootcamps take the guesswork out.</li>
<li>Timeline. Because I didn't have a hard date set for a transition or interview, it was up to me to determine how
fast/slow I worked on things, and I stagnated at times as a result.</li>
<li>Community. While the open source community is very much a real thing, and you can find lovely people on the
internet who want to help learners like yourself, it's not the same as having multiple people learning the same
thing at the same time in the same physical space.</li>
</ol>


<p>The downsides, of course, are that coding bootcamps are expensive and time-consuming. Most of us don't have the
luxury to leave a job, pay $10K â€“ $15K in fees, and spend a couple months at a full-time bootcamp with no income.
There are other models, such as online-only bootcamps or after-hours classes, but those come with challenges of
their own.</p>

<p>I'd say that If you can afford a bootcamp and have the time, it's a great way to jumpstart a coding career, but you
don't have to attend one to become a good engineer.</p>

<p>If you decide to go the non-bootcamp route, you also have a lot of good options. I did courses through
<a href="https://www.udemy.com">Udemy</a>, which has a lot of courses that are literally always on sale for $10 - $20. There
are many other similar services out there as well, like <a href="https://www.udacity.com">Udacity</a>,
<a href="https://www.codecademy.com/">Codecademy</a>, and <a href="https://teamtreehouse.com/">Treehouse</a>.</p>

<p>I also highly recommend attending IRL meetups, because that's where you can make connections and learn from others
most easily. I'm a semi-regular attendee at the <a href="https://www.meetup.com/CocoaPods-NYC/">CocoaPods meetup</a> hosted by
<a href="https://twitter.com/ashfurrow">Ash</a> and Orta at Artsy HQ, and <a href="https://www.meetup.com/find/tech/">meetup.com</a> and
<a href="https://peerlab.community/">peerlab.community</a> are great places to find other events.</p>

<a name="Step.Four:.Get.Comfortable.Not.Knowing.Things"></a>
<h1>Step Four: Get Comfortable Not Knowing Things</h1>

<p>When learning engineering concepts (and practicalities), there's a lot you're not going to know.</p>

<p>This piece of advice is important both when learning and once you actually land an engineering job (it's been one
of the hardest parts of my first ~3 months on Artsy engineering).</p>

<p>Part of what makes engineering so cool is that you are always challenged to learn new things and solve new
problems. But especially at first, the mental toolbox you have is pretty limited. When you don't know a language or
framework, it's very hard to solve problems using itâ€”your first problems are likely to be syntax errors and
misunderstandings.</p>

<p>One of the best things you can do is learn how to ask good questions and then ask them. You might be asking them on
a forum, in GitHub issues, in meetings, or in conversation with your
<a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging">favorite rubber duck</a>. Regardless, just asking them will
help, and asking lots of questions is one of the best way to learn things fastâ€”but it takes humility and
self-awareness. <a href="https://twitter.com/b0rk">Julia Evans</a> has a <a href="https://jvns.ca/wizard-zine.pdf">great zine</a> that
has good advice on asking questions, among many other things. For a few more fun and helpful resources, see
<a href="https://github.com/artsy/README/blob/master/resources/tech-learning.md">Artsy's README</a>.</p>

<a name="Step.Five:.Recognize.What.You.Bring.to.the.Table"></a>
<h1>Step Five: Recognize What You Bring to the Table</h1>

<p>Ok, so you're reconciled to the fact that you have a lot to learnâ€”but what about all the things you already know?
Those are important too!</p>

<p>Even if your past work and/or life experience has nothing to do with computers or programming, it can still have
value as you work towards engineering (and after you become an engineer). That value can take a lot of different
forms, and since everyone's experiences are different, I can't say for sure what impact your prior knowledge will
have.</p>

<p>For me, there are a few experiences I brought to engineering that were particularly helpful. Because I was
transitioning from one team at Artsy to another (Marketing â†’ Engineering), I brought with me a broad understanding
of Artsy's goals and needs, which helps with day-to-day prioritization. And when I'm in a sprint planning meeting
or a product review and someone has a question about email or marketing, I can often answerâ€”or at least I know who
to talk to to get to the bottom of the issue quickly. Plus if at some point my team needs to code emails, my
<a href="http://artsy.github.io/blog/2018/11/19/mjml/">past experience</a> will come in very handy.</p>

<p>There are also life experiences that serve me well on the Engineering team. My work as a server and bartender made
me good at clear communication with stakeholders. Cooking for big groups of friends has made me better at
estimating how long I'll need for tasks. Don't underestimate the power of "soft skills"â€”even companies like Google
<a href="https://www.washingtonpost.com/news/answer-sheet/wp/2017/12/20/the-surprising-thing-google-learned-about-its-employees-and-what-it-means-for-todays-students">have come to recognize</a>
that it's often the non-technical skills that separate good engineers from great ones.</p>

<p>â€”â€”â€”â€”</p>

<p>Moving to engineering has been a tricky process, but one I'm very grateful to have experienced. I'm lucky to work
at an organization where moving from email marketing to engineering is possible, and I'm even luckier to have had
the support of engineers, friends, and engineer-friends in making the move. If you end up pursuing this course as
well, I wish you the best of luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Artsy Hires Engineers]]></title>
    <link href="http://artsy.github.io/blog/2019/01/23/artsy-engineering-hiring/"/>
    <updated>2019-01-23T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2019/01/23/artsy-engineering-hiring</id>
    <content type="html"><![CDATA[<p>Interviewing is hard. Interviewers want to make sure they're hiring the person who will add the most value to their
team; candidates want to make sure they're joining a company that aligns with their goals and perspectives.</p>

<p>Recent trends in hiring are white-boarding sessions, trivia questions, and hours of take-home assignments. At
Artsy, we don't use any of these. We often get asked why not - and how we assess technical skill without them.</p>

<!-- more -->


<p>We think our interview process at Artsy is unique, but we also think our interview process is great. We'd love to
see the tech community examine its hiring practices, and hopefully to adopt some of what's made our hiring process
successful. Focusing on knowledge and facts that are already acquired is one way to approach hiring; we prefer to
look at how a person can fill a gap in our team and help us grow.</p>

<p><aside>
  <div class="question">
    <h3>What surprised you about the hiring process at Artsy while you were a candidate?</h3>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/ash.jpg">
    <p class="intro">Ash Furrow says...</p>
    <p>What most surprised me at the time was <em>who</em> was interviewing me. I had a teleconference screening with Artsy's now-CTO before moving on to in-person interviews. Since I was living in Amsterdam at the time, Artsy flew me to its nascent London office to meet two interviewers: a data engineer and a member of (what was then) the Arts team.</p>
    <p>I was surprised, but encouraged, to be speaking with someone who wasn't an engineer. They asked me questions to find out what motivated me, to evaluate how well those motivations would help Artsy achieve its mission. It was a natural fit!</p>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/lily.jpg">
    <p class="intro">Lily Pace says...</p>
    <p>Everything. I was pleasantly surprised by how different the interview process at Artsy was from my previous experiences, which felt more like standardized tests than conversations. The underlying presumption with "traditional" tech hiring practices is that candidates are somehow trying to trick their way into positions they arenâ€™t qualified for. It's no wonder that impostor syndrome is so prevalent in underrepresented groups when the interview process is set up like an interrogation.</p>
    <p>I felt like the interviewers at Artsy had read my resume and cv and taken it at face value, so the interview was spent diving deeper into my skill-set and personality and determining compatibility, instead of trying to identify gaps in my knowledge.</p>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>With 20 years (!!!) of experience as a software engineer, I've seen my share of interviews - from both sides. On the hiring side, I've said for years that technical interviews are unnecessary. If I can get a 30 minute conversation with a candidate, I feel like I can learn enough about them to know if they can do the job from a technical perspective. It's much less about knowing trivia or syntax, and much more about having the personality to solve problems.</p>
    <p>I'd never experienced that on the candidate side, though. When I did, I definitely felt like Artsy had forgotten part of the interview. Where was the whiteboard? The homework? People looking over my shoulder while I coded an anagram-checker? A technical challenge has been a part of every interview I've done as a candidate - until Artsy.</p>
  </div>
</aside></p>

<p>Artsy's process of hiring new engineers was created and is maintained <em>by</em> our current engineers. It has evolved
over time as we learn new lessons and new perspectives join our team. Our process has always been driven by a
top-down culture of respect for candidates, which aligns with
<a href="https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#artsy-values">our company values</a>. Our team
currently has 36 engineers, and we refreshed our hiring practices last year to support our team's growth; we hired
a dozen engineers in 2018. We don't use recruiters (though we did to hire our recent VP of Engineering).</p>

<p>Our former Director of Web Engineering has a blog post where he
<a href="https://www.zamiang.com/post/learning-from-artsy-how-to-hire-awesome-engineers">describes Artsy's hiring process</a>.
Though some specifics have since changed, the foundations remain the same.</p>

<blockquote><p>If Artsy has a secret sauce, it is how it hires. All else falls from the assumption that they have hired the best
people who want to work together to achieve Artsyâ€™s mission.</p></blockquote>

<p>Our hiring process starts with an informational, where candidates are met for a coffee or over a teleconference
call. We have <a href="https://github.com/artsy/README/blob/master/playbooks/informationals.md">public documentation</a> so
candidates can know what to expect. We do a lot of these and move candidates who we think would succeed at Artsy on
to in-person interviews. The interviews last 3 hours and are split across four 45-minute
<a href="https://www.livecareer.com/career/advice/interview/behavioral-interviewing">behavioral interviews</a>, conducted by
engineers and other colleagues, ranging from gallery liaisons to product managers to editorial writers. Artsy
generally, and Engineering specifically, have both significantly invested in helping interviewers be effective and
consistent; this includes documentation, question banks, and <a href="https://managingbias.fb.com">unconscious bias</a>
training.</p>

<p>Each interviewer is given key areas to focus on, based on the candidate's background. We have documentation
specifying how to evaluate each of these areas, including example questions. These areas include, but aren't
limited to:</p>

<ul>
<li>Comprehension of Artsy</li>
<li>Artsy company values alignment</li>
<li>Ability to communicate complex ideas</li>
<li>Learning and adaptation</li>
<li>Self-learning and drive</li>
<li>Independence and teamwork</li>
<li>Systems development</li>
<li>Product knowledge</li>
</ul>


<p>After the interview, feedback is written up as quickly as possible. To limit bias, interviewers can't see each
other's feedback until after they write up their own. The write-up includes a recommendation: do you think we
should move on to reference checks? Answers are either "strong yes", "yes", "no", or "strong no"; after everyone
has completed their write-ups, the interviewers debrief and reflect on how to do a better job next time. Their
feedback is used by the hiring manager to decide whether to move on to reference checks.</p>

<p>Quoting again from our former Director of Web's blog post:</p>

<blockquote><p>Artsy believes that 'references are not a defense against hiring poorly, they are a way to hire great people'.</p></blockquote>

<p>Artsy's reference checks are in-depth and deserve their own blog post; they are <em>key</em> to our hiring process. We
know that job interviewers only evaluate how good someone is at interviewing, so we put a larger emphasis than most
companies on references. The most accurate predictor of future job performance is past job performance, not how
well someone can perform in an interview.</p>

<p>If we decide to hire the candidate, we make them a job offer. Artsy offers what we think is a fair wage based on
the local market and the candidate; we do not low-ball candidates and we don't negotiate on compensation.</p>

<a name="What.s.wrong.with.typical.hiring.practices."></a>
<h2>What's wrong with typical hiring practices?</h2>

<p>There are many tactics for assessing a candidate's technical abilities, but we've found that many are unfair to the
candidate. Some strategies put unnecessary pressure on the candidate. Some select against qualified candidates who
have competing responsibilities outside work. Some unwittingly weed out underrepresented applicants, even at a time
when companies are trying to diversify their teams.</p>

<a name="In-person.coding.challenges"></a>
<h3>In-person coding challenges</h3>

<p>The intention of in-person coding challenges is to verify that the engineer can "actually write code." This
strategy puts excessive pressure on the candidate to perform in front of an audience. This is usually not a good
reflection of what the candidate would be doing if they were hired. Sometimes it <strong>is</strong> a reflection of the
stressful conditions on the team, and the act of applying pressure to the candidate is intentional, to measure
their ability to handle it. In either case, we don't feel like this is how we want to measure engineers; it just
doesn't reflect reality.</p>

<a name="Whiteboard.interviews"></a>
<h3>Whiteboard interviews</h3>

<p>One intention of whiteboard interviews is to reduce the stress on the candidate, because they don't have to worry
about code syntax while under a microscope. These types of interviews still lead to
<a href="https://code.dblock.org/2012/12/08/five-ways-to-torture-candidates-in-a-technical-interview.html">stressful conditions</a>,
though, and they don't provide a good measure of what makes a great teammate or even a great developer. Again,
sometimes the pressure is intentional, to see how the candidate reacts.</p>

<p>It can be very difficult to find a problem that is succinct enough for a whiteboard exercise but still reflective
of the work the candidate will actually be doing on the job. The ability to write an algorithm to search a binary
tree might be reflective of whether a candidate has a traditional Computer Science degree, but doesn't necessarily
speak to their ability to build complex interfaces or streamline performance. More importantly, whether or not they
can write a binary search tree from scratch on a whiteboard doesn't even necessarily speak to their ability to
<em>use</em> search trees in day-to-day work. Questions like this can eliminate excellent developers who took a
non-traditional approach to their knowledge building but are still highly capable.</p>

<a name="Sample.code"></a>
<h3>Sample code</h3>

<p>Sometimes a company will request a code sample from candidates - after all, what shows off their ability to code
better than their actual code? The downfall of this strategy is that it eliminates developers who don't have code
they can share. Many great engineers work for closed-source companies; many great engineers have family
responsibilities that prevent them from contributing to open-source at night.</p>

<p>It is also important to consider the insularity and biases that exist in the open source community that can make
contributing more difficult for developers from underrepresented groups. A study published in the PeerJ Computer
Science journal found that womenâ€™s contributions to open source projects were accepted more frequently than menâ€™s
contributions when the gender of the contributor was unknown. However, when the gender of the contributor was
apparent, men's contributions were
<a href="https://code.likeagirl.io/gender-bias-in-open-source-d1deda7dec28">accepted more frequently than women's</a>.</p>

<a name="Take-home.challenges"></a>
<h3>Take-home challenges</h3>

<p>The most recent trend in hiring is the take-home exercise. The goal is honorable - have the candidate produce code
on their own time, so they aren't overwhelmed with the pressure of an audience. Weâ€™ve found that requiring this
early in the process is unfair, and including it later in the process is uninformative; by the time a take-home
challenge would be appropriate, we have already evaluated the candidate's technical skills to our satisfaction
(more on that later).</p>

<p>This strategy also assumes the candidate has time to work on homework. Many single parents do not for example, nor
do engineers who care for family members. There can also be misalignment on the expected time to complete a
take-home challenge. While the exercise might take a current engineer at the company 2 hours to complete, that
doesn't consider several factors: (1) a candidate might not be familiar with all technologies requested, and can
easily lose time to research and learning; (2) the candidate wants to look good, so they're likely to work longer
than you expect; and (3) the candidate might be interviewing for several companies at once, and have multiple
competing assignments to work on.</p>

<p>Many companies use take-home challenges early in the hiring process to shift the burden of evaluation from the
company on to the candidates themselves. This unfairly excludes lots of potentially amazing colleagues.</p>

<p><aside>
  <div class="question">
    <h3>Why do you think these kinds of bad hiring practices are so common in the tech industry? And what sets hiring practices in tech apart from hiring in other industries?</h3>
  </div>
    <div class="answer">
    <img src="/images/artsy-engineering-hiring/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>We are very logical people in the tech industry. We want to create algorithms or heuristics for everything, including hiring. Using a yardstick like "Fizz Buzz" or trivia questions allows us to easily narrow down the candidate pool. It's a simple, intentional form of gate-keeping. The hiring algorithm is much easier to write when it's "Oh, you don't know what a closure is? Sorry, we're not interested." It's much harder to write a hiring algorithm that respects nuance: "well...it depends. Maybe you have different experiences than I do. It'll take some digging to find out if our experiences will complement each other."</p>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/lily.jpg">
    <p class="intro">Lily Pace says...</p>
    <p>I think the tech industry has an elitism problem, and this is reflected in the way candidates are evaluated. Thereâ€™s a general feeling in some parts of the industry that what we do is different and somehow elevated from other professions, that engineering is a skill that only a select few are capable of, not something that anyone can learn with the right training and enthusiasm. Making candidates go through a gauntlet of challenges during the interview process reinforces this idea.</p>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/ash.jpg">
    <p class="intro">Ash Furrow says...</p>
    <p>I think when looking at the current state of the computer programming industry, and its hiring practices, we need to pay special attention to its history. The original computer programmers of the twentieth century were women, but they were <a href="https://www.theguardian.com/careers/2017/aug/10/how-the-tech-industry-wrote-women-out-of-history">systematically pushed out of the industry</a>. One way they were pushed out was through discriminatory hiring practices, especially interview questions and techniques specifically designed to exclude non-white, non-male applicants. Sadly, these hiring practices persist, even if their original motivations have been obscured by time.</p>
  </div>
</aside></p>

<a name="What.we.do.instead"></a>
<h2>What we do instead</h2>

<p>In addition to the above strategies not being fair, we've found that they measure things that are secondary to what
we're looking for.</p>

<p>Artsy is more complicated than FizzBuzz. Too complicated for any one engineer to build, in fact. Individual
engineers working alone canâ€™t build the software Artsy needs to succeed â€“ they must work together. So the skills we
evaluate for are things like empathy, communication, and kindness. Not that technical skills arenâ€™t important, but
the ability to communicate and learn is more important.</p>

<p>Engineers who excel at empathy, communication, and kindness can pick up the technical stuff once they're hired;
personal and interpersonal skills are harder to teach. Adding a colleague to the team who lacks these skills could
harm the culture we've built.</p>

<p>When you interview with Artsy as an engineer, you won't just meet other engineers and a manager. You'll meet with
people from other departments too. If you're hired as an Artsy engineer, you're going to work with folks from all
across the company - we want to make sure you can communicate with them because that's something we do every day.</p>

<p><aside>
  <div class="question">
    <h3>How has this impacted your day-to-day work at Artsy so far?</h3>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/lily.jpg">
    <p class="intro">Lily Pace says...</p>
    <p>I had a negative experience in the past with a coworker who lacked empathy and boundaries and made me feel unwelcome and othered as the only woman on the team and someone from a non-traditional background. It made me afraid to ask for help and stifled my progress. This experience made me hesitant to open up to new coworkers, especially when I needed assistance. Because Artsy evaluates candidates based on empathy, communication, and kindness, I arrived with a <a href="https://medium.com/artsy-blog/what-it-feels-like-to-work-in-a-supportive-environment-for-female-engineers-3c994a001007">level of trust in my new coworkers</a> that usually takes weeks or months to develop. </p>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>In most of my previous jobs, it's taken me a while to learn who I can be vulnerable around and who I can't. At Artsy I have quickly learned that I don't need to worry about it. I feel an incredible sense of psychological safety with the Artsy team. I can be vocal about not understanding something, and I can ask for help without feeling like a burden or fool.</p>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/ash.jpg">
    <p class="intro">Ash Furrow says...</p>
    <p>I'm a sensitive person. I don't like pointless or inflammatory conflict â€“ I find it distracting and counterproductive. However, I can relax and let my guard down at Artsy. My sensitivity to how others are feeling is a part of my contributions to the team, and I'm able to fold the emotional wellbeing that <strong>I</strong> get from everyone back into our team: a sort of constantly-accelerating feedback loop of good feelings.</p>
  </div>
</aside></p>

<a name="But.we.still.evaluate.technical.aptitude"></a>
<h2>But we still evaluate technical aptitude</h2>

<p>Technical aptitude is less important to us than interpersonal skills, but it is still important. Note that we said
"aptitude," not "skills": we don't expect our engineers to already know everything about the tech stack we're
using. Instead, we expect them to have a strong ability to learn our stack and use it effectively once they have.
(This is touched on in our docs on
<a href="https://github.com/artsy/README/blob/master/careers/juniors.md">what we look for in junior engineers</a>.)</p>

<p>So if we skip all the usual tactics for evaluating technical aptitude, how do we do it? <strong>By talking to people</strong>.</p>

<p>We learn a lot about candidates in their interviews. We'll have a conversation with them about technology. Instead
of white-boarding, we ask them to describe what they like about their favorite library, or what they wish they
could change. We ask them to describe some legacy code theyâ€™ve worked with, and ask them how they think it got that
way. Weâ€™re looking for a mix of technical skills as well as empathy and an ability to communicate nuanced ideas.</p>

<a name="References.are.important.to.us"></a>
<h2>References are important to us</h2>

<p>We also learn a lot through reference checks. Our reference checks aren't simply validation of your employment
history - they are a 30 minute-long conversation with each of your three references that go into detail about your
work history and career growth. It's quite an in-depth conversation, with questions structured to dig into
specifics about the candidate's behavior.</p>

<p>An Artsy reference call might include the following structured questions:</p>

<blockquote><p>In your capacity as [relationship to the candidate], how many people have you worked with in the candidate's
role?</p>

<p>Okay, in <em>just</em> terms of job performance, how you rank the candidate out of that [X] many people?</p>

<p>Okay, finally, what's the difference between [the candidate's rank] and number one? How would the candidate need
to grow to get to number one?</p></blockquote>

<p>The first question establishes the context for the reference. The second question primes the reference to use that
context when answering the next question. The third question is what we're <em>actually</em> interested in. These aren't
easy or comfortable questions, but they give us an insight into the candidate's career, history, and areas to grow.</p>

<p>Fully half of our decision to make an offer or not is based on our reference checks. Artsy Engineering candidates
go through the same reference check process as anyone applying for a job at Artsy, with Engineers sitting in on the
call with Artsy's hiring staff.</p>

<a name="But.seriously..we.really.care.about.the.personal.side"></a>
<h3>But seriously, we really care about the personal side</h3>

<p>We also make sure every interview ends amicably. No candidate should feel bad after interviewing with Artsy, even
if we don't give them an offer. This seems self-evident to us, given our values, but it makes a lot of business
sense to maintain our reputation as an engineering team.</p>

<a name="Our.hiring.practice.philosophy"></a>
<h2>Our hiring practice philosophy</h2>

<p>One of our core values at Artsy is that
<a href="https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#people-are-paramount">People Are Paramount</a>.
We like to think that our interview process was built to reflect this.</p>

<p>We see the interview process as an opportunity to build a relationship with a candidate. We talk to them to find
out if they're a good fit for Artsy, and we help them decide if Artsy is a good fit for them. Our hiring process
focuses more on human skills than most processes do. It's not perfect, but it has served us well.</p>

<p><aside>
  <div class="question">
    <h3>Where do you still think Artsy has to grow, in terms of how it hires engineers?</h3>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/lily.jpg">
    <p class="intro">Lily Pace says...</p>
    <p>I think Artsy is really unique and innovative in how it evaluates candidates and I think the more we can express this in our job postings the better. Stressing alignment with our values and an ability to learn and posting fewer hard requirements are some simple ways to convey to potential applicants that we evaluate differently.</p>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/ash.jpg">
    <p class="intro">Ash Furrow says...</p>
    <p>I think one area we've historically struggled with, and still do, is sourcing candidates from a wide range of backgrounds. Artsy Engineering's hiring pool still draws heavily from the professional networks of existing Artsy staff; while this has a lot of benefits, it also has the potential to exclude groups who aren't already represented on our team.</p>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>I agree with Ash. I think all companies hire based on their employees' networks, because that's the easiest way to find people. <a href="https://twitter.com/seldo/">Laurie Voss</a> talked about this recently on <a href="https://reactpodcast.simplecast.fm/33">the React Podcast</a>. He pointed out that diversity at NPM has been better than average since the company started; and that the ratios of diversity have been consistent from the beginning, as a result of hiring from their own networks. I'd love to see Artsy hire beyond our networks (and as a result expand our networks).</p>
  </div>
</aside></p>

<p>Our hiring process will never be "finished" because we're always improving on it. Some recent improvements are
inward-facing to help <em>us</em> get better, like:</p>

<ul>
<li>Starting a #dev-ersity Slack channel for talking about how to diversify our team and the industry at large.</li>
<li>Integrating hiring updates into our weekly standup.</li>
<li>Creating a Slack bot for engineers to monitor our hiring pipeline.</li>
<li>Periodically rotating hiring managers to spread institutional knowledge and get new perspectives.</li>
<li>Many, many docs written on guiding the process.</li>
</ul>


<p>Artsy engineers, guided by our company values, created the hiring process for new engineers. Combined with an
iterative process and a desire to constantly improve, we've created a hiring process that is fair, effective, and
respectful. This kind of engineering-led approach is gaining popularity; for example, Microsoft recently
<a href="https://blog.usejournal.com/rethinking-how-we-interview-in-microsofts-developer-division-8f404cfd075a">revamped its hiring process</a>
with this approach.</p>

<p>We hope this catches on.</p>

<p>So what can <em>you</em> do? A great first step is to send this post to your HR rep. Another great step is to open source
your hiring documentation; you'd be surprised how motivating this can be, and it's a great opportunity to get
feedback from other companies. Leave a comment below, let's brainstorm on other ways to improve the state of hiring
in software engineering!</p>

<p>And remember: while <em>you</em> might be motivated based on what feels "right", businesses are motivated by bottom lines.
Fortunately for us, the evidence is on our side: this is a better way to hire, for everyone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Hows and Whys of Pair Programming]]></title>
    <link href="http://artsy.github.io/blog/2018/10/19/pair-programming/"/>
    <updated>2018-10-19T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2018/10/19/pair-programming</id>
    <content type="html"><![CDATA[<p><em>Why pair program? As new engineers join Artsy, we've been experimenting with different programming cultures - Yuki
came from Pivotal Labs where they have a strong pair programming culture and introduced it at Artsy - it's been
about a year and a half and we're all really loving the changes he's introduced.</em></p>

<p><em>I asked Yuki if he'd pair program with me on a blog, post on Pair Programming, and this is it. He's going to
dive into what pair programming is, why you should do it, what are good mental models to think about, the techniques
you can use to make it work, what hardware you might need and how Yuki persuaded so many of us to start doing it
more often.</em></p>

<p>&mdash; Orta</p>

<!-- more -->


<a name="Why.pair.program."></a>
<h2>Why pair program?</h2>

<p>The idea of pair programming came from a very popular book called <a href="https://www.goodreads.com/book/show/67833.Extreme_Programming_Explained">Extreme Programming Explained: Embrace
Change</a>. Code review has been a good practice in software development for decades. Many organizations have
adopted it, but XP (Extreme Programming) literally takes this <strong>more extremely</strong> - what if the engineer sitting next
to you is reviewing your code as soon as you write it? This requires two engineers to simultaneously pay attention
to the code that's being written, discuss implementation details, and sometimes socialize. That's how pair
programming was born.</p>

<p>Pair programming seems as easy as it sounds, and to some extent that's true. However, with just a few key points
you'll be able to make your pairing session much more valuable.</p>

<p>To think about when pairing is most valuable, let's think about code review first. Modern software organizations
have implemented a process where engineers send pull requests to get reviews on GitHub (or whatever tool your
organization uses for reviewing code). This is a very powerful process, but most of us have probably experienced a
situation where a pull request with <a href="https://github.com/artsy/reaction/pull/1114#discussion_r209354107">a very simple change created a very long discussion</a>. Sometimes
that's because of your lack of context in the work you are doing. Sometimes it's because you are working on a
system you are unfamiliar with. Your co-worker left a lot of comments on your pull request, and you had to push a lot
of extra commits, or even re-wrote the entire pull request. That's when pairing becomes very valuable to your team.</p>

<p>Another good example is on-boarding new hires. Coming from an agile consultancy and a photo-product company, I was
nowhere close to an Art expert when I joined Artsy. This was the time I wanted to question not just technical
questions, but also very basic questions about art. How do people find and purchase artworks? Who actually sells
artworks? What is an art fair? And auctions? <a href="https://medium.com/artsy-blog/what-it-feels-like-to-work-in-a-supportive-environment-for-female-engineers-3c994a001007">Christina Thompson</a>, on the other hand, has been at
Artsy for more than two years. She also has strong experience in agile software development and practices, including
pair-programming. Naturally, we started pairing to familiarize myself both with the code base and basic knowledge
about Art on my first week at Artsy.</p>

<a name="When.not.to.pair.program."></a>
<h3>When not to pair program?</h3>

<p>This post is about pair-programming, so why even talk about when not to pair-program? Well, while itâ€™s a powerful tool,
it's not a silver bullet we can utilize to solve all software problems. As we all deal with complex, long-standing
pull requests, there are also simple changes that don't require a lot of discussions. Occasionally, your pull request
is very long because of a great number of deprecated method names. Sometimes, you and your pair both feel stuck because
none of you have context or knowledge about what you are addressing. Whenever you are not feeling as productive as you
think you should be, then you donâ€™t have to pair. Sometimes it may make sense for two of you to do research
individually and check in later to share findings and learnings. In an occasional case, even swapping a pair is also a
good way to make the entire team more productive.</p>

<p>So what is the key point that makes a pair-programming session successful? I believe pair-programming works best when
there is a fair amount of knowledge gap between two people. One is coding and teaching simultaneously, and the
other is reviewing and learning simultaneously. Here the crucial part is <em>teaching</em>. It is easy, especially for more
seasoned developers, to ignore the opportunity to share thoughts and knowledge with new hires, losing productivity
they could've gained by pairing. Joining a new company is always scary, and pair-programming with a new hire will
reduce a lot of "I wasn't sure about X" moments new hires might have encountered. At the same time, as mentioned above,
pair-programming is not a silver bullet. It is important to be able to use pair-programming as a tool in your toolbox
to solve a particular issue in your engineering team.</p>

<a name="What.You.ll.Need.to.Pair.Program"></a>
<h2>What You'll Need to Pair Program</h2>

<p>The minimum you need is a computer and the ability to communicate, but let's look at what an optimal pair
programming setup looks like.</p>

<a name="Offline"></a>
<h3>Offline</h3>

<p>If you and the other engineer are in the same physical space, then you should aim to have:</p>

<ul>
<li>One computer set up as a workstation.</li>
<li>Two sets of keyboards, mice and monitors attached.</li>
<li>A spare computer for researching on the side.</li>
</ul>


<p>This gives you the ability to iterate and switch responsibilities at the speed of thought. If you have the resources
and space, then setting up a place where any 2 engineers can drop a laptop down and be productive instantly will
reduce a lot of the setup friction.</p>

<a name="Remote"></a>
<h3>Remote</h3>

<p>The minimum you would need in this case is a video chat system like Skype, Google Hangouts or Slack Calls. Given
that all of these support screen sharing too, then you can easily replicate two people sitting next to each other
with one computer.</p>

<p>It's worth noting that remote pairing requires stable internet, and with high bandwidth. We've both had situations
in the past where we've had to abort pairing sessions due to internet un-reliability.</p>

<p>In the past, we used to use ScreenHero a lot, because of it's great support for multiple mice and keyboards, but
<a href="https://slack.com/screenhero">ScreenHero was bought by slack</a> and those feature aren't available for everyone.</p>

<p>A lot of our pairing is done via the built-in Slack screen sharing. There's a newcomer to the scene though!</p>

<p><a href="https://visualstudio.microsoft.com/services/live-share">VS Code's LiveShare</a> gives you the ability to share an IDE: it can handle voice
chat, sharing server ports and sharing terminal sessions with a very  minimal amount of setup.</p>

<p>We wrote the initial draft of this post in-person, in an Artsy meeting room writing and talking in real-time.
If you've not seen Live Share, we posted a video of a <a href="https://twitter.com/ArtsyOpenSource/status/1034555778210910209">workshop we ran</a> at Artsy on YouTube.</p>

<a name="Attribution"></a>
<h3>Attribution</h3>

<p>One way to encourage pair programming is by providing insight to others about when you're working as a pair. A great
technique for this is to use <a href="https://github.com/git-duet/git-duet/"><code>git-duet</code></a>. Git Duet is a tool which extends git to make it easy to share
attribution among contributors. It does this by having a central list of people' emails, you set up a pairing
session, then use <code>git duet-commit</code> to replace <code>git commit</code> and the attribution shared.</p>

<p>You can get started with:</p>

<pre><code class="sh">$ brew tap git-duet/tap
$ brew install git-duet
</code></pre>

<p>You'll then need to set up a <code>~/.git-authors</code> file which is a map of people's names to emails:</p>

<pre><code class="yml">pairs:
  ot: Orta Therox; orta
  af: Ash Furrow; ash
  md: Matt Dole;
email:
  domain: artsymail.com
email_addresses:
  md: mdole7@gmail.com
</code></pre>

<p>The format for each pair is <code>[tag]: [Name]; [email-prefix]</code>. This works in combination with the <code>email:domain</code> as
the default email address host for someone. So it would infer that Ash Furrow's email is <code>ash@artsymail.com</code>.
If they've not set up that email yet, then you can use <code>email_addresses:</code> to provide overrides.</p>

<p>Now your config is set up, you can start using it. In your terminal you can use <code>git duet ot af</code> to start a session
with Orta and Ash.</p>

<pre><code class="sh">~/d/p/a/j/a/metaphysics  $ git duet ot af

GIT_AUTHOR_NAME='Orta Therox'
GIT_AUTHOR_EMAIL='orta@artsymail.com'
GIT_COMMITTER_NAME='Ash Furrow'
GIT_COMMITTER_EMAIL='ash@artsymail.com'
</code></pre>

<p>Now you just have to remember to use <code>git duet-commit</code> instead of <code>git commit</code> for our work. If you forget, you can
use <code>git duet-commit --amend</code> to overwrite the last commit with a duet commit instead.</p>

<a name="Where.to.go.from.here."></a>
<h2>Where to go from here?</h2>

<p>Pair-programming is a fantastic way to collaborate. If your organization hasn't incorporated it yet, I would highly recommend doing so. At Artsy, we've been experimenting with pair-programming for quite a long time, but this is only the start. We haven't figured out the form of pair-programming that works best for us, and it'll probably never end (and it's a good thing). There are also a lot more to think about that didn't get into this blog post, such as mental model one should have while pairing and techniques that keep you focused. We will re-visit once we gain more feedback and iterate on our pairing process.</p>

<p>If you're looking to find more resources on pair programming</p>

<ul>
<li>Joe Moore's <a href="http://remotepairprogramming.com/">Remote Pair Programming</a> is a great place to start. He's been working at Pivotal Labs for over a decade.</li>
<li>Tupleâ€™s <a href="https://tuple.app/pair-programming-guide/">Pair Programming Guide</a> is a good work in progress at centralizing a lot of information.</li>
</ul>


<!-- 
Notes:

- http://www.extremeprogramming.org/rules/pair.html -->




<!-- Appendix
  - Ways in which you can encourage more pairing?
  - Techniques for introducing it into your team
  - Good resources? Further reading
  - Do we do it as much as we'd want?
  - Mental model
    - Remind your pair of what to work on
    - Speak up while pairing
    - Take breaks often
    - Show appreciation
  - Techniques
    - driver and navigator
    - ping-pong pairing
  - What companies provides a good best examples?
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Engineering Highlights]]></title>
    <link href="http://artsy.github.io/blog/2018/10/18/long-term-highlights/"/>
    <updated>2018-10-18T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2018/10/18/long-term-highlights</id>
    <content type="html"><![CDATA[<p>Engineering is an inherently long-term process. The Artsy engineering team has been around for 7 years, and that's
quite a lot of time to get things done. We use software that keeps track of changes over time thanks to source
control, but tools like git only help keep track of small passages of time. I want to keep track of events that
could take months to ship.</p>

<p>We've been doing a lot of long-term introspection as a team in 2018. Externally, this has been visible through
things like opening our docs and creating our engineering principles. I'm expanding on this with an idea that I
took from my work in building large open source projects: <a href="https://github.com/artsy/README/blob/master/culture/highlights.md#readme">Highlight docs</a>.</p>

<!-- more -->


<p>I've been the main contributor for <a href="https://danger.systems/">Danger</a> and <a href="https://github.com/danger/peril">Peril</a> for about three years, working mostly solo, and it can
be hard to feel like you're actually getting things done. There's an infinite backlog of people's requests for
improvements, and polite mentions of the flaws in your work. So, as a counter-balance it's nice to take stock of
events you're proud of. I initially mocked this out as <a href="https://github.com/danger/peril/issues/235">an issue in the peril repo</a> but when I
re-applied the idea to the whole of Artsy I used our existing open documentation repo <a href="https://github.com/artsy/README/"><code>artsy/README</code></a>
instead.</p>

<p>The core idea isn't complicated, however it's somewhat time-consuming and requires collaborators. I used the best
method I know for getting a lot of people's attention: spamming slack threads asking folks what were some of their
highlights. I used these to fuel the main arcs of the doc.</p>

<p>A lot of the time, just starting something like this and putting some effort in up-front means others will start to
participate. The trickiest part was finding the right definitive links for a particular event. Ideally we have open
links (so people without private GitHub access (internally and externally) can enjoy them) but sometimes the right
link is private and that's ok. It's not open source by diktat.</p>

<p>Trying to find the right balance between an "Artsy" event vs an "Engineering" event can sometimes be a bit vague,
but I like to believe that more is more. It's about pointing out important events, so more is always a net
positive. With that in mind, here's a few of ours, the rest is a click away:</p>

<p><a href="https://github.com/artsy/README/blob/master/culture/highlights.md#readme"><img src="/images/highlights/highlights.png"></a></p>

<p>I think I'm going to make one of these with every new large scale project I work on, I kinda wish we had one for
the Artsy iOS app now. Maybe I'm going to need to do that now. Ergh, this is what I get for writing blog posts.</p>

<p>I'd love to see some other companies or OSS projects using this idea - let me know in the comments if you are!</p>
]]></content>
  </entry>
  
</feed>
