<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: culture | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/culture/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2020-06-12T14:35:16+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Team Working Agreements]]></title>
    <link href="http://artsy.github.io/blog/2020/04/01/team-working-agreements/"/>
    <updated>2020-04-01T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2020/04/01/team-working-agreements</id>
    <content type="html"><![CDATA[<p>Good team culture strives for cohesion. Once organizations get large enough, a tension emerges between the culture
of individual teams and the culture of the larger organization. How do you achieve team cohesion across small teams
<em>and</em> the larger organizations they comprise?</p>

<p>The culture at Artsy is driven by every team member, not mandated or handed down from above. This adds another
level of tension, between individuals and their smaller teams. Team working agreements embrace that tension to
provide a framework for converting tension into healthy culture.</p>

<!-- more -->


<p>Artsy Engineering is part of a larger organization we call PDDE (Product, Design, Data, and Engineering). PDDE is
divided into several product teams, and each team contains at least one representative from product, design, data,
and engineering. Each PDDE team delivers product solutions targeted to a specific product need.</p>

<p>Until recently, those teams could expect a significant change in team members at the start of every quarter, as we
encouraged engineers to explore other teams. The purpose of this practice was to spread knowledge throughout the
organization, and give folks the opportunity to keep themselves aligned with projects they found most interesting.</p>

<p>The downside of this practice was that it made teams feel short-lived, impermanent, and unstable. Some teams were
hit harder than others - they'd see their team completely turn over every quarter. This was felt most strongly by
our product managers who would take the time to learn the skills and strengths of each engineer on their team over
the course of a quarter, just to have to start the process all over again, making it difficult to plan projects or
set goals for the following quarter.</p>

<p>To address these challenges, PDDE decided to set the expectation that engineers would stay on the same team each
quarter, with the option to request a team change, when necessary, to fill a skill, capacity, or growth need
elsewhere. This effectively ended the practice of shuffling teams every quarter. It was too much change, too often.</p>

<p>As a result, our teams feel more stable and long-lived. We're able to build deeper team identity. We've found one
tool particularly helpful in finding and building team identity: team working agreements.</p>

<a name="How.did.team.working.agreements.come.about.at.Artsy."></a>
<h2>How did team working agreements come about at Artsy?</h2>

<p>The current breakdown of our PDDE organization is relatively new; it's also an on-going process. We are still
feeling out how these teams will/should work together. One of the core beliefs at Artsy is that when you are a part
of something - a process, a team, a culture - you are empowered to make impactful changes to it.</p>

<p><aside class="dialogue">
  <div class="answer">
    <img src="/images/dialogue/adam.jpg">
    <p class="intro">Adam Iskounen says...</p>
    <p>
      Team cohesion and unity was a common theme that kept surfacing during the retrospective meeting that led to
      PDDE ending the quarterly shuffling of teams. During my onboarding, I noticed in retros that teams were
      strong on "what went well" and light on "what could be improved." We'd have 1 or 2 "didn't go well" tickets,
      but they were usually something light-hearted/benign like "team lunch was cancelled". One team in particular
      seemed like they were dancing around each other a bit, and important things like "not getting stuff done"
      wasn't being brought up.
    </p>
    <p>I remembered that team working agreements were a tool used by
      a scrum master at my previous job to help a particular team that was struggling to gel, and brought it up
      without really knowing what was involved in the process. Fortunately my product manager - who was eager to
      form a team where each member felt empowered and excited to take ownership of our work - encouraged me to
      research and share the process for coming up with a team working agreement. At first I was nervous that some
      team members, especially those who I perceived to be more interested in technical challenges than on team-building,
      would not be interested in this and find that it was a waste of time. I was pleasantly surprised that not only did
      everyone on the team participate, but that those team members ended up being some of the more enthusiastic
      proponents for following-up on the team working agreement after our initial brainstorm.
    </p>
  </div>
</aside></p>

<p>Since being pioneered by Adam's team, team working agreements have spread to most of our engineering teams. They've
been a learning opportunity for all of us, and a chance for our team members to share experiences and practices
with each other.</p>

<a name="What.s.a.team.working.agreement."></a>
<h2>What's a team working agreement?</h2>

<p>A team working agreement is a written set of guidelines for an engineering team. It enumerates the habits and
practices that the team requires to be productive and successful. The agreement is a living document, and every
member of the team has a part in shaping it.</p>

<p><a href="https://en.wikipedia.org/wiki/Tuckman%27s_stages_of_group_development">According to Bruce Tuckman, a team moves through four phases of development: forming, storming, norming, and performing</a>.
Team working agreements can help a team move more quickly through the stages. A team in the "forming" stage will
quickly uncover areas of disagreement and move to "storming" when they attempt to align on a working agreement. A
"storming" team might move to "norming" more quickly when their points of friction are arbitrated in a working
agreement.</p>

<p>Examples of habits or practices on a team working agreement might include:</p>

<ul>
<li>Any change to the sprint backlog requires product manager approval.</li>
<li>Everyone owns the backlog and should add tickets for untracked work.</li>
<li>Update the backlog before each day’s standup.</li>
</ul>


<p>We've been using a fairly consistent process to develop team working agreements at Artsy.</p>

<a name="Step.1:.Educate.the.team.about.team.working.agreements"></a>
<h3>Step 1: Educate the team about team working agreements</h3>

<p>We want every team member to recognize the importance of creating an agreement.</p>

<p>Each team reviews
<a href="https://github.com/artsy/README/blob/master/playbooks/agile/team-working-agreement.md">our docs on the process of creating a working agreement</a>
before creating one. They might also review an existing working agreement.</p>

<a name="Step.2:.Conduct.a.brainstorming.meeting"></a>
<h3>Step 2: Conduct a brainstorming meeting</h3>

<p>The team meets for an hour to brainstorm ideas that promote success from each individual or the team as a whole.
Some of our teams have met fully in-person and used physical sticky notes for brainstorming; many have used an
online tool like <a href="https://miro.com/">Miro</a> to include remote members.</p>

<p>It's vital that <em>all</em> members of the team attend the brainstorm. For us, that includes engineers and product
managers, but also designers and data analysts. This is a discussion of how the entire team works together -
everyone's voice should be heard.</p>

<p>A sample brainstorm agenda is
<a href="https://github.com/artsy/README/blob/master/playbooks/agile/team-working-agreement.md#sample-meeting-agenda">shared in our docs</a>.
The output of the brainstorm is a set of ideas that everyone has contributed to.</p>

<a name="Step.3:.Distill.brainstorming.ideas.into.discrete..digestible.habits"></a>
<h3>Step 3: Distill brainstorming ideas into discrete, digestible habits</h3>

<p>The ideas from the brainstorming process can be sorted into themes. Within themes, we work to condense ideas into
habits and practices that are agreeable to the entire team. We have found success in keeping the language for these
habits small, discrete, and slogan-like.</p>

<p>The distillation step might take several round-trips of gathering feedback and wordsmith-ing.</p>

<a name="Step.4:.Commit.the.most.important.habits.to.a..Team.Working.Agreement..document"></a>
<h3>Step 4: Commit the most important habits to a "Team Working Agreement" document</h3>

<p>The team votes on which habits should be included in the agreement and a document is circulated.</p>

<p>It's not done, though. Remember: it's a living document.</p>

<a name="Step.5:.Revisit.the.working.agreement"></a>
<h3>Step 5: Revisit the working agreement</h3>

<p>As a team, decide how often the agreement should be revisited, and what "revisiting the agreement" means. When
should we amend it? When should we do another brainstorm? It probably doesn't make sense to scrap the old agreement
when one new team member joins, but how much change on a team would inspire us to recreate our agreement?</p>

<a name="Why.establish.a.team.working.agreement."></a>
<h2>Why establish a team working agreement?</h2>

<a name="The.brainstorm.itself.is.incredibly.valuable."></a>
<h3>The brainstorm itself is incredibly valuable.</h3>

<p>Dedicated time to talk about values, habits, and processes is incredibly helpful to a team, yet rarely scheduled.
The brainstorm for a team working agreement can fill this void.</p>

<p>During the team agreement brainstorm the team looks at <em>how</em> they work, instead of looking at <em>what</em> work they're
doing. It's similar to what you might get out of a retro but at a higher level. It offers time to discuss "soft"
skills that you don't often discuss, in a context that you don't usually discuss them - with other individual
contributors, and with your closest collaborators.</p>

<p><aside class="dialogue">
  <div class="answer">
    <img src="/images/dialogue/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>
      When joining a new team, there's often a period of "feeling it out" - where I'm afraid to verbalize an
      opinion because I'm not sure how the team feels about it. The team working agreement process has definitely
      helped lessen this feeling.
    </p>
    <p>
      There's a <a href="https://www.youtube.com/watch?v=FxTXf6qyaGk">great talk by Katherine Wu named "Ask vs Guess Culture"</a>.
      "Guess" culture is when you try to guess what a person wants or is thinking; "Ask" culture is when you flat out
      ask them. Team agreement brainstorms are a really neat way to <em>ask</em> your team how they want to work, instead of
      spending many sprints trying to guess.
    </p>
    <p>
      So far, I have seen the most value out of <em>the actual brainstorm</em> than the working agreement itself. My teams
      have learned so much about each others' habits and values.
    </p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/adam.jpg">
    <p class="intro">Adam Iskounen says...</p>
    <p>
      The process has helped confirm that the team shared interest in team dynamics &amp; the process of collaboration
      across the team. As a new member it's nice to know that information.
    </p>
    <p>
      It's been great to see teammates bring up the team agreement in different contexts. It wasn't just a one-hour
      brainstorm, it's something our team is living. Hearing our slogan-like habits recited during team meetings
      long after the brainstorm is a testament to the value of the agreement.
    </p>
  </div>
</aside></p>

<a name="It.can.lead.to.better.engagement.in.sprint.activities."></a>
<h3>It can lead to better engagement in sprint activities.</h3>

<p>One of our teams established in their working agreement that sprint meetings were valuable. This might seem too
obvious to put in a team working agreement, but it portrays clearly to everyone that they should attend all sprint
meetings and be actively engaged.</p>

<p>The same team got a lot out of making slogans for the items in their working agreement. Phrases like "Pair by
default" and "Incremental improvement over consistency" were introduced during the brainstorm. They've since become
mantras for the team to refer to during sprint work and ceremonies. Team values and habits solidify through this
kind of repetition.</p>

<a name="The.team.working.agreement.provides.on-boarding.documentation."></a>
<h3>The team working agreement provides on-boarding documentation.</h3>

<p>When new members join a team, it takes time for them to adjust. A team working agreement provides an up-to-date
reference on the team's preferred methods of working. The working agreement isn't set in stone, and as the team
changes it's important to update it... but having it in writing helps new members acclimate quickly.</p>

<a name="What.are.some.challenges.with.team.working.agreements."></a>
<h2>What are some challenges with team working agreements?</h2>

<a name="Uncertainty.about.what.the.team.agreement.should.include."></a>
<h3>Uncertainty about what the team agreement should include.</h3>

<p>Some teams have struggled to identify what belongs on a team working agreement. Should it describe our team values?
Habits? Procedures? Rules? Favorite afternoon snacks?</p>

<p>It likely varies from team to team what you want here. Some teams might require guidance around working with JIRA;
others might be more focused on taking ownership of problems. These differences are likely a reflection of the
problems the team is currently facing or has recently faced.</p>

<p>It's definitely important that you identify what you're looking for up front, and make it clear heading into the
brainstorm. Suggest categories, sample habits, &amp; questions to ask heading into the brainstorm, and keep them
visible during the meeting.</p>

<p>Take notice of known problem areas: are they addressed or avoided in the agreement? It is easy for a team to avoid
confrontation at their own expense.</p>

<p>Also be cautious about introducing individual bias.</p>

<p><aside class="dialogue">
  <div class="answer">
    <img src="/images/dialogue/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>
      During my first team agreement brainstorm, I felt like we spent a lot of time talking about details
      related to specific incidents. On my next team, I made a strong effort to constrain the suggestions
      to avoid this. To me, team values were really important for this new team - and I did such a good
      job of encouraging those types of suggestions that it's pretty much all we ended up with.
    </p>
    <p>
      As a result, our initial working agreement lacked important procedural and tactical definition. We've
      been adding things like JIRA hygiene and responsibilities of project leaders as they come up, but I would
      not push a working agreement brainstorm so strongly in one direction again.
    </p>
  </div>
</aside></p>

<p>Remember that the working agreement is a living document. If the team learns that it missed something in the
brainstorm, don't hesitate to update the agreement. Team retros are a great time to make updates.</p>

<a name="Working.agreements.are.hard.to.define.for.teams.without.a.well-established.identity."></a>
<h3>Working agreements are hard to define for teams without a well-established identity.</h3>

<p>For a team that has a strong and cohesive identity, the agreement is likely to affirm many things the team is
already believing and doing. For a less cohesive team the agreement is harder to pin down. Many opinions will
surface, and they may be in conflict with each other.</p>

<p>While this is indeed challenging, it is also important to note that teams that lack identity benefit <em>greatly</em> from
the team agreement brainstorm. Provided there is
<a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#psychological-safety">psychological safety</a>,
this is a really great time for the team to learn about what matters to each other, and move toward establishing an
identity.</p>

<a name="Facilitating.the.brainstorm.can.be.difficult.on.a.distributed.team."></a>
<h3>Facilitating the brainstorm can be difficult on a distributed team.</h3>

<p>Some of our teams were able to brainstorm with everyone on-site. They were able to rely on post-it notes and
in-person conversations, and read each other's non-verbal communication. Other teams have a mix of on-site and
remote members, and used tools like <a href="http://miro.com/">Miro</a> to facilitate. This <em>can</em> present a challenge...but if
you're already a distributed team, they are likely the same types of challenges you've worked to overcome for <em>all</em>
meetings.</p>

<p>The differences are worth noting, though. The importance of reading each other's non-verbal communication is
magnified when you're having conversations about identity. It's quicker to organize and re-organize real-life
post-its than virtual post-its in an online tool. These are all opportunities to get better at being a distributed
team.</p>

<a name="It.takes.effort.to.make.sure.one.person.isn.t.introducing.their.bias.into.the.working.agreement."></a>
<h3>It takes effort to make sure one person isn't introducing their bias into the working agreement.</h3>

<p>It's important for the team agreement brainstorm to provide an environment in which every team member is heard.
Even if your team is successful at this, there are still opportunities for individual bias to affect the working
agreement.</p>

<p>We saw earlier how bias can appear when the examples provided for the brainstorm are too narrowly scoped.</p>

<p>We recognized another bias vector in the distillation of the brainstorm into an actual agreement. If this is
handled by a single person, it's very possible for them to produce a working agreement that misrepresents <em>the
rest</em> of the team. To counter this, we've had multiple team members pair on the distillation process. Feedback on
the initial draft of the agreement is also important to ensure it does not misrepresent the team's ideas.</p>

<p>The problem of introducing bias to the distillation process is most challenging with topics that are disputed
across the team. One of our teams spent a lot of time talking about meetings in their brainstorm, but struggled to
come to consensus on them. No single person, or even a pair, could add a disputed topic like this to the working
agreement without introducing their personal bias. In this specific case, the team chose to leave meetings off the
working agreement until they could reach consensus. Topics that are disputed across the team are important to talk
about at <em>some</em> point, but the brainstorm is probably not the time.</p>

<a name="Team.health.is.easy.to.postpone.when.you.have.important.product.work.to.do."></a>
<h3>Team health is easy to postpone when you have important product work to do.</h3>

<p>One of our teams put the act of distilling the brainstorm notes into an agreement on one person. That person became
busier than expected, didn't have time to write the agreement, and the team's agreement stalled.</p>

<p>Just as personal self-care gets put on the back burner during stressful times, creating a working agreement is easy
to bump down the backlog during intense periods of sprint work. The longer a team drags out the working agreement
process, the more context is lost from the original brainstorm. We recommend not letting your working agreement
linger.</p>

<p>It's also important to revisit the working agreement often. It is a living document, not one-and-done. Review the
agreement as a team occasionally; update the agreement as your team learns how to collaborate better; cultivate the
agreement. If an agreement gets stale, it will become inaccurate, meaningless, and unused.</p>

<a name="What.does.it.even.mean.to.have.a.team.working.agreement."></a>
<h3>What does it even mean to have a team working agreement?</h3>

<p>A team working agreement is a neat artifact. The brainstorm process has great value. But there is non-obvious work
involved in turning a team working agreement into the team culture. We have many questions that we aren't sure how
to answer:</p>

<ul>
<li>How do you enforce the agreement?</li>
<li><em>Should</em> you enforce the agreement?</li>
<li>How do you get the entire team to embrace it?</li>
<li>What happens when the agreement is violated or disrespected?</li>
</ul>


<p>If you're using working agreements on your team and you've got answers for us, or you want to start using them and
have more questions, we'd love to hear from you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is this you? No, really, is this you?]]></title>
    <link href="http://artsy.github.io/blog/2020/01/06/is-this-you/"/>
    <updated>2020-01-06T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2020/01/06/is-this-you</id>
    <content type="html"><![CDATA[<p>You are a software engineer.</p>

<p>You consider yourself an introvert, and you really appreciate "engineering time", where you prefer to work for
extended uninterrupted periods because interruptions wreck you. You are used to being misunderstood. Ever since you
can remember the people around you have been kind of baffling: they constantly fail to notice stuff that's really
obvious and important to you, and then they have the audacity to get frustrated with you for not understanding
<em>them</em>.</p>

<p>But whatever, you can deal with this, right? This is just how life goes, right? Everyone's like this, right?</p>

<p>Right?</p>

<!-- more -->


<p>It's really been like this as long as you can remember. Maybe even as early as kindergarten, when you distinctly
remember feeling "Wow, I guess all these kids must already know each other?" because how else would they know how
to just start playing together? You might have gotten really, really good at languages -- or you might have
eschewed the humanities entirely and focused on things like Math and Science. Regardless, you were in it for the
<em>systems</em> -- grammar just <em>makes sense</em> to you, in the same way software engineering just <em>makes sense</em> to you now.
Math, you finally understood, was just a specialized language for referring to the relations between things --
sure, okay!</p>

<p>Socially, things were always a little weird for you. Other people never <em>quite</em> behaved in ways that made sense to
you, and especially when younger you probably socialized by getting 'adopted' by some other kid who seemed to know
what was going on. Whatever you studied you poured yourself into deeply as long as it held your interest -- your
mind expanded into the space your lessons created and eagerly walked hidden pathways that your classmates didn't
see. You asked the questions in class that surprised the teacher and annoyed your peers, and you probably got damn
good grades.</p>

<p>You may have been bullied.</p>

<p>You likely went to college and focused on something that interested you -- perhaps you doubled down on language, or
maybe you went into engineering or music or math. It was a revelation, because maybe for the first time in your
life you were surrounded by a self-selecting group of peers, some of whom shared your passion for analysis and deep
thinking. You didn't have to go to great lengths to establish a shared context, for instance. You could speak words
that were meaningful to you and someone else could understand and offer a meaningful response, and this made you
feel uncomfortable at first but you really loved it. Your experience of college was maybe a bit different than you
expected - certainly nothing like the movies you watched as a kid. You got really into a weird hobby, maybe, and
didn't end up going to too many parties.</p>

<p>Relationships and intimacy have always been a bit fraught for you. You frequently find yourself trying to figure
out what you're supposed to be feeling, and you work hard to show your partner the person you want to be. Maybe
when you first moved in with someone you had a bit of a freakout that has made you nervous to think about ever
since, or maybe meeting a significant other's family has been so anxiety-inducing as to prove impossible. Maybe you
have a string of failed relationships behind you, each of them starting out so promisingly and then imploding
catastrophically and confusingly once the initial honeymoon phase was over and it was time to really get to know,
get to grow with another person. You don't know how to do that, and every time you try you seem to make someone
upset.</p>

<p>You're a software engineer at least partly because computers are much easier to communicate with than people. When
a computer doesn't understand you it's because you've done something wrong. When a computer says something
incorrect it's also because you've done something wrong. You can step through and rigorously debug the problem,
identifying and isolating the mistake. The more you played around with tech the more you liked it - and when you
discovered programming it blew your mind, because you <em>intuitively</em> understood the relational nature of computation
and found yourself suddenly gifted with superpowers.</p>

<p>When you entered the working world you were REALLY confused, though. You were able to complete a week's worth of
assignments in an afternoon. It was really obvious to you who was working intelligently and who was not, and you
had to learn, perhaps painfully, that sharing that kind of feedback isn't always constructive. Maybe one day you
got some criticism about something you did and it really hurt in ways you didn't expect. Maybe you found yourself
reacting defensively, and the next thing you know you're in a meeting with HR over what to you was clearly all a
big misunderstanding, but nobody is smiling. Or maybe instead someone recognized that you were having a tough time,
and stepped in to defuse the situation.</p>

<p>Regardless, your agency was compromised. You found yourself resenting the arbitrary and unwritten rules of the
professional world: you have to be at your desk and looking busy even when you're just thinking; let people say
things that are not true if correcting them publicly will embarrass someone; people will ignore your advice and
then something will break because of it and it's very important not to get too upset.</p>

<p>You're used to modeling the world in a specific way, but school didn't actually prepare you in any way for the
complex web of social dynamics that, just like in kindergarten, everyone else seems to grok. It's really
frustrating, maybe you've been fired once or twice, maybe you've left a few jobs out of embarrassment. You
eventually figured it out -- or maybe you didn't! The thing is, programming has never been the hard part of work,
for you. The people have been the much more interesting and challenging domain to master.</p>

<p>Today, you're an engineer who really deeply understands and enjoys your stack. You have workflows that you can do
in your sleep, you know intuitively what the current state of your system is and you have a powerful intuition for
downstream problems. Maybe you've figured out how to play the social game, in which case you're probably gregarious
and supportive and kind to your coworkers. Maybe you haven't, in which case you're super productive but don't
attend a lot of office functions. Either way is fine as long as you've found a place where you feel comfortable!</p>

<p>At the same time, you've had a sense for years that something isn't quite... right. You've probably learned to
ignore it. Sure things get super stressful sometimes. Sure you find yourself really unreasonably tired, especially
after meeting-heavy days. Sure when you get downtime sometimes all you can do is just sit there doing nothing --
maybe you feel bad about that? Maybe you use an abnormally high number of sick days purely for mental health
reasons. Maybe you've got a substance abuse issue. You're probably struggling with codependency, anxiety and/or
depression. You think of yourself as just "a depressed person", but try not to let it define you. You feel
constantly on the edge of burnout, but no matter how many vacations you take it doesn't seem to get any better.</p>

<p>Maybe you are sensitive to certain kinds of sensory stimuli - like, you can't wear synthetic fabric because it just
feels gross. Maybe you can't eat peaches because the peach fuzz on the roof of your mouth is unbearable. Maybe you
can't go into a well-lit room without sunglasses, maybe every sound you hear comes in at the same volume. Maybe a
bunch of these kinds of things or more bother you, and maybe you've forgotten because you've just pushed through
them your whole life. Maybe you've accepted that you're just kind of weird and different.</p>

<p>But maybe -- and this may be the best news you've ever received -- you're autistic.</p>

<p>Many (if not most) autistic people would tell you similar stories about their personal histories, especially those
who have gone undiagnosed into adulthood. If these descriptions resonate with you -- maybe not exactly, but maybe
you can see the shape I'm trying to paint -- then it's worth considering the possibility that you may be
<strong>neurodivergent</strong>.</p>

<p>Autism is one form of neurodiversity, and what I'm describing above is a very autistic experience - but there's a
ton of overlap with ADHD, Dyslexia and other neurodivergent conditions. We've learned so much about neurodiversity
in the past ten years, and even if you consider yourself fairly well-informed about autism it's worth updating your
understanding.</p>

<p>Your first step, quite reasonably, might be to go take a look at the
<a href="https://www.cdc.gov/ncbddd/autism/hcp-dsm.html">official diagnostic criteria</a> for autism. But autistic or not, if
you do that you will in all likelihood not see yourself reflected -- those criteria are purely behavioral, while
the experience of being autistic is purely subjective. Non-autistic (or "allistic") experts on autism document
observable behavior but don't actually understand what they're seeing. I tried to
<a href="https://theaspergian.com/2019/04/17/humanizing-the-dsm-diagnosis-for-autism/">reframe those criteria</a> in a way
that makes them feel human and relatable rather than inhuman and other.</p>

<p>I'm writing this blog post because my own self-diagnosis at age 34 and formal diagnosis this past fall at age 36
changed my life, and I <em>know for a fact</em> that there going to be some autistic people reading this who don't know
that they're autistic.</p>

<p>If you're interested in learning more, I highly recommend perusing
<a href="https://reddit.com/r/autismTranslated">AutismTranslated</a>, a subreddit to make autistic traits more recognizable
and relatable to those of us who subjectively experience them. I'm personally most active
<a href="https://twitter.com/mykola">on twitter</a> these days and you can always find me there, along with hundreds of other
folks using the <a href="https://twitter.com/search?q=%23actuallyAutistic">#actuallyAutistic</a>,
<a href="https://twitter.com/search?q=%23allAutistics">#allAutistics</a> and
<a href="https://twitter.com/search?q=%23askingAutistics">#askingAutistics</a> hashtags. Autism is a condition particularly
vulnerable to intersectional dynamics, which means that resources like
<a href="https://twitter.com/search?q=%23autisticWhileBlack">#autisticWhileBlack</a> and
<a href="https://reddit.com/r/aspergirls">/r/aspergirls</a> are crucial to folks in those demographics.</p>

<p>Finally, as preparation for this blog post I asked diagnosed neurodivergent tech workers on twitter
<a href="https://twitter.com/mykola/status/1205927773644214273">to volunteer if they're willing to answer questions</a>, and
as of this writing over a hundred people have answered. So if you want to know more about what this is like --
whether you want to better understand yourself or you have other people in your life you want to learn how to
better support -- please check out that thread and the huge number of responses, and don't be afraid to reach out
to people!</p>

<p>If you're autistic and undiagnosed you're living life on hard mode and you don't even know it. Learning who you
are, learning what your authentic needs are and learning how to heal from years of maladaptive coping mechanisms
can and will change your life in a million ways. You can move from barely getting by to thriving as your most
authentic self.</p>

<p>I see you and I believe in you, and there are a lot of us out here ready to help. &lt;3</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Learning Group]]></title>
    <link href="http://artsy.github.io/blog/2019/12/03/ios-learning-group/"/>
    <updated>2019-12-03T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2019/12/03/ios-learning-group</id>
    <content type="html"><![CDATA[<p>Regular readers of our blog might be familiar with <a href="https://www.cultureamp.com">Culture Amp</a>, a tool Artsy uses to
collect anonymous feedback and take action on cultural issues (we most recently discussed the tool
<a href="https://artsy.github.io/blog/2019/04/19/having-a-coffee-with-every-engineer/">in this blog post</a>). At a
company-wide level, Culture Amp has helped guide everything from Artsy's evolving culture, to our physical work
spaces, to our support for remote work. At an engineering-team level, we've also been using Culture Amp to guide
our choices in technology, documentation, and training.</p>

<p>In this blog post I'll be detailing a recent learning course we ran to share knowledge about how Artsy builds iOS
software for our entire engineering team.</p>

<!-- more -->


<p>Let's start at the beginning. Earlier this year, Artsy Engineering ran a survey through Culture Amp to get answers
to the following questions:</p>

<ol>
<li>What is our team's opinion on our current technology choices?</li>
<li>What is our team's familiarity with or preparedness for our current technology?</li>
<li>Where are the areas of strength and opportunities for both learning and teaching?</li>
</ol>


<p>There are a lot of things we learned from this survey, and among them was a desire for engineers to better
understand how to build iOS software at Artsy. With a nudge (and support!) from our <em>Peer Learning Working Group</em>,
I set out to create a learning plan. I wasn't starting from scratch – we already ran a few learning groups on
topics ranging from Scala fundamentals to React Hooks. We used the lessons learned from <em>those</em> experiences to
define and deliver a learning plan.</p>

<p>I started by booking five sessions, spread out by a week. I picked a time that was a good fit for as many engineers
as possible, and I scheduled them a month ahead to give people a chance to move their schedules around. Scheduling
them up front was important, to give learners a sense of what to expect; previous learning groups had suffered from
inconsistent schedules, which led to intermittent attendance. I also asked each Tech Lead to make sure at least one
engineer from their team attended.</p>

<p>Next was the actual curriculum. In the spirit of "proudly discovered elsewhere", we actually looked at using
existing learning resources that someone else had already developed. However, since
<a href="https://artsy.github.io/series/react-native-at-artsy/">our iOS stack is a bit unique</a> and I was keen to keep
honing my own skills as a technical educator, we decided to make our own. With the help of our Peer Learning
Working Group, we set learning objectives for the five sessions. Here was the original plan:</p>

<ul>
<li><strong>Week 1</strong>: This week, we will cover how iOS software is developed, QA'd, and deployed. By the end of this
session, all participants should be able to pull the latest code from <a href="https://github.com/artsy/eigen">Eigen</a>
(our native iOS repo) and <a href="https://github.com/artsy/emission">Emission</a> (our React Native repo), see their work
in an iOS simulator, and link the two projects together.</li>
<li><strong>Week 2</strong>: This week, we will cover what makes React Native distinct from React on the web, as well as how Artsy
leverages shared infrastructure (such as our design-system, <a href="https://github.com/artsy/palette">Palette</a>) to make
it easier for engineers to work in either one.</li>
<li><strong>Week 3</strong>: This week, we will cover how to create a new view controller. View controllers are the main unit of
composition for native iOS apps, and we integrate our "Scene" React components <em>as</em> view controllers. This
includes routing between view controller, from both native Objective-C and React Native code.</li>
<li><strong>Week 4</strong>: This week, we will create our own React component to fit within the new view controller from Week 3.
This will be a Relay container, fetching data from our GraphQL API,
<a href="https://github.com/artsy/metaphysics">Metaphysics</a>. We will cover how to fetch data, how to <em>re</em>-fetch data, as
well as how Eigen and Emission integrate together to provide client-side API response caches (both Relay and
others).</li>
<li><strong>Week 5</strong>: This is the final week. Participants are asked to bring an iOS bug from their product team's backlog
that they would like to fix. Pairing is encouraged.</li>
</ul>


<p>Things mostly went to plan. I made sure to provide the learning resources at least a day or two ahead of each
session; this let me respond to feedback from the previous week, and also gave learners a chance to review
materials ahead of time.</p>

<p>Every session was recorded for anyone who missed it. We had a shared Slack channel set up for questions, so
engineers could help each other. I also made sure to provide weekly office hours: this was space for people who
missed sessions to catch up, or to just dig into concepts in more detail. I'll return to the topic of office hours
later in this post.</p>

<p>Around the time of the learning group, I was reading
<em><a href="https://www.amazon.com/Make-Stick-Science-Successful-Learning/dp/0674729013/ref=sr_1_1?keywords=making+it+stick&amp;qid=1575314498&amp;sr=8-1">Make It Stick: The Science of Successful Learning</a></em>.
The book is written for people who want to improve their own learning skills, but it was <em>very</em> helpful to read as
I was developing and delivering this curriculum. Here are a few lessons that I learned from the book that were
helpful while teaching engineers at Artsy about how we build iOS software:</p>

<ul>
<li>If someone tries to do something themselves <em>before</em> being told how to do it, the attempt will strengthen their
understanding of the underlying concept. To put this into practice, I would often ask learners questions that I
didn't expect they could answer yet, and the resulting discussion was always worthwhile.</li>
<li>Interleaving different concepts together helps learners form connections between those concepts. This was
especially important, since a big motivator for using React Native at Artsy was to share skills between web and
iOS codebases. As an example of putting this into practice, I interleaved a discussion of
<a href="https://relay.dev">Relay</a> into our curriculum; I hoped to show learners both a new perspective of Relay, as well
as show them how familiar writing React Native code was to writing React web code.</li>
<li>Allowing for some forgetting to take place before reviewing concepts will
<a href="https://njcideas.wordpress.com/2017/09/22/the-cognitive-science-of-studying-massed-practice-vs-spaced-practice/">help strengthen learner's understanding</a>.
To put this into practice, I would return to topics from a few weeks ago to cement their understanding with
learners.</li>
</ul>


<p>I had to push through some discomfort as an educator, too. Each session ended with homework questions, which we
reviewed at the top of the next session. I would ask each question and then just sit there, in awkward silence,
while everyone looked around for someone to answer. Eventually, inevitably, someone would.</p>

<p>All of the learning materials
<a href="https://github.com/artsy/README/tree/master/resources/mobile/learning-group">are open source</a>. While the materials
are mostly specific to Artsy, they may be of help to others. And regardless, we want to adhere to our
<a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#open-source-by-default">Open Source by Default</a>
principle.</p>

<p>We learned quite a lot from delivering this curriculum – lessons we can apply to our next learning group:</p>

<ul>
<li>Learners appreciated the weekly schedule set upfront, affirming what we learned from previous learning groups.</li>
<li>Learners appreciated having access to the materials ahead of time.</li>
<li>Learners appreciated having the sessions recorded, to be reviewed later (or watched, in case they missed the
session).</li>
<li>Learners appreciated having office hours available; even though the office hours weren't well-attended, learners
appreciated having access to them if they needed to.</li>
<li>Learners even appreciated the awkward silences while I waited for an answer to my questions. (One survey
respondent described it as "like pulling teeth, but helpful.")</li>
<li>Learners are varied in how they want to learn. Some liked going through things together. Some thought we went too
slow. Still others thought we should expect learners to do more work ahead of class.</li>
</ul>


<p>This last point is worth expanding upon. While everyone learns differently, there is a distinction between what
<em>feels</em> effective and what <em>is</em> effective. I tried to structure the course so that it was accessible to as many
types of learners as possible: some like to review materials ahead of time, some like to have them on hand during
the session, etc. Some are in-person, others are remote, still others are reviewing the recording. I could write
another blog post about learning styles, but for now it suffices to say that I aimed for <em>inclusion</em> of as many
different learners as possible while also recognizing that I can't make everyone happy.</p>

<p>As I enter a new chapter of my own career, leading Artsy's new Mobile Experience team, it was helpful to return to
some fundamentals; to get familiar with technology choices that we made years ago
(<a href="https://ashfurrow.com/blog/swift-vs-react-native-feels/">choices which I originally resisted</a>); and to learn from
learners' perspectives as beginners. The future of iOS software at Artsy is very bright, and now every product team
is more prepared than ever to deliver user experiences that are of a quality worthy of art.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diagnosing our Radiation Problems]]></title>
    <link href="http://artsy.github.io/blog/2019/11/14/diagnosing-our-radiation-problems/"/>
    <updated>2019-11-14T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2019/11/14/diagnosing-our-radiation-problems</id>
    <content type="html"><![CDATA[<p>Email! Electronic mail! What a concept! Like many companies, Artsy has built products on top of email, but this is
a decision that (like many companies) Artsy periodically regrets. But overall, our email systems work well!</p>

<p>But what about when it doesn't? Well that's what today's blog post is about: what happens when things break and you
don't know why?</p>

<!-- more -->


<p>I have learned a lot
<a href="https://artsy.github.io/blog/2018/05/30/my-first-week-on-call/">since my first on-call shift</a>, but going on call
still gives me a little stage fright. As I start a shift, I'm on the look-out for things that might break, and soon
after starting a recent on-call shift, "breaking" is exactly what things did.</p>

<p><img src="/images/2019-11-07-diagnosing-our-radiation-problems/alert.png" alt="Screenshot of Slack alert" /></p>

<p>We got an automated alert on Slack that one of our email services, code-named "Radiation", had really high response
times. We <em>then</em> received an alert that too many requests to Radiation were failing completely. Yikes. The next
twenty two hours was a deep dive into Heroku, New Relic, Rails, and PostgreSQL, all to isolate the problem and
produce a solution.</p>

<p>The nice thing about email, as a protocol, is that it's based on a store-and-forward concept. That means that if a
message delivery fails, email servers will try again later (typically with an exponential backoff). SendGrid, our
email processor, has built their REST API around this same store-and-forward concept. While the Radiation server
was unresponsive, SendGrid wouldn't receive successful HTTP responses from the webhook deliveries, so it would
attempt to re-deliver the failing emails later. Email deliveries would be delayed, but the emails themselves would
not be dropped. We wasted no time addressing the problem, but we were also confident that once we fixed the issue,
the data would be okay.</p>

<p>After the alert, Ashkan (Radiation's point-person) and I communicated with our colleagues (engineers and affected
non-engineers) about the problem. With the help of Chung-Yi, we began investigating the immediate problem (with a
focus on <em>mitigating</em> it, rather than necessarily <em>fixing</em> it). Oh, we tried it all: spinning up more Heroku Dynos
to handle requests, increasing concurrency on the individual Dynos, restarting Redis and PostgreSQL stores. Each
time, things would work briefly before the Radiation API would begin timing out again. More accurately, the
requests sent to Radiation were taking longer than the Heroku router was giving them (30 seconds) before the router
gave up and timed out the request. We started examining the Radiation code and database (keeping our <em>ion the
prize</em>: mitigation).</p>

<p>Ashkan investigated slow database queries. We added new PostgreSQL indexes to speed up queries, and restructured
others to avoid expensive joins. Unfortunately, all this accomplished was extending the time after a Dyno reboot
that things would work (before beginning to timeout again). Because
<a href="https://artsy.github.io/blog/2017/05/30/database-encryption/">Artsy stores emails as encrypted-at-rest</a>, it was
difficult to pinpoint which exact message could be causing the timeouts. And Radiation itself didn't have much in
the way of logging, which would normally help us debug the problem.</p>

<p>It was frustrating to try to fix something but only manage to improve how long it took to break again. We had
enhanced Radiation's performance to the point where it was taking 10 minutes after a Dyno reboot to begin timing
out again, up from 30 seconds at the beginning of the incident. Despite an afternoon and evening spent trying to
fix the problem, we were stuck. We decided that the best course of action was a good night's sleep; we would ask
for help in the morning.</p>

<p>The next day, Ashkan and I got <em>up and atom</em> to address the problem. We brought my on-call partner Devon up to
speed, detailing the incident symptoms and what we had tried so far. While Devon and Ashkan worked on additional
logging and new timeout strategies, I took another approach.</p>

<p>Artsy has been moving to <a href="https://www.datadoghq.com">DataDog</a> for server performance monitoring, but Radiation was
still using <a href="https://newrelic.com">New Relic</a>. My background is in iOS app development and I had never really dug
into New Relic before, but I <em>am</em> very experienced at profiling iOS applications, and the Ruby and Objective-C
runtimes have more in common than they have have differences. I used New Relic to profile a production Radiation
Dyno for five minutes and, to our collective surprise, we found that more than 90% of CPU time was being spent in
<a href="https://github.com/thoughtbot/griddler/blob/ff2ad16949bf5190f93df1a3e83eb0192f136c6d/app/controllers/griddler/emails_controller.rb#L4-L10">an innocuous function of a dependency</a>,
the open source library <a href="https://github.com/thoughtbot/griddler">Griddler</a>.</p>

<p>Artsy uses Griddler to parse and sanitize emails that we receive from <a href="https://sendgrid.com">SendGrid</a>. Griddler
contained the problematic code, which was responsible for parsing email responses from threaded replies. So if an
email body received by Radiation looks like this:</p>

<pre><code>This is the most recent reply in this email conversation.

On September 28th, 2019, Someone Else Wrote:

[The rest of the email thread]
</code></pre>

<p>Then Griddler parses out the string "This is the most recent reply in this email conversation." for Radiation to
process. This is really important because some of the threads in Radiation are <em>thousands</em> of emails long. In fact,
I learned that Radiation has Artsy's largest production database.</p>

<p>Griddler does this processing via regular expressions. Ashkan had the insight to look for existing issues from
other Griddler users who ran into similar problems, and to our delight,
<a href="https://github.com/thoughtbot/griddler/pull/310">we found a pull request</a> that appeared to address the <em>exact</em>
issue that we were having.</p>

<p>It turns out that emails with large amounts of repeated newline characters would totally stall Griddler's regex.
Heroku's router would timeout any request after 30 seconds, but would leave the Ruby code churning on that regex.
That would leave the Rails server unable to respond to subsequent HTTP requests, causing more timeouts. And because
of email's store-and-forward nature, SendGrid would begin sending more problematic emails pretty quickly after any
Radiation reboot. A small change to add a regex group was all that was necessary to fix the issue.</p>

<p>Phew! We forked Griddler to Artsy's GitHub organization and applied the change from the pull request. We were
concerned about security implications of using a different regex, but my
<a href="https://artsy.github.io/blog/2018/02/06/apogee-technical-retrospective/">previous work in regular expressions</a>
helped me vet the change. We pointed Radiation's Gemfile to Artsy's fork and deployed the change.</p>

<p><img src="/images/2019-11-07-diagnosing-our-radiation-problems/heroku.png" alt="Screenshot of Heroku Dashboard, indicating a drop in load" /></p>

<p>Then, we waited. Would the system start timing out again? It took a half hour for any of us to breathe a sigh of
relief. But things appeared to be stable: response times were normal and Dyno load dropped precipitously. Our
<em>Curie</em> worked. (Okay, enough radiation puns.)</p>

<p>During our weekly incident review, Devon guided the rest of our team through our incident response and what we
learned. Radiation is now in a much better state, so that future problems will be easier to track down. We
responded to the Griddler pull request, encouraging the maintainers to merge the commit so other teams would avoid
this problem. The incident review meeting explored a number of options to mitigate future issues, including
migrating Radiation to our Kubernetes cluster, and Sam (our VP of Engineering) suggested writing this post. So here
we are.</p>

<p>Ashkan also followed up with peer feedback for Devon, Chung-Yi, and myself. In part, it read:</p>

<blockquote><p>It's rare and odd to say dealing with incident was fun, but with your help it actually was productive and fun.</p></blockquote>

<p>Which, honestly? One of my proudest accomplishments at Artsy.</p>

<p>In the end, we solved the problem and restored access to our email systems in under 24 hours. We kept our cool, we
communicated effectively with our non-engineering colleagues, and we learned a lot. What more could you want from a
Radiation incident?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unbearable Lightness of Refactoring]]></title>
    <link href="http://artsy.github.io/blog/2019/09/10/unbearable-lightness-of-refactoring/"/>
    <updated>2019-09-10T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2019/09/10/unbearable-lightness-of-refactoring</id>
    <content type="html"><![CDATA[<p>As engineers we are constantly in the process of building new features and improving our existing ones. Nowadays, with the help of tools and processes like code reviews one could argue the quality of the code being written has risen. At Artsy a pull request normally has one Assignee and possibly one or more Reviewers, so why do we still do a lot of refactoring?</p>

<blockquote><p>There is no means of testing which decision is better, because there is no basis for comparison. We live everything as it comes, without warning, like an actor going on cold. And what can life be worth if the first rehearsal for life is life itself?</p>

<p>― Milan Kundera, <a href="https://en.wikipedia.org/wiki/The_Unbearable_Lightness_of_Being">The Unbearable Lightness of Being</a></p></blockquote>

<p>Part of me wants to end this blogpost by Kundra’s quote, but for now let's get deeper.</p>

<!-- more -->


<a name="L.The.Refactor."></a>
<h2>"The Refactor"</h2>

<p>Recently we've started adding <a href="https://stripe.com/docs/strong-customer-authentication">Strong Customer Authentication (SCA)</a> support to one of our services. This service is relatively young in our stack and very well-reviewed. While the original code and approach looked nice and simple, as this service naturally grew and we started adding more logic to it, things got more and more complicated. During SCA support efforts, we realized it's time to refactor. The code I was trying to refactor was less than a year old and <a href="https://twitter.com/davidwalshblog/status/953663412013293569">originally written, well... by me</a>!</p>

<p>Should I be worried? Embarrassed? Well, not really. As engineers, when we build things we tend to look at current state of affairs, and we attempt to predict the future as much as possible. But the future is always changing, moving. SCA feature we were about to add to our existing logic weren't a requirement a year ago (a year ago I didn't know what SCA was). So first thing, <strong>never be embarrassed about refactoring</strong>, because the thing you're working on is often entirely unknown and you can't expect to get something unknown totally right the first time around. Looked at it in this light, refactoring is healthy.</p>

<a name="Lets.Get.More.Specific"></a>
<h3>Lets Get More Specific</h3>

<p>Back to our SCA change, we ended up having some discussions about how to improve our already complicated logic in a way that easily supports future updates. We started by trying to separate the different steps that an order has to go through to fully get submitted and try to simplify it, weighing the pros and cons of each approach. While pretty much all of our solutions would have some disadvantages, we managed to find our best option and started refactoring. Without getting too technical, lets look at the actual change.</p>

<pre><code class="ruby">## before refactor
order.submit! do
  order.line_items.each { |li| li.update!(commission_fee_cents: li.current_commission_fee_cents) }
  totals = BuyOrderTotals.new(order)
  order.update!(
   # set totals
  )
  order_processor.hold!
  raise Errors::InsufficientInventoryError if order_processor.failed_inventory?
  # in case of failed transaction, we need to rollback this block,
  # but still need to add transaction, so we raise an ActiveRecord::Rollback
  raise ActiveRecord::Rollback if order_processor.failed_payment? || order_processor.requires_action?

  order.update!(
    # set payment
  )
  order.transactions &lt;&lt; order_processor.transaction
  PostTransactionNotificationJob.perform_later(order_processor.transaction.id, user_id)
  raise Errors::FailedTransactionError.new(:charge_authorization_failed, order_processor.transaction) if order_processor.failed_payment?
  if order_processor.requires_action?
    # because of an issue with `ActiveRecord::Rollback` we have to force a reload here
    # rollback does not clean the model and calling update on it will raise error
    order.reload.update!(external_charge_id: order_processor.transaction.external_id)
    Exchange.dogstatsd.increment '******'
    raise Errors::PaymentRequiresActionError, order_processor.action_data
  end
end
</code></pre>

<p>In the original solution, we wrapped all of our changes in a database transaction within <code>order.submit!</code> to have a lock on that record. This was all good since we would ensure data integrity provided by database transaction. This way we ensure updates to <code>order</code> and <code>line_items</code> happen only in case of success. A failure in this block would rollback all changes which is good 👍</p>

<p>But things got complicated once some of the changes in the block <em>should</em> have been preserved, even in case of rollback. Specifically we want to make sure a <code>transaction</code> is stored on the <code>order</code> if it payment fails or requires action.
We found out that we can use <code>raise ActiveRecord::Rollback</code> which is a specific exception in Rails that only bubbles up in the surrounding transaction and does not get thrown outside of the block. This already makes things super complicated.</p>

<p>In order to make our code less complicated, we did a few things:</p>

<ul>
<li>We delegated more responsibility to a service class,<code>OrderProcessor</code>.</li>
<li>Instead of wrapping all code in one transaction, we now optimistically <code>submit</code> the order at the beginning and in case anything went wrong, we revert the changes.</li>
</ul>


<pre><code class="ruby">order_processor = OrderProcessor.new(order, user_id)
raise Errors::ValidationError, order_processor.validation_error unless order_processor.valid?

order_processor.advance_state(:submit!)
unless order_processor.deduct_inventory
  order_processor.revert!
  raise Errors::InsufficientInventoryError
end

order_processor.set_totals!
order_processor.hold
order_processor.store_transaction

if order_processor.failed_payment?
  order_processor.revert!
  raise Errors::FailedTransactionError.new(:charge_authorization_failed, order_processor.transaction)
elsif order_processor.requires_action?
  order_processor.revert!
  Exchange.dogstatsd.increment '******'
  raise Errors::PaymentRequiresActionError, order_processor.action_data
end
order_processor.on_success
</code></pre>

<p>Well, this at least is a lot more readable.</p>

<a name="Get.The.Change.to.Production"></a>
<h3>Get The Change to Production</h3>

<p>The next question is how to get this to production. We tried to isolate this specific refactoring by:</p>

<ul>
<li>Open a PR that only focuses on our refactoring</li>
<li>Make sure in the PR above we don't touch any API level tests and make sure all these tests still pass. This would give us more confidence that we are not impacting our existing clients.</li>
<li>Review and merge refactoring PR and test on staging.</li>
<li>Deploy everything in current pipeline to isolate the refactor deploy.</li>
<li>Deploy the refactoring PR to production.</li>
</ul>


<a name="How.Did.It.Go."></a>
<h2>How Did It Go?</h2>

<p>This plan worked for us, for the most part. We ended up having to rollback the deploy since we found a bug in a non-API part of our app. From this we learned that even if we already have tests written in different layers of our app, we still need to verify them and make sure they cover all cases. Relying too much on existing tests can often lead to trouble -- verify!</p>

<a name="Our.learnings"></a>
<h2>Our learnings</h2>

<ul>
<li>Don't be afraid of refactors. They are natural and a healthy engineering tool / practice.</li>
<li>Ensure that refactor PR's only include refactor-related changes. It's often tempting to fix other things along the way, but those fixes can take place in follow-up PRs.</li>
<li>Don't rely only on existing tests. Refactoring is a great opportunity to review and verify your tests. Verify them and make sure they cover all scenarios.</li>
</ul>


<p>Curious about the PR? At Artsy we believe in <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#open-source-by-default">Open Source By Default</a>, so check out the code <a href="https://github.com/artsy/exchange/pull/475/files">here</a>.</p>
]]></content>
  </entry>
  
</feed>
