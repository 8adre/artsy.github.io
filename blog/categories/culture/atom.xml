<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: culture | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/culture/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2020-09-03T16:05:14+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Relay Pagination Containers Demystified]]></title>
    <link href="http://artsy.github.io/blog/2020/08/31/relay-pagination-containers-demystified/"/>
    <updated>2020-08-31T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2020/08/31/relay-pagination-containers-demystified</id>
    <content type="html"><![CDATA[<p>In 2017, Artsy adopted <a href="https://relay.dev/en/">Relay</a> in both its front-end web and iOS codebases (using React and
React Native, respectively). Generally speaking, this investment has turned out very well for us! Relay empowers
product teams to quickly iterate on new features and to share common infrastructure across web and iOS codebases.
However, most of the original engineers who pioneered using Relay at Artsy have since moved on to their next role;
this has left a knowledge gap where Artsy engineers are comfortable <em>using</em> Relay, but they don't totally
understand how it works.</p>

<p>This is a problem as old as software engineering itself, and it has a simple solution: learn and then teach others.
We'll be driving a peer learning group centering around Relay, but today we are going to dive into the part of
Relay that comes up the most in requests for pairing: getting Relay pagination to work. (Note: we're going to use
plain old Relay and not <a href="https://github.com/relay-tools/relay-hooks">relay-hooks</a>.)</p>

<!-- more -->


<p>My goal with this post is to show my thought process when trying to learn about, and clean up our use of, Relay
pagination containers. This post emphasizes the <em>demystifying</em> process and not so much the <em>Relay pagination
containers</em> themselves – we'll briefly cover some Relay fundamentals before diving into a case study on how
problematic code proliferates through copy-and-paste.</p>

<p>Let's back up and talk a little bit about what Relay is and how it works. Relay is a framework that glues React
components and GraphQL requests together. React components define the data they need from a GraphQL schema in order
to render themselves, and Relay handles actually fetching GraphQL requests and marshalling data into the React
component tree. It is very efficient because of build-time optimizations by the Relay compiler.</p>

<p>The simplest use of Relay is a <a href="https://relay.dev/docs/en/fragment-container">fragment container</a>, which is created
from a React component and a <a href="https://blog.logrocket.com/graphql-fragments-explained/">GraphQL fragment</a>. (We're
going to skip over how the GraphQL query is made, but
<a href="https://relay.dev/docs/en/query-renderer">here are the docs on query renderers</a> if you're curious.)</p>

<pre><code class="js">class Artist extends React.Component {
  render() {
    return &lt;Text&gt;The artist name is ${this.props.artist.name}.&lt;/Text&gt;
  }
}

export ArtistFragmentContainer = createFragmentContainer(Artist, {
  artist: graphql` # artist will be passed in as props
    fragment Artist_artist on Artist { # Relay has strong naming conventions
      name # Get all the data we want here
    }
  `
})
</code></pre>

<p>(At Artsy, we use <a href="https://github.com/relay-tools/relay-compiler-language-typescript">TypeScript with Relay</a>, but
for this blog post we'll stick to JavaScript.)</p>

<p>So we have a plain React component that gets some props, and a Relay fragment container that wraps it, defining the
data that the component needs.</p>

<p>There are other types of Relay containers beyond simple fragment containers.
<a href="https://relay.dev/docs/en/refetch-container">Refetch containers</a> are like fragment containers except you can
refetch their contents from your GraphQL server (in response to, for example, user interaction). Using a refetch
container is very similar to using a plain fragment container. But today, we want to talk about
<a href="https://relay.dev/docs/en/pagination-container">pagination containers</a>, which use a GraphQL construct called
<em>connections</em> to show page after page of data.</p>

<p><a href="https://www.apollographql.com/blog/explaining-graphql-connections-c48b7c3d6976/">GraphQL connections</a> are beyond
the scope of this blog post, but they are a way to fetch lists of data without running into the limitations of
returning a simple array. Connections can return metadata about their results, like how many total results there
are, and use cursors (rather than page numbers) for paginating. They also handle when items are inserted or deleted
from the results between requests for pages –
<a href="https://artsy.github.io/blog/2020/01/21/graphql-relay-windowed-pagination/">check out this blog post</a> for more
info on how to use connections with Relay.</p>

<p>Pagination containers take considerably more setup than plain fragment containers, and the setup itself is very
fickle. Things simply will not work until you get the configuration <em>exactly correct</em>, and then everything works
perfectly. The setup is largely repeated boilerplate, and what I've noticed (from other engineers but also myself)
is that the boilerplate for new pagination containers gets copy-and-pasted from existing ones. We will see how this
leads to small problems getting propagated throughout the codebase, and leads to engineers not feeling confident
when working in pagination containers.</p>

<p>So let's modify the Relay container above to fetch a list of the artist's artworks. This is a very simple example,
only used to illustrate how to use pagination containers.</p>

<pre><code class="js">class Artist extends React.Component {
  render() {
    return (
    &lt;Text&gt;The artist name is ${this.props.artist.name}.&lt;/Text&gt;
    {this.props.artist.artworks.edges.map(node =&gt;
      /* Render each artwork */
      &lt;Text key={node.id}&gt;{node.name}&lt;/Text&gt;
    )}
    {this.props.relay.hasMore() &amp;&amp;
      &lt;Button onPress={() =&gt; this.props.relay.loadMore() } text="Load next page" /&gt;
    )
  }
}

export ArtistFragmentContainer = createPaginationContainer(Artist, {
  artist: graphql`
    fragment Artist_artist on Artist
      @argumentDefinitions(
        count: { type: "Int", defaultValue: 10 }
        cursor: { type: "String" }
      ) {
      name
      id
      artworksConnection(first: $count, after: $cursor) @connection(key: "Artist_artworks") {
        edges {
          node {
            title # Now fetch all the artwork data
            id
          }
        }
      }
    }
  `
}, {
  direction: "forward",
  getConnectionFromProps(props) {
    return props.artist.artworks
  },
  getFragmentVariables(prevVars, count) {
    return {
      ...prevVars,
      count,
    }
  },
  getVariables(props, { count, cursor }, fragmentVariables) {
    return {
      id: props.artist.id,
      count,
      cursor,
    }
  },
  query: graphql` # Here is the query to fetch any specific page
    query ArtistArtworksQuery(
      $id: ID!
      $count: Int!
      $cursor: String) {
      artist(id: $id) {
        ...Artist_artist @arguments(
          count: $count
          cursor: $cursor
        )
      }
    }
  `
})
</code></pre>

<p>Wow, that's a lot! I don't want to get too bogged down in details, so let's break this apart at a high level:</p>

<ul>
<li>We changed the React component to show a list of artworks and include a button to load the next page.</li>
<li>We changed from <code>createFragmentContainer</code> to using <code>createPaginationContainer</code>.</li>
<li>We added GraphQL fragment variables for <code>count</code> and <code>cursor</code> to be passed through to the new
<code>artworksConnection</code>, which we also added.</li>
<li>Finally, we added a whole new configuration parameter to <code>createPaginationContainer</code>.</li>
</ul>


<p>This last bit is the part where I see the most frustration. Hopefully what follows will clear things up.</p>

<p>I like to always start by <a href="https://relay.dev/docs/en/pagination-container">reading the docs</a>. The <code>direction</code> key
is the direction that we paginate through, either <code>"forward"</code> or <code>"backward"</code>. <code>getConnectionFromProps</code> is a
function that returns the GraphQL connection, in case the query has more than one. And <code>query</code> is used to fetch any
specific page of results.</p>

<p>Those all makes sense to me, but then we arrive at the real gotchas: <code>getFragmentVariables</code> and <code>getVariables</code>. The
docs are helpful, but only if you understand
<a href="https://relay.dev/docs/en/runtime-architecture.html">the internals of how Relay works</a>. Relay has a sophisticated
architecture that delivers some really well-performing code, but its abstractions sometimes
"<a href="https://en.wikipedia.org/wiki/Leaky_abstraction">leak</a>" and you have to deal with underlying implementation
details of Relay (like <a href="https://relay.dev/docs/en/relay-store">the Relay store</a>) which you don't need to know about
<em>most</em> of the time.</p>

<p>So what are these two functions? Let's return to the docs:</p>

<ul>
<li><code>getFragmentVariables</code> is used when re-rendering the component, to retrieve the previously-fetched GraphQL
response for a certain set of variables.</li>
<li><code>getVariables</code> is used when actually fetching another page, and its return value is given to the <code>query</code>.</li>
</ul>


<p>I think of <code>getFragmentVariables</code> as a kind of caches key for lookup in Relay's internal store. Our implementation
of <code>getFragmentVariables</code> above doesn't really do anything interesting, but a connection that accepted <code>sort</code> or
<code>filter</code> parameters would need to return those to avoid lookup collisions when the user changed sort and filter
options.</p>

<p>Now for <code>getVariables</code>, which are the variables used for the <code>query</code> later on. It really ought to be named
<code>getQueryVariables</code>, I think. But I digress.</p>

<p>Every implementation of <code>getFragmentVariables</code> I could find at Artsy was identical, which makes sense because <em>that
is the default implementation</em>. We shouldn't be defining this option at all! As far as I can tell, Artsy started
with a few pagination containers that supplied this parameter unnecessarily and it got copy-and-pasted throughout
our codebases.</p>

<p>After revisiting the docs, I noticed other optional parameters that don't need to be defined either. Let's rewrite
the call to <code>createPaginationContainer</code> to only supply the parameters that are required:</p>

<pre><code class="js">export ArtistFragmentContainer = createPaginationContainer(Artist, {
  artist: graphql`
    fragment Artist_artist on Artist @argumentDefinitions(
      count: { type: "Int", defaultValue: 10 }
      cursor: { type: "String" } {
      name
      id
      artworksConnection (first: $count, after: $cursor) @connection(key: "Artist_artworks") {
        edges {
          node {
            title # Now fetch all the artwork data
            id
          }
        }
      }
    }
  `
  }, {
  getVariables(props, { count, cursor }, fragmentVariables) {
    return {
      id: props.artist.id,
      count,
      cursor,
    }
  },
  query: graphql` # Here is the query to fetch any specific page
    query ArtistArtworksQuery(
      $id: ID!
      $count: Int!
      $cursor: String) {
      artist(id: $id) {
        ...Artist_artist @arguments(
          count: $count
          cursor: $cursor
        )
      }
    }
  `
})
</code></pre>

<p>This is a lot nicer! By not specifying unnecessary options, we have a smaller surface area to make mistakes in. We
also have fewer overloaded terms, like "variables", so now it's more obvious that <code>getVariables</code> supplies data for
the <code>query</code> below it.</p>

<p>I've already <a href="https://github.com/artsy/eigen/pull/3711">sent a pull request</a> to clean up our use of pagination
containers in our React Native app, and will be following up on the web side next. But I wouldn't have discovered
this if I hadn't really dug into the docs, which I only did so that I could write this blog post. Earlier I said
that the solution to a knowledge gap is simple: learn, and then teach. I learned a lot about Relay today, and I
hope this blog post illustrates the value in the learn-then-teach approach.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From engineering to product management, and back again]]></title>
    <link href="http://artsy.github.io/blog/2020/07/23/from-engineering-to-product-management-and-back-again/"/>
    <updated>2020-07-23T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2020/07/23/from-engineering-to-product-management-and-back-again</id>
    <content type="html"><![CDATA[<p>A year and a half ago I decided to become a product manager after 5 years as a software engineer. This past June,
however, I decided to switch back into engineering.</p>

<p>What happened, and what did I learn?</p>

<!-- more -->


<a name="Why.I.became.a.product.manager"></a>
<h1>Why I became a product manager</h1>

<p>When I started at Artsy, I hadn't planned on becoming a product manager. As I onboarded and worked on projects like
building Artsy's ecommerce backend <a href="https://www.github.com/artsy/exchange">Exchange</a>, I found myself wanting to be
involved in the "what" and "why" of our product and not just the "how." <a href="https://willdoenlen.com">I'm an artist</a>,
and so art and the art market are special topics for me. I felt like I would have more impact as a product manager,
and I definitely wanted to have greater impact on the art world.</p>

<p>My previous job had me doing a blend of product management and engineering work, and so I had already had a taste
of PMing. I spoke with our VP of Product at the time and she agreed to let me try it out. And just like that, in
January 2019 I became the product manager for the Auctions team.</p>

<a name="Becoming.a.product.manager"></a>
<h1>Becoming a product manager</h1>

<p>Product management is a surprisingly difficult job to define. Everyone agrees on one thing: product managers lead
the product development process. However, what product development actually entails differs from company to company
because of differences in resources, culture and priorities. In practice, product managers may find themselves
doing a lot of things that on the surface have nothing to do with product development.</p>

<p>Product management can be distilled down into two tasks:</p>

<ol>
<li>Ensuring that the right feature / product is being built for your users, and</li>
<li>Doing whatever it takes to make (1) happen.</li>
</ol>


<p>A product manager's sole job is to do whatever it takes to make sure your users are getting the right product.
That'll almost certainly involve talking to users to understand their needs, analyzing product usage data and
working with your team and stakeholders to create the next great feature, but there's nothing in those two tasks
that says you need to do any of that. You can do this job any way you'd like as long as you get results. If I knew
that I could have built a better product for my users by pogo sticking across the Brooklyn Bridge then you would
have found me out there pogo sticking all day, every day.</p>

<p>All that to say, the job is highly ambiguous by design. <strong>Any problem could be your problem</strong>, and it's up to you
to judge whether or not that's the best use of your time for your users.</p>

<a name="Redefining.work"></a>
<h2>Redefining work</h2>

<p>Compared to engineering, this ambiguity was a huge shift for me. As an engineer, my thinking was previously limited
to our systems and our codebase, and I largely thought about <em>how</em> to use them to build products. The "how" was now
largely abstracted away from me. It took me a long time to get out of that mindset, largely because I was
uncomfortable with how ambiguous PMing was.</p>

<p>There are a few reasons why the ambiguity was uncomfortable. The first was that the actual output of a product
manager didn't <em>feel</em> like work. As an engineer, you can write code and instantly see the results of your work.
There's a clear pipeline of progress, from initial commit to opening a pull request and deploying your code.</p>

<p>As a product manager, though, your output is much more amorphous. You might spend your time reading up on user
feedback, or you might make docs or comment on other docs. You might spend your whole day in meetings talking about
the same thing over and over again with different groups of people. You might get interrupted repeatedly throughout
the day with questions and problems. Days would fly by and I would have no idea what I did even though I was busy
all day. I just couldn't get that feeling of progress.</p>

<p>I worked through that by keeping a detailed journal. For the first three or four months I recorded what I was doing
every hour of every day. That practice gradually transformed into a more manageable daily journal as I got used to
the work style. No one ever saw those notes -- it was just so I could keep track of what I was doing, what I was
thinking about and feel some accomplishment by writing things down. It helped bridge the gap, and it's a practice I
still maintain.</p>

<p>Another thing that helped me with the "feeling" of work was reading the perspectives of other managers. Andrew
Grove's <em>High Output Management</em> was especially useful. Somewhere along the line I read the phrase "the meeting
<em>is</em> the work," and it clicked for me. A core output of my job was to communicate with others (more on that later).
As an engineer, it's counterintuitive. The more time you spend in a meeting, the less time you spend writing code.
Product managers need quiet thinking time too, but a significant portion of the job is working with others.
Meetings are how the work gets done. That framing helped me feel more productive.</p>

<p>Compounding the problem of not knowing what work "felt" like was not really even knowing what my work was. Here's a
great journal entry from my second or third week as a PM:</p>

<blockquote><p>What I don’t have clarity on:</p>

<ul>
<li>Am I taking on too much for the first quarter?</li>
<li>How do I narrow down the work that I want to do next?</li>
<li>How do I organize everything?</li>
<li>What am I supposed to be doing?</li>
</ul>
</blockquote>

<p>It felt as existential as it looked!</p>

<p>Before I understood that part of my job was to systemtically remove any and every roadblock getting in the way of
shipping a great product, I tended to focus my energies solely on going through the product development cycle. I
could prioritize and propose a feature, but if something wasn't possible it just wasn't possible. As my
understanding evolved, though, I began to see that a lot of what wasn't possible actually <em>was</em> possible. It just
depended on me creating change.</p>

<p>Knowing that felt both enormously empowering and terrifying. If I was unclear before on what my job was, I felt
even less clear now that any problem could be my problem. But I got used to it, and over time and with coaching
from my manager I was able to suss out what not only <em>could</em> be my problem but what <em>should</em> be my problem. There
are some things nobody can change, but there's a surprising amount a single person can do. In the end, I think this
expansive view of work is the right framing for not only product management but really any job.</p>

<a name="From.data.paralyzed.to.data.informed"></a>
<h2>From data paralyzed to data informed</h2>

<p>I studied a hard science in school and have always valued rigorous, quantitative reasoning. That kind of reasoning
is valuable in science and engineering, but when faced with the fuzzy world of business it can only take you so
far. The data you might want to make a decision frequently doesn't exist, and even if you can get it you probably
don't have the time to get it. I found myself initially in loops of analysis paralysis, struggling to find a
rigorous justification for why we should build what we were building.</p>

<p>I found my way out of that loop by focusing on finding the best possible <em>outcome</em>. Instead of getting caught up
trying to maximize my quantitative understanding of an opportunity, I focused on getting just enough information to
understand the relative upside and downside profiles of the opportunities in front of me. I used a rule of thumb
that 70% confidence is usually good enough to make a call. I didn't always know what the exact impact of a feature
would be, but I knew enough to know that whatever we were doing had the highest impact out of anything on the
table. That allowed me to make decisions with confidence.</p>

<p>With that frame of mind, my quantitative skills turned into a huge asset instead of a hindrance. I feel confident
navigating Artsy's database and running my own SQL queries, which helped me work alongside our Data team to analyze
performance and potential impact for a new feature. And when that work was impossible, I was able to take the data
we had and still make an informed decision with it.</p>

<a name="Learning.to.focus.on.users"></a>
<h2>Learning to focus on users</h2>

<p>That style of thinking didn't just extend to <em>why</em> we should build a feature, but also <em>what</em> we should build. When
considering a feature, I found myself jumping immediately to how the feature would work on a systems level rather
than what the user experience should be. That was a double-edged sword. While it made discussions with the
engineers on my team seamless, I sometimes would rule out features in my head because I knew they "weren't
possible." Of course, that did an injustice to both our users and the engineers on my team. Our users deserve the
best experience on Artsy, even if it feels impossible to me. And the engineers on my team could really find a
creative solution for just about anything I threw at them.</p>

<p>Similar to my data paralysis, part of the problem here was that creating a great user experience was fuzzy for me,
and I subconsciously rejected fuzzy things because they didn't align with my version of rigorous knowledge. It was
easier for me think about systems than it was to think about creating a truly delightful user experience, and so I
thought about systems.</p>

<p>That changed as I really dug into user needs. I cultivated user empathy to an entirely new level by immersing
myself in user feedback and user research. I began to really <em>feel</em> that the choices we made impacted the
livelihoods and passions of collectors, institutions and artists. And that helped snap me out of it: our users
needed a better product, not better systems, and so I began to focus much more on how to make a better product.</p>

<p>To understand how to build a better product, I spent a lot of time examining other products to understand what made
them compelling. How did a product meet users' needs? How did it delight them? Where did it fall short? What would
I do to improve it? Doing this over and over again sharpened my product sense and made it easier to think through
how we could build a better experience for Artsy's users.</p>

<a name="Influence.and.communication"></a>
<h2>Influence and communication</h2>

<p>Influence is the currency of product managers. Good product managers work to expand their influence within an
organization so that they can quickly mobilize the organization towards the right goals. Since product managers
don't make anything themselves, a product manager that nobody listens to simply can't be effective.</p>

<p>The interpersonal skills I had built up and practiced as a software engineer didn't directly translate to the
skills I needed to build influence. As a baseline, engineering communication requires precision and clarity of
thought. Since you're typically talking with other engineers, you have shared language and set of tools to help get
your point across. For example, if you can't succinctly express your idea in words you can just write that thought
out in code and other engineers will get it.</p>

<p>Product managers work with a lot of different kinds of people: engineers, designers, marketers, sales people,
operations, executives, users, enterprise customers, vendors... the list goes on and on. Each person has a
different perspective, both from their organizational role and their own life experiences. You have to meet them
wherever they are, so your communication style needs to be highly adaptive.</p>

<p>Good communication feels seamless but is typically accompanied by a lot of planning and foresight. There was a lot
I needed to learn to be an effective communicator and, in turn, an effective leader. How to write a good document,
how to run a meeting, how to craft a compelling story, how to be just the right amount of direct, how to be just
the right amount of concise... and, as a fairly verbal person how to draw good diagrams and pictures to communicate
my ideas. There's no shortcut to improving these skills. Getting better is a matter of practice and feedback.</p>

<a name="Learning.to.say.no"></a>
<h2>Learning to say no</h2>

<p>One of the most difficult things for me to learn was how and when to say "no." As an engineer, I prided myself on
having a can-do attitude and making seemingly impossible things happen. As a product manager, though, I have to
make sure that we're always building the right thing for our users. Since my job is to make sure we're doing that,
I usually have conviction that we're currently doing the right thing. That means that, on average, when someone
requests product resources or proposes a new feature, I have to say no.</p>

<p>I like to be helpful, and so I was terrible at saying no at first. I wanted to help anyone and everyone who came to
me because, like when I was an engineer, I wanted solve everyone's problems. But as I focused more and more on user
needs, it became clear what we should be working on to have the best impact on our users. That gave me the
conviction I needed to start saying no.</p>

<p>That still didn't make it easier to <em>say</em> no. Prioritization decisions can have a big impact on other teams, and
it's hard to see your coworkers feel disappointed when something they want won't be prioritized. Learning how to
say no kindly and empathetically is an art form. But in general, it's best done by clearly communicating priorities
and correctly setting expectations in the first place so that people don't come with requests that won't get
fulfilled. Doing that involves educating your coworkers on how the product prioritization process works,
socializing your product roadmap and spending lots of time to answer questions. It also may involve looping
stakeholders into the prioritization process so that their voices are clearly heard and they feel ownership over
the roadmap. It's much easier to get things done when everyone is in alignment from the beginning.</p>

<a name="Coming.back.to.engineering"></a>
<h1>Coming back to engineering</h1>

<p>After the first six months of working as a product manager I felt like I had gained my "product legs." I had
launched some successful features, had weathered major organizational change and had a clear idea of what our users
needed and what the future ought to look like. Over the next year I continued to hone my skills and expand my scope
as a product manager. Overall, things were going well.</p>

<p>I never stopped coding, though. I did small projects here and there, both inside and outside of work, but I never
really had the time to do anything big. After a year of being out of engineering I started to get an itch to build
and do technical work. I even had a few dreams where I was coding! I have dreams about all sorts of weird things
and don't dwell on them, but something about my surreal dream edition of Visual Studio Code stuck with me.</p>

<p>I reflected on this more and looked through my personal journal to remember my prior experiences as an engineer,
when I've felt happy and why I wanted to transition into product management. One thing I realized is that, as an
engineer, I didn't always feel empowered. I felt like my role was just to code. But having worked as a product
manager, I knew that it didn't have to be that way. I worked with engineers who had solid product skillsets and saw
how empowering and useful it could be. Being actively involved in coding and defining the right user experience
felt exciting to me.</p>

<p>I also reflected on what kind of work I wanted to have and how I wanted to spend my time. In general, my favorite
days at work have been when I do a blend of people / business work and creative technical work. I enjoyed the
strategic and people-focused work of product management but I missed making things and technical problem solving.
While I did get to exercise technical thinking as a product manager it was rarely a good use of my time to go deep.
I realized I could achive that balance better as an empowered engineer rather than as a product manager.</p>

<p>After a lot of thought, I decided that my longer term career direction made more sense as an engineering leader
rather than as a product leader. Fortunately, Artsy's leadership agreed to let me transition back into engineering,
and at the beginning of June I was re-minted as a software engineer.</p>

<a name="Onboarding.the.second.time"></a>
<h2>Onboarding the second time</h2>

<p>At this point, I'm six weeks back into engineering and my experience feels very different than before. I've spent
most of my time ramping up and onboarding for the second time. Relearning our stack has been both a humbling and
rewarding experience. I've forgotten a lot of the details of the frameworks we use, but this time instead of racing
to get through tickets I've decided to really slow down and take the time to read the docs and do tutorials to make
sure I fully understand what's going on. While it comes at the expense of speed in the short-term, it'll make me a
stronger engineer down the road, and I know that tradeoff is worth it. I also can't speak highly enough of my
fellow engineers, who have been incredibly supportive while I learn.</p>

<a name="Provide.value..not.code"></a>
<h2>Provide value, not code</h2>

<p>I've also found my perspective is very different than before. While previously I would have seen my role as writing
great code, now I see my role as leveraging technology to provide value to users. What's the difference? In the
former, I'm doing a <em>task</em> while in the latter I'm driving <em>outcomes</em>. It feels much more empowering as a mental
model for what I should do as an engineer. It's also helped me shed any hint of perfectionism I had before since
writing "perfect" code or building the "perfect" system usually isn't relevant to providing value to our users.</p>

<a name="Developer.experience.is.a.product"></a>
<h2>Developer experience is a product</h2>

<p>Working as a product manager really taught me the value of engineering, which is frequently the bottleneck in
delivering value to your users. Creating the right strategy and vision for a product is critical work, but none of
that work matters if you can't quickly get it to market. The faster you can move the more quickly you can create
the ideal product your users want, which in turn dictates how successful your product will be. Gains in engineering
efficiency snowball into massive benefits for users over time.</p>

<p>That's led me to start seeing our developer experience as part of our product. It's much more than just our
toolchain -- it's the end-to-end cycle of working with a designer and product manager to understand product
requirements to building the feature to shipping it and monitoring in production. What does the ideal process look
like? Where are our bottlenecks? What investments will result in the best outcome for our users? These are
questions I'm asking myself as I ramp up, and I'm excited to dig into this more.</p>

<a name="Should.you.be.a.product.manager."></a>
<h1>Should you be a product manager?</h1>

<p>If you're an engineer wondering whether to make the jump to product management, my advice is to try it out. Product
management and engineering are complementary skillsets that build off of each other. Knowing how to do one role
absolutely helps with the other. You may find that you love being a product manager and continue on that track, or
you may discover instead that you love being an engineer empowered with a product skillset. In either case, it'll
turn out great.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Team Working Agreements]]></title>
    <link href="http://artsy.github.io/blog/2020/04/01/team-working-agreements/"/>
    <updated>2020-04-01T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2020/04/01/team-working-agreements</id>
    <content type="html"><![CDATA[<p>Good team culture strives for cohesion. Once organizations get large enough, a tension emerges between the culture
of individual teams and the culture of the larger organization. How do you achieve team cohesion across small teams
<em>and</em> the larger organizations they comprise?</p>

<p>The culture at Artsy is driven by every team member, not mandated or handed down from above. This adds another
level of tension, between individuals and their smaller teams. Team working agreements embrace that tension to
provide a framework for converting tension into healthy culture.</p>

<!-- more -->


<p>Artsy Engineering is part of a larger organization we call PDDE (Product, Design, Data, and Engineering). PDDE is
divided into several product teams, and each team contains at least one representative from product, design, data,
and engineering. Each PDDE team delivers product solutions targeted to a specific product need.</p>

<p>Until recently, those teams could expect a significant change in team members at the start of every quarter, as we
encouraged engineers to explore other teams. The purpose of this practice was to spread knowledge throughout the
organization, and give folks the opportunity to keep themselves aligned with projects they found most interesting.</p>

<p>The downside of this practice was that it made teams feel short-lived, impermanent, and unstable. Some teams were
hit harder than others - they'd see their team completely turn over every quarter. This was felt most strongly by
our product managers who would take the time to learn the skills and strengths of each engineer on their team over
the course of a quarter, just to have to start the process all over again, making it difficult to plan projects or
set goals for the following quarter.</p>

<p>To address these challenges, PDDE decided to set the expectation that engineers would stay on the same team each
quarter, with the option to request a team change, when necessary, to fill a skill, capacity, or growth need
elsewhere. This effectively ended the practice of shuffling teams every quarter. It was too much change, too often.</p>

<p>As a result, our teams feel more stable and long-lived. We're able to build deeper team identity. We've found one
tool particularly helpful in finding and building team identity: team working agreements.</p>

<a name="How.did.team.working.agreements.come.about.at.Artsy."></a>
<h2>How did team working agreements come about at Artsy?</h2>

<p>The current breakdown of our PDDE organization is relatively new; it's also an on-going process. We are still
feeling out how these teams will/should work together. One of the core beliefs at Artsy is that when you are a part
of something - a process, a team, a culture - you are empowered to make impactful changes to it.</p>

<p><aside class="dialogue">
  <div class="answer">
    <img src="/images/dialogue/adam.jpg">
    <p class="intro">Adam Iskounen says...</p>
    <p>
      Team cohesion and unity was a common theme that kept surfacing during the retrospective meeting that led to
      PDDE ending the quarterly shuffling of teams. During my onboarding, I noticed in retros that teams were
      strong on "what went well" and light on "what could be improved." We'd have 1 or 2 "didn't go well" tickets,
      but they were usually something light-hearted/benign like "team lunch was cancelled". One team in particular
      seemed like they were dancing around each other a bit, and important things like "not getting stuff done"
      wasn't being brought up.
    </p>
    <p>I remembered that team working agreements were a tool used by
      a scrum master at my previous job to help a particular team that was struggling to gel, and brought it up
      without really knowing what was involved in the process. Fortunately my product manager - who was eager to
      form a team where each member felt empowered and excited to take ownership of our work - encouraged me to
      research and share the process for coming up with a team working agreement. At first I was nervous that some
      team members, especially those who I perceived to be more interested in technical challenges than on team-building,
      would not be interested in this and find that it was a waste of time. I was pleasantly surprised that not only did
      everyone on the team participate, but that those team members ended up being some of the more enthusiastic
      proponents for following-up on the team working agreement after our initial brainstorm.
    </p>
  </div>
</aside></p>

<p>Since being pioneered by Adam's team, team working agreements have spread to most of our engineering teams. They've
been a learning opportunity for all of us, and a chance for our team members to share experiences and practices
with each other.</p>

<a name="What.s.a.team.working.agreement."></a>
<h2>What's a team working agreement?</h2>

<p>A team working agreement is a written set of guidelines for an engineering team. It enumerates the habits and
practices that the team requires to be productive and successful. The agreement is a living document, and every
member of the team has a part in shaping it.</p>

<p><a href="https://en.wikipedia.org/wiki/Tuckman%27s_stages_of_group_development">According to Bruce Tuckman, a team moves through four phases of development: forming, storming, norming, and performing</a>.
Team working agreements can help a team move more quickly through the stages. A team in the "forming" stage will
quickly uncover areas of disagreement and move to "storming" when they attempt to align on a working agreement. A
"storming" team might move to "norming" more quickly when their points of friction are arbitrated in a working
agreement.</p>

<p>Examples of habits or practices on a team working agreement might include:</p>

<ul>
<li>Any change to the sprint backlog requires product manager approval.</li>
<li>Everyone owns the backlog and should add tickets for untracked work.</li>
<li>Update the backlog before each day’s standup.</li>
</ul>


<p>We've been using a fairly consistent process to develop team working agreements at Artsy.</p>

<a name="Step.1:.Educate.the.team.about.team.working.agreements"></a>
<h3>Step 1: Educate the team about team working agreements</h3>

<p>We want every team member to recognize the importance of creating an agreement.</p>

<p>Each team reviews
<a href="https://github.com/artsy/README/blob/master/playbooks/agile/team-working-agreement.md">our docs on the process of creating a working agreement</a>
before creating one. They might also review an existing working agreement.</p>

<a name="Step.2:.Conduct.a.brainstorming.meeting"></a>
<h3>Step 2: Conduct a brainstorming meeting</h3>

<p>The team meets for an hour to brainstorm ideas that promote success from each individual or the team as a whole.
Some of our teams have met fully in-person and used physical sticky notes for brainstorming; many have used an
online tool like <a href="https://miro.com/">Miro</a> to include remote members.</p>

<p>It's vital that <em>all</em> members of the team attend the brainstorm. For us, that includes engineers and product
managers, but also designers and data analysts. This is a discussion of how the entire team works together -
everyone's voice should be heard.</p>

<p>A sample brainstorm agenda is
<a href="https://github.com/artsy/README/blob/master/playbooks/agile/team-working-agreement.md#sample-meeting-agenda">shared in our docs</a>.
The output of the brainstorm is a set of ideas that everyone has contributed to.</p>

<a name="Step.3:.Distill.brainstorming.ideas.into.discrete..digestible.habits"></a>
<h3>Step 3: Distill brainstorming ideas into discrete, digestible habits</h3>

<p>The ideas from the brainstorming process can be sorted into themes. Within themes, we work to condense ideas into
habits and practices that are agreeable to the entire team. We have found success in keeping the language for these
habits small, discrete, and slogan-like.</p>

<p>The distillation step might take several round-trips of gathering feedback and wordsmith-ing.</p>

<a name="Step.4:.Commit.the.most.important.habits.to.a..Team.Working.Agreement..document"></a>
<h3>Step 4: Commit the most important habits to a "Team Working Agreement" document</h3>

<p>The team votes on which habits should be included in the agreement and a document is circulated.</p>

<p>It's not done, though. Remember: it's a living document.</p>

<a name="Step.5:.Revisit.the.working.agreement"></a>
<h3>Step 5: Revisit the working agreement</h3>

<p>As a team, decide how often the agreement should be revisited, and what "revisiting the agreement" means. When
should we amend it? When should we do another brainstorm? It probably doesn't make sense to scrap the old agreement
when one new team member joins, but how much change on a team would inspire us to recreate our agreement?</p>

<a name="Why.establish.a.team.working.agreement."></a>
<h2>Why establish a team working agreement?</h2>

<a name="The.brainstorm.itself.is.incredibly.valuable."></a>
<h3>The brainstorm itself is incredibly valuable.</h3>

<p>Dedicated time to talk about values, habits, and processes is incredibly helpful to a team, yet rarely scheduled.
The brainstorm for a team working agreement can fill this void.</p>

<p>During the team agreement brainstorm the team looks at <em>how</em> they work, instead of looking at <em>what</em> work they're
doing. It's similar to what you might get out of a retro but at a higher level. It offers time to discuss "soft"
skills that you don't often discuss, in a context that you don't usually discuss them - with other individual
contributors, and with your closest collaborators.</p>

<p><aside class="dialogue">
  <div class="answer">
    <img src="/images/dialogue/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>
      When joining a new team, there's often a period of "feeling it out" - where I'm afraid to verbalize an
      opinion because I'm not sure how the team feels about it. The team working agreement process has definitely
      helped lessen this feeling.
    </p>
    <p>
      There's a <a href="https://www.youtube.com/watch?v=FxTXf6qyaGk">great talk by Katherine Wu named "Ask vs Guess Culture"</a>.
      "Guess" culture is when you try to guess what a person wants or is thinking; "Ask" culture is when you flat out
      ask them. Team agreement brainstorms are a really neat way to <em>ask</em> your team how they want to work, instead of
      spending many sprints trying to guess.
    </p>
    <p>
      So far, I have seen the most value out of <em>the actual brainstorm</em> than the working agreement itself. My teams
      have learned so much about each others' habits and values.
    </p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/adam.jpg">
    <p class="intro">Adam Iskounen says...</p>
    <p>
      The process has helped confirm that the team shared interest in team dynamics &amp; the process of collaboration
      across the team. As a new member it's nice to know that information.
    </p>
    <p>
      It's been great to see teammates bring up the team agreement in different contexts. It wasn't just a one-hour
      brainstorm, it's something our team is living. Hearing our slogan-like habits recited during team meetings
      long after the brainstorm is a testament to the value of the agreement.
    </p>
  </div>
</aside></p>

<a name="It.can.lead.to.better.engagement.in.sprint.activities."></a>
<h3>It can lead to better engagement in sprint activities.</h3>

<p>One of our teams established in their working agreement that sprint meetings were valuable. This might seem too
obvious to put in a team working agreement, but it portrays clearly to everyone that they should attend all sprint
meetings and be actively engaged.</p>

<p>The same team got a lot out of making slogans for the items in their working agreement. Phrases like "Pair by
default" and "Incremental improvement over consistency" were introduced during the brainstorm. They've since become
mantras for the team to refer to during sprint work and ceremonies. Team values and habits solidify through this
kind of repetition.</p>

<a name="The.team.working.agreement.provides.on-boarding.documentation."></a>
<h3>The team working agreement provides on-boarding documentation.</h3>

<p>When new members join a team, it takes time for them to adjust. A team working agreement provides an up-to-date
reference on the team's preferred methods of working. The working agreement isn't set in stone, and as the team
changes it's important to update it... but having it in writing helps new members acclimate quickly.</p>

<a name="What.are.some.challenges.with.team.working.agreements."></a>
<h2>What are some challenges with team working agreements?</h2>

<a name="Uncertainty.about.what.the.team.agreement.should.include."></a>
<h3>Uncertainty about what the team agreement should include.</h3>

<p>Some teams have struggled to identify what belongs on a team working agreement. Should it describe our team values?
Habits? Procedures? Rules? Favorite afternoon snacks?</p>

<p>It likely varies from team to team what you want here. Some teams might require guidance around working with JIRA;
others might be more focused on taking ownership of problems. These differences are likely a reflection of the
problems the team is currently facing or has recently faced.</p>

<p>It's definitely important that you identify what you're looking for up front, and make it clear heading into the
brainstorm. Suggest categories, sample habits, &amp; questions to ask heading into the brainstorm, and keep them
visible during the meeting.</p>

<p>Take notice of known problem areas: are they addressed or avoided in the agreement? It is easy for a team to avoid
confrontation at their own expense.</p>

<p>Also be cautious about introducing individual bias.</p>

<p><aside class="dialogue">
  <div class="answer">
    <img src="/images/dialogue/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>
      During my first team agreement brainstorm, I felt like we spent a lot of time talking about details
      related to specific incidents. On my next team, I made a strong effort to constrain the suggestions
      to avoid this. To me, team values were really important for this new team - and I did such a good
      job of encouraging those types of suggestions that it's pretty much all we ended up with.
    </p>
    <p>
      As a result, our initial working agreement lacked important procedural and tactical definition. We've
      been adding things like JIRA hygiene and responsibilities of project leaders as they come up, but I would
      not push a working agreement brainstorm so strongly in one direction again.
    </p>
  </div>
</aside></p>

<p>Remember that the working agreement is a living document. If the team learns that it missed something in the
brainstorm, don't hesitate to update the agreement. Team retros are a great time to make updates.</p>

<a name="Working.agreements.are.hard.to.define.for.teams.without.a.well-established.identity."></a>
<h3>Working agreements are hard to define for teams without a well-established identity.</h3>

<p>For a team that has a strong and cohesive identity, the agreement is likely to affirm many things the team is
already believing and doing. For a less cohesive team the agreement is harder to pin down. Many opinions will
surface, and they may be in conflict with each other.</p>

<p>While this is indeed challenging, it is also important to note that teams that lack identity benefit <em>greatly</em> from
the team agreement brainstorm. Provided there is
<a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#psychological-safety">psychological safety</a>,
this is a really great time for the team to learn about what matters to each other, and move toward establishing an
identity.</p>

<a name="Facilitating.the.brainstorm.can.be.difficult.on.a.distributed.team."></a>
<h3>Facilitating the brainstorm can be difficult on a distributed team.</h3>

<p>Some of our teams were able to brainstorm with everyone on-site. They were able to rely on post-it notes and
in-person conversations, and read each other's non-verbal communication. Other teams have a mix of on-site and
remote members, and used tools like <a href="http://miro.com/">Miro</a> to facilitate. This <em>can</em> present a challenge...but if
you're already a distributed team, they are likely the same types of challenges you've worked to overcome for <em>all</em>
meetings.</p>

<p>The differences are worth noting, though. The importance of reading each other's non-verbal communication is
magnified when you're having conversations about identity. It's quicker to organize and re-organize real-life
post-its than virtual post-its in an online tool. These are all opportunities to get better at being a distributed
team.</p>

<a name="It.takes.effort.to.make.sure.one.person.isn.t.introducing.their.bias.into.the.working.agreement."></a>
<h3>It takes effort to make sure one person isn't introducing their bias into the working agreement.</h3>

<p>It's important for the team agreement brainstorm to provide an environment in which every team member is heard.
Even if your team is successful at this, there are still opportunities for individual bias to affect the working
agreement.</p>

<p>We saw earlier how bias can appear when the examples provided for the brainstorm are too narrowly scoped.</p>

<p>We recognized another bias vector in the distillation of the brainstorm into an actual agreement. If this is
handled by a single person, it's very possible for them to produce a working agreement that misrepresents <em>the
rest</em> of the team. To counter this, we've had multiple team members pair on the distillation process. Feedback on
the initial draft of the agreement is also important to ensure it does not misrepresent the team's ideas.</p>

<p>The problem of introducing bias to the distillation process is most challenging with topics that are disputed
across the team. One of our teams spent a lot of time talking about meetings in their brainstorm, but struggled to
come to consensus on them. No single person, or even a pair, could add a disputed topic like this to the working
agreement without introducing their personal bias. In this specific case, the team chose to leave meetings off the
working agreement until they could reach consensus. Topics that are disputed across the team are important to talk
about at <em>some</em> point, but the brainstorm is probably not the time.</p>

<a name="Team.health.is.easy.to.postpone.when.you.have.important.product.work.to.do."></a>
<h3>Team health is easy to postpone when you have important product work to do.</h3>

<p>One of our teams put the act of distilling the brainstorm notes into an agreement on one person. That person became
busier than expected, didn't have time to write the agreement, and the team's agreement stalled.</p>

<p>Just as personal self-care gets put on the back burner during stressful times, creating a working agreement is easy
to bump down the backlog during intense periods of sprint work. The longer a team drags out the working agreement
process, the more context is lost from the original brainstorm. We recommend not letting your working agreement
linger.</p>

<p>It's also important to revisit the working agreement often. It is a living document, not one-and-done. Review the
agreement as a team occasionally; update the agreement as your team learns how to collaborate better; cultivate the
agreement. If an agreement gets stale, it will become inaccurate, meaningless, and unused.</p>

<a name="What.does.it.even.mean.to.have.a.team.working.agreement."></a>
<h3>What does it even mean to have a team working agreement?</h3>

<p>A team working agreement is a neat artifact. The brainstorm process has great value. But there is non-obvious work
involved in turning a team working agreement into the team culture. We have many questions that we aren't sure how
to answer:</p>

<ul>
<li>How do you enforce the agreement?</li>
<li><em>Should</em> you enforce the agreement?</li>
<li>How do you get the entire team to embrace it?</li>
<li>What happens when the agreement is violated or disrespected?</li>
</ul>


<p>If you're using working agreements on your team and you've got answers for us, or you want to start using them and
have more questions, we'd love to hear from you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is this you? No, really, is this you?]]></title>
    <link href="http://artsy.github.io/blog/2020/01/06/is-this-you/"/>
    <updated>2020-01-06T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2020/01/06/is-this-you</id>
    <content type="html"><![CDATA[<p>You are a software engineer.</p>

<p>You consider yourself an introvert, and you really appreciate "engineering time", where you prefer to work for
extended uninterrupted periods because interruptions wreck you. You are used to being misunderstood. Ever since you
can remember the people around you have been kind of baffling: they constantly fail to notice stuff that's really
obvious and important to you, and then they have the audacity to get frustrated with you for not understanding
<em>them</em>.</p>

<p>But whatever, you can deal with this, right? This is just how life goes, right? Everyone's like this, right?</p>

<p>Right?</p>

<!-- more -->


<p>It's really been like this as long as you can remember. Maybe even as early as kindergarten, when you distinctly
remember feeling "Wow, I guess all these kids must already know each other?" because how else would they know how
to just start playing together? You might have gotten really, really good at languages -- or you might have
eschewed the humanities entirely and focused on things like Math and Science. Regardless, you were in it for the
<em>systems</em> -- grammar just <em>makes sense</em> to you, in the same way software engineering just <em>makes sense</em> to you now.
Math, you finally understood, was just a specialized language for referring to the relations between things --
sure, okay!</p>

<p>Socially, things were always a little weird for you. Other people never <em>quite</em> behaved in ways that made sense to
you, and especially when younger you probably socialized by getting 'adopted' by some other kid who seemed to know
what was going on. Whatever you studied you poured yourself into deeply as long as it held your interest -- your
mind expanded into the space your lessons created and eagerly walked hidden pathways that your classmates didn't
see. You asked the questions in class that surprised the teacher and annoyed your peers, and you probably got damn
good grades.</p>

<p>You may have been bullied.</p>

<p>You likely went to college and focused on something that interested you -- perhaps you doubled down on language, or
maybe you went into engineering or music or math. It was a revelation, because maybe for the first time in your
life you were surrounded by a self-selecting group of peers, some of whom shared your passion for analysis and deep
thinking. You didn't have to go to great lengths to establish a shared context, for instance. You could speak words
that were meaningful to you and someone else could understand and offer a meaningful response, and this made you
feel uncomfortable at first but you really loved it. Your experience of college was maybe a bit different than you
expected - certainly nothing like the movies you watched as a kid. You got really into a weird hobby, maybe, and
didn't end up going to too many parties.</p>

<p>Relationships and intimacy have always been a bit fraught for you. You frequently find yourself trying to figure
out what you're supposed to be feeling, and you work hard to show your partner the person you want to be. Maybe
when you first moved in with someone you had a bit of a freakout that has made you nervous to think about ever
since, or maybe meeting a significant other's family has been so anxiety-inducing as to prove impossible. Maybe you
have a string of failed relationships behind you, each of them starting out so promisingly and then imploding
catastrophically and confusingly once the initial honeymoon phase was over and it was time to really get to know,
get to grow with another person. You don't know how to do that, and every time you try you seem to make someone
upset.</p>

<p>You're a software engineer at least partly because computers are much easier to communicate with than people. When
a computer doesn't understand you it's because you've done something wrong. When a computer says something
incorrect it's also because you've done something wrong. You can step through and rigorously debug the problem,
identifying and isolating the mistake. The more you played around with tech the more you liked it - and when you
discovered programming it blew your mind, because you <em>intuitively</em> understood the relational nature of computation
and found yourself suddenly gifted with superpowers.</p>

<p>When you entered the working world you were REALLY confused, though. You were able to complete a week's worth of
assignments in an afternoon. It was really obvious to you who was working intelligently and who was not, and you
had to learn, perhaps painfully, that sharing that kind of feedback isn't always constructive. Maybe one day you
got some criticism about something you did and it really hurt in ways you didn't expect. Maybe you found yourself
reacting defensively, and the next thing you know you're in a meeting with HR over what to you was clearly all a
big misunderstanding, but nobody is smiling. Or maybe instead someone recognized that you were having a tough time,
and stepped in to defuse the situation.</p>

<p>Regardless, your agency was compromised. You found yourself resenting the arbitrary and unwritten rules of the
professional world: you have to be at your desk and looking busy even when you're just thinking; let people say
things that are not true if correcting them publicly will embarrass someone; people will ignore your advice and
then something will break because of it and it's very important not to get too upset.</p>

<p>You're used to modeling the world in a specific way, but school didn't actually prepare you in any way for the
complex web of social dynamics that, just like in kindergarten, everyone else seems to grok. It's really
frustrating, maybe you've been fired once or twice, maybe you've left a few jobs out of embarrassment. You
eventually figured it out -- or maybe you didn't! The thing is, programming has never been the hard part of work,
for you. The people have been the much more interesting and challenging domain to master.</p>

<p>Today, you're an engineer who really deeply understands and enjoys your stack. You have workflows that you can do
in your sleep, you know intuitively what the current state of your system is and you have a powerful intuition for
downstream problems. Maybe you've figured out how to play the social game, in which case you're probably gregarious
and supportive and kind to your coworkers. Maybe you haven't, in which case you're super productive but don't
attend a lot of office functions. Either way is fine as long as you've found a place where you feel comfortable!</p>

<p>At the same time, you've had a sense for years that something isn't quite... right. You've probably learned to
ignore it. Sure things get super stressful sometimes. Sure you find yourself really unreasonably tired, especially
after meeting-heavy days. Sure when you get downtime sometimes all you can do is just sit there doing nothing --
maybe you feel bad about that? Maybe you use an abnormally high number of sick days purely for mental health
reasons. Maybe you've got a substance abuse issue. You're probably struggling with codependency, anxiety and/or
depression. You think of yourself as just "a depressed person", but try not to let it define you. You feel
constantly on the edge of burnout, but no matter how many vacations you take it doesn't seem to get any better.</p>

<p>Maybe you are sensitive to certain kinds of sensory stimuli - like, you can't wear synthetic fabric because it just
feels gross. Maybe you can't eat peaches because the peach fuzz on the roof of your mouth is unbearable. Maybe you
can't go into a well-lit room without sunglasses, maybe every sound you hear comes in at the same volume. Maybe a
bunch of these kinds of things or more bother you, and maybe you've forgotten because you've just pushed through
them your whole life. Maybe you've accepted that you're just kind of weird and different.</p>

<p>But maybe -- and this may be the best news you've ever received -- you're autistic.</p>

<p>Many (if not most) autistic people would tell you similar stories about their personal histories, especially those
who have gone undiagnosed into adulthood. If these descriptions resonate with you -- maybe not exactly, but maybe
you can see the shape I'm trying to paint -- then it's worth considering the possibility that you may be
<strong>neurodivergent</strong>.</p>

<p>Autism is one form of neurodiversity, and what I'm describing above is a very autistic experience - but there's a
ton of overlap with ADHD, Dyslexia and other neurodivergent conditions. We've learned so much about neurodiversity
in the past ten years, and even if you consider yourself fairly well-informed about autism it's worth updating your
understanding.</p>

<p>Your first step, quite reasonably, might be to go take a look at the
<a href="https://www.cdc.gov/ncbddd/autism/hcp-dsm.html">official diagnostic criteria</a> for autism. But autistic or not, if
you do that you will in all likelihood not see yourself reflected -- those criteria are purely behavioral, while
the experience of being autistic is purely subjective. Non-autistic (or "allistic") experts on autism document
observable behavior but don't actually understand what they're seeing. I tried to
<a href="https://theaspergian.com/2019/04/17/humanizing-the-dsm-diagnosis-for-autism/">reframe those criteria</a> in a way
that makes them feel human and relatable rather than inhuman and other.</p>

<p>I'm writing this blog post because my own self-diagnosis at age 34 and formal diagnosis this past fall at age 36
changed my life, and I <em>know for a fact</em> that there going to be some autistic people reading this who don't know
that they're autistic.</p>

<p>If you're interested in learning more, I highly recommend perusing
<a href="https://reddit.com/r/autismTranslated">AutismTranslated</a>, a subreddit to make autistic traits more recognizable
and relatable to those of us who subjectively experience them. I'm personally most active
<a href="https://twitter.com/mykola">on twitter</a> these days and you can always find me there, along with hundreds of other
folks using the <a href="https://twitter.com/search?q=%23actuallyAutistic">#actuallyAutistic</a>,
<a href="https://twitter.com/search?q=%23allAutistics">#allAutistics</a> and
<a href="https://twitter.com/search?q=%23askingAutistics">#askingAutistics</a> hashtags. Autism is a condition particularly
vulnerable to intersectional dynamics, which means that resources like
<a href="https://twitter.com/search?q=%23autisticWhileBlack">#autisticWhileBlack</a> and
<a href="https://reddit.com/r/aspergirls">/r/aspergirls</a> are crucial to folks in those demographics.</p>

<p>Finally, as preparation for this blog post I asked diagnosed neurodivergent tech workers on twitter
<a href="https://twitter.com/mykola/status/1205927773644214273">to volunteer if they're willing to answer questions</a>, and
as of this writing over a hundred people have answered. So if you want to know more about what this is like --
whether you want to better understand yourself or you have other people in your life you want to learn how to
better support -- please check out that thread and the huge number of responses, and don't be afraid to reach out
to people!</p>

<p>If you're autistic and undiagnosed you're living life on hard mode and you don't even know it. Learning who you
are, learning what your authentic needs are and learning how to heal from years of maladaptive coping mechanisms
can and will change your life in a million ways. You can move from barely getting by to thriving as your most
authentic self.</p>

<p>I see you and I believe in you, and there are a lot of us out here ready to help. &lt;3</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Learning Group]]></title>
    <link href="http://artsy.github.io/blog/2019/12/03/ios-learning-group/"/>
    <updated>2019-12-03T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2019/12/03/ios-learning-group</id>
    <content type="html"><![CDATA[<p>Regular readers of our blog might be familiar with <a href="https://www.cultureamp.com">Culture Amp</a>, a tool Artsy uses to
collect anonymous feedback and take action on cultural issues (we most recently discussed the tool
<a href="https://artsy.github.io/blog/2019/04/19/having-a-coffee-with-every-engineer/">in this blog post</a>). At a
company-wide level, Culture Amp has helped guide everything from Artsy's evolving culture, to our physical work
spaces, to our support for remote work. At an engineering-team level, we've also been using Culture Amp to guide
our choices in technology, documentation, and training.</p>

<p>In this blog post I'll be detailing a recent learning course we ran to share knowledge about how Artsy builds iOS
software for our entire engineering team.</p>

<!-- more -->


<p>Let's start at the beginning. Earlier this year, Artsy Engineering ran a survey through Culture Amp to get answers
to the following questions:</p>

<ol>
<li>What is our team's opinion on our current technology choices?</li>
<li>What is our team's familiarity with or preparedness for our current technology?</li>
<li>Where are the areas of strength and opportunities for both learning and teaching?</li>
</ol>


<p>There are a lot of things we learned from this survey, and among them was a desire for engineers to better
understand how to build iOS software at Artsy. With a nudge (and support!) from our <em>Peer Learning Working Group</em>,
I set out to create a learning plan. I wasn't starting from scratch – we already ran a few learning groups on
topics ranging from Scala fundamentals to React Hooks. We used the lessons learned from <em>those</em> experiences to
define and deliver a learning plan.</p>

<p>I started by booking five sessions, spread out by a week. I picked a time that was a good fit for as many engineers
as possible, and I scheduled them a month ahead to give people a chance to move their schedules around. Scheduling
them up front was important, to give learners a sense of what to expect; previous learning groups had suffered from
inconsistent schedules, which led to intermittent attendance. I also asked each Tech Lead to make sure at least one
engineer from their team attended.</p>

<p>Next was the actual curriculum. In the spirit of "proudly discovered elsewhere", we actually looked at using
existing learning resources that someone else had already developed. However, since
<a href="https://artsy.github.io/series/react-native-at-artsy/">our iOS stack is a bit unique</a> and I was keen to keep
honing my own skills as a technical educator, we decided to make our own. With the help of our Peer Learning
Working Group, we set learning objectives for the five sessions. Here was the original plan:</p>

<ul>
<li><strong>Week 1</strong>: This week, we will cover how iOS software is developed, QA'd, and deployed. By the end of this
session, all participants should be able to pull the latest code from <a href="https://github.com/artsy/eigen">Eigen</a>
(our native iOS repo) and <a href="https://github.com/artsy/emission">Emission</a> (our React Native repo), see their work
in an iOS simulator, and link the two projects together.</li>
<li><strong>Week 2</strong>: This week, we will cover what makes React Native distinct from React on the web, as well as how Artsy
leverages shared infrastructure (such as our design-system, <a href="https://github.com/artsy/palette">Palette</a>) to make
it easier for engineers to work in either one.</li>
<li><strong>Week 3</strong>: This week, we will cover how to create a new view controller. View controllers are the main unit of
composition for native iOS apps, and we integrate our "Scene" React components <em>as</em> view controllers. This
includes routing between view controller, from both native Objective-C and React Native code.</li>
<li><strong>Week 4</strong>: This week, we will create our own React component to fit within the new view controller from Week 3.
This will be a Relay container, fetching data from our GraphQL API,
<a href="https://github.com/artsy/metaphysics">Metaphysics</a>. We will cover how to fetch data, how to <em>re</em>-fetch data, as
well as how Eigen and Emission integrate together to provide client-side API response caches (both Relay and
others).</li>
<li><strong>Week 5</strong>: This is the final week. Participants are asked to bring an iOS bug from their product team's backlog
that they would like to fix. Pairing is encouraged.</li>
</ul>


<p>Things mostly went to plan. I made sure to provide the learning resources at least a day or two ahead of each
session; this let me respond to feedback from the previous week, and also gave learners a chance to review
materials ahead of time.</p>

<p>Every session was recorded for anyone who missed it. We had a shared Slack channel set up for questions, so
engineers could help each other. I also made sure to provide weekly office hours: this was space for people who
missed sessions to catch up, or to just dig into concepts in more detail. I'll return to the topic of office hours
later in this post.</p>

<p>Around the time of the learning group, I was reading
<em><a href="https://www.amazon.com/Make-Stick-Science-Successful-Learning/dp/0674729013/ref=sr_1_1?keywords=making+it+stick&amp;qid=1575314498&amp;sr=8-1">Make It Stick: The Science of Successful Learning</a></em>.
The book is written for people who want to improve their own learning skills, but it was <em>very</em> helpful to read as
I was developing and delivering this curriculum. Here are a few lessons that I learned from the book that were
helpful while teaching engineers at Artsy about how we build iOS software:</p>

<ul>
<li>If someone tries to do something themselves <em>before</em> being told how to do it, the attempt will strengthen their
understanding of the underlying concept. To put this into practice, I would often ask learners questions that I
didn't expect they could answer yet, and the resulting discussion was always worthwhile.</li>
<li>Interleaving different concepts together helps learners form connections between those concepts. This was
especially important, since a big motivator for using React Native at Artsy was to share skills between web and
iOS codebases. As an example of putting this into practice, I interleaved a discussion of
<a href="https://relay.dev">Relay</a> into our curriculum; I hoped to show learners both a new perspective of Relay, as well
as show them how familiar writing React Native code was to writing React web code.</li>
<li>Allowing for some forgetting to take place before reviewing concepts will
<a href="https://njcideas.wordpress.com/2017/09/22/the-cognitive-science-of-studying-massed-practice-vs-spaced-practice/">help strengthen learner's understanding</a>.
To put this into practice, I would return to topics from a few weeks ago to cement their understanding with
learners.</li>
</ul>


<p>I had to push through some discomfort as an educator, too. Each session ended with homework questions, which we
reviewed at the top of the next session. I would ask each question and then just sit there, in awkward silence,
while everyone looked around for someone to answer. Eventually, inevitably, someone would.</p>

<p>All of the learning materials
<a href="https://github.com/artsy/README/tree/master/resources/mobile/learning-group">are open source</a>. While the materials
are mostly specific to Artsy, they may be of help to others. And regardless, we want to adhere to our
<a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#open-source-by-default">Open Source by Default</a>
principle.</p>

<p>We learned quite a lot from delivering this curriculum – lessons we can apply to our next learning group:</p>

<ul>
<li>Learners appreciated the weekly schedule set upfront, affirming what we learned from previous learning groups.</li>
<li>Learners appreciated having access to the materials ahead of time.</li>
<li>Learners appreciated having the sessions recorded, to be reviewed later (or watched, in case they missed the
session).</li>
<li>Learners appreciated having office hours available; even though the office hours weren't well-attended, learners
appreciated having access to them if they needed to.</li>
<li>Learners even appreciated the awkward silences while I waited for an answer to my questions. (One survey
respondent described it as "like pulling teeth, but helpful.")</li>
<li>Learners are varied in how they want to learn. Some liked going through things together. Some thought we went too
slow. Still others thought we should expect learners to do more work ahead of class.</li>
</ul>


<p>This last point is worth expanding upon. While everyone learns differently, there is a distinction between what
<em>feels</em> effective and what <em>is</em> effective. I tried to structure the course so that it was accessible to as many
types of learners as possible: some like to review materials ahead of time, some like to have them on hand during
the session, etc. Some are in-person, others are remote, still others are reviewing the recording. I could write
another blog post about learning styles, but for now it suffices to say that I aimed for <em>inclusion</em> of as many
different learners as possible while also recognizing that I can't make everyone happy.</p>

<p>As I enter a new chapter of my own career, leading Artsy's new Mobile Experience team, it was helpful to return to
some fundamentals; to get familiar with technology choices that we made years ago
(<a href="https://ashfurrow.com/blog/swift-vs-react-native-feels/">choices which I originally resisted</a>); and to learn from
learners' perspectives as beginners. The future of iOS software at Artsy is very bright, and now every product team
is more prepared than ever to deliver user experiences that are of a quality worthy of art.</p>
]]></content>
  </entry>
  
</feed>
