<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: culture | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/culture/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2017-02-01T19:46:28+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Open Source FAQ for Engineers]]></title>
    <link href="http://artsy.github.io/blog/2017/01/04/OSS-FAQ/"/>
    <updated>2017-01-04T12:17:00+00:00</updated>
    <id>http://artsy.github.io/blog/2017/01/04/OSS-FAQ</id>
    <content type="html"><![CDATA[<p>We have a lot of Open Source code. For engineers without considerable experience in the open source realm, understanding some of the copyright issues around code ownership can be tricky. I've been working with our CTO <a href="http://artsy.github.io/author/db/">dB.</a>, and our senior counsel <a href="http://www.theartgorgeous.com/yayoi-shionoiri/">Yayoi Shionoiri</a> on creating an open-source FAQ for engineers.</p>

<a name="What.is.Open.Source."></a>
<h3>What is Open Source?</h3>

<p>Open Source code is code that can be freely examined, used, adapted, and shared by all through a license that sets forth these principles.  The only potential limitation that an Open Source license is likely to impose is that future copies of the code (whether in adapted or un-adapted form) be themselves licensed in a manner consistent with the original license.  At Artsy, we are committed to making our engineering work <a href="http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html">Open Source by default</a>.  A list of our Open Source projects can be <a href="http://artsy.github.io/open-source/">found here</a>.</p>

<!-- more -->


<a name="What.is.Open.Source....by.default...."></a>
<h3>What is Open Source “by default”?</h3>

<p>Open Source “by default” means that new projects are started or eventually become Open Source, unless keeping them proprietary represents a significant competitive advantage.</p>

<a name="What.are.the.advantages.to.Open.Source.code."></a>
<h3>What are the advantages to Open Source code?</h3>

<p>Keeping our engineering work Open Source by default allows us to be a thought leader,  attracts and retains the best talent, and also is a great way to produce high quality work -- in other words, it helps to drive and sustain our Quality Worthy of Art, Openness, and People are Paramount values.  However, not everything is or should be Open Source. There <a href="https://www.objc.io/issues/22-scale/artsy/">are many great reasons</a> to be open, but it’s not a catch all.</p>

<a name="How.does.Open.Source.interact.with.Copyright."></a>
<h3>How does Open Source interact with Copyright?</h3>

<p>Very generally speaking, copyright is the body of law that governs how Artsy upholds its ownership rights over code that an Artsy engineer creates as part of their duties as an Artsy employee, and Open Source describes the way in which Artsy shares this code with the rest of the world.  Put in another way, Artsy engineers develop code as "work for hire" to Artsy, and Artsy shares this code with specific usage and distribution terms through a license attached to it.</p>

<a name="What.s.Inbound.Open.Source.code.vs..Outbound.Open.Source.code."></a>
<h3>What's Inbound Open Source code vs. Outbound Open Source code?</h3>

<p>Inbound Open Source code refers to the use of third party code under an Open Source license for Artsy's products.  Outbound Open Source code refers to the publication of Artsy code.</p>

<p>When we publish Outbound Open Source code, as mentioned before, Artsy has a right to do so because we have the copyright to this code.  We give third parties the right to use the code usually through <a href="https://github.com/artsy/eigen/blob/master/LICENSE">this  type</a> of broad license (<a href="https://tldrlegal.com/license/mit-license">MIT</a>).  (For more on code licenses, see <a href="http://artsy.github.io/blog/2015/12/10/License-and-You/">Orta’s talk on code licenses</a>.</p>

<a name="What.is.the.credit.on.Artsy.s.Open.Source.code."></a>
<h3>What is the credit on Artsy's Open Source code?</h3>

<p>For Inbound Open Source code, we usually credit the work of external engineers by conforming to their license, and providing attribution inside each source base.  This tends to be generated automatically by project tools, and rarely needs specific attention.</p>

<p>For Outbound Open Source code, we usually credit the work of our Artsy engineers by using attribution changelogs, and by assigning an engineer as a point person for a project.</p>

<a name="How.can.I.use.Open.Source.code.at.Artsy."></a>
<h3>How can I use Open Source code at Artsy?</h3>

<p>When we use Inbound Open Source code, we should always check to ensure that there are no third parties who may have an exclusive right over this code before we include it in our own work.  We should also use standard tools for handling Open Source code to ensure that we comply with the licenses attached to such code.  We do not use code with viral licenses (for e.g., GPL License) or  <a href="https://opensource.org/licenses/">non-OSI approved licenses</a> (for e.g., WTFPL license).</p>

<a name="How.do.I.Open.Source.a.new.project.at.Artsy."></a>
<h3>How do I Open Source a new project at Artsy?</h3>

<p>When creating a new project at Artsy, you must include a license.  We use the <a href="https://opensource.org/licenses/MIT">canonical copy</a> of the MIT license with the copyright holder as shown below.  Ideally, you should ensure that it starts off with a README, continuous integration set up, linters, tests and documentation.</p>

<a name="How.can.I.Open.Source.an.existing.project.at.Artsy."></a>
<h3>How can I Open Source an existing project at Artsy?</h3>

<p>When Open Sourcing existing projects, it's best practice to announce it to the development (and related product teams) and ensure that there is ample time for discussion before moving it.  For example <a href="http://artsy.github.io/blog/2016/09/06/Milestone-on-OSS-by-Default/">see how we migrated the artsy.net</a> website.</p>

<a name="How.does.Artsy.think.about.Artsy.Projects.versus.Personal.Projects."></a>
<h3>How does Artsy think about Artsy Projects versus Personal Projects?</h3>

<p>Engineers have the ability to determine whether work they do is uniquely for Artsy during Artsy work hours (an "Artsy Project") or is a project created on their own time but can be applied and shared with Artsy (a "Personal Project").  If you have questions about whether a particular project should be an Artsy Project or a Personal Project, please discuss with your manager.</p>

<p>From an external consumer’s perspective, the end result is generally the same as the license by which these code is released should not change.</p>

<p>Examples are found below:</p>

<table>
<thead>
<tr>
<th>Artsy Project </th>
<th> Personal Project </th>
</tr>
</thead>
<tbody>
<tr>
<td><em>Copyright:</em> Art.sy, Inc., 2017 </td>
<td> <em>Copyright:</em> [Developer], Art.sy, Inc., 2017</td>
</tr>
<tr>
<td>Example: <a href="https://github.com/artsy/energy/blob/master/LICENSE#L1">Energy</a> </td>
<td> Example: <a href="https://github.com/orta/ORStackView/blob/master/LICENSE#L1">ORStackView</a></td>
</tr>
</tbody>
</table>


<hr />

<p>I'd like to personally thank <a href="http://gilyehuda.strikingly.com">Gil Yehuda</a> of Yahoo! for answering a lot of our questions, you really helped. For Artsy staff, you can get the living document at the <a href="https://sites.google.com/a/artsymail.com/intranet/team-pages/engineering">Engineering page on Artsy Atlas</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Interviews: Maxim Cramer]]></title>
    <link href="http://artsy.github.io/blog/2016/09/16/Dev-Interview-Maxim-Cramer/"/>
    <updated>2016-09-16T12:11:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/09/16/Dev-Interview-Maxim-Cramer</id>
    <content type="html"><![CDATA[<p>I'm happy to introduce the next in the <a href="http://artsy.github.io/series/dev-interviews/">Dev Interviews</a> series - <a href="http://www.mennenia.com/">Maxim Cramer</a>.</p>

<p>Maxim has been at Artsy for 6 month, working on our mobile app Eigen. Our interview covers how being a remote developer, advice for people at a HQ working with remotes, her work with React Native and what the future holds for the Artsy mobile team.</p>

<p>Jump <a href="https://www.youtube.com/watch?v=ftsBR_KqHcE">to YouTube</a> for the video, or click more for a inline video.</p>

<!-- more -->


<p></div></div><iframe width='100%' height='600' src='https://www.youtube.com/embed/ftsBR_KqHcE ' frameborder='0' allowfullscreen></iframe><div class='meta-container'><header>&nbsp;</header></div><div class='content-container'><div class='entry-content'></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Help! I'm becoming Post-Junior]]></title>
    <link href="http://artsy.github.io/blog/2016/09/10/Help!-I'm-becoming-Post-Junior/"/>
    <updated>2016-09-10T12:17:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/09/10/Help!-I'm-becoming-Post-Junior</id>
    <content type="html"><![CDATA[<p>I’ve lived in NYC for 2 years now. I’ve been around long enough that some of the people I helped when they started learning have begun to feel like they’re not “Juniors” anymore.</p>

<p>They have begun feeling confident in their code, their responsibilities at the company and wanting to improve both. It's a feeling that maybe, just maybe, <a href="https://ashfurrow.com/blog/normalizing-struggle/">you're not struggling to stay afloat anymore</a>.</p>

<p>This post aims to be technology-agnostic, and if you sit somewhere at 1.5 - 3 years of programming experience then you’ll probably get something out of it. On top of that,  I’ll give some pragmatic JS and iOS specific tips at the end.</p>

<!-- more -->


<p>This post is easy to start. At Artsy we have an <a href="/blog/2015/04/03/artsy-engineering-compensation-framework/">engineering ladder system</a> - which I’ll paraphrase below. It’s worth the full read though.</p>

<p>Key point:</p>

<blockquote><p>Performance evaluation at Artsy is composed of the what, <em>i.e. what you achieve that contributes to your team’s goals and ultimately Artsy goals</em>, and the how, <em>i.e. how you act and how those actions contribute to Artsy’s culture and values</em>.</p></blockquote>

<p>We measure your career stage by your <strong>impact</strong> at Artsy, this is initially on the products you’re working on, but eventually moves out to the culture and the business:</p>

<ul>
<li><strong>Engineer 1</strong> - Can ship a well defined product feature.</li>
<li><strong>Engineer 2</strong> - Can independently own a product feature and can handle the communication with others around it.</li>
<li><strong>Engineer 3</strong> - Can handle a suite of features, and broadly contribute within a domain. Can improve company culture.</li>
<li><strong>Engineer 4</strong> - Can improve and be a multiplier on other people’s work, can anticipate larger trends and affect culture to avoid or steer in that direction.</li>
<li><strong>Engineer 5</strong> - Defines technical culture, works on impacting all parts of our businesses and creates new opportunities for the company.</li>
</ul>


<p>What we’re talking about here is the transition from Engineer 1, to Engineer 2. Here’s our full unabridged description of an Engineer 2.</p>

<blockquote><p>▪   Consistently writes and delivers correct and clean quality code with guidance.</p>

<p>▪   Self-sufficient and makes steady progress on tasks.</p>

<p>▪   Knows when to ask for help and how to get unblocked.</p>

<p>▪   Makes steady, well-paced progress without the need for constant significant feedback from more senior engineers.</p>

<p>▪   Owns a small-to-medium feature from technical design through completion.</p>

<p>▪   Provides help and support outside of area under their responsibility.</p></blockquote>

<p>What can we gleam from this, so we start thinking of ways to improve ourselves as individual contributors?</p>

<a name="Increasing.your.Responsibility.with.Cross.Team.Interactions"></a>
<h2>Increasing your Responsibility with Cross Team Interactions</h2>

<p>It’s very unlikely that you are making all of the calls in a product. What is hopefully happening is that your team figures out a plan to ship something in a reasonable timeframe and as a team you assign each other smaller tasks that make that work.</p>

<p>It’s very likely that as a junior, you will be given the most well-defined small tasks. In OSS we call these the “<a href="https://github.com/danger/danger/issues?q=is:issue+is:open+label:%22You+Can+Do+This%22">easy first steps</a>.” Tasks that can be done atomically, without requiring more interaction with designers or members of the product team. Initially this is a feature (in that you get easy tasks), that eventually turns into a bug (you want to contribute at a higher level).</p>

<p>When it’s time to divvy up responsibilities, you should consider speaking up about taking tasks that are blocking people, but require further investigation outside of your dev team.</p>

<p>These responsibilities could be checking up on the status of an API with a platform team, or communicating with different parts of the business to get confirmation on specific details. It is the vagueness that makes the task harder, work your way towards making the task clear - then you have a well defined project.</p>

<a name="Learn.From.Your.Project.s.History"></a>
<h2>Learn From Your Project's History</h2>

<p>When you work, you’re probably working inside an application that other people have built. They have laid the frameworks down, established the team norms and architectural choices that could have existed for years before you arrived.</p>

<p>Part of what gives you that feeling of confidence in your code is you’re comfortable within the architectural ecosystem you’re used to: e.g. React + Relay, iOS MVVM, Backbone + Express, Rails + CoffeeScript. You’re probably getting good at using them, and that’s awesome.</p>

<p>To evolve from just that you need to really understand why these choices were made, what their trade-offs are and what was the reasoning for that platform to even exist in the first place.</p>

<p>By understanding the history of the choices that you have been living with, you can make better decisions in the future.</p>

<a name="The.Bigger.Picture"></a>
<h2>The Bigger Picture</h2>

<p>There is no “One True Solution” for anything in programming. You should be wary of anyone that tries to tell you all similar sounding things should be done one way. The things you work on are likely a combination of different patterns that work together to become “an app.”</p>

<p>Understanding your patterns well, and knowing when to apply them will get you far. If you want to go further still, you need to be able to step back from your patterns and try to see larger pictures. A feature that you write this week  <em>with a little bit more abstraction today</em> could make it much easier to write something next week. Writing better abstractions makes it easier for you to become a multiplier for other peoples work.</p>

<p>The hard bit is trying to see what that is. Realistically, this is about understanding where the product is, and what it’s roadmap is for the next few iterations as well as trying to think about abstractions that may not be available inside your project.</p>

<a name="Studying.Outside.Your.Daily.Craft"></a>
<h2>Studying Outside Your Daily Craft</h2>

<p>Some problems can be handled particularly well by different architectural patterns.  Without knowing they exist, how can you think that they are something you can use?</p>

<p>This leads to an interesting problem, how do you learn new architectural pattens?</p>

<ul>
<li><p><strong>Process</strong>: You’re probably using some form of <a href="http://agilemanifesto.org">agile development</a>, understand what that <a href="https://en.wikipedia.org/wiki/Agile_software_development">really means</a> and how it compares to others. Try reading <a href="https://www.amazon.co.uk/Getting-Things-Done-Stress-free-Productivity-ebook/dp/B00SHL3V8M/ref=sr_1_1?s=digital-text&amp;ie=UTF8&amp;qid=1473567686&amp;sr=1-1&amp;keywords=gtd">Getting Things Done</a> and I’ve heard good things about <a href="https://www.amazon.co.uk/Personal-Kanban-Mapping-Work-Navigating-ebook/dp/B004R1Q642/ref=sr_1_6?s=digital-text&amp;ie=UTF8&amp;qid=1473567686&amp;sr=1-6&amp;keywords=gtd">Personal Kanban</a>.</p></li>
<li><p><strong>Code Architecture</strong>: Here are some book recommendations, <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code</a>, <a href="https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X/ref=pd_bxgy_14_img_3?ie=UTF8&amp;psc=1&amp;refRID=BX7MTECP16Z2VR3N3T25">The Pragmatic Programmer</a>, <a href="https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612">Elements of Reusable Object-Oriented Software</a> and <a href="https://www.amazon.co.uk/gp/product/B005OYHF0A/">Working Effectively with Legacy Code</a>.</p></li>
<li><p><strong>Tooling</strong>: There is never one way to do something, so try something else. Switch text editor for a month, or explore alternative methods of doing the same thing.</p></li>
</ul>


<p>You can use this knowledge to start offering useful advice that can start to influence your team, for example could be in the form of trying few new idea and offering feedback on their tradeoffs.</p>

<p>As this is useful to both you and your employer, you should consider talking to your manager about booking time in your work calendar for doing 30 minutes of career development once a week studying topics like these.</p>

<a name="Helping.others"></a>
<h2>Helping others</h2>

<p>You can help your team out by using some of the skills from above.  You can then start thinking of expanding your influence within the company. By being a programmer you already have skills that a lot of people would like to learn or have a better working knowledge of it.</p>

<p>If you’ve got this far in the article, it’s very likely you’ve got enough skills to <a href="http://artsy.github.io/blog/2016/01/26/swift-at-artsy/">lead</a> <a href="http://artsy.github.io/blog/2016/08/31/Keyboard-Shortcuts-workshop/">workshops</a> internally, and write blog posts about <a href="http://artsy.github.io/blog/2015/07/06/how-to-write-unit-tests-like-a-brood-parasite/">your experiences</a> to <a href="http://artsy.github.io/blog/2015/06/04/an-eigenstate-of-mind/">help other developers</a> at your level. For example, this month I’ve ran a workshop on keyboard shortcuts and on learning to program in Swift. Both of them required maybe 2 hours of preparation, and an email or two announcing that it’s happening.</p>

<p>Other options are to give <a href="http://artsy.github.io/blog/2016/03/09/public-speaking-part1-is-it-for-me/">technical talks</a> within your company on specific topics, for example <a href="/blog/2015/12/10/License-and-You/">Licensing for OSS code</a> is a talk I gave internally to Artsy. We now have a weekly team “Lunch &amp; Learn” where we give anyone the chance to talk, or request a talk on a topic.</p>

<p>This gives a lot of space for personal growth too, as these are really easy to transition into blog posts and meetup talks.</p>

<p>Finally, try to pair with programmers outside of your direct team, it could be on whatever they’re working on - you’ll learn a bit more about other systems and they’ll get to <a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging">rubber duck</a> their problems.</p>

<a name="Side.Projects"></a>
<h2>Side Projects</h2>

<p>I’ve tried to focus this post specifically on things you can do on work time. Not everyone has the ability to go home and spend a few hours on this and that. However, programming at the early stage can generally be a “you get out what you put in” kind of deal with time.</p>

<p>Side projects give you the chance to test out new ideas in an isolated environment that is totally under your control. They are great places for exploring what makes a system tick. Some side-projects are built to be <a href="https://github.com/orta/you-can-do-it">thrown away</a> others can <a href="https://cocoapods.org">to last</a> <a href="http://danger.systems">for years</a>. Both are valuable spaces for experimentation.</p>

<a name="Contributing.to.Open.Source"></a>
<h2>Contributing to Open Source</h2>

<p>A lot of people’s work relies on Open Source code and as you are starting to branch out into having a larger impact - perhaps making smaller improvements to the projects you rely on every day could help. This is <a href="https://speakerdeck.com/orta/the-cocoapods-spec-repo-and-cocoadocs">how I got started</a> working with larger projects in the Open Source world.</p>

<p>Interacting in these projects exposes you to whole new teams of people with, hopefully, very different perspectives. It will change you, you will change them.</p>

<a name="Moving.On"></a>
<h2>Moving On</h2>

<p>This is a <a href="https://github.com/artsy/artsy.github.io/pull/275#issuecomment-246227904">complicated topic</a>, perhaps worth of it’s own post.</p>

<p>When you first start looking for a job in technology, you likely didn’t have too many choices and was pleased to have any offer. By this point, I’m hoping you’re at a point where you understand your value to a company.</p>

<p>Perhaps it’s worth thinking about what kind of space the company has for you to grow in. Since I started my career, Artsy is the only job I’ve been in for longer than 2 years. For some, I felt like I had outgrown my original role but could not find a space to grow into.</p>

<p>It’s worth re-evaluating. I do it every year in anticipation of my <a href="http://orta.io/on/being/29">annual write-ups</a>.</p>

<a name="Wrap-up"></a>
<h2>Wrap-up</h2>

<p>This is no simple “one-step to consider yourself post-Junior" article. Only a collection of ideas that you can apply until you feel confident as you find you own ways to help out. As you grow, you grow in many different directions at once - and all of them are valid.</p>

<p>You can grow by research, practice, doing things outside of work, doing small projects with others in work, experimentation with technology, interacting with more and more people and re-thinking existing approaches. Once you're outside of small feature work - there are so many ways you can contribute.</p>

<p>We use the idea of an engineering ladder as a yardstick to ensure we treat developers fairly at Artsy. Different companies will have different ways of scoping how you measure up as a programmer. Your company's ladder can help offer direction for what they would love to see.</p>

<p>At the end of the day you’ve got your foundations now, and its time to start thinking about building yourself into a unique programmer and creating your own opinions. There’s never been a better time to start.</p>

<a name="Further.Reading"></a>
<h2>Further Reading</h2>

<ul>
<li><a href="http://blog.alexnaraghi.com/what-i-didnt-understand-as-a-junior-programmer">What I Didn't Understand as a Junior Programmer</a></li>
<li><a href="http://dbgrandi.github.io/growing_beyond_junior/">Growing Beyond Junior</a></li>
</ul>


<a name="iOS.Specific"></a>
<h2>iOS Specific</h2>

<ul>
<li>Study <a href="/blog/2016/06/19/graphql-for-mobile/">GraphQL</a>, study my entire series on <a href="/series/cocoa-architecture/">Cocoa Architecture</a> and our <a href="/series/ios-code-review/">app code reviews</a>.</li>
<li>Study MVC, MVVM, RxSwift, VIPER, Testing, BDD, CocoaPods &amp; Swift Package Manager with an hour on each minimum.</li>
<li>Read <a href="https://www.objc.io">objc.io</a>, watch their videos too.</li>
<li>Study other languages, and toolsets - it’s very easy to become silo’d in just Objective-C and Swift.</li>
</ul>


<a name="JS.Specific"></a>
<h2>JS Specific</h2>

<ul>
<li>Study ES6, GraphQL, React, Relay, Redux, Angular 2, Flow, TypeScript, Carte Blanche, Webpack &amp; Babel.</li>
<li>Get a company account on <a href="https://egghead.io">Egghead</a> - give yourself a timetable on work time to spend 30+ minutes once a week watching videos from it.</li>
<li>Explore VS Code, Safari Web Inspector and Web Storm as different ways of doing the same thing, but with more tooling.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dev Interviews: Craig Spaeth]]></title>
    <link href="http://artsy.github.io/blog/2016/08/09/Dev-Interview-Craig-Spaeth/"/>
    <updated>2016-08-09T12:11:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/08/09/Dev-Interview-Craig-Spaeth</id>
    <content type="html"><![CDATA[<p>Hello everyone! Orta here, over the summer I've started a series of interviews with the entire development team at Artsy. They're all on different topics, notably around technical and cultural issues. I've recorded a few of them already, and will be sporadically releasing them. I'm still getting the hang of editing and recording side of this, so give me some slack.</p>

<p>Anyway, I'm pumped to introduce the first in the series - <a href="http://craigspaeth.com/">Craig Spaeth</a>.</p>

<p>Craig has been at Artsy for 6 years, moving from the first on-site developer to Director of Web. Our interview covered how Artsy's development team has adapted over time to the changing demands of a growing company. When he joined, Artsy was 6 people, we're now at ~145 people, ~20 developers and 3 businesses.</p>

<p>Jump <a href="https://www.youtube.com/watch?v=-0WK1Ebis3M">to YouTube</a> for the video, or click more for a inline video.</p>

<!-- more -->


<p></div></div><iframe width='100%' height='600' src='https://www.youtube.com/embed/-0WK1Ebis3M ' frameborder='0' allowfullscreen></iframe><div class='meta-container'><header>&nbsp;</header></div><div class='content-container'><div class='entry-content'></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling Large OSS Projects Defensively]]></title>
    <link href="http://artsy.github.io/blog/2016/07/03/handling-big-projects/"/>
    <updated>2016-07-03T12:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/07/03/handling-big-projects</id>
    <content type="html"><![CDATA[<p>I help maintain big OSS projects: from a third-party <a href="https://cocoapods.org">dependency manager</a> used in most iOS apps (<a href="https://github.com/CocoaPods/cocoapods.org">CocoaPods</a>), to the most popular Objective-C <a href="http://cocoapods.org/pods/Specta">testing framework</a> and the most popular Swift <a href="http://cocoapods.org/pods/Moya">networking API client</a>. I've been doing this for years.</p>

<p>Projects with this much impact are big time-sinks. This time comes from ensuring infrastructure continues to work, support tickets need replies, new code needs reviewing and releases need coordinating.</p>

<p><img src="/images/2016-07-03-big-oss/danger_logo_black@2x.png" alt="" /></p>

<p>Last September, almost a year ago, I started work on a new project, <a href="https://github.com/danger/danger/">Danger</a>. Danger fixes a problem we were seeing in the Artsy mobile team around adding "<a href="https://github.com/artsy/mobile/issues/31">process</a>" to our team.</p>

<p>As a part of discussing Danger internally, I've referenced that building CocoaPods has greatly influenced Danger. This blog post is about the way I've built Danger, knowing fully well that I cannot afford the level of time to maintain it at the scale it may get to.</p>

<!-- more -->


<hr />

<p>Danger is a project that could end up with a lot more users than CocoaPods. So I want to be cautious about how I create the community around Danger. If you're interested in some of the baseline setup required to run a popular project, the post "<a href="https://ashfurrow.com/blog/building-popular-projects/">Building Popular Projects</a>" by <a href="/author/ash">Ash</a> is a great place to start, this builds on that.</p>

<p>My maintenance time on CocoaPods resolves around:</p>

<ul>
<li>Handling new issues</li>
<li>Keeping infrastructure running</li>
<li>Requests around user data</li>
<li>Keeping disparate communities together</li>
</ul>


<a name="Issues"></a>
<h2>Issues</h2>

<p>From the ground up, Danger could not end up as complex as CocoaPods, the domain they cover is different and CocoaPods sits atop of an annually moving (and <em>somewhat</em> hostile) <a href="https://developer.apple.com/news/">platform</a>.</p>

<p>However, get enough people using a product and you end up with three types of issues: Bug Reports, How Do I X? and Feature Requests.</p>

<p>I wanted to keep bug-reports down, as much as possible, and so I built a system wherein the default error reporting system would also search GitHub issues <a href="https://github.com/orta/gh_inspector">for similar problems</a>. Knowing this was a generic problem, I built it with <a href="https://github.com/fastlane/fastlane/releases/tag/1.96.0">other</a> <a href="https://github.com/CocoaPods/CocoaPods/pull/5421">large</a> ruby projects in mind too.</p>

<p><code>How do I X?</code> are issues that haven't appeared much on Danger. For CocoaPods we request people use the CocoaPods tag on StackOverflow. That saves us from 5 to 6 issues a day, and provides others a great place to get internet points by responding instead.</p>

<p>Feature Requests issues are always fascinating, it gives you a chance to really see the difference between what you imagined a project's scope is, and how others perceive it. One thing that helps here is that Danger has a <a href="https://github.com/danger/danger/blob/master/VISION.md">VISION.md</a> file. This helped vocalise a lot of internal discussion, and let contributors understand the roadmap:</p>

<blockquote><p>The core concept is that the Danger project itself creates a system that is extremely easy to build upon. The codebase for Danger should resolve specifically around systems for CI, communication with Peer Review tools and providing APIs to Source Control changes. For example: Travis CI - GitHub - git.</p></blockquote>

<p>As well as providing a heuristic for determining whether something should be added to Danger:</p>

<blockquote><p>This means that decisions on new code integrated into Danger should ask "is this valid for every CI provider, every review system and source control type?" by making this domain so big, we can keep the core of Danger small.</p></blockquote>

<a name="Infrastructure"></a>
<h3>Infrastructure</h3>

<p>CocoaPods has about 6 web properties, 3 of which are critical. The others can go down, or be behind the Xcode update schedules and people's projects will work fine. The 3 the critical projects are all simple, focused projects: <a href="https://github.com/CocoaPods/trunk.cocoapods.org">trunk</a> (provide auth, and submitting new libraries) <a href="https://github.com/CocoaPods/cocoapods.org">cocoapods.org</a>, and <a href="https://github.com/CocoaPods/search.cocoapods.org">search</a>. We control everything there.</p>

<p>Meanwhile the less critical ones like <a href="https://github.com/CocoaPods/cocoadocs.org">cocoadocs.org</a> have dependencies all over the show: AppleDoc, CLOC, Xcode, Carthage, Jazzy - every one of these can, and has, been a source of unreliability for infrastructure that I maintain.</p>

<p>With Danger, I wanted to avoid building any infrastructure that does not sit on top of solid, mature projects. The website is statically created in <a href="https://middlemanapp.com">Middleman</a>, using <a href="https://rubygems.org/gems/slim">boring</a> <a href="https://rubygems.org/gems/sass">old</a> technology, this means no server to host.</p>

<p>To support dynamic content on the website, I have a rake command to use <a href="https://rubygems.org/gems/yard/versions">a decade old</a> documentation formatter to pull content from a <a href="https://en.wikipedia.org/wiki/RubyGems">13 year old</a> dependency manager - that lets others describer their project's. In order to let them keep it up to date, I have a tiny 35 line web-server that allows specific projects to trigger a new CI build.</p>

<a name="Plugins"></a>
<h3>Plugins</h3>

<center>
<blockquote class="twitter-tweet" data-lang="en-gb"><p lang="en" dir="ltr">Summary of every big OSS project. Monolith -&gt; Plugin support.<a href="https://t.co/7x4vuW4bRd">https://t.co/7x4vuW4bRd</a></p>&mdash; Orta Therox (@orta) <a href="https://twitter.com/orta/status/748561323164864512">30 June 2016</a></blockquote> <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
</center>


<p><br/></p>

<p>It's almost inevitable that once a project becomes big, maintainers have to become a lot more conservative about how they introduce new code. You become good at saying 'no', but a lot of people have legitimate needs. So, instead you end up converting your tool into a platform.</p>

<p>Some of the most interesting ideas in the CocoaPods ecosystem come from plugins.</p>

<p>I wanted plugins to be a first class citizen within Danger from day one. It's in the <a href="https://github.com/danger/danger/blob/master/VISION.md">VISION</a> file, and it's applied into how I've designed a lot of the user-facing site. I was <a href="https://github.com/danger/danger/issues/74">torn</a> after a few months of development <a href="https://github.com/danger/danger/pull/156#issuecomment-205907128">where things</a> should go. Now the core of Danger is <a href="https://github.com/danger/danger/pull/227">built as plugins</a>.</p>

<a name="Documentation"></a>
<h3>Documentation</h3>

<p>My second big project on CocoaPods was collating documentation and scoping different types of documentation. In CocoaPods I ended with:</p>

<ul>
<li><strong>Highlight pages</strong> (intro pages, app pages, team pages)</li>
<li><strong>Guides</strong> (tutorials, overviews, FAQs)</li>
<li><strong>Reference</strong> (Command-line interface, APIs for developers)</li>
</ul>


<p>These 3 buckets for documentation makes it pretty easy to separate where people should look depending on what they're looking for. This pattern I'm stealing outright for Danger. Just not quite yet, it's a blocker on 1.0 though.</p>

<p>One trick I took from CocoaPods is to have as much documentation as possible generated from the source code. With Danger, all of the work that's gone into documenting the code is turned into public API documentation for end-users. This makes it really easy to ensure it's consistent and up-to-date. The same tools used to generate documentation for Danger are used for plugins. Any improvements there helps everyone.</p>

<a name="User.Data"></a>
<h2>User Data</h2>

<p>Not storing any, phew! Though if <a href="https://github.com/danger/danger/issues/42">Danger as a Service</a> happens, then it will.</p>

<a name="People"></a>
<h2>People</h2>

<p>People are hard, Ash said in <a href="https://ashfurrow.com/blog/building-popular-projects/">Building Popular Projects</a>:</p>

<blockquote><p>The biggest existential threat to your library is this: you get burned out and stop working on it – and no one else contributes to it –</p></blockquote>

<p>Understanding motivations, encouraging ownership and accommodating multiple viewpoints are vital parts of anyone who wants to make a project bigger than themselves. There <a href="https://github.com/danger/danger/graphs/contributors">are lots of times</a> when I'm not the lead developer on Danger.</p>

<p>I owe a lot of this to the policy Ash and I created with Moya, the wordy "<a href="https://github.com/Moya/contributors">Moya Community Continuity Guidelines</a>" which define the expectations of the maintainers of a project towards contributors.</p>

<p>It's helped let a lot of other contributors make an impact. In the future, I hope those are the people that I get to hand Danger off to. Danger is bigger than me.</p>

<hr />

<p>Maintaining big projects is a learned activity, for most people it's a spectator sport, but it's not too hard to jump from writing issues to helping out. It's how I ended up contributing to CocoaPods.</p>
]]></content>
  </entry>
  
</feed>
