<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: culture | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/culture/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2017-09-21T12:07:04+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DevSwap: An Experiment in Randomizing Teams]]></title>
    <link href="http://artsy.github.io/blog/2017/09/11/DevSwap/"/>
    <updated>2017-09-11T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2017/09/11/DevSwap</id>
    <content type="html"><![CDATA[<p>A few weeks ago, every engineer at Artsy went to work for a different team for two full days. We called it DevSwap. In this post, I'll go over why and how we did it.</p>

<!-- more -->


<p>If you‚Äôve read about Artsy's <a href="http://artsy.github.io/blog/2016/03/28/artsy-engineering-organization-stack/">Engineering Team</a> before, you might know that we organize ourselves into product teams that serve different parts of our business. Today, Artsy employs 26 engineers, spread across four product teams ‚Äî Publishing, Auctions, Collector GMV, and Partner Success. We also have a Platform team that is responsible for systems, infrastructure, and data, among other things. Across these teams, we share systems and apps. To stay cohesive with one another, we also have what we call ‚Äúpractices,‚Äù which are cross-team groups that meet and discuss shared tech.</p>

<p>Around two years ago, we didn't have product teams. Back then, most engineers worked in a variety of stacks. As our business models changed, so did the way we organized ourselves. Interestingly, the number of engineers has not changed drastically, but the way we work has. We have greater focus now that we are organized into product teams with specific business goals, but that means there aren't as many opportunities to work in other stacks.</p>

<p>Earlier this summer, the engineering leads received some feedback from our engineers about wanting more cross-team collaboration and knowledge sharing. In our weekly engineering-wide meeting, we get to hear what features each team is working on, but it can sometimes feel like there's missing context. Within our practices, there is a better sense of the details, but usually the work itself is deeply nested in another team.</p>

<p>We brainstormed several ideas related to knowledge sharing and cross-team collaboration. What stood out the most was that being in product teams meant fewer opportunities to work in other parts of the business. This led to the question: What would happen if we redistributed ourselves into entirely new teams?</p>

<a name="Setup"></a>
<h2>Setup</h2>

<p>Over the course of a few weeks, the engineer leads devised a plan for DevSwap. Here are some questions we asked ourselves:</p>

<ul>
<li>How can we become closer as a team while learning something new?</li>
<li>How can we keep ourselves as engineers nimble, flexible, and full-stack?</li>
<li>How can we reduce risk in our systems by spreading knowledge?</li>
<li>How can we have fun before summer is over?</li>
</ul>


<p>For the first iteration, we decided to spend two full business days swapping. Every engineer  worked with a different team. Each team contained the same number of people as the original team. The leads of each team stayed to onboard, provide support and facilitate work.</p>

<p>The Monday before DevSwap, we had an engineering-wide meeting to go over some guidelines and pick teams. Here are the guidelines we shared:</p>

<ul>
<li>DevSwap will last 2 days. üïë</li>
<li>Product managers have been notified so don't worry about your regular work. Hopefully a new member will pick some up for you üòÑ.</li>
<li>If possible, try and sit by your new team and if not, coordinate meeting times with remote members. üìû</li>
<li>See this as a pairing opportunity! üë´</li>
<li>In terms of work, it's business as usual. Your new lead will give you guidance. üíº</li>
</ul>


<p>In this meeting, we also had our leads "pitch" their teams. The goal of this was to get people excited about joining new teams and to get a sense of what projects they might work on. To choose the actual teams, each engineer picked their top three choices and we drew names out of a bucket. If their first choice was already full, we would place them in their next available choice. The following Monday and Tuesday, we were all writing code for different teams.</p>

<a name="So.what.happened."></a>
<h2>So what happened?</h2>

<p>Our EU engineers kicked off DevSwap on Monday, tackling both the struggle of learning new stacks and being remote (our headquarters is located in NYC). Leads mitigated the latter problem by prepping EU folks on Friday so they had some direction come Monday morning.</p>

<p>There was lots of Slack-ing, Screenhero-ing, and pairing. It was wonderful to see people interact in a new environment with new goals, even if it was temporary. Some got to learn about <em>how</em> teams operate and learned about issue prioritization and even attended meetings with stakeholders.</p>

<p>Some people worked on modernizing codebases with projects like <a href="https://github.com/artsy/positron/pull/1225">server-side hot file swapping</a> and the introduction of a GraphQL endpoint to our consignments app. Others worked on building features like <a href="https://github.com/artsy/aprb/pull/104/files">setting up Slack notifications</a> when we receive customer feedback and adding ElasticSearch indexing to projects. We learned new languages <a href="https://github.com/artsy/eigen/pull/2412">by building features</a> and updated <a href="https://github.com/artsy/metaphysics/pull/702">many</a> <a href="https://github.com/artsy/positron/pull/1235">docs</a>.</p>

<p>All work aside, the fact that we were having conversations with each other about the details of the technology while gaining a fresh perspective of someone else's experience was valuable.</p>

<a name="Feedback.from.Engineers"></a>
<h2>Feedback from Engineers</h2>

<p>I learned a lot and had fun, but I wondered what everyone else thought. At the end of the second day, I sent out a survey to all 26 engineers and received 14 responses. Here are some of those results:</p>

<p>Did you get a chance to collaborate with someone you don't normally work with?</p>

<iframe width="600" height="371" seamless frameborder="0" scrolling="no" src="https://docs.google.com/spreadsheets/d/e/2PACX-1vQoAQpvGiq2-5EJWz__vS0n4Iw9r3rY_eSEaPqKQzUlPnObnono-RFS4qLSjrmGTqGnbMOoQsA1L9WX/pubchart?oid=942845256&amp;format=interactive"></iframe>


<p><br>
Did you gain a better understanding of a piece of Artsy Engineering you don't normally interact with?</p>

<iframe width="600" height="371" seamless frameborder="0" scrolling="no" src="https://docs.google.com/spreadsheets/d/e/2PACX-1vQoAQpvGiq2-5EJWz__vS0n4Iw9r3rY_eSEaPqKQzUlPnObnono-RFS4qLSjrmGTqGnbMOoQsA1L9WX/pubchart?oid=543941925&amp;format=interactive"></iframe>


<p><br>
If we were to swap again in 6 months, how long should it last?</p>

<iframe width="600" height="371" seamless frameborder="0" scrolling="no" src="https://docs.google.com/spreadsheets/d/e/2PACX-1vQoAQpvGiq2-5EJWz__vS0n4Iw9r3rY_eSEaPqKQzUlPnObnono-RFS4qLSjrmGTqGnbMOoQsA1L9WX/pubchart?oid=1071239654&amp;format=interactive"></iframe>


<p><br>
<br></p>

<blockquote><p>"Would make the swap slightly longer -- was a short timeframe to get through a project."</p>

<p>"Onboarding took up most of the time. It was hard to get anything beyond that done."</p></blockquote>

<p>One clear piece of feedback was the desire to spend more time on an assigned team. Some engineers had trouble onboarding, setting up projects, and accomplishing meaningful work within the two days. If engineers can't spin up a dev environment within a day, what does that mean for usability? These are solvable problems ‚Äî we could think about dockerizing apps or having better READMEs. During the session, some folks went back to their old teams to help new members with problems. While this was great, it meant less time for their own learning. One option is to extend the duration of the swap. But by extending it too long, it could remove the hackathon mentality that kept people highly focused. It seems like a combination of tweaking the duration, providing better initial setup, and clearly communicating expectations might help for next time.</p>

<p>We also requested feedback on the leads. Responding to a multiple choice question about what their newly assigned lead did best, most engineers chose "Assisted me when I got stuck" and "Checked in with me frequently." The least chosen answers were "Taught me something new" and "Made the work enjoyable." It's possible that taking more time to prepare for new teams (i.e. introduction meetings, dev environment setup workshop) could provide more opportunities for deeper learning.</p>

<p>When we asked if there were any good takeaways that could be applied to your own team, we had some interesting answers.</p>

<blockquote><p>"Partner Success does a 'show &amp; tell' where you just casually mention something you learned, dev/tech related. That was fun. We should do that on [Collector Experience]."</p>

<p>"Finally got to play with Redux in a production app, which I'd be very happy to see implemented in <a href="https://github.com/artsy/positron">Positron</a>."</p>

<p>"I've been thinking a lot about GraphQL and what it could mean to the [Partner Success] team. Also thinking about what it means for Kinetic and how our projects talk to Gravity."</p></blockquote>

<p>Finally, what did people like most?</p>

<blockquote><p>"Working with people that I normally don't get a chance to work with on daily basis and also working on the areas of our systems. The fact that now each engineer knows how to setup and run another part of our system by itself is a huge win."</p>

<p>"The tight time period forces projects to be very granular. It also forces repo set-up time to be minimized (e.g., via setup/bootstrap scripts, docker, etc.)."</p>

<p>"I liked feeling like I was able to figure out a codebase that was completely new to me and add value even in the short time that we had to work with. It made me feel like something intimidating was actually within my reach and that made me feel smart. :)"</p>

<p>"I wasn't sure if we should expect to get much accomplished but was pleasantly surprised to ship a small but useful feature."</p>

<p>"Awesome idea, it feels great to be part of the team that takes risks like this to increase teamwork and knowledge share among engineers and give engineers chance to get out of their comfort zone."</p></blockquote>

<p>Despite a few issues with onboarding and timing, it seems that most people found DevSwap to be valuable. This feedback gives us a lot to consider when planning the next one. We hope to bring it back soon!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Peril to the Artsy Org]]></title>
    <link href="http://artsy.github.io/blog/2017/09/04/Introducing-Peril/"/>
    <updated>2017-09-04T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2017/09/04/Introducing-Peril</id>
    <content type="html"><![CDATA[<p>Once Danger Ruby was stable enough for everyday use in 2015, it became obvious that running Danger on CI was both a
positive and a negative. On the positive side, Danger has access to all artifacts created during testing - and on the negative
side it takes a long time to get feedback. It was obvious that Danger could <a href="https://github.com/danger/danger/issues/42">run on a server</a>, but it was a big unknown what that could look like.</p>

<p>Eventually, <a href="/blog/2017/06/30/danger-one-oh-again/">I came to the conclusion</a> that we would need a JavaScript replacement of Danger - and so I applied
constraints to Danger JS that made a server-side version of Danger a possibility. It was a stroke of luck that around the
time Danger JS became usable for day to day usage, that GitHub introduced <a href="https://developer.github.com/changes/2016-09-14-Integrations-Early-Access/">GitHub Apps</a> - so I started work on Peril. Peril is server-side Danger. The rest of this post talks about how we use it Artsy today, how you can use it yourself and where it's heading.</p>

<!-- more -->


<p>In December 2016, I built out Peril in a sandbox org: <a href="https://github.com/PerilTest">PerilTest</a>, this gave me the chance to get a lot of things wrong safely. My biggest worry around Peril was leaking data though someone abusing the ability to evaluate a Dangerfile.</p>

<p>In May 2017, I introduced Peril into Artsy's org, GitHub apps have the ability to pick and choose which repos to work with.
I scoped the repos to existing open source projects which I was familiar with (<a href="https://github.com/artsy/emission">Emission</a>, <a href="https://github.com/artsy/reaction">Reaction</a> and <a href="https://github.com/artsy/positron">Positron</a>)
which gave a space to ensure stability and handle production edge-cases.</p>

<p>In August 2017, I created a new Peril instance for CocoaPods. I then finally flipped the switch to turn Peril on for all
repos on the Artsy org and formalized the RFC process for changes. This is where we are now.</p>

<a name="Getting.Set.Up"></a>
<h2>Getting Set Up</h2>

<p>For our Artsy org, I followed and improved the guide: <a href="https://github.com/danger/peril/blob/master/docs/setup_for_org.md">Setup for Org</a>. There are three key components:</p>

<ul>
<li>Creating a GitHub app for your Org</li>
<li>Hosting a Peril server</li>
<li>Making up a Peril settings repo</li>
</ul>


<p>The guide covers the initial setup, but I'd like to cover the third part of our setup.</p>

<a name="How.Artsy.s.Peril.works"></a>
<h2>How Artsy's Peril works</h2>

<p>The Artsy Peril settings are all on <a href="https://github.com/artsy/artsy-danger">artsy/artsy-danger</a>. The Artsy Peril heroku instance has the ENV var
<code>"DATABASE_JSON_FILE"</code> set to <code>"artsy/artsy-danger@peril.settings.json"</code>, so Peril will use <a href="https://github.com/artsy/artsy-danger/blob/master/peril.settings.json">that file</a> as the source of truth for all config. Here's what it is today:</p>

<p></article>
<article class='split-desktop-only'></p>

<div style='flex:1; display: block;'>

```json
{
  "settings": {
    "modules": [
      "danger-plugin-spellcheck", 
      "danger-plugin-yarn", 
      "@slack/client"
    ],
    "env_vars": ["SLACK_RFC_WEBHOOK_URL"]
  },
  "rules": {
    "pull_request": "artsy/artsy-danger@org/all-prs.ts"
  },
  "repos" : {
    "artsy/reaction": {
      "pull_request": "danger/pr.ts"
    },
    "artsy/positron": {
      "pull_request": "dangerfile.ts"
    },
    "artsy/artsy-danger": {
      "issues.opened": "artsy/artsy-danger@danger/new_rfc.ts"
    }
  }
}
```

</div>


<div style='flex:1; display: block; padding:0 20px;'>

<p><code>"settings":</code> These settings which conform to today's <a href='https://github.com/danger/peril/blob/752afeb37e3c1fdec512eb91687747d9a8a29337/source/db/index.ts#L26-L31'>GitHubInstallationSettings</a>, here's the <a href='https://github.com/danger/peril/blob/master/source/db/index.ts'>current version</a>. These are org-wide settings
that require a new deploy of the server to re-create.</p>

<p><code>"rules":</code> These are rules which are applied to every repo that Peril has access to. So in this case, every Pull Request in the org will make Peril run the Dangerfile at <code>"artsy/artsy-danger@org/all-prs.ts"</code>.</p>

<p><code>"repos":</code> These are repo-specific overrides, so a Pull Request to artsy/reaction would trigger both the org-wide Dangerfile, and one on the reaction repo.</p>

</div>


<p></article>
<article class='post'></p>

<a name="Events"></a>
<h2>Events</h2>

<p>A Dangerfile evaluation occurs once a GitHub webhook is sent. In the above examples there are two events that Danger supports:
<code>"pull_request"</code> and <code>"issues.opened"</code>. These are qualifiers that GitHub provide as a <a href="https://developer.github.com/v3/activity/events/types/events">Webhook EventTypes</a>.</p>

<p>There's a lot of them: <code>commit_comment</code>, <code>create</code>, <code>delete</code>, <code>deployment</code>, <code>deployment_status</code>, <code>fork</code>, <code>gollum</code>, <code>installation</code>, <code>installation_repositories</code>, <code>issue_comment</code>, <code>issues</code>, <code>label</code>, <code>marketplace_purchase</code>, <code>member</code>, <code>membership</code>, <code>milestone</code>, <code>organization</code>, <code>org_block</code>, <code>page_build</code>, <code>project_card</code>, <code>project_column</code>, <code>project</code>, <code>public</code>, <code>pull_request</code>, <code>pull_request_review</code>, <code>pull_request_review_comment</code>, <code>push</code>, <code>release</code>, <code>repository</code>, <code>status</code>, <code>team</code>, <code>team_add</code>, <code>watch</code>.</p>

<p>Some of these events also have unique sub-actions too:</p>

<ul>
<li><p>For an <code>issue</code> event there is: <code>assigned</code>, <code>unassigned</code>, <code>labeled</code>, <code>unlabeled</code>, <code>opened</code>, <code>edited</code>,  <code>milestoned</code>, <code>demilestoned</code>, <code>closed</code>, or <code>reopened</code></p></li>
<li><p>For a <code>pull_request</code> event there is: <code>assigned</code>, <code>unassigned</code>, <code>review_requested</code>, <code>review_request_removed</code>, <code>labeled</code>, <code>unlabeled</code>, <code>opened</code>, <code>edited</code>, <code>closed</code>, or <code>reopened</code></p></li>
</ul>


<p>The way that you define rules in Peril gives you the ability to either focus on one action for an event type: <code>"issues.opened"</code> or all actions
on an event: <code>"pull_request"</code>. Once you get your head around this, you start to get a sense of the scope of Peril. At Artsy, we've barely scratched the surface.</p>

<a name="Growth"></a>
<h3>Growth</h3>

<p>I've always advocated that Danger, and Peril should be <a href="http://danger.systems/js/usage/culture.html">applied incrementally</a>. This applies even more when you're
making org changes that affect every developer - at least with Danger you can see the Pull Request that changes
the Dangerfile. With Peril you get none of that.</p>

<p>So, we introduced <a href="https://github.com/artsy/artsy-danger/#rfcs">an RFC process for Peril changes</a>. There's not much to it, if you want to add a rule that
affects everyone then you need to make an issue following a template and then wait a week. If you make a new issue that
includes the title <code>RFC:</code> then Peril sends a slack message to our developer Channel</p>

<p><img src="/images/peril/peril-rfc.png" alt="/images/peril/peril-rfc.png" /></p>

<p>This was simple to build via Peril, I first added the npm module: <code>"@slack/client"</code> to the <code>"modules"</code> array, making it available to a Dangerfile. Then I added an environment variable to Peril for a newly minted Slack Incoming Webhook URL, and exposed it to Dangerfiles via: <code>"env_vars": ["SLACK_RFC_WEBHOOK_URL"]</code>.</p>

<p>Then I added a per-repo rule:</p>

<pre><code class="json">    "artsy/artsy-danger": {
      "issues.opened": "artsy/artsy-danger@danger/new_rfc.ts"
    }
</code></pre>

<p>This means the Dangerfile is only ran on <code>"issues"</code> with an <code>"opened"</code> action. I didn't want the discussion around a rule spamming our slack with webhooks from the other actions. The file <code>danger/new_rfc.ts</code> looks like this:</p>

<pre><code class="ts">import { schedule, danger } from "danger"
import { IncomingWebhook } from "@slack/client"
import { Issues } from "github-webhook-event-types"

declare const peril: any // danger/danger#351

const gh = danger.github as any as Issues
const issue = gh.issue

if (issue.title.includes("RFC:")) {
  var url = peril.env.SLACK_RFC_WEBHOOK_URL || "";
  var webhook = new IncomingWebhook(url)
  schedule( async () =&gt; {
   await webhook.send({
      unfurl_links: false,
      attachments: [{
        pretext: "üéâ A new Peril RFC has been published.",
        color: "good",
        title: issue.title,
        title_link: issue.html_url,
        author_name: issue.user.login,
        author_icon: issue.user.avatar_url
      }]
    })
  })
}
</code></pre>

<p>For events that are not a <code>"pull_request"</code> the <code>danger.github</code> object is the JSON for the event.  You can get TypeScript types available for every GitHub event via the NPM module <a href="https://www.npmjs.com/package/github-webhook-event-types">github-webhook-event-types</a> which makes it much easier to work with.</p>

<a name="Where.to.go.from.here."></a>
<h2>Where to go from here?</h2>

<p>Right now we have <a href="https://github.com/artsy/artsy-danger/issues?utf8=%E2%9C%93&amp;q=is%3Aissue%20RFC">a few RFCs</a>, and I don't spend all day making Peril rules, I've gotta <a href="https://github.com/artsy/emission/pulls?utf8=%E2%9C%93&amp;q=consignments%20">do work y'know</a>. We're going to slowly build out our Peril infrastructure.</p>

<p>I'm interested in exploring two ideas big for peril at the moment:</p>

<ul>
<li><p>What a Peril plugin system looks like: You can include modules which can listen to events and react themselves. An org-wide spellcheck on markdown files could be as easy as including <code>"modules": ["peril-plugin-spellcheck"]</code>.</p></li>
<li><p>What <a href="https://github.com/danger/peril/issues/138">scheduled jobs</a> could look like for Peril: We have a bunch of checks I'd like to make on a a regular occasion, and then passing back feedback via slack or making an issue on the repo.</p></li>
</ul>


<p> For example if a repo has an owner who isn't in Artsy anymore, we should highlight that it needs a new owner.</p>

<p>If you're interested in using Peril in large OSS projects, take a look at how Peril is used in CocoaPods via <a href="https://github.com/CocoaPods/peril-settings">CocoaPods/peril-settings</a>.</p>

<p>If you're interested in using Peril in your org, run through the <a href="https://github.com/danger/peril/blob/master/docs/setup_for_org.md">Setup for Org</a> guide and help improve it when you inevitably have some weird issues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Art + Feminism and Artsy Wikipedia/Wikidata Editathon]]></title>
    <link href="http://artsy.github.io/blog/2017/08/31/Editathon/"/>
    <updated>2017-08-31T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2017/08/31/Editathon</id>
    <content type="html"><![CDATA[<p>Artsy has always had a focus on Art meets Science, and we <a href="https://www.meetup.com/CocoaPods-NYC/messages/boards/thread/50940969">hosted a meet-up in July</a> that really hits on both. We had a collection of Artsy Staff, members of <a href="http://www.artandfeminism.org">Art + Feminism</a> NYC, the <a href="/blog/2015/08/10/peer-lab/">CocoaPods Peer Lab</a>, <a href="http://www.artspracticum.org">New York Arts Practicum</a> and volunteers from <a href="https://nyc.wikimedia.org/">Wikimedia NYC</a> all helping out.</p>

<p>We came with two aims:</p>

<ul>
<li>Help anyone interested in contributing to Wikipedia get started.</li>
<li>Use <a href="https://github.com/artsy/the-art-genome-project">The Art Genome Project</a>(TAGP) to improve Wikidata entries for women Artists.</li>
</ul>


<p>I helped out with the second part, and the rest of this post will be about the lessons learned during this <a href="https://en.wikipedia.org/wiki/Edit-a-thon">editathon</a>.</p>

<!-- more -->


<a name="What.is.Wikidata."></a>
<h1>What is Wikidata?</h1>

<p>Everyone knows Wikipedia, but fewer people know about <a href="https://www.wikidata.org/wiki/Wikidata:Main_Page">Wikidata</a>. We learned about it in the process of helping set up this meetup. Wikidata is a structured document store for generic items. The lexicon of keys that can go into a document are handled by community consensus.</p>

<p>For example let's take the artist: Ana Mendieta (<a href="https://www.artsy.net/artist/ana-mendieta">artsy.net/artist/ana-mendieta</a>) in (truncated) <a href="https://www.wikidata.org/wiki/Special:EntityData/Q463639.json">JSON representation</a> inside Wikidata:</p>

<pre><code class="json">{

  // General database metadata 
  "pageid": 437301,
  "ns": 0,
  "title": "Q463639",
  "lastrevid": 517662334,
  "modified": "2017-07-11T12:30:29Z",
  "type": "item",
  "id": "Q463639",

  // What is the name of this item in the db, in multiple languages
  "labels": {
    [...]
    "ru": {
      "language": "ru",
      "value": "–ú–µ–Ω–¥—å–µ—Ç–∞, –ê–Ω–∞"
    },
    "en": {
      "language": "en",
      "value": "Ana Mendieta"
    },
    [...]
    "he": {
      "language": "he",
      "value": "◊ê◊†◊î ◊û◊†◊ì◊ô◊ô◊ò◊î"
    },
    [...]
  },

  // How do you describe the item per language
  "descriptions": {
    "es": {
      "language": "es",
      "value": "artista cubanoestadounidense"
    },
    "de": {
      "language": "de",
      "value": "US-amerikanische Perfomancek√ºnstlerin"
    },
    "en": {
      "language": "en",
      "value": "American artist"
    },
   [...]
  },

  // How does this item connect to other parts of the system
  "claims": {
    [...]

    // This is https://www.wikidata.org/wiki/Property:P2042
    // Aka: The Artsy Artist ID
    "P2042": [
      {
        "mainsnak": {
          "snaktype": "value",
          "property": "P2042",
          "datavalue": {

            // The slug on the Artsy app/site
            "value": "ana-mendieta",
            "type": "string"
          },
          "datatype": "external-id"
        },
        "type": "statement",
        "id": "Q463639$67B7BA7A-D008-4EB9-BDE6-909ED82DE72A",
        "rank": "normal"
      }
    ],

    [...]

    // This is used in our example below
    "P27": [
      {
        "id": "Q463639$5B578566-EEC7-45F9-9007-612E98CA2D59",
        "mainsnak": {
          "datatype": "wikibase-item",
          "datavalue": {
            "type": "wikibase-entityid",
            "value": {
              "entity-type": "item",
              "id": "Q30",
              "numeric-id": 30
            }
          },
          "property": "P27",
          "snaktype": "value"
        },
        "rank": "normal",
        "type": "statement"
      }
    ],
  },

  // Internal links to this document
  "sitelinks": {
    "cawiki": {
      "site": "cawiki",
      "title": "Ana Mendieta",
      "badges": [],
      "url": "https://ca.wikipedia.org/wiki/Ana_Mendieta"
    },
    "cswiki": {
      "site": "cswiki",
      "title": "Ana Mendieta",
      "badges": [],
      "url": "https://cs.wikipedia.org/wiki/Ana_Mendieta"
    },
    [...]
  }
}
</code></pre>

<p>The database is created with the the notion of "<a href="https://en.wikipedia.org/wiki/Semantic_triple">semantic triples</a>", which was new to us.
The idea being that each <code>Item</code> (corresponding to a Q id (<code>Q463639</code>)) has a bunch of associated <code>Statements</code> via <code>Properties</code> in the form:</p>

<blockquote><p>subject ‚Äî predicate ‚Äî object</p></blockquote>

<p>Which means‚Ä¶</p>

<blockquote><p><code>&lt;this thing&gt;</code> <code>&lt;has some relationship to&gt;</code> <code>&lt;that thing&gt;</code></p></blockquote>

<p>For example‚Ä¶</p>

<blockquote><p><code>Q463639</code> <code>P27</code> <code>Q30</code></p></blockquote>

<p>In plain English‚Ä¶</p>

<blockquote><p><strong>Ana Mendietta</strong> has a <strong>country of citizenship</strong> which is <strong>United States of America</strong></p></blockquote>

<p>In essence, a Wikidata <code>Item</code> is just some structured data around a big bag of triples, like the above.</p>

<a name="Artsy...Wikidata"></a>
<h1>Artsy + Wikidata</h1>

<p>Lucky for this editathon, both <a href="https://www.wikidata.org/wiki/Property:P2042">Artsy Artist ID</a>, and <a href="https://www.wikidata.org/wiki/Property:P2411">TAGP ID</a> were already inside the Wikidata controlled vocabulary of <code>Properties</code>. This mean we could think about how to connect items rather than how we can pitch that is worth connecting them at all.</p>

<p>We used Wikipedia to keep track of all <a href="https://en.wikipedia.org/wiki/Wikipedia:Meetup/NYC/Artsy_ArtAndFeminism">the useful links</a> to share among contributors.</p>

<p>As the majority of us were new to the Wikidata, we scoped our projects to "get something small done." We ended up with three projects on the Wikidata side:</p>

<ul>
<li>Edit some wikidata items manually to understand the process.</li>
<li>Understand QuickStatements in order to do mass-updates of Wikidata items from Artsy data.</li>
<li>Explore using pywikibot to ensure that updated Artsy details can be kept in sync with Wikidata.</li>
</ul>


<a name="Outcomes"></a>
<h1>Outcomes</h1>

<p>We got some changes to Wikidata. üéâ.</p>

<p>In preparing for this we also generated some data on Artists:</p>

<ul>
<li><a href="https://docs.google.com/spreadsheets/d/1bjIKKSHOxR2fJvLgf6yOwuDr3Iqo85hYMDMr4lL7Pxg/edit?usp=sharing">Artsy Female and Nonbinary Emerging Artists</a></li>
<li><a href="https://docs.google.com/spreadsheets/d/1G_wCTrP4WzouxfmZdKzqcIKghJDJdiFrv4xQURxrsbI/edit?usp=sharing">Artsy Female and Nonbinary Artists with "Feminist Art" and "Contemporary Feminist" Genes</a></li>
</ul>


<p>These were generated back in July, so if you're looking for up-to-date data, we recommend using the <a href="https://developers.artsy.net/">Artsy Developer API</a>.</p>

<a name="Updating.Wikidata.with.data.from.Artsy"></a>
<h1>Updating Wikidata with data from Artsy</h1>

<p>After spending some time familiarizing ourselves with the process of manually creating and editing Items, we moved onto some basic <a href="https://tools.wmflabs.org/wikidata-todo/quick_statements.php">QuickStatement</a> updates. QuickStatments are a simple text based interface for updating multiple items and properties at once.</p>

<p>We ended up writing what would be the script for a single data item based on hardcoded values:</p>

<pre><code class="sh"># COMPACT VERSION -- see below for annotated version
CREATE
LAST  Len  "Amina Benbouchta"
LAST  Den  "Moroccan contemporary artist"
LAST  P2042  "amina-benbouchta"
LAST  P106  Q483501  S2042  "amina-benbouchta"
LAST  P106  Q1281618  S2042  "amina-benbouchta"
LAST  P21  Q6581072  S2042  "amina-benbouchta"
LAST  P27  Q1028  S2042  "amina-benbouchta"
LAST  P569  +1963-01-01T00:00:00Z/9  S2042  "amina-benbouchta"

# ANNOTATED VERSION

# create new Item
CREATE

# add a label in English to the last created item
LAST  Len  "Amina Benbouchta"

# add a description in English
LAST  Den  "Moroccan contemporary artist"

# add an Artsy Artist ID
LAST  P2042  "amina-benbouchta"

# add occupation (e.g. artist: Q483501, painter: Q1028181, sculptor: Q1281618, photographer: Q33231)
# and source these statements to Artsy (source 2042)
LAST  P106  Q483501  S2042  "amina-benbouchta"
LAST  P106  Q1281618  S2042  "amina-benbouchta"

# add sex or gender (e.g. female: Q6581072; nonbinary: not in Wikidata yet)
LAST  P21  Q6581072  S2042  "amina-benbouchta"

# add country of citizenship (e.g. USA: Q30, Morocco: Q1028)
LAST  P27  Q1028  S2042  "amina-benbouchta"

# add birthdate (precision: /9=year /10=month /11=day)
LAST  P569  +1963-01-01T00:00:00Z/9  S2042  "amina-benbouchta"
</code></pre>

<p>By the end of the day we were able to enter basic biographical facts from Artsy's CSVs into Wikidata in one fell swoop, by batching up several QuickStatement instructions. In the future, we could write an "Artsy data to QuickStatement" script to handle larger imports.</p>

<p>One of the interesting aspects of looking through the data is that our Artists had a more nuanced set of gender identities than is currently available inside Wikidata's database. We found that we didn't have enough time to address this, but as Wikidata is an on-going project, anyone can add this in the future. If you're looking for a good first foray into Wikidata - this will improve the foundations for everyone.</p>

<a name="Using.pywikibot.to.update.Wikidata"></a>
<h1>Using pywikibot to update Wikidata</h1>

<p>We created a <a href="https://www.wikidata.org/wiki/Wikidata:Pywikibot_-_Python_3_Tutorial">PAWS</a> Python script that would take metadata from the CSVs Artsy provided on Genes and added that data to existing Wikidata documents. You can get our bot <a href="https://github.com/orta/artsy-wikidata-bot">on GitHub</a>.</p>

<p>Most of the work is inside a Jupyter Notebook, which you can get a full preview of <a href="https://github.com/orta/artsy-wikidata-bot/blob/master/Artsy%2BGenes%2Bto%2BWikiData.ipynb">on GitHub</a></p>

<p><img src="/images/editathon/jupyternotebook.png"></p>

<p>We loved the idea of having code showing the incremental process as it's being eval'd. We got the bot to a point where it could edit a Wikidata item based on it data exported from Artsy.</p>

<p>We plan to keep an eye on future efforts to coordinate Wikidata bot development, such as <a href="https://github.com/SuLab/WikidataIntegrator">WikidataIntegrator</a></p>

<a name="Upcoming.ideas"></a>
<h1>Upcoming ideas</h1>

<p>We discussed what Artsy can do next, we have an idea of how we can connect our data to confirmed data on Wikidata by keeping the Wikidata QID inside our databases too. This means that we can safely keep that up to date.</p>

<p>We would love to do this again, it was exciting to have the project introduced to us - and we really get what they're trying to do. We want to host another, and you should come if you're in NYC!</p>

<p>If you're interested in exploring the Artsy Genome database, we recently updated <a href="https://github.com/artsy/the-art-genome-project">The Art Genome Project's Genes and Definitions</a> with all of our genes as a CSV under <a href="https://creativecommons.org/licenses/by/4.0/">CC-A</a>. We'd love to know if you find any interesting uses.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Danger]]></title>
    <link href="http://artsy.github.io/blog/2017/06/30/danger-one-oh-again/"/>
    <updated>2017-06-30T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2017/06/30/danger-one-oh-again</id>
    <content type="html"><![CDATA[<p>Danger came out of two needs. One from the needs of a growing dev team working together full-time, and the other from the needs of a completely asymmetric large Open Source project.</p>

<p>A work environment dev team is a complex place. You naturally grow, and to grow safely you add process. Process is a mixed bag, it's a net benefit at the trade-off of individual's time vs team cohesion. You want to grow your team guided by smart applications of process.</p>

<p>On the other hand, working on a large open source project, it's easy to feel overwhelmed at the amount of work that needs to get done on a daily basis. The growth of your OSS team probably doesn't tie to the amount of work that needs to be done. Especially if you're like me, and you don't want to be maintaining OSS as a 2nd full-time job.</p>

<p>So what do you do? Well in a work environment you don't really have a choice, as a team you hold each other to the rules that you set. In OSS, you sacrifice your spare time or you can find time at work, you could stop or you could burn out.</p>

<p>And this is the environment in which the idea of Danger was incubated.</p>

<p>Today mark version 1.0 of the second version of Danger. I'm going to cover what they are, how they continue to grow and what I see their trajectory as.</p>

<!-- more -->


<a name="Why."></a>
<h1>Why?</h1>

<p>Danger came from a need to customise the GitHub workflow for pull requests. In a work context, we wanted to add process like CHANGELOGs and be more thorough about testing. In Open Source, we needed to stop asking the same things to drive-by contributors. Their patches are valuable for sure, but asking for the same changes each time gets tiring. We want to work at a higher level of abstraction.</p>

<p>In both cases you want a way to give instant feedback for things that are "Unit Tests have failed" or "Code could not compile". However, it's hard to give feedback that says "You have not added a CHANGELOG entry in the right format."</p>

<p>Typically CI would only provide a binary: true or false response to the changes for review. We want a more shades of grey.</p>

<a name="What.does.Danger.do."></a>
<h2>What does Danger do?</h2>

<p>Danger acts as a way of creating unit tests at code review level. It gives you the ability to write tests that say: "has this file changed?", "does the contents of new files include this string?", "does the build log include a warning we know is bad news?" then the results of those tests are moved back into the place you're talking about the code.</p>

<p>To do this, you need to be able to create your own rules. Every team has different dynamics, and while it makes sense to offer a set of a set of standard rules that can work across a lot of projects - I'm pretty sure that the needs of the Artsy engineering team is different from the needs of your team.</p>

<p>Danger runs your code, and provides a set of easy to use APIs for you to build these useful culture rules. You write your rules in code, we call these files Dangerfiles. Similar to how a testing framework would give a set of expectations. The general gist is Danger provides access to:</p>

<ul>
<li>Changes from Git</li>
<li>Changes from GitHub/GitLab/BitBucket</li>
<li>Interacting with Danger</li>
</ul>


<p>By making per-project rules with these APIs, you can cover most rote tasks involved in code review. To make it easy for anyone to run Danger on every pull request, Danger was made to run during continuous integration.</p>

<a name="OK..so..2.versions.of.Danger.."></a>
<h1>OK, so "2 versions of Danger"?</h1>

<p>I first implemented Danger in Ruby. Ruby is a great language for building terminal apps, in the iOS community it's the language in which the largest OSS projects are built in. So, as someone used to building apps in that space, it wasn't really a debate what language to work with.</p>

<p>The Ruby build of Danger is now at 5.x with almost 100 releases, it's a solid exploration into code review automation. Ultimately though, I started to feel three main pain-points:</p>

<ul>
<li><p>At Artsy, we moved our mobile team to React Native, and other teams were also consolidating on JavaScript everywhere. It felt weird using a Ruby inside a strictly JS only context.</p></li>
<li><p>Trying to re-create the environment of a PR was tricky from inside the CI. For example most providers are good at about saving on space and bandwidth during a run, and Danger often has to ruin that in order to replicate the PR locally.</p></li>
<li><p>I wanted to explore server-side Dangerfiles. I wouldn't feel comfortable hosting a server that allows anyone to run their own Ruby code. Ruby isn't built with sandboxing in mind.</p></li>
</ul>


<a name="JavaScript"></a>
<h2>JavaScript</h2>

<p>First I explored the idea of having JavaScript based Dangerfiles inside the Ruby version of Danger. I did this by <a href="https://github.com/danger/danger/pull/422">bridging Danger's Ruby objects into a JavaScript context</a> and allowing bi-directional communication between the two. This handled some of the immediate needs, but proved inadequate when working with JavaScript's simple system library and it ignored all other JavaScript tooling.</p>

<p>After enough time, I came to the conclusion that realistically, to use JavaScript properly, you need node modules and npm.</p>

<p>So 10 months ago I decided it was worth starting from scratch and re-created Danger in JavaScript. I had time to consider what I would do differently, and this time I added one key additional restraints on the system: Data can only come from an API.</p>

<p>This constraint negates one of the key problems with running running a Dangerfile on a server - having to have a copy of the code and the PR's environment.</p>

<p>In addition, JavaScript has a much simpler model for evaluating, importing and exporting code and so whitelisting modules and functions can be feasible for a hosted version of Danger.</p>

<center><img src ="/images/danger/danger.png" style="width:50%"></center>


<a name="L1.0.is.my.middle.name"></a>
<h1>1.0 is my middle name</h1>

<p>Any software project used in production should probably be 1.0, but in addition to production use a library needs documentation to be 1.0.</p>

<p>Calling Danger production ready means doing the entire <a href="http://artsy.github.io/blog/2016/07/03/handling-big-projects/">Defensive OSS</a> process: Documentation, Guides, API Reference, Website and Branding.</p>

<p>Once each version of Danger had started to mature to a point that the user-facing aspect stopped changing I started focusing on the documentation engine and website. In both cases, a considerable amount of documentation is generated from the source code of Danger. I'm a big fan of keeping that inside the source code and building documentation sites which import it directly.</p>

<a name="So.what.can.I.do.with.Danger."></a>
<h1>So what can I do with Danger?</h1>

<p>In one way this is a bit like asking, so what can I test with unit tests? Anything, within the scope of: the PR, build artifacts and introspecting the codebase.</p>

<p>I'll cover a quick API overview, then talk about how you can work with these:</p>

<a name="Git"></a>
<h3>Git</h3>

<ul>
<li>What files have been added, removed or changed.</li>
<li>Changes specific to a file.</li>
<li>Looking into Commits.</li>
<li>Exploring the Diff.</li>
</ul>


<a name="GitHub...GitLab...BitBucket"></a>
<h3>GitHub / GitLab / BitBucket</h3>

<ul>
<li>Access to the PR's JSON representation.</li>
<li>Consistent access for PR body, title, author across all platforms.</li>
<li>Util functions for linking to files.</li>
</ul>


<a name="Danger"></a>
<h3>Danger</h3>

<ul>
<li>Handle running other Dangerfiles.</li>
<li>Handles plugin management.</li>
<li>Provides a set of utility functions that would often get used.</li>
</ul>


<a name="Messaging"></a>
<h3>Messaging</h3>

<ul>
<li>Leave warnings, messages and markdown comments.</li>
<li>Leave errors, marking the build as failed.</li>
<li>Post any of the above of the above inside a file.</li>
<li>Create a GitHub review, and use the above messaging.</li>
</ul>


<a name="Plugins"></a>
<h3>Plugins</h3>

<ul>
<li>Infrastructure for shared rules.</li>
<li>Opens up the ability to validate tricky things with an easy API.</li>
</ul>


<p>The API differs between the JS and Ruby version, not drastically - but there are no plugins for Danger JS yet. That's still a bit away.</p>

<a name="OK..got.it."></a>
<h2>OK, got it.</h2>

<p>Let's cover a few examples of the kind of tests can you write.</p>

<a name="Checking.for.changes.to.a.specific.file"></a>
<h4>Checking for changes to a specific file</h4>

<p>Checking for a CHANGELOG. This was the first rule imagined for Danger, I add it to every project.</p>

<p>The first implementation of this rule can just be a check if the file <code>CHANGELOG.md</code> is modified in any PR, that can then be
revised to also check whether there are git changes related to your app. Then documentation, README, tooling updates
don't require an entry. We also check if the PR title says "trivial" and skip the CHANGELOG check.</p>

<p>If you're interested in standardizing on the <a href="http://keepachangelog.com/en/0.3.0/">keepachangelog.com</a> format there is <a href="https://github.com/dblock/danger-changelog">danger-changelog</a>.</p>

<p>Some other examples around this is pinging specific people when a file has changed, or failing if a file that's never meant
to be modified is changed, warning about potential semantic version updates for changes to specific files.</p>

<a name="Checking.the.results.of.command-line.tools"></a>
<h4>Checking the results of command-line tools</h4>

<p>The Artsy developer blog runs both a spell checker, and a prose linter. These report back on files added or
modified during the PR. As someone known for writing loose and quick, having a machine provide some automatic feedback
makes it easy to not waste my reviewers time.</p>

<p>This is done by the <a href="https://github.com/dbgrandi/danger-prose">danger-prose</a> plugin, which wraps both an <a href="https://github.com/lukeapage/node-markdown-spellcheck">npm module</a> and a <a href="https://github.com/amperser/proselint/">python egg</a>.
The plugin handles installing and running the CLI, then converts the output into markdown for github.</p>

<a name="Handling.build.artifacts"></a>
<h4>Handling build artifacts</h4>

<p>If Danger runs after the build process, you can read build logs to provide better feedback. This can range from taking
the results of a test run and posting what has failed (e.g. <a href="https://github.com/orta/danger-junit">danger-junit</a>), to finding specific strings inside
build logs and highlighting them.</p>

<p>In our native iOS app, when a developer accidentally adds code which accesses the network in a test. That is logged out
during the build. Then later, danger will read the logs to find any mentions of this and post it in the comment.</p>

<a name="PR.Metadata"></a>
<h4>PR Metadata</h4>

<p>Every team's workflow is different, but it's pretty common to use a tool other than code review for keeping track of a project's momentum. You can use Danger to warn people that they haven't included a Trello, or JIRA ticket reference on
every PR.</p>

<p>A similar approach could be to warn if someone is sending a PR to a branch other than the preferred branch. This works
well if you use the git-flow model for branches.</p>

<p>We nearly always add a check to see if someone is assigned to a PR, and warn it it's unassigned in front-end projects.</p>

<a name="Using.the.platform.API"></a>
<h4>Using the platform API</h4>

<p>There's no limits here, by using the API from your platform you can perform any sorts of checks. In the Danger repo
we use the GitHub API to note whether someone is in the Danger org, to remind the core team to invite them to the org
after submitting a PR.</p>

<a name="Introducing.Danger"></a>
<h2>Introducing Danger</h2>

<p>OK, maybe that's got you thinking <em>"ah, I know a process I can automate"</em>.</p>

<p>It can be easy to try and jump straight from no Dangerfile to a many-hundred lined complex set of cultural rules. I'd advise against introducing a long list of rules for Danger all at once. In my experience, gradual integration works better. The entire team may have agreed on the changes upfront, but slower adoption has worked better for teams new to working with Danger.</p>

<p>At Artsy we've found that first just integrating Danger with a single simple rule (like checking for a CHANGELOG entry) then starting to introduce them piece-meal from different contributors has made it easier to go from "Ah, we shouldn't do that again" to "Oh, we could make a Danger rule for that" to "Here's the PR".</p>

<a name="Which.Danger.should.I.use."></a>
<h2>Which Danger should I use?</h2>

<p>This definitely depends on the project, there's a longer discussion <a href="http://danger.systems/js/js-vs-ruby.html">on the site</a> too, but here's the main gist:</p>

<ul>
<li><p><strong>Danger Ruby</strong> is more mature, has more features, a solid plugin eco-system and covers more platforms. It's in a great place and is unlikely to have breaking changes from this point onwards.</p></li>
<li><p><strong>Danger JS</strong> has a bigger potential for growth, is "stable enough", you can create plugins and will be able to do things that the Ruby version could not - eventually. Right now it only works with GitHub.</p></li>
</ul>


<a name="Onwards.and.Upwards"></a>
<h2>Onwards and Upwards</h2>

<p>With the JavaScript version of Danger in a great place ready for production, I can start more serious work on <a href="https://github.com/danger/peril#peril">Peril</a>. Peril is a hosted web-service that runs Dangerfiles against GitHub events, see <a href="https://github.com/danger/peril/blob/master/VISION.md">the VISION.md</a>. Those events span from a new user being created, to a new issue on a repo. Peril lets you run your own complex rules across an entire org. This can be a really powerful way to audit and improve entire-company culture.</p>

<p>We started using Peril in Artsy <a href="https://github.com/artsy/reaction-force/pull/184">last week</a>. So it's starting to become a thing internally. It'll be awesome to explore the idea of org-wide rules. I think we're starting with making sure we assign someone on a PR.</p>

<p>So give Danger a shot, and if you're bold. give <a href="https://github.com/danger/peril#peril">Peril</a> a shot.</p>

<hr />

<p>This post uses the CC license image from <a href="https://twitter.com/CloudyConway/status/880426417024114688">this tweet</a> with some changes to make it fit with the design of the blog. Thanks <a href="https://www.patreon.com/vexorian">Vexorian</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Source FAQ for Engineers]]></title>
    <link href="http://artsy.github.io/blog/2017/01/04/OSS-FAQ/"/>
    <updated>2017-01-04T12:17:00+00:00</updated>
    <id>http://artsy.github.io/blog/2017/01/04/OSS-FAQ</id>
    <content type="html"><![CDATA[<p>We have a lot of Open Source code. For engineers without considerable experience in the open source realm, understanding some of the copyright issues around code ownership can be tricky. I've been working with our CTO <a href="http://artsy.github.io/author/db/">dB.</a>, and our senior counsel <a href="http://www.theartgorgeous.com/yayoi-shionoiri/">Yayoi Shionoiri</a> on creating an open-source FAQ for engineers.</p>

<a name="What.is.Open.Source."></a>
<h3>What is Open Source?</h3>

<p>Open Source code is code that can be freely examined, used, adapted, and shared by all through a license that sets forth these principles.  The only potential limitation that an Open Source license is likely to impose is that future copies of the code (whether in adapted or un-adapted form) be themselves licensed in a manner consistent with the original license.  At Artsy, we are committed to making our engineering work <a href="http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html">Open Source by default</a>.  A list of our Open Source projects can be <a href="http://artsy.github.io/open-source/">found here</a>.</p>

<!-- more -->


<a name="What.is.Open.Source....by.default...."></a>
<h3>What is Open Source ‚Äúby default‚Äù?</h3>

<p>Open Source ‚Äúby default‚Äù means that new projects are started or eventually become Open Source, unless keeping them proprietary represents a significant competitive advantage.</p>

<a name="What.are.the.advantages.to.Open.Source.code."></a>
<h3>What are the advantages to Open Source code?</h3>

<p>Keeping our engineering work Open Source by default allows us to be a thought leader,  attracts and retains the best talent, and also is a great way to produce high quality work -- in other words, it helps to drive and sustain our Quality Worthy of Art, Openness, and People are Paramount values.  However, not everything is or should be Open Source. There <a href="https://www.objc.io/issues/22-scale/artsy/">are many great reasons</a> to be open, but it‚Äôs not a catch all.</p>

<a name="How.does.Open.Source.interact.with.Copyright."></a>
<h3>How does Open Source interact with Copyright?</h3>

<p>Very generally speaking, copyright is the body of law that governs how Artsy upholds its ownership rights over code that an Artsy engineer creates as part of their duties as an Artsy employee, and Open Source describes the way in which Artsy shares this code with the rest of the world.  Put in another way, Artsy engineers develop code as "work for hire" to Artsy, and Artsy shares this code with specific usage and distribution terms through a license attached to it.</p>

<a name="What.s.Inbound.Open.Source.code.vs..Outbound.Open.Source.code."></a>
<h3>What's Inbound Open Source code vs. Outbound Open Source code?</h3>

<p>Inbound Open Source code refers to the use of third party code under an Open Source license for Artsy's products.  Outbound Open Source code refers to the publication of Artsy code.</p>

<p>When we publish Outbound Open Source code, as mentioned before, Artsy has a right to do so because we have the copyright to this code.  We give third parties the right to use the code usually through <a href="https://github.com/artsy/eigen/blob/master/LICENSE">this  type</a> of broad license (<a href="https://tldrlegal.com/license/mit-license">MIT</a>).  (For more on code licenses, see <a href="http://artsy.github.io/blog/2015/12/10/License-and-You/">Orta‚Äôs talk on code licenses</a>.</p>

<a name="What.is.the.credit.on.Artsy.s.Open.Source.code."></a>
<h3>What is the credit on Artsy's Open Source code?</h3>

<p>For Inbound Open Source code, we usually credit the work of external engineers by conforming to their license, and providing attribution inside each source base.  This tends to be generated automatically by project tools, and rarely needs specific attention.</p>

<p>For Outbound Open Source code, we usually credit the work of our Artsy engineers by using attribution changelogs, and by assigning an engineer as a point person for a project.</p>

<a name="How.can.I.use.Open.Source.code.at.Artsy."></a>
<h3>How can I use Open Source code at Artsy?</h3>

<p>When we use Inbound Open Source code, we should always check to ensure that there are no third parties who may have an exclusive right over this code before we include it in our own work.  We should also use standard tools for handling Open Source code to ensure that we comply with the licenses attached to such code.  We do not use code with viral licenses (for e.g., GPL License) or  <a href="https://opensource.org/licenses/">non-OSI approved licenses</a> (for e.g., WTFPL license).</p>

<a name="How.do.I.Open.Source.a.new.project.at.Artsy."></a>
<h3>How do I Open Source a new project at Artsy?</h3>

<p>When creating a new project at Artsy, you must include a license.  We use the <a href="https://opensource.org/licenses/MIT">canonical copy</a> of the MIT license with the copyright holder as shown below.  Ideally, you should ensure that it starts off with a README, continuous integration set up, linters, tests and documentation.</p>

<a name="How.can.I.Open.Source.an.existing.project.at.Artsy."></a>
<h3>How can I Open Source an existing project at Artsy?</h3>

<p>When Open Sourcing existing projects, it's best practice to announce it to the development (and related product teams) and ensure that there is ample time for discussion before moving it.  For example <a href="http://artsy.github.io/blog/2016/09/06/Milestone-on-OSS-by-Default/">see how we migrated the artsy.net</a> website.</p>

<a name="How.does.Artsy.think.about.Artsy.Projects.versus.Personal.Projects."></a>
<h3>How does Artsy think about Artsy Projects versus Personal Projects?</h3>

<p>Engineers have the ability to determine whether work they do is uniquely for Artsy during Artsy work hours (an "Artsy Project") or is a project created on their own time but can be applied and shared with Artsy (a "Personal Project").  If you have questions about whether a particular project should be an Artsy Project or a Personal Project, please discuss with your manager.</p>

<p>From an external consumer‚Äôs perspective, the end result is generally the same as the license by which these code is released should not change.</p>

<p>Examples are found below:</p>

<table>
<thead>
<tr>
<th>Artsy Project </th>
<th> Personal Project </th>
</tr>
</thead>
<tbody>
<tr>
<td><em>Copyright:</em> Art.sy, Inc., 2017 </td>
<td> <em>Copyright:</em> [Developer], Art.sy, Inc., 2017</td>
</tr>
<tr>
<td>Example: <a href="https://github.com/artsy/energy/blob/master/LICENSE#L1">Energy</a> </td>
<td> Example: <a href="https://github.com/orta/ORStackView/blob/master/LICENSE#L1">ORStackView</a></td>
</tr>
</tbody>
</table>


<hr />

<p>I'd like to personally thank <a href="http://gilyehuda.strikingly.com">Gil Yehuda</a> of Yahoo! for answering a lot of our questions, you really helped. For Artsy staff, you can get the living document at the <a href="https://sites.google.com/a/artsymail.com/intranet/team-pages/engineering">Engineering page on Artsy Atlas</a>.</p>
]]></content>
  </entry>
  
</feed>
