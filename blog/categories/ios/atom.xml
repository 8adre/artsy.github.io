<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2015-12-14T19:43:59+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Licenses for OSS Code]]></title>
    <link href="http://artsy.github.io/blog/2015/12/10/License-and-You/"/>
    <updated>2015-12-10T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2015/12/10/License-and-You</id>
    <content type="html"><![CDATA[<p>As a part of our internal Lunch and Learn series, I  gave a talk to our developers with an overview of the different types of source code licenses available.</p>

<p>We always recommend MIT within Artsy, but understanding what the other ones are and <a href="http://artsy.github.io/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy/">why we made</a> the choices we have done is valuable.</p>

<p>Jump <a href="https://www.youtube.com/watch?v=0r7JcN3Q_LY">to YouTube</a> for the video, or click more for a smaller inline preview, as well as all of the speakers notes.</p>

<!-- more -->


<p></div></div><iframe width='100%' height='600' src='https://www.youtube.com/embed/0r7JcN3Q_LY ' frameborder='0' allowfullscreen></iframe><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<h3>Licenses For Code</h3>

<p>Attn:<em>I am not a lawyer</em>, but I have to care about this from an app dev perspective, and a dependency manager perspective.</p>

<p>Recommendation for further reading:</p>

<ul>
<li>http://choosealicense.com</li>
<li>https://tldrlegal.com/</li>
</ul>


<p>We'll talk about 3 types of licenses:</p>

<ul>
<li>Permissive: MIT/BSD, used by jQuery, Rails, Artsy OSS</li>
<li>Mostly Permissive: Apache/Mozzila, used by SVN, Firefox</li>
<li>Copyleft: GPL, used by Git, Linux, Wordpress</li>
</ul>


<h3>Common Components</h3>

<p>All share one important thing:</p>

<ul>
<li>YOU MAY USE THIS</li>
<li>NO WARRANTY</li>
<li>DISCLAIMER OF LIABILITY</li>
</ul>


<p>Which is basically the crux of how we can all actually use and write OSS without ending up bankrupt. E.g. when a major component of your infrastructure "fails" - it's not the fault of the author. Example: <a href="https://en.wikipedia.org/wiki/Shellshock_(software_bug">Shellshock</a>) - no-one tried suing the maintainers of Bash.</p>

<h3>License Free</h3>

<p>By choosing to not include a license, you only applying your copyright to the code. All code is the copyright of someone, because creation of anything is covered by copyright. Copyright is, err, complex. Roughly speaking though, there is no contract between you and someone using your code. This means <em>all</em> of the power is in favour of the library author. A library consumer would need to email the author and ask for permission on a case by case basis, even then there is nothing stopping a developer revoking the ability for you to use their library after the fact. It's also different depending on the country the library author is in. However in the end the default copyright is not a license, so add one.</p>

<p><a href="http://blog.codinghorror.com/pick-a-license-any-license/">This is basically the default license for code. </a></p>

<p>This means that code on a blog could not be safe to use unless they've declared its license, whereas for something like stack overflow all of the contents there are licensed under the Creative Commons. Which I'll talk about later.</p>

<p>Just uploading some code to GitHub actually does put it under a license of sort, which includes the ability for someone to fork and view the code. It's explicit in the GitHub T&amp;C, they could not have those features without it. Other than that though, you offer no contract with the library user.</p>

<h3>OSI</h3>

<p>So when we say Open Source license, we are talking about licenses that come from the Open Source Initiative. They are a pragmatic group who say whether a license should be classed as 'open source' or not. A bit weird, but they generally just debate a lot of the legal stuff in these licenses and try to find holes so that everyone is protected. It's basically a seal of approval. There are very few licenses that are not OSI approved, the one you might know is the WTFPL - which is basically default copyright anyway.</p>

<p>On the mobile team we requested that dependencies of ours convert from WTFPL so that we don’t have the issue mention about the public domain, we as Artsy have little protection against the library authors future wishes.</p>

<h3>Permissive</h3>

<p>What you think of as open source is the modern day permissive license.</p>

<p>These are the least restrictive, and are considered "business friendly." They apply very little rules between author and library consumer.</p>

<p>People use permissive licenses because conceptually they allow the most programmer freedom to use, change and improve a library.</p>

<p>They also protect the author, in the sense that a consumer cannot claim that the author created the product the consumer made. They protect the author from liability.</p>

<h4>The one thing</h4>

<p>For example someone could take your library, and rename it, then apply a different license. Not breaking any rules, unless they ignore attribution.</p>

<p>This happened this year with <a href="https://github.com/Microsoft/WinObjC">WinObjC</a>
Microsoft's version of Objective-C, which also aimed for API compatibility with Apple's developer frameworks. They built it up with a lot of other source code, but didn't provide attribution.</p>

<p>https://github.com/Microsoft/WinObjC/issues/35
https://news.ycombinator.com/item?id=10024377</p>

<blockquote><p>The ONE SINGLE requirement of the Cocotron MIT license is that the license text, including copyright holders, remains in the source. THAT'S IT, can you please manage to do that.</p></blockquote>

<h3>Patently Permissive</h3>

<p>Moving up in terms WRT strength of the contract, there is the permissive+patent libraries. These allow library authors to have patents on the software. This can make it more business friendly, depending on the business goals. The most common are Apache and the Mozilla Public License.</p>

<h3>Viral</h3>

<p>The GPL, and it's crew. Roughly speaking, they say that if you want to include any GPL'd code in your projects, you need to make your entire project GPL. There is an important distinction in the GPL in that version 2, and version 3 differ in important ways. The one that I think is most important is that GPL 3 allows sub-licensing. This means that you can say "I can give Artsy a license for this code under BSD terms", allowing for some flexibility in how you apply the license.</p>

<p>It's considered viral because if you have any GPL code anywhere, then everything becomes GPL.  Rule of thumb is to avoid this license, however I'd like to offer a reason why Artsy might ship GPL code.</p>

<p>On the OSS iOS side, we release all of our apps as MIT. I could be quite worried about people shipping copies of our applications. For example there could be fake versions of the Artsy app on the App Store, or competitors could use it to bootstrap. If I was very, very worried I would ship it as GPL 3 with an MIT sublicense to Artsy. This means that anyone who ships a copy of our app to the app store without our express permission for a sublicense that allows DRM.</p>

<p>Generally though we don’t need to do this because we have the ability to revoke an app’s access to the API, meaning it cannot talk to Artsy, and our apps are pretty useless at that point.</p>

<h3>Creative Commons</h3>

<p>So, the Creative Commons is a license on content like videos, images and corpuses of text. They are not OSI approved, and <a href="https://wiki.creativecommons.org/wiki/Frequently_Asked_Questions#Can_I_use_a_Creative_Commons_license_for_software.3F">actively recommend</a> that people use an OSI license for code. This is because software licenses have more to care about: distribution, compilation  and working with other license / patents. Things that you don't have to deal with WRT other types of content.</p>

<p>All CC-licensed code requires attribution of <a href="http://blog.stackoverflow.com/2009/06/attribution-required/">some sort</a>.</p>

<p>In CocoaPods all the design assets are released under CC, but all the code is BSD.</p>

<h2>Twitter Q &amp; A</h2>

<h3>Can I re-license after the fact?</h3>

<p>So, have you wondered why sometimes you have to sign a CLA ( contributors license agreement ) to work on a repo? Relicensing is one of these things. Let's take 3 examples.</p>

<ul>
<li><p><em>VLC</em> - Wanted to put an app on the app store, VLC was GPL. As each contributor owned their contributions if one single party who had contributed to the codebase didn't agree with putting an app on the store then they couldn't ship. It took an extra year and a half to get VLC re-licensed to get on the store.</p></li>
<li><p><em>Swift</em> - New language by Apple, they <em>specifically</em> ensure that people keep the rights to their contributions. This means Apple are not special. They cannot decide to suddenly switch license if Google decide it to be the new language for Android. There is no self destruct button.</p></li>
<li><p><em>Solaris</em> - When Sun got bought by Oracle a bunch of projects got canned, one of the ways that they were able to do this and to nuke the code was because they owned all the copyrights to every contribution made to the codebases owned by Sun. They closed the source for the entire OS. It was totally within their rights.</p></li>
</ul>


<p><a href="https://news.ycombinator.com/item?id=10669891">Sources</a>, <a href="https://www.youtube.com/watch?v=-zRN7XLCRhc">History of Solaris</a></p>

<h3>Do I need to include a copyright banner on every file?</h3>

<p>No, it's possible that if it's likely that specific files will be used outside of the project ( e.g. your code is not totally atomic ) then it's valuable to note the license multiple times. However as long as a license is shipped with the code then you're good, if that license states something to the effect of “this software and associated documentation files (the "Software")”.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrading to RxSwift]]></title>
    <link href="http://artsy.github.io/blog/2015/12/08/reactive-cocoa-to-rxswift/"/>
    <updated>2015-12-08T12:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2015/12/08/reactive-cocoa-to-rxswift</id>
    <content type="html"><![CDATA[<p>When we <a href="http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/">built Eidolon last year</a>, Swift was still pre-1.0 and we couldn't rely on the wide variety of available Swift libraries we enjoy today. I wanted to build it using functional reactive programming, because that's how I believe <a href="https://realm.io/news/altconf-ash-furrow-functional-reactive-swift/">everyone should write software</a>, but there were no Swift-based FRP libraries at the time. As a compromise, I used ReactiveCocoa's Objective-C API (the Swift API was months away from an alpha).</p>

<!-- more -->


<p>The choice to use an Objective-C API – one that heavily relies on the runtime – limited us in terms of what Swift features we could use. We had a lot of closures use <code>AnyObject!</code> as parameter types, requiring constant checks for <code>nil</code> and conditional casts to specific types. It was a real nightmare. We had a lot of code that looked like this:</p>

<pre><code class="swift">signal.map { object in
    if let castObject = object as? WhateverType {
        return castObject.thingWeAreMappingTo()
    } else {
        return SomeSensibleMissingValue
    }
}
</code></pre>

<p>Swift 2's <code>guard</code> statements helped clean this up, but the fundamental problem was that we were using an FRP library not suited for Swift.</p>

<p>While we had <a href="https://github.com/ashfurrow/Swift-RAC-Macros">built replacements</a> for the Objective-C runtime features that weren't available in Swift, we knew that a migration away from RAC's Objective-C API would eventually be necessary.</p>

<p>I used a bit of down-time recently to tackle the problem, starting with some small bits and pieces before dedicating two weeks to finish it. Here we go!</p>

<h3>Benefits</h3>

<p>The key benefits of using a Swift-based FRP framework include:</p>

<ul>
<li>Using the type-checker to catch bugs at compile-time.</li>
<li>Writing fewer lines of code.</li>
<li>Writing more expressive code.</li>
<li>Having fun with the type checker and protocol extensions.</li>
</ul>


<p>When Apple announced Swift, they stressed how safe of a language it was. Now that we were moving to a Swift-based FRP framework, we would finally benefit from those safety features.</p>

<p>This makes new features easier and faster to build. It gives me more confidence when I make a new deploy that things won't break. And like I mentioned above, it's just a lot more fun to write Swift with Swift-based frameworks.</p>

<h3>Process</h3>

<p>When we wrote Eidolon, ReactiveCocoa was more-or-less the only iOS FRP library around. That's fine, because ReactiveCocoa is <em>awesome</em>. But today, there are a variety of frameworks and <a href="https://ashfurrow.com/blog/reactivecocoa-vs-rxswift/">they're <em>all</em> awesome</a>. So we have a choice to make.</p>

<p>Sticking with ReactiveCocoa would mean that we could make a gradual transition (there's a bridge between the Objective-C and Swift APIs). This is <em>kind of</em> a benefit, but also kind of a drawback. I don't really trust myself enough to move off of Objective-C's API completely if a bridge is there – it's just too tempting to leave some parts of the app using the old API.</p>

<p>So instead I decided to not consider the existing code. I asked myself: "If I were choosing an FRP library today for a <em>brand-new</em> app, which one would I choose?"</p>

<p>The answer to that question is <a href="https://github.com/ReactiveX/RxSwift">RxSwift</a>.</p>

<p>RxSwift is a Swift implementation of the <a href="http://reactivex.io">ReactiveX APIs</a>, which bring a few great benefits. The API is well-defined and unlikely to include breaking changes, there are reference implementations for Rx in other languages, and tutorials/resources for other Rx frameworks apply directly to this library. There is some extra overhead from having to interact with a larger community, and <a href="http://stackoverflow.com/questions/32542846/reactivecocoa-vs-rxswift-pros-and-cons/32581824#32581824">there are technical distinctions</a> that might influence your decision. Ultimately, though, I chose RxSwift because I've found their community much more pleasant to interact with.</p>

<p>I started the process by <a href="https://github.com/artsy/eidolon/commit/8e6e86d733e36d3c0b3db581019d09296d04cd68">removing ReactiveCocoa and adding RxSwift to our Podfile</a>. Of course, that made the <em>entire app break</em>, which was fine.</p>

<p>I was working off a "develop" branch, so having the app in an uncompilable state for a few weeks would be no problem.</p>

<p>Then the remaining process was simple: find a compiler error, fix it, and find a new one. 27 days later, <a href="https://github.com/artsy/eidolon/commit/8e6e86d733e36d3c0b3db581019d09296d04cd68">we merged the changes into master</a>.</p>

<p>The process was prioritized in the following way:</p>

<ol>
<li>Get the app compiling again.</li>
<li>Get the app more-or-less working (no crashes for common use cases).</li>
<li>Get the unit tests compiling again.</li>
<li>Get the unit tests <em>completing</em> without crashing.</li>
<li>Get the unit tests <em>passing</em> (locally and on CI).</li>
<li>Thoroughly test the app to verify it still works properly.</li>
</ol>


<p>We're currently wrapping up the final stage, but I expect to release a new build for production use later this week.</p>

<h3>Biggest Challenges</h3>

<p>The biggest challenges were keeping an eye on the end result. When you go for so long without being able to see the benefits of your work, it's easy to get discouraged.</p>

<p>This is the first major app I've written in Swift with FRP, so there were new patterns and practices I had to learn. Checking in with the RxSwift team helped a lot, with a lot of assistance from <a href="https://twitter.com/bontoJR">Junior</a> in particular. Making the changes in the open also <a href="https://github.com/artsy/eidolon/pull/569#commitcomment-14632425">let others provide feedback on our progress</a>.</p>

<p>One of the biggest challenges was the structure of the existing code. Our bid-fulfillment process shares <em>a lot</em> of state – much of it in ways that we wouldn't write today. But I didn't want to increase the scope of the transition to RxSwift to <em>also</em> include removing all shared state from the app – scope creep is really dangerous when your project already spans weeks. It was hard to resist this temptation, but I feel it worked out for the best.</p>

<h3>Things That Were Easier than Expected</h3>

<p>Things generally went easier than I had anticipated. Using a new library for the first time in production, I had a persistent fear that I would get close to completing the transition, but some fundamental misunderstanding of mine would completely undermine all my work. This turned out to be mild impostor syndrome – with a few small exceptions, the app worked correctly as soon as it compiled 🎉</p>

<p>I tried to get rid of <code>dynamic</code> properties in views, controllers, and view models, but left them on models to use KVO with <code>rx_observe</code>. I tried not to use KVO a lot, and instead rely on <code>Variable</code> properties, which wrap a value in a type that can be observed. I'm still finding a balance between these two approaches, but this is largely a personal preference.</p>

<p>A common pattern became defining a private <code>Variable</code> and a public <code>Observable</code>, which would constrain the state (a common theme in FRP).</p>

<pre><code class="swift">private let _password = Variable("")
var password: Observable&lt;String&gt; {
    return _password.asObservable()
}
</code></pre>

<p><code>_password</code> is now the read/write property accessible only within the type, while <code>password</code> is a publicly read-only <code>Observable</code>. This pattern takes a bit of typing, so I'm still looking for a way to further abstract it. Maybe a Swift preprocessor would help.</p>

<h3>Lessons Learned</h3>

<p>The biggest lesson I learned was not about RxSwift specifically, but more about how to use the type system to <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">stay DRY</a>. For example, I was writing this kind of code in our unit tests <em>a lot</em>:</p>

<pre><code class="swift">expect(try! subject.expiryDatesAreValidSignal.asBlocking().first()) == false
</code></pre>

<p>(By "a lot", I mean that I had to write this code twice before deciding to find a better way.)</p>

<p>So I wrote an extension to the <code>ObservableType</code> protocol that would abstract this unit-testing code into a reusable function and operator.</p>

<pre><code class="swift">func equalFirst&lt;T: Equatable&gt;(expectedValue: T?) -&gt; MatcherFunc&lt;Observable&lt;T&gt;&gt; {
    return MatcherFunc { actualExpression, failureMessage in

        failureMessage.postfixMessage = "equal &lt;\(expectedValue)&gt;"
        let actualValue = try actualExpression.evaluate()?.toBlocking().first()

        let matches = actualValue == expectedValue
        return matches
    }
}

func ==&lt;T: Equatable&gt;(lhs: Expectation&lt;Observable&lt;T&gt;&gt;, rhs: T?) {
    lhs.to(equalFirst(rhs))
}
</code></pre>

<p>So now my unit tests' expectations look like this:</p>

<pre><code class="swift">expect(subject.expiryDatesAreValid) == false
</code></pre>

<p>Nice – way better.</p>

<p>This is just one example – one that <a href="https://github.com/artsy/eidolon/issues/570">we will be moving into its own library</a>.</p>

<p>Swift's type system is really, really powerful. <a href="https://github.com/artsy/eidolon/blob/cb31168fa29dcc7815fd4a2e30e7c000bd1820ce/Kiosk/UIKit+Rx.swift">Here</a> are some RxSwift-specific extensions we added to UIKit, and <a href="https://github.com/artsy/eidolon/blob/cb31168fa29dcc7815fd4a2e30e7c000bd1820ce/Kiosk/App/SwiftExtensions.swift#L22-L56">here</a> are some general Swift extensions that we've found helpful.</p>

<p>There's a danger in going overboard, of course. A few times, I was tempted to make an extension on string-convertible <code>Variable</code>s to make them themselves string-convertible, for example. That might make <em>writing</em> code easier, but its functionality would not be obvious when <em>reading</em> it later on.</p>

<p>I tried to keep changes like this as obvious and simple as possible, and every addition was peer-reviewed by Orta.</p>

<h3>Community Impact</h3>

<p>Throughout the course of the transition to RxSwift, <a href="https://github.com/ReactiveX/RxSwift/pulls?utf8=%E2%9C%93&amp;q=is%3Apr+author%3Aashfurrow">I made a few contributions to the framework</a>, but the things I wanted to add were outside the immediate scope of the project maintainers' vision. Totally understandable. <a href="https://github.com/ReactiveX/RxSwift/issues/265">With their assistance</a>, Orta and I and others helped to create a <a href="https://github.com/RxSwiftCommunity">new organization for community-run, RxSwift-based libraries</a>.</p>

<p>Now RxSwift can stay lean and focused while the community has a dedicated space to improve all of our ideas, together. <a href="https://github.com/RxSwiftCommunity/NSObject-Rx">One library</a> I wrote during this project is already under the organization's umbrella, with <a href="https://github.com/RxSwiftCommunity/contributors/issues/4">another on the way</a>.</p>

<p>Helping to create a new organization gave me an opportunity to practice my community-building skills. It was exciting to <a href="https://github.com/RxSwiftCommunity/contributors">re-apply Moya's contributor guidelines</a> in a new setting, helping to set a positive tone for a growing community. I had a lot of guidance from Orta and Eloy, who of course have <a href="https://cocoapods.org">done this before</a>.</p>

<p>Making positive changes to the developer community – and, on a larger scale, to the world – is something I've <a href="https://ashfurrow.com/blog/building-my-career/">decided to pursue as my career</a>. I wouldn't have come to that conclusion if it weren't for the thoughtfulness and generosity of my colleagues and of the RxSwift community.</p>

<hr />

<p>This transition project has been exciting, but at times it has been exhausting, too. While I'm <a href="https://github.com/artsy/eidolon/pull/569">glad it's over</a>, the past few weeks have impacted my life in a significant – and positive – way. I've never been more excited to be doing what I'm doing, and to be working in the growing open source Swift community. Thank you, everyone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emergence: Code Review]]></title>
    <link href="http://artsy.github.io/blog/2015/11/05/Emergence-Code-Review/"/>
    <updated>2015-11-05T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2015/11/05/Emergence-Code-Review</id>
    <content type="html"><![CDATA[<p>We released the fourth app from the mobile team, <a href="https://github.com/artsy/Emergence/">Emergence</a>, on day one for the new Apple TV and are currently getting around 2k downloads a day. The codebase was created by a single developer, and we didn't want to keep that knowledge siloed. So, I ran an hour long code review session last night where I talked through the codebase, explained why some decisions were made and about the differences between tvOS and UIKit.</p>

<p>Given that I had been asked to write a blog post about tvOS in general, I felt that making the code review public for anyone to watch would be a nice alternative to the usual long-form writing on this blog.</p>

<p>Jump <a href="https://www.youtube.com/watch?v=NErVWhEzIBM">to YouTube</a> for the video, or click more for a smaller inline preview.</p>

<!-- more -->


<p></div></div><iframe width='100%' height='600' src='https://www.youtube.com/embed/NErVWhEzIBM ' frameborder='0' allowfullscreen></iframe><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Work Offline More]]></title>
    <link href="http://artsy.github.io/blog/2015/09/30/Work-Offline-More/"/>
    <updated>2015-09-30T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2015/09/30/Work-Offline-More</id>
    <content type="html"><![CDATA[<p>Want to know what I love writing in a pull request? <em>Sorry this is such a big PR, but I was working offline…</em> It is one of <a href="https://github.com/artsy/Emergence/pull/23">the</a> <a href="https://github.com/artsy/Emergence/pull/39">key</a> <a href="https://github.com/artsy/Emergence/pull/45">reasons</a> I managed to get our <a href="https://github.com/artsy/emergence">Artsy Shows TV</a> app released ahead of schedule with a looming unknown App Store <a href="https://github.com/artsy/Emergence/issues?q=milestone%3A%221.0+Ship+to+Apple%22">deadline</a>. Offering more time for polish like thumbnail image <a href="https://github.com/artsy/Emergence/compare/84855a310d47e071419b52b78978d14d751ec4e0...40966752111a309a20b4878e00a1c8e27cb53261">pre-caching</a>.</p>

<p>During the last week before shipping I was scheduled to get a H1B VISA stamp for my passport, which means a trip to London. London is basically a <strong>million</strong> miles away from where I occasionally live in Huddersfield. So I opted for a coach. On the 5 and a half hours of travel, I had gone from behind schedule to feature complete prototype. On the way back, I had started to remove the word prototype from what we were looking at.</p>

<p>I <em>always</em> optimise to work offline on every iOS project. Here's some tips on how we do it in all our apps.</p>

<!-- more -->


<h3>Easiest way</h3>

<p>Eigen, our biggest app, has a complicated relationship with our API. There are too many networking calls to effectively stub for development in the app, this I know because I wrote <a href="https://github.com/artsy/eigen/pull/575">the PR</a> forcing us to stub all networking in tests.</p>

<p>I found a great workaround though: there is a tool for storing an entire networking session, so that you can use it again and get determinate results called <a href="http://cocoapods.org/pods/VCRURLConnection">VCRURLConnection</a>. This is normally done in tests but it can easily be used in your app code instead.</p>

<p>We already had an admin panel within our app. So I added the ability to start <a href="https://github.com/artsy/eigen/blob/06aeb6f7ce4b95155729aa37c36fddc54767931f/Artsy/View_Controllers/Admin/ARAdminSettingsViewController.m#L171-L206">saving the networking session</a>.</p>

<p><img src="/images/2015-09-30-offline/eigen-admin.png" alt="Eigen Admin Panel" /></p>

<p>When you hit save, every networking request is saved into memory, and then once you hit save, this is stored in a JSON file that the app will use that for all networking data on the next few runs.</p>

<h3>The "requires some work, but is worth it" way</h3>

<p><a href="https://github.com/Moya/Moya">Moya</a> is a networking client we created where stubbed data is a first-class citizen. This means converting your app's networking from "uses the API" to "uses the <a href="https://github.com/artsy/eidolon/blob/master/Kiosk/App/StubResponses.m">locally stored stubbed examples</a>." Is a quick change in your apps code.</p>

<h3>The "let's just get it done" way</h3>

<p>When I was working offline on the coach, I took a technique we use for testing and applied it to our application code. We use an abstraction called network models that separates what you want vs. what the API does to get it. In the case of Emergence I created <a href="https://github.com/artsy/Emergence/blob/18e501a4d6925ea5fb0f35174a6c0c3c96f70533/Emergence/Contexts/Presenting%20a%20Show/ShowNetworkingModel.swift">requests</a> that would pass along stubbed models instead of doing the real work.</p>

<p>It's nothing fancy, but I didn't need too much to work with at this point. It's enough to start building, which is what counts, you can go and test properly once you're online.</p>

<h3>Motivation</h3>

<p>I don't use 3G on my phone, I rely entirely on Wi-Fi for internet access, and don't particularly have a problem with the lack of connection. The outside world is distracting enough. Being able to work offline means I can shut the world out for a while and just focus on getting something done.</p>

<p>It's possible to not just have less distractions, but to be able to work faster. <code>VCRURLConnection</code> and using stubs are faster than normal networking, so you can iterate faster on your app, too.</p>

<p>True to my word, I'm writing this blog post offline, I have 7 hours and 23 more minutes before the plane lands in JFK.</p>

<p>I'm going to use the rest of this time to try ship something hard.</p>

<p><code>&lt;edit&gt;</code>I built this: <a href="https://github.com/artsy/energy/pull/86">artsy/energy/pull/86</a>. <code>&lt;/edit&gt;</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVVM in Swift]]></title>
    <link href="http://artsy.github.io/blog/2015/09/24/mvvm-in-swift/"/>
    <updated>2015-09-24T16:13:00+00:00</updated>
    <id>http://artsy.github.io/blog/2015/09/24/mvvm-in-swift</id>
    <content type="html"><![CDATA[<p>Model View ViewModel has become the default way I write apps on iOS – it makes writing iOS apps a joy. I've written <a href="https://www.objc.io/issues/13-architecture/mvvm/">about it</a> <a href="http://www.teehanlax.com/blog/model-view-viewmodel-for-ios/">again</a> and <a href="https://speakerdeck.com/ashfurrow/reactivecocoa-at-mdevcon-2014">again</a> and <a href="https://leanpub.com/iosfrp">oh my</a>.</p>

<p>But last Autumn, as our team was all-hands-on-deck to wrap up the <a href="http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/">auctions kiosk app</a>, we chose not to use MVVM. Why not?</p>

<p>We were building a <em>new app</em> in a <em>new language</em> using a <em>non-Swift framework</em> for functional reactive programming. I was also teaching colleagues what they needed to know about ReactiveCocoa to help write the app. We used the MVC pattern because the relative cost of MVVM was too high.</p>

<p>"... <em>was</em> ..."</p>

<!-- more -->


<p>Since then, I've been <a href="https://github.com/artsy/eidolon/issues/333">pecking away</a> at converting small view controllers away from MVC, to figure out what MVVM on iOS written in Swift might look like. My goal has been getting ready to cut down our behemoth main view controller and create a view model for it. Before the rewrite, it was nearly 600 lines of code and was responsible for:</p>

<ul>
<li>networking.</li>
<li>syncing auction lot states.</li>
<li>user interaction.</li>
<li>collection view layouts.</li>
<li>image caching.</li>
<li>background-thread data processing.</li>
</ul>


<p>It's quite terrifying now that I think about it!</p>

<p>Well, <a href="https://github.com/artsy/eidolon/pull/503/files">finally I was ready</a>. The view controller is now down to 224 lines, and is responsible for only things like displaying data. Calculating <em>what</em> to display and <em>when</em> to display it is now contained within the view model. In true MVVM form, our view controller doesn't even have direct access to the models it displays!</p>

<p>So what does MVVM in Swift look like? Well, our answer is just that – <em>our</em> answer. Others exist, and they have merits and faults of their own.</p>

<p>I'm not here to preach a definitive definition of MVVM in Swift. Instead, I want to talk about some of the lessons we learnt in the process of building a solution that worked for us.</p>

<hr />

<p>Programming boils down to getting certain bits of code to communicate with other bits in an intelligent way. Software <em>patterns</em> are ways of constraining programmers to make it easier to program.</p>

<p>MVVM, roughly, has the following constraints:</p>

<ul>
<li>Models don't talk to anybody (same as MVC).</li>
<li>View models only talk to models.</li>
<li>View controllers can't talk to models directly; they only interact with view models and views.</li>
<li>Views only talk to the view <em>controllers</em>, notifying them of interaction events (same as MVC).</li>
</ul>


<p>And that's pretty much it. It's not that different from MVC – the key differences are:</p>

<ul>
<li>There's a new "view model" class.</li>
<li>The view controller no longer has access to the model.</li>
</ul>


<p><img src="/images/2015-09-24-mvvm-in-swift/mvvm.png" alt="MVVM Diagram" /></p>

<p>Additionally, MVVM on iOS acknowledges the one-to-one relationship between views and view controllers. I tend to think of them as one entity that just happens to be split across a <code>.swift</code> file and a Storyboard.</p>

<p>The view model's job is to handle all presentation logic. If a model contains an <code>NSDate</code>, the <code>NSDateFormatter</code> to format that date would live in the view model.</p>

<p>View models don't have <em>any</em> access to the user interface. You should not even <code>import UIKit</code> in a view model. Typically, a view controller observes the view model somehow to know when there's new data to display. This can be done through KVO or FRP.</p>

<p>MVVM and MVC share a common weakness: neither defines where the network logic of an app should go. I've put it in the view model for now, but I plan on separating it out into its own object soon. That object will be owned by the view model.</p>

<hr />

<p>So let's talk about some specific challenges we had.</p>

<h2>User Interface Structure</h2>

<p>Part of our user interface consists of a segment control near the top of the screen. The currently selected segment determines the sort order of the collection view cells, as well as the collection view's layout. We had previously defined an enum to store the titles and sort order corresponding to each segmented control; the order of the enum cases implies the order of the controls in the UI.</p>

<pre><code class="swift">enum SwitchValues: Int {
    case Grid = 0
    case LeastBids
    case MostBids
    case HighestCurrentBid
    case LowestCurrentBid
    case Alphabetical
}
</code></pre>

<p>So where does this enum live in MVVM? Since the logic for sorting models, the button titles, and the order of the buttons are all pieces of presentation logic, the enum seems like it belongs in the view model.</p>

<p>However, the decision of which layout for the collection view to use is slightly more nuanced. The layout doesn't affect what data we show the user or how they interact with it; it only affects the visuals how the information is presented. This suggests the logic for deciding layouts might belong in the view controller.</p>

<p>My solution was to put the enum in the view model, and have the view model expose a signal defining which of the two layouts should be used. Based on the selected segment index, the view model decides which layout should be used and sends that value on a signal. The view controller is responsible for mapping that signal into a configured layout, then setting that layout on the collection view.</p>

<pre><code class="swift">// Respond to changes in layout, driven by switch selection.
viewModel.gridSelectedSignal.map { [weak self] (gridSelected) -&gt; AnyObject! in
    switch gridSelected as? Bool {
    case .Some(true):
        return ListingsViewController.masonryLayout()
    default:
        return ListingsViewController.tableLayout(CGRectGetWidth(self?.switchView.frame ?? CGRectZero))
    }
}.subscribeNext { [weak self] layout -&gt; Void in
    self?.collectionView.setCollectionViewLayout(layout as! UICollectionViewLayout, animated: false)
}
</code></pre>

<p>The view controller also uses this signal to define which cell reuse identifier should be used.</p>

<pre><code class="swift">// Map switch selection to cell reuse identifier.
RAC(self, "cellIdentifier") &lt;~ viewModel.gridSelectedSignal.map { gridSelected -&gt; AnyObject! in
    switch gridSelected as? Bool {
    case .Some(true):
        return MasonryCellIdentifier
    default:
        return TableCellIdentifier
    }
}
</code></pre>

<h2>Structuring a View Model</h2>

<p>The most common question from iOS developers about MVVM and FRP concerns how the view model exposes data to the view controller. The view controller needs to be notified about changes to the underlying model, but what mechanism do we use to do this? There are two options:</p>

<ol>
<li>Use (dynamic) properties on the view model, which can be observed using KVO (or wrapped in a signal/sequence using FRP).</li>
<li>Use signals/sequences/futures as properties on the view model, which can be consumed by their corresponding async frameworks.</li>
</ol>


<p>The first option is appealing since it gives your view controller a choice of how to observe the properties. However, I'd recommend against it; Swift doesn't have type-checking on KVO (you need to cast from <code>AnyObject!</code> a lot).</p>

<p>The second option is what I prefer, and it seems the most "Swift" way of doing things. When we do move away from RAC's Objective-C interface, the view model will replace its <code>RACSignal</code> properties with sequences based on Swift generics, which will provide compile-time type-checking 💯</p>

<p>Defining these signals on a view model can be tricky. Swift initializers have <a href="http://ashfurrow.com/blog/swift-initializers/">strict rules</a> around when properties are assigned. The signals need access to the internal state of the view model, so they need to be created <em>after</em> calling <code>super.init()</code>. However, we can't call <code>super.init()</code> until all our properties have been assigned to, including the signal properties.</p>

<p>It's your standard chicken-and-the-egg problem 🐣</p>

<p>I took the easy way out and used implicitly-unwrapped optionals, defined with <code>var</code>, which can be assigned to <em>after</em> the call to <code>super.init()</code>. It's not a perfect solution. We could instead use <code>lazy var</code> properties assigned to self-evaluating closures, or just use computed properties. I'm hoping to explore other options when we move away from RAC 2's Objective-C API.</p>

<h2>Handling User Interaction</h2>

<p>The next problem I had was presenting details based on user interaction. Users tap a button, which is handled in the view controller, which presents the details. However, the view controller should not have access to the models, so how can it configure the details to present them?</p>

<p>My solution took advantage of the interchangeability of Swift functions and closures. First I defined a closure type in the view model.</p>

<pre><code class="swift">typealias ShowDetailsClosure = (SaleArtwork) -&gt; Void
</code></pre>

<p>Then I added a property to the view model and a corresponding parameter to the initializer.</p>

<pre><code class="swift">class ListingsViewModel {
    let showDetails: ShowDetailsClosure

    init(...
         showDetails: ShowDetailsClosure,
         ...
</code></pre>

<p>Next I need to actually call the closure. I defined a function on the view model that the view controller can invoke, passing in the context that's necessary to decide which model's details should be presented. This context is just an index path.</p>

<pre><code class="swift">func showDetailsForSaleArtworkAtIndexPath(indexPath: NSIndexPath) {
    showDetails(sortedSaleArtworks[indexPath.item])
}
</code></pre>

<p>Nice! So now when the user selects a cell, we can call this function on the view model with the index path that the user selected. The view model decides which model to use, and calls the closure.</p>

<p>The final piece of the puzzle is being clever about creating the view model. We need to pass a closure to its initializer, one that shows the model's details. I defined a function on the view controller that matched the <code>ShowDetailsClosure</code> signature.</p>

<pre><code class="swift">func showDetailsForSaleArtwork(saleArtwork: SaleArtwork) {
    performSegueWithIdentifier(SegueIdentifier.ShowSaleArtworkDetails.rawValue, sender: saleArtwork)
}
</code></pre>

<p>And then use lazy loading (discussed below) to call the view model's initializer. I pass in a reference to the above function as the closure parameter.</p>

<pre><code class="swift">lazy var viewModel: ListingsViewModelType = {
    return ListingsViewModel(..., showDetails: self.showDetailsForSaleArtwork, ...)
}()
</code></pre>

<p>So let's review what happens when a user makes a selection.</p>

<p></div></div><a href='/images/2015-09-24-mvvm-in-swift/selection.png'><img src="/images/2015-09-24-mvvm-in-swift/selection.png" title="Selection diagram" ></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Here are the steps:</p>

<ol>
<li>User taps a cell.</li>
<li>A callback on the view controller is invoked with the selected index path.</li>
<li>The view controller tells the view model which index path was selected.</li>
<li>The view model looks up the corresponding model.</li>
<li>The view model invokes the <code>showDetails</code> closure given to it when it was initialized.</li>
<li>The <code>showDetails</code> "closure" performs a segue with the model.</li>
</ol>


<p>It's not an ideal solution since it still exposes the model to the view controller (even under very strict conditions), but it's a reasonable compromise. As we continue to use more view models, I'm curious to see how this solution scales.</p>

<h2>Testing</h2>

<p>Earlier I mentioned the lazy closure property in the view controller. This is a trick that lets the view controller customize the view model by using references to <code>self</code>.</p>

<pre><code class="swift">lazy var viewModel: ListingsViewModelType = {
    return ListingsViewModel(
        selectedIndexSignal: self.switchView.selectedIndexSignal,
        showDetails: self.showDetailsForSaleArtwork,
        presentModal: self.presentModalForSaleArtwork
    )
}()
</code></pre>

<p>The <code>viewModel</code> property is first accessed by the view controller in <code>viewDidLoad()</code>, which means that we can replace the property by a test double any time before that.</p>

<p>The view controller is tested using <a href="https://github.com/facebook/ios-snapshot-test-case">snapshots</a> to verify the user interface hasn't been inadvertently changed. Testing is straightforward:</p>

<ol>
<li>Create a view controller to test.</li>
<li>Create a stubbed view model, customized for each test.</li>
<li>Give the view controller the stubbed view model before <code>viewDidLoad()</code> is called.</li>
<li>Verify the view controller renders correctly.</li>
</ol>


<p>While writing tests, I found it difficult to subclass the existing view model (for stubbing purposes). Since the view model's initializer has side-effects (starting recurring network requests 😬), I can't call <code>super.init()</code>. Instead, I made a <code>ListingsViewModelType</code> protocol. The view controller only interacts with the view model through this protocol – it has no reference to the class itself. Now creating a stubbed view model is as easy as conforming to a protocol.</p>

<p>Seems more "Swift", too.</p>

<p>Now that the view model and view controller are separate objects, we no longer have to test presentation logic in the view controller at all. The view model now takes care of network requests, data processing, etc – this is now all tested <em>independently</em> of the user interface 🎉</p>

<p>In my opinion, the key benefits of MVVM boil down to the following:</p>

<ol>
<li>Separating the view model from the user interface makes it easier to test presentation logic.</li>
<li>Separating the view controller from the presentation logic makes it easier to test the user interface.</li>
</ol>


<hr />

<p>This is only a description of what we've come up with so far. As our community and the Swift language continue to evolve, hand-in-hand, we'll re-evaluate our answer to the question of what MVVM with Swift looks like. For now, I'm quite pleased with the step we've taken, and I'm looking forward to continuing to explore programming patterns in Swift.</p>
]]></content>
  </entry>
  
</feed>
