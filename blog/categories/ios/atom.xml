<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2014-08-11T09:44:17-04:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[Artsy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using CocoaPods Caching with Travis CI]]></title>
    <link href="http://artsy.github.io/blog/2014/08/08/CocoaPods-Caching/"/>
    <updated>2014-08-08T11:46:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/08/08/CocoaPods-Caching</id>
    <content type="html"><![CDATA[<p>As <a href="http://artsy.github.io/blog/2014/08/07/taking-a-snapshot-with-second-curtain/">Ash said earlier</a> we like using Continuous Integration. Today I spent a large amount of time migrating us to use the new CocoaPods caching system in Travis CI. To make up for my lost time I'm passing on what I've learned and also showing how we do CI at Artsy with Objective-C apps. If you're interested in how we do it in Swift, you can just check <a href="https://github.com/artsy/eidolon">Eidolon</a>.</p>

<!-- more -->


<p>First and foremost, this only works if you are paying for Travis CI.</p>

<p>Travis CI recently merged in support for <a href="http://docs.travis-ci.com/user/caching/">Caching of CocoaPods</a> - this is great! By using this, we've reduced our build times from an average of about 10 minutes, to about 7 minutes. It works by using your <code>Podfile.lock</code> as a key to cache your <code>Pods</code> directory, if the lock hasn't changed then there's no need to update the Cache and so <code>pod install</code> is not called on your project. This caused me an issue as the <code>[Project].xcworkspace</code> file that CocoaPods generates was not in source control, and the app wouldn't build.</p>

<p>We use a <a href="https://github.com/artsy/eidolon/blob/master/Makefile">Makefile</a> to separate the tasks required to build, test and deploy an app. The general structure of our Makefile is:</p>

<table>
<thead>
<tr>
<th> Action        </th>
<th> Reason </th>
</tr>
</thead>
<tbody>
<tr>
<td> Constants </td>
<td> A collection of constants that get resued by different make tasks. </td>
</tr>
<tr>
<td> CI Tasks </td>
<td> Separate commands necessary for running Xcode projects from the terminal. </td>
</tr>
<tr>
<td> Actions </td>
<td> Commands that manipulate your project state, or maintainance commands. </td>
</tr>
<tr>
<td> Deployment </td>
<td> Commands to get your app ready for the App Store, or Hockey. </td>
</tr>
</tbody>
</table>


<p>If you don't know the syntax for Make, essentially if it's on the same line you're either setting constants or calling other make commands. If it's on a separate line then you are running a shell command.</p>

<p>This is the <a href="http://orta.io/#folio-header-unit">Artsy Folio</a> Makefile in full:</p>

<p>``` make</p>

<h1>Constants</h1>

<p>WORKSPACE = Artsy Folio.xcworkspace
XCPROJECT = Artsy\ Folio.xcodeproj
SCHEME = ArtsyFolio
CONFIGURATION = Beta
APP_PLIST = Info.plist
PLIST_BUDDY = /usr/libexec/PlistBuddy
TARGETED_DEVICE_FAMILY = \"1,2\"</p>

<p>BUNDLE_VERSION = $(shell $(PLIST_BUDDY) -c "Print CFBundleVersion" $(APP_PLIST))
GIT_COMMIT = $(shell git log -n1 --format='%h')
ALPHA_VERSION = $(BUNDLE_VERSION)-$(BUILD_NUMBER)-$(GIT_COMMIT)</p>

<p>GIT_COMMIT_REV = $(shell git log -n1 --format='%h')
GIT_COMMIT_SHA = $(shell git log -n1 --format='%H')
GIT_REMOTE_ORIGIN_URL = $(shell git config --get remote.origin.url)</p>

<p>DATE_MONTH = $(shell date "+%e %h")
DATE_VERSION = $(shell date "+%Y.%m.%d")</p>

<p>CHANGELOG = CHANGELOG.md
CHANGELOG_SHORT = CHANGELOG_SHORT.md</p>

<p>IPA = ArtsyFolio.ipa
DSYM = ArtsyFolio.app.dSYM.zip</p>

<h1>Phony tasks are tasks that could potentially have a file with the same name in the current folder</h1>

<p>.PHONY: build clean test ci</p>

<h1>CI Tasks</h1>

<p>ci: CONFIGURATION = Debug
ci: pods build</p>

<p>build:
    set -o pipefail &amp;&amp; xcodebuild -workspace "$(WORKSPACE)" -scheme "$(SCHEME)" -sdk iphonesimulator -destination 'name=iPad Retina' build | xcpretty -c</p>

<p>clean:
    xctool -workspace "$(WORKSPACE)" -scheme "$(SCHEME)" -configuration "$(CONFIGURATION)" clean</p>

<p>test:
    set -o pipefail &amp;&amp; xcodebuild -workspace "$(WORKSPACE)" -scheme "$(SCHEME)" -configuration Debug test -sdk iphonesimulator -destination 'name=iPad Retina' | second_curtain | xcpretty -c --test</p>

<p>lint:
    bundle exec fui --path Classes find</p>

<pre><code>bundle exec obcd --path Classes find HeaderStyle
bundle exec obcd --path "ArtsyFolio Tests" find HeaderStyle
</code></pre>

<h1>Actions</h1>

<p>ipa:
    $(PLIST_BUDDY) -c "Set CFBundleDisplayName $(BUNDLE_NAME)" $(APP_PLIST)
    $(PLIST_BUDDY) -c "Set CFBundleVersion $(DATE_VERSION)" $(APP_PLIST)
    ipa build --scheme $(SCHEME) --configuration $(CONFIGURATION) -t</p>

<p>alpha_version:
    $(PLIST_BUDDY) -c "Set CFBundleVersion $(ALPHA_VERSION)" $(APP_PLIST)</p>

<p>change_version_to_date:
    $(PLIST_BUDDY) -c "Set CFBundleVersion $(DATE_VERSION)" $(APP_PLIST)</p>

<p>set_git_properties:
    $(PLIST_BUDDY) -c "Set GITCommitRev $(GIT_COMMIT_REV)" $(APP_PLIST)
    $(PLIST_BUDDY) -c "Set GITCommitSha $(GIT_COMMIT_SHA)" $(APP_PLIST)
    $(PLIST_BUDDY) -c "Set GITRemoteOriginURL $(GIT_REMOTE_ORIGIN_URL)" $(APP_PLIST)</p>

<p>pods: remove_debug_pods
pods:
    rm -rf Pods
    bundle install
    bundle exec pod install</p>

<p>remove_debug_pods:
    perl -pi -w -e "s{pod 'Reveal-iOS-SDK'}{}g" Podfile</p>

<p>update_bundle_version:
    @printf 'What is the new human-readable release version? '; \
        read HUMAN_VERSION; \
        $(PLIST_BUDDY) -c "Set CFBundleShortVersionString $$HUMAN_VERSION" $(APP_PLIST)</p>

<p>mogenerate:
    @printf 'What is the new Core Data version? '; \
        read CORE_DATA_VERSION; \
        mogenerator -m "Resources/CoreData/ArtsyPartner.xcdatamodeld/ArtsyFolio v$$CORE_DATA_VERSION.xcdatamodel/" --base-class ARManagedObject --template-path config/mogenerator/artsy --machine-dir Classes/Models/Generated/ --human-dir /tmp/ --template-var arc=true</p>

<h1>Deployment</h1>

<p>deploy: ipa distribute</p>

<p>alpha: BUNDLE_NAME = 'Folio Î±'
alpha: NOTIFY = 0
alpha: alpha_version deploy</p>

<p>appstore: BUNDLE_NAME = 'Artsy Folio'
appstore: TARGETED_DEVICE_FAMILY = 2
appstore: remove_debug_pods update_bundle_version set_git_properties change_version_to_date</p>

<p>next: TARGETED_DEVICE_FAMILY = \"1,2\"
next: update_bundle_version set_git_properties change_version_to_date</p>

<p>distribute:
  cat $(CHANGELOG) | head -n 50 | awk '{ print } END { print "..." }' > $(CHANGELOG_SHORT)
  curl \
   -F status=2 \
   -F notify=$(NOTIFY) \
   -F "notes=&lt;$(CHANGELOG_SHORT)" \
   -F notes_type=1 \
   -F ipa=@$(IPA) \
   -F dsym=@$(DSYM) \
   -H 'X-HockeyAppToken: $(HOCKEYAPP_TOKEN)' \
   https://rink.hockeyapp.net/api/2/apps/upload \
   | grep -v "errors"</p>

<pre><code>
That gives you a sense of the commands that you can run from the terminal in our projects, next we need to look at the `.travis.yml` file.

``` make
language: objective-c
cache:
  - bundler
  - cocoapods

env:
  - UPLOAD_IOS_SNAPSHOT_BUCKET_NAME=eigen-ci UPLOAD_IOS_SNAPSHOT_BUCKET_PR...

before_install:
  - 'echo ''gem: --no-ri --no-rdoc'' &gt; ~/.gemrc'
  - cp .netrc ~
  - chmod 600 .netrc
  - pod repo add artsy https://github.com/artsy/Specs.git

before_script:
  - gem install second_curtain
  - make ci

script:
  - make test
  - make lint
</code></pre>

<p>This is nice and simple. It was built to use multiple travis build steps. This makes the CI output a lot more readable as an end user. Travis will by default collapse the shell output for different build stages leaving only the <code>script</code> stage defaulting to being exposed. Here is an example of what you see on a failing test:</p>

<center>
<img src="http://artsy.github.io/images/2014-08-08-CocoaPods-Caching/failing_travis_screenshot.png" alt='Travis CI Failure'>
</center>


<p>We use a gem with a binary in <a href="https://github.com/AshFurrow/second_curtain/">second_curtain</a>, and this came with bundler caching issues in Travis. The solution was to ignore bundler and run <code>gem install second_curtain</code> each time. To increase the speed we also ensured that documentation is not being generated. If you are interested in what's going on with the <code>.netrc</code>, read my blog post on <a href="http://artsy.github.io/blog/2014/06/20/artsys-first-closed-source-pod/">Artsy's first Closed Source Pod</a>.</p>

<p>We will continue pushing the state of the art in iOS deployment, in building our own tools and using everything available to increase developer happiness. If you're into this we're always looking to hire people with a good open source track record or street smarts. Here's <a href="https://artsy.net/job/mobile-engineer">the jobs page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taking a Snapshot with Second Curtain]]></title>
    <link href="http://artsy.github.io/blog/2014/08/07/taking-a-snapshot-with-second-curtain/"/>
    <updated>2014-08-07T11:46:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/08/07/taking-a-snapshot-with-second-curtain</id>
    <content type="html"><![CDATA[<p>At Artsy, we try hard to <a href="https://speakerdeck.com/orta/getting-eigen-out?slide=35">test</a>
our iOS applications to ensure that we avoid regressions and have a clearly
defined spec of how our apps should look and behave. One of the core pieces of
our testing setup is <a href="https://github.com/facebook/ios-snapshot-test-case">FBSnapshotTestCase</a>,
a library written by Facebook to compare views at runtime with images of those
views that are known to be correct. If the images differ, the test fails. We
also use <a href="https://travis-ci.org">Travis</a> for continuous integration.</p>

<p>Lately, we've been noticing a friction between the developers on the iOS team
and the tools we're using to test our apps: while Travis allows us to easily
access the logs of test runs, it can only indicate that a snapshot test failed,
not why it failed. That's because the images that are compared are locked on
Travis' machine â we cannot access those images, so we can't see the
differences. This is <em>really</em> promblematic when the tests pass locally but fail
only on Travis.</p>

<!-- more -->


<p>A few weeks ago, <a href="http://twitter.com/orta">Orta</a> and I were discussing this
problem and we came up with a potential solution. Since the images were stored
on disk on Travis' machine, why not just upload them somewhere we <em>can</em> see
them? Like an S3 bucket. We could even generate a basic HTML page showing you
the different test failures.</p>

<p>Time passed and, later on, I had tests passing locally but failing on Travis.
I saw an opportunity to build something new. I'm not a proficient Ruby developer,
but I enjoy learning new things, so I decided to create a Ruby gem that could
fit within our existing testing pipeline. A lot of the structure for the code
came from an existing gem we already use with Travis, <a href="https://github.com/supermarin/xcpretty">xcpretty</a>.
With an example of how gems that support iOS testing are written, I was on my
way to creating my own.</p>

<p>At first, things were very difficult. While I had contributed small patches to
existing Ruby projects before, I had never created a brand new one from scratch.
The existing <a href="http://guides.rubygems.org/make-your-own-gem/">guides</a> were very
helpful, and I found help from the CocoaPods developers when I had questions
about things like the arcane semantics of Ruby's <code>require</code> syntax.</p>

<p>Eventually, I had a working proof-of-concept. Everything seemed ready to go, and
I prepared to incorporate my new tool, which I called <a href="https://github.com/AshFurrow/second_curtain">Second Curtain</a>,
into my pull request on the Artsy repo. But there was a problem.</p>

<p>Second Curtain relies on environment variables to get access to the S3 bucket
where it stores the images. I planned on using Travis' system to <a href="http://docs.travis-ci.com/user/encryption-keys/">encrypt</a>
those credentials. It turns out, for very good reasons, encrypted environment
variables are not available on pull requests created on forks of repositories.
This is a problem because of the way that <a href="http://artsy.github.io/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy/">Artsy uses GitHub</a>.
While it's not a problem for a closed-source repository to have (restrictive)
access to an S3 bucket, it would be irresponsible to expose S3 credentials for
an open-source project. I'm <a href="https://github.com/AshFurrow/second_curtain/issues/5">working</a>
on a solution.</p>

<p>Orta helped with the design aspect of the tool; while uploading the images was
sufficient, we could make the process of seeing the differences between the two
images even easier. He created a <a href="https://eigen-ci.s3.amazonaws.com/snapshots/2014-08-04--15-47/index.html">HTML page</a>
that would allow developers to see the before-and-after versions by moving their
mouse cursor over the different images.</p>

<p><img src="http://static.ashfurrow.com/github/second_curtain.png" alt="Image Diff" /></p>

<p>In the end, I got Second Curtain to work with Artsy's iOS repository and I
discovered the discrepency between the two images: due to a timezone difference
between my computer and Travis', a date was being formatted differently. Not a
difficult thing to fix, but not something I would have ever been able to
discover had I not been able to see the images side-by-side.</p>

<p>So after all that, one line of Objective-C was changed and the tests passed â my
pull request was merged. I learnt a lot about how Ruby developers structure
their code and what tools they use to write software. While I'm happy to return
to iOS apps for a while, it was a great experience and I'm hoping to bring some
of the ideas I discovered writing Ruby back to Objective-C.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aspect-Oriented Programming and ARAnalytics]]></title>
    <link href="http://artsy.github.io/blog/2014/08/04/aspect-oriented-programming-and-aranalytics/"/>
    <updated>2014-08-04T14:52:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/08/04/aspect-oriented-programming-and-aranalytics</id>
    <content type="html"><![CDATA[<p>Analytics are common in iOS applications. They help inform our decisions
about products. Since analytics are so common, Artsy developed a library called
<a href="https://github.com/orta/ARAnalytics">ARAnalytics</a>. This library provides a
single interface to many different backend analytics providers, freeing
developers from having to write code for each of the providers that they're
using.</p>

<p>Let's consider a typical view controller on iOS. View controllers on iOS
represent the glue code between models and views. When a model changes, the view
controller updates the appearance of the UI. Similarly, when the UI is
interacted with by the user, the view controller updates the model. This is the
core of any standard iOS application.</p>

<p>So let's say that a button is pressed. We'll handle that interaction in a
method called <code>buttonWasPressed:</code>. We'll want to update our model, but also to
track the analytics event.</p>

<p>``` objc
- (void)buttonWasPressed:(id)sender
{
    self.model.hearted = YES;</p>

<pre><code>[ARAnalytics event:@"hearted"];
</code></pre>

<p>}
```</p>

<p>Simple enough, but consider that the analytics tracking code doesn't fall within
our definition of a view controller âÂ the button handler just happens to be a
convenient place to put the tracking code. Also consider that <em>every single</em>
button handler is going to have to have similar code implemented.</p>

<h2>There has to be a better way.</h2>

<!-- more -->


<p><a href="http://twitter.com/steipete">Pete Steinberger</a> and <a href="http://twitter.com/orta">Orta Therox</a>
were talking and the topic of <a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">Aspect-Oriented Programming</a>,
specifically in the context of analytics. AOP takes a look at the different
<em>conerns</em> of an application â logical, cohesive units of functionality. While
most programming paradigms, including those used with Objective-C, group and
encapsulate these concerns, there are some concerns that are "cross-cutting"
because they are involved through several other concerns.</p>

<p>Analytics is such a cross-cutting concern. That makes it a prime target for
being abstracted away using AOP. Using <a href="http://albertodebortoli.github.io/blog/2014/03/25/an-aspect-oriented-approach-programming-to-ios-analytics/">another blog post</a>  as an example, we set about <a href="https://github.com/orta/ARAnalytics/pull/74">integrating an AOP-like DSL within ARAnalytics</a>
that would allow you to define all of your analytics in one spot.</p>

<p>The interface would be simple. When providing your API keys to the various
backend services you'd like to use with ARAnalytics, you'd also provide a
dictionary specifying the classes you'd like us to "hook into". Whenever a
selector from an instance of the given class was invoked, we'd execute the
analytics event specified in the dictionary.</p>

<p>Since Objective-C has a dynamic runtime, we could have swizzled the instance
methods on the classes you specified in the dictionary. This gets a little
tricky and represents a lot of work for us. We could directly swizzle the
instance methods on the classes in question, but wrapping parameters of variable
types and in various numbers becomes a chore. If we didn't get it done
perfectly, we'd risk introducing bugs into the entire application.</p>

<p>I wrote a proof-of-concept of analytics using AOP with <a href="http://reactivecocoa.io">ReactiveCocoa</a>.
It worked, but was a little hacky since it involved the swizzling of <code>alloc</code>.
ReactiveCocoa is also a large framework to be included just for the sake of
analytics. Additionally, its interface exposed ReactiveCocoa's <code>RACTuple</code> class,
which smells like a leaky abstraction.</p>

<h2>What could we do?</h2>

<p>Well, about the same time, Pete Steinberger open sourced a new framework just
for AOP called <a href="https://github.com/steipete/Aspects">Aspects</a>. Pete did all the
difficult work of swizzling methods with variable parameter lists, including
wrapping primitive parameters in values.</p>

<p>Pete and I worked together to get Aspects working with ARAnalytics, removing our
dependency on ReactiveCocoa.</p>

<h2>How to Use it</h2>

<p>Using ARAnalytics with the new DSL is super-easy. Just add either <code>ARAnalytics</code>
or <code>ARAnalytics/DSL</code> to your podfile, specifying a version of at least 2.6. Run
<code>pod install</code> and you're ready to get started.</p>

<p>Since all of your analytics are going to be specified in one spot, and that spot
is going to get rather large, I'd recommend creating an Objective-C category on
your app delegate to set up all of your analytics. Then you can call this
<code>setupAnalytics</code> method when your app launches.</p>

<p>``` objc</p>

<h1>import "ARAppDelegate.h"</h1>

<p>@interface ARAppDelegate (Analytics)</p>

<ul>
<li>(void)setupAnalytics;</li>
</ul>


<p>@end</p>

<pre><code>
``` objc


#import &lt;ARAnalytics/DSL.h&gt;

@implementation ARAppDelegate (Analytics)

- (void)setupAnalytics 
{
    [ARAnalytics setupWithAnalytics:@{
        /* keys */
    } configuration:
    @{
        ARAnalyticsTrackedEvents: @[
            @{
                ARAnalyticsClass: MyViewController.class,
                ARAnalyticsDetails: @[
                    @{
                        ARAnalyticsEventName: @"hearted",
                        ARAnalyticsSelectorName: NSStringFromSelector(@selector(buttonWasPressed:)),
                    }
                ]
            }
        ]
    }];
}

@end
</code></pre>

<p>Now our <code>buttonWasPressed:</code> method is <em>very</em> straightforward:</p>

<p><code>objc
- (void)buttonWasPressed:(id)sender
{
    self.model.hearted = YES;
}
</code></p>

<p>The view controller is now <em>only</em> responsible for what it should be responsible
for: mediating interactions between the view and the model. Awesome! Even
cooler, we can provide fine-grain control over which analytics events are
invoked and with what properties they are sent with. Let's take a look.</p>

<p>``` objc
[ARAnalytics setupWithAnalytics:@{
    /<em> keys </em>/
} configuration:
@{
    ARAnalyticsTrackedEvents: @[
        @{
            ARAnalyticsClass: MyViewController.class,
            ARAnalyticsDetails: @[
                @{
                    ARAnalyticsEventName: @"hearted",
                    ARAnalyticsSelectorName: NSStringFromSelector(@selector(buttonWasPressed:)),
                    ARAnalyticsEventProperties: ^NSDictionary <em>(MyViewController </em>controller, NSArray <em>parameters) {
                        UIButton </em>button = parameters.firstObject;
                        NSString <em>buttonTitle = [button titleForState:UIControlStateNormal];
                        return @{
                            @"view_title" : controller.title ?: @"",
                            @"button_title" : buttonTitle ?: @"",
                        };
                    },
                    ARAnalyticsShouldFire: ^BOOL(MyViewController </em>controller, NSArray <em>parameters) {
                        return /</em> selective disable firing of analytics */;
                    }
                }
            ]
        }
    ]
}];</p>

<p>@end</p>

<pre><code>
So you see that even though you're defining your analytics once, at application
startup, you're still able to provide dynamic, per-instance behaviour and event
properties. 

Finally, we've also written support for page views. In a few lines, you can
have every view controller track its page view with ARAnalytics. 

``` objc
[ARAnalytics setupWithAnalytics:@{
    /* keys */
} configuration:
@{
    ARAnalyticsTrackedScreens: @[
        @{
            ARAnalyticsClass: UIViewController.class,
            ARAnalyticsDetails: @[ // default selector on iOS is viewDidAppear:
                @{
                    ARAnalyticsPageNameKeyPath: @"title"
                }
            ]
        }
    ]
}];

@end
</code></pre>

<p>This code will track a page view with the title the same as the view
controller's <code>title</code> property, but just like with events you can provide
fine-grained handling.</p>

<h2>Some Limitations</h2>

<p>There is a <a href="https://github.com/steipete/Aspects/issues/11">limitation</a> on
Aspects that wasn't fully understood until we used the new AOP approach to
analytics in the Artsy app. Selectors can only be "hooked into" once per class
hierarchy. That  means that you cannot create a tracked events for two
difference view controllers, both on the <code>viewWillAppear:</code> selector. This is a
temporary limitation while the Aspects library is being worked on. In the mean
time, you are free to use the <a href="https://github.com/orta/ARAnalytics/tree/ashfurrow-temporary-dsl-fix">original implementation</a>
with ReactiveCocoa, which doesn't have this limitation and which we are using
currently.</p>

<h2>What we Learnt</h2>

<p>AOP is a really cool paradigm that can reduce tight coupling in your code and
increase your overall level of cohesion. Its applications extend beyond just
analytics â any time you have a behaviour that's being exhibited in several
abstractions in your code, you should consider if using AOP to replace that
behaviour might make for cleaner code and more cohesive abstractions.</p>

<p>Finally, I got to make my first significant contribution to open source at
Artsy. It was awesome to be able to collaborate with Pete and Orta on this
project, as well as receive feedback from developers who are already using
ARAnalytics.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ARAnalytics - Analytics for iOS Apps]]></title>
    <link href="http://artsy.github.io/blog/2013/04/10/aranalytics/"/>
    <updated>2013-04-10T17:23:00-04:00</updated>
    <id>http://artsy.github.io/blog/2013/04/10/aranalytics</id>
    <content type="html"><![CDATA[<p>In both my <a href="http://orta.github.com">personal apps</a> and Artsy Folio, I'm always after a deeper understanding of how people use the app. There's three ways to do this: ask users, watch users and track usage. I'd like to talk about the third of these.</p>

<p>We've experimented with quite a lot of analytics tools for the Artsy website, and it seemed fitting to do the same for our mobile app. We wanted the freedom to change the analytics tool without having to change the code, and so <a href="http://github.com/orta/ARAnalytics">ARAnalytics</a> was born.</p>

<!-- more -->


<p>ARAnalytics is the adaption of <a href="https://github.com/jkrall/analytical">Analytical</a> and  <a href="http://segmentio.github.com/analytics.js/">Analytics.js</a> to iOS. By using <a href="http://cocoapods.org">Cocoapods</a> it became possible to set up the entire analytics stack with only a few lines of code in your <code>Podfile</code>.</p>

<p><code>ruby
  pod "ARAnalytics/Crashlytics"
  pod "ARAnalytics/Mixpanel"
</code></p>

<p>The list of supported libraries is pretty vast ( <em>TestFlight, Mixpanel, Localytics, Flurry, Google Analytics, KISSMetrics, Countly, Crittercism, Bugsnag and Crashlytics</em> ) and the API for <code>ARAnalytics</code> tries to bridge any gaps it can find in the implementations.</p>

<p><code>ARAnalytics</code> simplifies the API to two main parts of tracking; user details and events. User details are things like your internal ID for a user, and custom properties like your app's preferences, whilst events are temporal actions that are triggered based off user actions.</p>

<p>There is another tool worth mentioning and that is <a href="http://cocoadocs.org/dosets/Analytics/0.0.5/">Analytics</a> which is a new port of Analytics.js which does a similar <em>simple API to different analytics providers</em> but works by offloading the work to the server. I think there are advantages and disadvantages to both of these approaches, but I think one or the other should cover nearly all use cases!</p>

<p>ARAnalytics is available on Github at <a href="http://github.com/orta/ARAnalytics">orta/ARAnalytics</a> and documented on <a href="http://cocoadocs.org/docsets/ARAnalytics/1.2/">Cocoadocs</a> (which Artsy proudly sponsors!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Musical Chairs]]></title>
    <link href="http://artsy.github.io/blog/2013/03/29/musical-chairs/"/>
    <updated>2013-03-29T16:38:00-04:00</updated>
    <id>http://artsy.github.io/blog/2013/03/29/musical-chairs</id>
    <content type="html"><![CDATA[<p> At Artsy we make Artsy Folio. Folio is an awesome portfolio app that shows our gallery and museum partners their artworks in one place, allows them to easily get information about their inventory and to send works by email to their contacts.</p>

<p>Folio has to deal with large multi-gigabyte syncs in order to operate offline. That makes for a great user experience, but for the developer working on the sync, it's not as pleasant. Combined with our use of Core Data, the appâs maturity, and dealing with data store migrations, things can get hairy. We needed a tool that could freeze and restore app data at will, obviating the need for constant syncing and resyncing.</p>

<p>That's why I built <a href="https://github.com/orta/chairs">chairs</a>...</p>

<!--more-->


<p>Chairs is a gem you can install via <code>gem install chairs</code>. It allows you to stash and replace your current iOS simulator application state. It will grab everything related to the app ( including the current <code>NSUserDefaults</code>) and store it in a named subfolder in your current working directory. No black magic, just lots of copying files.</p>

<p>The command line interface is based on git, so to bring in the current state you run <code>chairs pull [name]</code> and to replace the state you use <code>chairs push [name]</code>. The name is just a label so you can remember which version corresponds to that musical chair. You can get a list of these by doing <code>chairs list</code>, and delete them with <code>chairs rm [name]</code>.</p>

<p>Besides the core functionality, chairs has a little bit of sugar to help you with related tasks. My personal favourite is <code>chairs open</code>; this will just open the folder of the most recently used app so you can go and have a snoop around. Amazing for making sure files are where they say they are or for opening your sqlite database in <a href="http://menial.co.uk/base/">Base</a>.</p>

<p>So <code>gem install chairs</code> or check out the <a href="https://github.com/orta/chairs">README</a> for some more information.</p>
]]></content>
  </entry>
  
</feed>
