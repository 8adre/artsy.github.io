<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Artsy Engineering]]></title>
  <link href="http://artsy.net/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://artsy.net/"/>
  <updated>2015-08-27T20:39:26+00:00</updated>
  <id>http://artsy.net/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift Trek 2: The Wrath of count()]]></title>
    <link href="http://artsy.net/blog/2015/08/27/swift-trek-2-the-wrath-of-count/"/>
    <updated>2015-08-27T05:00:00+00:00</updated>
    <id>http://artsy.net/blog/2015/08/27/swift-trek-2-the-wrath-of-count</id>
    <content type="html"><![CDATA[<p>On Tuesday at our mobile practice standup, I mentioned that I was in-between projects and looking for something to do. Orta suggested migrating Eidolon, the Artsy bidding kiosk app, to Swift 2.</p>

<p>Our CI is <a href="https://github.com/artsy/eidolon/pull/466">broken anyway</a>, so now is the perfect opportunity to make changes that would break CI. Additionally, Swift 2 seems to have more-or-less stabilized in the latest betas, so we don't expect many gotchas leading up to the GM. Finally, this is an enterprise-distributed app, so we don't have to worry about submitting to the App Store using betas of Xcode.</p>

<p>So Swift 2 it is!</p>

<!-- more -->


<p><img src="http://media1.giphy.com/media/7PzALWNJotBxS/giphy.gif" alt="When your boss tells you that you can use the new Swift version." /></p>

<p>I didn't think it would take long, but Orta was less optimistic. I knew that we would need to start with the dependencies, which was tricky since I was updating to the latest beta (only one day old at this point). Our <a href="https://github.com/artsy/eidolon/commit/b77a9c2add780a52aac2c48b9cd3a5eb257ab003#diff-4a25b996826623c4a3a4910f47f10c30R59">Podfile needed some changes</a>, but a lot of this was work I had done before when initially moving Eidolon to CocoaPods frameworks, then to Swift 1.2.</p>

<p>Dependencies are weird. Different libraries take different approaches to Swift changes, so I had to evaluate each one individually. Usually it was a matter of telling CocoaPods to use the branch that the library was using for Swift 2 support. It took about an hour or two, but I got our dependencies working.</p>

<p><img src="http://i.imgur.com/IO1QU8E.gif" alt="When pod update works." /></p>

<p>Two of our dependencies, <a href="https://github.com/Quick/Quick">Quick</a> and <a href="https://github.com/Quick/Nimble">Nimble</a>, were a breeze to update – even though we were using way out-of-date versions. We're really impressed by the well thought-out foundations of their libraries.</p>

<p>The next thing was getting <em>our own</em> code to work. This was a lot more work than I had anticipated, since the automatic migrator in Xcode didn't work.</p>

<p><img src="http://i.imgur.com/abykDJa.gif" alt="When the Xcode migrator fails." /></p>

<p>No problem – a lot of the time, Xcode's autosuggest worked fine, like adding labels to function calls. But it doesn't catch everything. It turns out that a few hours of manually changing <code>count(array)</code> to <code>array.count</code> etc was a great way to zone out and enjoy a summer afternoon.</p>

<p>After the low-hanging fruit, it was time to move on to the more... esoteric problems. For example, Swift was getting confused by the ambiguity of the <code>&lt;~</code> we use for ReactiveCocoa 2.x bindings, vs the <code>&lt;~</code> operator ReactiveCocoa 3.x uses for bindings. Weird.</p>

<p>I tracked down the problem to precedence. ReactiveCocoa's <code>&lt;~</code> has a <a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/5b19af9b2777462e37ead2dfea95e1fea74b7d63/ReactiveCocoa/Swift/Property.swift#L193">precedence of 93</a>. After I changed <a href="https://github.com/ashfurrow/Swift-RAC-Macros/commit/57b041d8a99a3e2a90583709ed7ed91f8ca271b8">ours to match</a>, everything was fine.</p>

<p><img src="http://media3.giphy.com/media/PrAMyghZaYjm/giphy.gif" alt="When your code compiles but you don't know why." /></p>

<p>I noticed a lot of changes surrounding the way Swift handles strings. Apple themselves <a href="https://developer.apple.com/swift/blog/?id=30">have discussed changes</a>, which were fine. I tried to use their <code>.isEmpty</code> property where I could, but I often had to test if a string <em>wasn't</em> empty. <code>!str.isEmpty</code> doesn't really sit well with me, so we used <code>str.isEmpty == false</code>.</p>

<p>However, the problem was further compounded by the changes to <code>UITextField</code>, whose <code>text</code> property now returns an <em>optional</em> string. So there was a lot of this code:</p>

<pre><code class="swift">if (textField.text ?? "").isEmpty == false { ...
</code></pre>

<p><em>Gross</em>. We've since moved onto <a href="https://github.com/artsy/eidolon/pull/498">something nicer</a>, an experiment with Swift 2's power protocols. The above code can now be written as:</p>

<pre><code class="swift">if textField.text.isNotNilNotEmpty
</code></pre>

<p>Very neat.</p>

<p><img src="https://38.media.tumblr.com/tumblr_m8mpwh1gTe1qciljio1_500.gif" alt="It works!" /></p>

<p>While Orta and I reviewed the <a href="https://github.com/artsy/eidolon/pull/496">pull request</a>, we noted some things we liked, and some things we didn't like. I <em>really</em> like that UIKit now uses Objective-C generic NSArrays so I don't have to cast so much. I really <em>don't</em> like that libraries, mostly the ones that we maintain, don't use that feature of Objective-C yet. That's now <a href="https://github.com/artsy/mobile/issues/54">on our todo list</a>.</p>

<p><img src="http://media3.giphy.com/media/52VjAeGgj78GY/giphy.gif" alt="When you put it on your todo list." /></p>

<p>I am amazed at how quickly Swift is changing – as a community, we are still seeing new patterns and methodologies emerge. Not all of them will catch on, of course. But what I'm really excited about is that Swift's engineers are building tools that let us do <em>so much</em>. They aren't making architectural decisions for us, but letting us experiment and discover for ourselves what works and what doesn't. The future of iOS development has never felt more exciting.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa Architecture: Hybrid Apps]]></title>
    <link href="http://artsy.net/blog/2015/08/24/Cocoa-Architecture:-Hybrid-Apps/"/>
    <updated>2015-08-24T00:00:00+00:00</updated>
    <id>http://artsy.net/blog/2015/08/24/Cocoa-Architecture:-Hybrid-Apps</id>
    <content type="html"><![CDATA[<p>As a part of going through the design patterns we've found in the creation of the Artsy iOS apps, I'd like to talk a bit about <em>Hybrid Applications</em>. A hybrid application refers to an app that uses native code and web content intertwined. Our flagship iOS app, <a href="https://github.com/artsy/eigen">eigen</a> is a hybrid app, and it seems to get more and more hybrid-y each release. Let's talk a little bit about the pros and cons of this approach.</p>

<!-- more -->


<hr />

<h1>What is a Hybrid App</h1>

<p>Above is the widest possible definition above, so let's dig in as this can be a contentious. There is a whole spectrum of which an app can be classed as a hybrid app. This ranges from more or less web-tech everywhere to 100% native code like Objective-C / Swift.</p>

<p>A great example of the furthest to the web-side is <a href="https://atom.io">ATOM</a>, the text editor. It's on the extreme side because all of the user interface is built using HTML + CSS, and almost all of the app is in javascript. The trade-off for them is that their developers can easy write cross-platform code, that will work reliably with technology that the vast majority of programmers use. This vastly reduces the barrier to entry for contributors and gives ATOM a really large community of programmers to draw from with respect to extending the app.</p>

<p>An example of a purely native application would be <a href="https://github.com/artsy/energy/">Energy</a>. It's over a hundred thousand plus lines of Objective-C. Yet under the hood, there's definitely some web-tech there. Prior to iOS7 <code>UILabel</code>s, <code>UITextField</code>s and <code>UITextField</code>s <a href="http://www.objc.io/issues/5-ios7/getting-to-know-textkit/">used WebKit for rendering</a>. Not to mention that when a Partner sends an email via Energy, the editor is a <code>UIWebView</code>. However, from the app developer's perspective they are creating native interactions that are consistent with the rest of the operating system's behavior.</p>

<h1>Eigen</h1>

<p>When we started building Eigen, it was very obvious that we had a Sisyphean task ahead of us. We wanted to take the core ideas of the Artsy website,  <em>The Art World Online</em>, and convert it into mobile, <em>The Art World in Your Pocket</em>.</p>

<p>That's not impossible, but the mobile team was a fraction of the Artsy development team. Any new features added to the website would need a mobile equivalent, and given the speed in which web developer's can ship, we'd need to outnumber them to stand a chance at keeping up.</p>

<p>So, we opted for building a highly integrated mobile website at the same time, it would use the same design language as the iOS app and can act as a way for Android devices to access Artsy.</p>

<h1>Techniques for Doing It Well</h1>

<p>So we'll be talking about our <a href="https://github.com/artsy/eigen/blob/6bb44a01c1b23fb8e92c645c3091fd33725743c3/Artsy/View_Controllers/Web_Browsing/ARInternalMobileWebViewController.m">ARInteralMobileViewController</a> - which currently relies on <code>UIWebView</code> but is in <a href="https://github.com/artsy/eigen/pull/606">the process of</a> migrating to <code>WKWebkit</code>.</p>

<ul>
<li><p>Scroll like an <a href="https://github.com/artsy/eigen/blob/6bb44a01c1b23fb8e92c645c3091fd33725743c3/Artsy/View_Controllers/Web_Browsing/ARExternalWebBrowserViewController.m#L39">iOS app</a> by setting the web view's <code>scrollView.decelerationRate = UIScrollViewDecelerationRateNormal</code>.</p></li>
<li><p>Use a simple design language to avoid the <a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/UncannyValley">uncanny valley</a>. Care about using the same <a href="https://github.com/artsy/Artsy-UILabels">typographical rules</a> on everything including tabs, buttons and switches.</p></li>
<li><p>Take over navigation. This means pushing a <a href="https://github.com/artsy/eigen/blob/6bb44a01c1b23fb8e92c645c3091fd33725743c3/Artsy/View_Controllers/Web_Browsing/ARInternalMobileWebViewController.m#L180">new view controller</a> on the navigation stack every time a user intends to change context.</p></li>
<li><p>Take over common OS features. We take over <a href="https://github.com/artsy/eigen/blob/master/Artsy/View_Controllers/Web_Browsing/ARInternalMobileWebViewController.m#L184-L190">social sharing</a>  instead of letting the web site send you to an external page, offering a native share sheet instead.</p></li>
</ul>


<h1>Downsides</h1>

<p>When you choose developer ease over user experience it's important to take into consideration some of the downsides.</p>

<ul>
<li><p>Localisation is difficult. Cocoa offers a great localisation APIs. We can't use them, otherwise half of our app is correctly localised and the rest isn't.</p></li>
<li><p>Conforming to the operating system's Human Interface Guidelines is difficult, as you're relying less on foundations built with this in mind.</p></li>
<li><p>Web tech is slower, and threading APIs are generally poor. A difficulty here is that you are also complicating the technical stack upon which your app sits above. When relying on web-tech in a Mac app, it's common for that trade-off to show itself in excessive memory usage over time.</p></li>
</ul>


<h1>Evolution</h1>

<p>One of the most interesting developments this year in the Cocoa world is Facebook's <a href="https://cocoapods.org/pods/React">react-native</a>, a bridge between web technology and native code that doesn't rely on using the <a href="http://www.quirksmode.org/dom/intro.html">traditional DOM</a> - freeing it from a lot of the common problems found in highly web-based apps.</p>

<p>We're pretty optimistic about it on the mobile team. We're not quite willing to jump head-first into a <a href="http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/">pre-1.0 technology</a> again, but it shows a lot of promise.</p>

<p>The fact that we were able to ship an app at all was because we could build the parts that meant the most to us native, then rely on web technologies to cover the rest of the ground. By being pragmatic in our approach to using web tech, we have the chance to stand on the shoulders of giants.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa Architecture: ARSwitchboard]]></title>
    <link href="http://artsy.net/blog/2015/08/19/Cocoa-Architecture:-Switchboard-Pattern/"/>
    <updated>2015-08-19T00:00:00+00:00</updated>
    <id>http://artsy.net/blog/2015/08/19/Cocoa-Architecture:-Switchboard-Pattern</id>
    <content type="html"><![CDATA[<p>As a part of going through the design patterns we've found in the creation of the Artsy iOS apps, I'd like to introduce the Switchboard pattern. This evolved quite naturally out of <a href="/blog/2015/08/15/Cocoa-Architecture:-Router-Pattern/">ARRouter</a> when applied to generating view controllers instead of API requests.</p>

<!-- more -->


<hr />

<h1>Where we started</h1>

<p>In what must be one of my best named commits, <code>b9ff28</code> aka <em>"CREATING THE VOID"</em> introduced an <code>ARSwitchboard</code> to Eigen. Aside from this being the commit where I could finally write <code>[ARVoidViewController theVoid]</code> it added support for tapping an Artwork on the home-screen and going to another view controller.</p>

<p>We knew up-front that we needed to emulate the website's URL schemes, so we needed to come up with a way to support two ways of loading up a view controller. Here's what it looked like:</p>

<pre><code class="objc">@implementation ARSwitchBoard

+ (void)setupRouter {
    artsyHosts = [NSSet setWithObjects:@"art.sy", @"artsyapi.com", @"artsy.net", nil];

    [RCRouter map:@"/artwork/:id" to:self with:@selector(loadArtworkFromURL:)];
}

+ (void)navigateToURL:(NSURL *)url {
    if([self isInternalURL:url] &amp;&amp; [RCRouter canRespondToRoute:url.path]) {
        [RCRouter dispatch:url.path];
    } else {
//        [self openInternalBrowser:url];
    }
}

+ (BOOL)isInternalURL:(NSURL *)url {
    NSString * host = url.host;
    if(host &amp;&amp; [host hasPrefix:@"www"]) {
        host = [host substringFromIndex:3];
    }

    return (host &amp;&amp; [artsyHosts containsObject:host]);
}

#pragma mark -
#pragma mark Artworks

+ (void)loadAttachmentCollection:(AttachmentCollection *)collection {
    [[ARVoidViewController theVoid] loadArtworkViewWithAttachmentCollection:collection];
}

+ (void)loadArtwork:(Artwork *)artwork {
    AttachmentCollection * collection = [AttachmentCollection collectionWithItems:@[artwork] andIndex:0];
    [self loadAttachmentCollection:collection];
}

+ (void)loadArtworkFromURL:(NSDictionary *)options {
    [[ARVoidViewController theVoid] loadArtworkViewWithID:options[@"id"]];
}

@end
</code></pre>

<p>It shows the pattern's humble origins quite well. The <code>ARSwitchboard</code> provides an API that any object can call, and it will handle presenting the view controller. Offering an API that can either use arbitrary URLs or model objects.</p>

<h2>Where the pattern evolved</h2>

<p>I initially wrote this during my "Class methods look prettier" stage. Our <code>ARSwitchboard</code> has evolved into using instance methods, and it uses a sharedInstance. This makes writing tests for the routing extremely simple for <a href="https://github.com/artsy/energy/blob/master/ArtsyFolio%20Tests/Util/ARSwitchboardTests.m">easy use cases</a>, and possible <a href="https://github.com/artsy/eigen/blob/2eb00a8050a69ab2e05ffeb11a2bbdcbadf9fb7e/Artsy_Tests/App_Tests/ARSwitchBoardTests.m">for the complex</a>.</p>

<p>The pattern was established pretty well by the time it was integrated <a href="https://github.com/artsy/energy/blob/a35969d232d8309fd2aedaae35f2dbdf6d505004/Classes/Util/App/ARSwitchBoard.m">into Energy</a>. Some of it's highlights are:</p>

<ul>
<li><p>The sharedInstance is <a href="https://github.com/artsy/energy/blob/a35969d232d8309fd2aedaae35f2dbdf6d505004/Classes/Util/App/ARSwitchBoard.m#L20-L31">set up</a> with some of the other singletons, from that point on it only acts on properties it owns.</p></li>
<li><p>It deals with setting up entire <a href="https://github.com/artsy/energy/blob/a35969d232d8309fd2aedaae35f2dbdf6d505004/Classes/Util/App/ARSwitchBoard.m#L229-L259">view hierarchies</a>. Not just pushing another view on to a <code>UINavigationController</code>.</p></li>
</ul>


<h2>Internal Routing</h2>

<p>We try to make all view controllers that could represent a URL have two initializers; one that accepts a full model object and another that works off an ID. This means that we can provide as much context as we can initially, but can generate everything at runtime if you've come from a push notification or from another app.</p>

<p>We use an internal routing tool to do the heavy-lifting here, currently this is <a href="https://cocoapods.org/pods/JLRoutes">JLRoutes</a> which we use to map URLs to blocks and dictionaries.</p>

<h2>Difficulties</h2>

<p>With Eigen we're trying to map the whole data-set of Artsy into a single app, which likely an architecture post of it's own. However, one of the issues we're having that really strains this metaphor is ambiguity in the routing system. For us this crops up in two places:
- The URL <a href="https://github.com/artsy/eigen/pull/534">routing structure</a> you're mapping against can change.
- When one route could have <a href="https://github.com/artsy/eigen/blob/2eb00a8050a69ab2e05ffeb11a2bbdcbadf9fb7e/Artsy/App/ARSwitchBoard.m#L156">many types</a> of data.</p>

<p>Handling routes that changes is something we ended up building an <a href="https://github.com/artsy/echo/blob/master/app/api/v1/presenters/route_presenter.rb">API for</a>. It provides a JSON package of routes and names, and Eigen updates its routing internally.</p>

<p>Having one route represent multiple <em>potential</em> view controllers is tricky. We didn't want to introduce asynchronicity to the <code>ARSwitchboard</code>, so we use <a href="https://github.com/artsy/eigen/blob/2eb00a8050a69ab2e05ffeb11a2bbdcbadf9fb7e/Artsy/View_Controllers/Fair/ARProfileViewController.m#L55-L66">polymorphic view controllers</a>. This is a technique where the view controller returned then looks deeper into what it is representing and using child view controllers, embeds the true view controller inside itself.</p>

<h2>Future</h2>

<p>Like all patterns, our <code>ARSwitchboard</code> pattern is evolving. With Eigen we have  a complicated navigation stack, due to supporting app-wide tabs and hosting navigation controllers inside view controllers. This adds additional logic to pretty complicated code when we're dealing with URLs that could be root elements of a tab. So we are planning to eventually move the presentation aspect of the <code>ARSwitchboard</code> into a separate object.</p>

<h2>Alternatives</h2>

<p>We didn't need an <code>ARSwitchboard</code> in Eidolon. Which, so far always seems to be the exception in these architecture pattern posts. Instead we opted for Apple's <a href="http://www.objc.io/issues/15-testing/dependency-injection/#which-di-framework-should-i-use">Dependency Injection tool</a>, Interface Builder + Storyboards. Energy pre-dates Storyboards, and they didn't feel like a good fit for Eigen.</p>

<p>We found storyboards to be a really good replacement to this pattern when you have an established series of steps in your application with some well defined connections.</p>

<p>As an example, our on-boarding process for Eigen probably should have been storyboarded, as it's a series of view controllers pushed incrementally. However given that the rest of Eigen is essentially a web of interconnected view controllers, we'd be abusing the tool.</p>

<h2>Wrap up</h2>

<p>So the Switchboard is a way that we've managed to contain some of the complexity around having web-like abilities to jump between any two view controllers. This pattern makes it easy to stub a switchboard in tests, and to easily test the routing itself.</p>

<p>When I looked through some of the other open source iOS apps to compare the pattern, I couldn't find anything similar. So if you do have something similar, you should probably Open Source your app ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa Architecture: ARRouter]]></title>
    <link href="http://artsy.net/blog/2015/08/15/Cocoa-Architecture:-Router-Pattern/"/>
    <updated>2015-08-15T00:00:00+00:00</updated>
    <id>http://artsy.net/blog/2015/08/15/Cocoa-Architecture:-Router-Pattern</id>
    <content type="html"><![CDATA[<p>I want to talk about a pattern that we've been using for the last few years on the Artsy Mobile team. This pattern pre-dates me joining Artsy by a few weeks, and was introduced into our codebase by <a href="http://90wpm.com">Ben Jackson</a>, this was the <code>ARRouter</code>'s first method:</p>

<pre><code class="objc">  + (NSURL *)newOAuthURLWithUsername:(NSString *)username password:(NSString *)password {
      NSDictionary *params = [[NSDictionary alloc] initWithObjectsAndKeys:
                              username, @"email",
                              password, @"password",
                              ARAuthClientID, @"client_id",
                              ARAuthSecret, @"client_secret",
                              @"credentials", @"grant_type",
                              nil];
      NSString *url_string = [[NSString alloc] initWithFormat:@"%@%@", AROAuthURL, [params queryString]];
      NSURL *url = [ARRouter newURLWithPath:url_string];
      [url_string release];
      [params release];
      return url;
  }
</code></pre>

<p>Yep, that's pre-ARC, pre-Dictionary Literals, memory-managed code. We took this pattern and rolled with it for the next 4 years, this article is about where we've taken it.</p>

<p>Within Eigen, <code>ARRouter</code> is one of our <a href="https://github.com/artsy/eigen/blob/904e8abfc11ce6ea4b6e81f0e02684b755a280c3/Artsy/Networking/ARRouter.m">biggest classes</a>, coming in at almost 1,000 lines of code. Whereas in Energy, it sits at a <a href="https://github.com/artsy/energy/blob/e51529250ede359c781042f222d5836eb9e8a979/Classes/Util/App/ARRouter.m">more reasonable</a> 300 lines. Eidolon does not have an ARRouter, what gives?</p>

<!-- more -->


<hr />

<h2>Pattern Evolution</h2>

<p>We started out with a Router object as being something that can take a model object, and return a <code>NSURL</code> corresponding to a server side end-point.</p>

<p>This worked pretty well, we shipped a 1.0 of Energy with this pattern. However, it become obvious that we were putting a lot of extra knowledge about the type and the parameters of request into classes whose responsibility was not generating a route. For example, user account creation, and user account deletion would use the same <code>NSURL</code> but have different HTTP methods.</p>

<p>We migrated our networking stack to using AFNetworking <code>1.0</code>, and started using CocoaPods instead of manually dragging and dropping code. With this in mind, we improved on the pattern and started returning <code>NSURLRequest</code>s which better encapsulate the server end-point request we were trying to map in the Router.</p>

<p>The pattern evolved when mixed with a <a href="http://cocoadocs.org/docsets/AFNetworking/1.3.4/Classes/AFHTTPClient.html">AFHTTPClient</a> to act as the base URL resolver, allowing us to easily switch between staging and production environments, and as a central point for hosting all HTTP headers. This meant it was trivial to generate authenticated <code>NSURLRequest</code>s.</p>

<p>As it is presently, this pattern is working. We've just wrapped up a new Pod, <a href="https://github.com/artsy/Artsy_Authentication">Artsy Authentication</a>. It's a library that has an <code>ARRouter</code> that behaves <a href="https://github.com/artsy/Artsy_Authentication/blob/master/Pod/Classes/ArtsyAuthenticationRouter.h">exactly like above</a>. We continue to build new apps with the pattern.</p>

<h2>Siblings</h2>

<p>This pattern is standing the test of time, but that doesn't mean we're not actively trying to experiment within the domain. There are three interesting offshoots from our work on <code>ARRouter</code> that are worth talking about.</p>

<h4>Got the Routes like Swagger</h4>

<p>The difference between Eigen's <code>ARRouter</code> and Energy's <code>ARRouter</code> is pretty simple. Eigen's networking scope is an order of magnitude larger. This is a reflection on the varied data that Eigen is interested in, while Energy has a tight scope on specifically Artsy Parter related data.</p>

<p>During the new year of 2015, I explored the <a href="https://github.com/orta/GotTheRoutesLikeSwagger">idea of programmatically generating</a> an <code>ARRouter</code> as a CocoaPod, and then using CocoaPods' subspecs to make it easy to define what collections of end-points you were interested in. This project is based on a standard in which an API is documented, <a href="http://swagger.io">Swagger</a>. This meant as an API consumer, I can generate the types of <code>NSURLRequest</code>s I would require from the API itself. It created files that looked like:</p>

<pre><code class="objc">// Generated by Routes Like Swagger - 31/12/14

@interface ARRouter (User)

/// Retrieve a user by id.
/// @return URLRequest for /api/v1/user/{id}.{format}

- (NSURLRequest *)getUserWithID:(NSString * )slug;

/// Update an existing user.
/// @return URLRequest for /api/v1/user/{id}.{format}

- (NSURLRequest *)updateUserWithID:(NSString * )slug;

... [snip] ...

@end
</code></pre>

<p>This was a pretty nice expansion of the pattern, but overall felt a bit over-engineered and so, it was left as just an experiment.</p>

<h4>Moya</h4>

<p>When we started an entirely fresh application, we noted down all the networking-related pain points felt from Eigen and Energy. The Router pattern was pretty good, but we were finding that we were having problems with the API consuming part of the <code>NSURLRequest</code>s. Mainly, a difficulty in testing, an inconsistency in how we would perform networking and that it didn't feel declarative.</p>

<p>Moya is our attempt at fixing this. I won't go into depth on what Moya is, we've <a href="/blog/2014/09/22/transparent-prerequisite-network-requests/">written articles</a> on this already. The part that is interesting is that it obviates an ARRouter by using a collection of Swift enums - forcing developers to include all necessary metadata an an end-point.</p>

<h4>HAL, and API v2</h4>

<p>The Router pattern relies on the idea that you know all the routes ahead of time, and add support for them as you build out each part of the app. <a href="http://stateless.co/hal_specification.html">HAL, a Hypermedia Application Layer</a> - can be approximated as being a self describing API. dB. wrote about it in <a href="/blog/2014/09/12/designing-the-public-artsy-api/">this blog post</a>.</p>

<p>This means that you ask the API how to get certain bits of data, and it will describe the ways in which you can access it.</p>

<p>Artsy's future APIs are using this, and the Router pattern is, more or less, totally deprecated in this world. This is what an artwork's JSON data looks like in v2:</p>

<pre><code class="json">{
  "id": "4d8b92bb4eb68a1b2c00044a",
  "created_at": "2010-11-15T16:32:38+00:00",
  "updated_at": "2015-08-16T09:26:26+00:00",
  "name": "Jeff Koons",
  "sortable_name": "Koons Jeff",
  "gender": "male",
  "birthday": "1955",
  "hometown": "York, Pennsylvania",
  "location": "New York, New York",
  "nationality": "American",
  "_links": {
    "curies": [
      {
        "name": "image",
        "href": "https://d32dm0rphc51dk.cloudfront.net/Uqad2mGhbNGhAUgb8bUvIA/{rel}",
        "templated": true
      }
  ],
  "thumbnail": {
    "href": "https://d32dm0rphc51dk.cloudfront.net/Uqad2mGhbNGhAUgb8bUvIA/four_thirds.jpg"
  },
  "image:self": {
    "href": "{?image_version}.jpg",
    "templated": true
  },
  "self": {
    "href": "https://api.artsy.net/api/artists/4d8b92bb4eb68a1b2c00044a"
  },
  "permalink": {
    "href": "http://www.artsy.net/artist/jeff-koons"
  },
  "artworks": {
    "href": "https://api.artsy.net/api/artworks?artist_id=4d8b92bb4eb68a1b2c00044a"
  },
  "published_artworks": {
    "href": "https://api.artsy.net/api/artworks?artist_id=4d8b92bb4eb68a1b2c00044a&amp;published=true"
  },
  "similar_artists": {
    "href": "https://api.artsy.net/api/artists?similar_to_artist_id=4d8b92bb4eb68a1b2c00044a"
  },
  "similar_contemporary_artists": {
    "href": "https://api.artsy.net/api/artists?similar_to_artist_id=4d8b92bb4eb68a1b2c00044a&amp;similarity_type=contemporary"
  },
  "genes": {
    "href": "https://api.artsy.net/api/genes?artist_id=4d8b92bb4eb68a1b2c00044a"
  }
  },
  "image_versions": [
    "four_thirds",
    "large",
    "square",
    "tall"
  ]
}
</code></pre>

<p>You can see that via the _links section, curies and self-referential urls, you can build network client which traverses the API without built-in implicit knowledge.</p>

<p>It's a really exciting pattern, and as client developers, we can work on improving standard API clients that work on all HAL APIs. Instead of something specific to Artsy's API. A lot of the most interesting work in the Cocoa space has been done by Kyle Fuller with <a href="https://cocoapods.org/pods/Hyperdrive">Hyperdrive</a>.</p>

<h3>Wrap Up</h3>

<p>Given that we're not writing applications against the v2 API, yet. The Router pattern is working fine for us at Artsy. It can be a really nice way to abstract out a responsibility that may currently be sitting inside a very large API client that might be worth extracting out.</p>

<p>Let us know what you think, send tweets to <a href="https://twitter.com/ArtsyOpenSource">@ArtsyOpenSource</a> on twitter. Ps. it's pronounced "rooter".</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Peer Lab]]></title>
    <link href="http://artsy.net/blog/2015/08/10/peer-lab/"/>
    <updated>2015-08-10T10:57:00+00:00</updated>
    <id>http://artsy.net/blog/2015/08/10/peer-lab</id>
    <content type="html"><![CDATA[<p>When I was living in Amsterdam, I participated in plenty of <a href="https://appsterdam.rs">Appsterdam</a> events. Things like the weekly Meeten en Drinken. I even helped lead a class in Swift. One of the events I liked the most was called Peer Lab, organized every Saturday morning by <a href="https://twitter.com/samuelgoodwin">Samuel Goodwin</a>.</p>

<p>The idea of Peer Lab is pretty simple, but also somewhat profound: developers gather in a physical space to work on things. If someone has a question, they ask the group. If you can help, you offer assistance. The goal is to foster a collaborative learning environment where everyone feels fulfilled.</p>

<!-- more -->


<p>Samuel held Peer Lab on Saturday mornings to dissuade recruiters from attending. The café where we met had wifi and good coffee, which is all you really need when you're trying to get something accomplished on a Saturday morning.</p>

<p></div></div><a href='http://photos.ashfurrow.com/autumn-in-amsterdam'><img src="/images/2015-08-10-peer-lab/amsterdam.jpg" title="Amsterdam" ></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Before I moved to New York, I talked to Orta about organizing something similar at the Artsy offices. He was very receptive and excited to see it happen. I would be there every Saturday from 10:30-12:30 to host, and Artsy would provide the space, the wifi, and some free coffee and snacks. Pretty minimal costs. Orta offered the <a href="http://www.meetup.com/CocoaPods-NYC/events/222362372/">CocoaPods NYC meetup group</a> as a place to promote the event. We've also been mentioning it to people we meet at other tech events in New York.</p>

<p>It's been about six months, and I feel that the Peer Lab has been a fantastic success. Every week, I get to meet developers – some regulars and some newcomers. We sit around, talk shop, code, and hang out until pizza arrives for lunch.</p>

<p>From my perspective, it's been great. I get to meet other developers in a really chill setting, and it gets me out of the house early on Saturday. It sets an awesome tone for the rest of the weekend.</p>

<p></div></div><a href='https://instagram.com/p/5dlU_MyORN/'><img src="/images/2015-08-10-peer-lab/coffee.jpg" title="Nothing like a cup of coffee" ></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Everyone seems to have a good time – people meet, chat, work away on their projects or open source or whatever. Attendance includes iOS experts, iOS beginners, and everyone in between. Non-iOS developers are always welcome, but the CocoaPods branding – and the network of people Orta and I know – make it somewhat iOS-centric. We're working on that.</p>

<p>We've been doing our best to create an inclusive environment, with an emphasis placed on <a href="http://cocoapods.org/legal">CocoaPods' Code of Conduct</a>. Importantly, the event creates a space where developers can meet, work, and socialize outside of the regular alcohol-soaked meetup scene. There's nothing wrong with booze at tech meetups, but it's nice to have a space where people can socialize outside that context.</p>

<p>The Peer Lab is a cost-effective way for Artsy to get respect from the NYC developer scene. This is good for <a href="http://ashfurrow.com/blog/sharing-is-selfish/">all manner of reasons</a>, and it only costs a pizza every week.</p>

<p></div></div><a href='https://instagram.com/p/31tKTiGZVC/'><img src="/images/2015-08-10-peer-lab/classroom.jpg" width="1280" title="The Classroom at Artsy" ></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>So I'm happy, the people who attend are happy, and Artsy is happy.</p>

<p>But there's a problem.</p>

<p>Not everyone can make it to Artsy's lower Manhattan office every Saturday morning. Some developers live too far away, or have family/work obligations Saturday morning.</p>

<p>...</p>

<p>I want to see more Peer Labs pop up across New York, and across the world. I want you, reader, to consider starting one. It's super easy to do, I promise!</p>

<p>You don't even need a company or sponsor to organize something like this. You'll be surprised how easy it is.</p>

<p>I have a few friends living near Toronto that get together weekly at a café to work together. They tweet about it and invite others. It's nothing formal, but it's valuable time for them.</p>

<p>A Peer Lab by any other name is still an awesome idea.</p>

<p>If you <em>are</em> a company, and you're looking for an easy way to meet talented developers, hosting or sponsoring a Peer Lab is definitely worth considering. There are a <em>tonne</em> of meetups in tech, but most revolve around evening drinks, maybe pizza, maybe a talk. A Peer Lab can help you stand out – even people who don't attend are thinking "oh, that's cool."</p>

<p>Nice job, company.</p>

<p></div></div><a href='https://instagram.com/p/yNNXtKJqrk/'><img src="/images/2015-08-10-peer-lab/couch.jpg" width="1280" title="Bart the Art Plant" ></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>How to Peer Lab in four simple steps:</p>

<ol>
<li><strong>Pick a Time</strong>. When are <em>you</em> free to do this? Do you like working in the evenings? Awesome! Do it then. Are Sunday afternoons your jam? Sweet. Whenever works for you.</li>
<li><strong>Find a Space</strong>. This is easier than it sounds, trust me. As an organizer, you need a space that's convenient <em>for you</em>. I use my workplace because I live nearby. Samuel used a café by his apartment. Anywhere that has wifi. Pick a place that works for your time – for example, if you're meeting in the morning, a place with coffee is a good idea.</li>
<li><strong>Let the World Know</strong>. Tweet it, send it to some friends, whatever works. You could ask your employer to pay for a Meetup account. Send details to popular developers in your city and ask them to help spread the word 🎉</li>
<li><strong>Show Up</strong>. Most of success is just showing up. At the very least, you've got a nice time to jam every week, and hopefully you'll meet some other people to jam with.</li>
</ol>


<p>Keep things as simple as possible so Peer Lab stays something fun that you look forward to, and doesn't become a chore. Like I said, six months in and I still love it.</p>

<hr />

<p>Peer Lab is a fun and rewarding activity. From my perspective, from attendees' perspectives, and from Artsy's perspective. It's simply awesome.</p>

<p>Whether you're a developer or a company, an expert or a beginner, I highly encourage you to start one of your own.</p>

<p></div></div><a href='https://ortastuff.s3.amazonaws.com/gifs/three-hands.gif'><img src="https://ortastuff.s3.amazonaws.com/gifs/three-hands.gif" width="1280" title="Thumbs Up" ></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>
]]></content>
  </entry>
  
</feed>
