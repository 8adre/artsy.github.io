<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2020-02-28T19:50:52+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deploying canaries with auto]]></title>
    <link href="http://artsy.github.io/blog/2020/02/20/deploying-canaries-with-auto/"/>
    <updated>2020-02-20T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2020/02/20/deploying-canaries-with-auto</id>
    <content type="html"><![CDATA[<p>Coordinating changes across many packages in the node ecosystem can be quite the challenge. You can use <code>npm link</code>
or <code>yarn link</code> to create a symlink of the package you're developing on into another package, but it
<a href="https://github.com/yarnpkg/yarn/issues/1761#issuecomment-259706202">has some drawbacks</a>. If you're doing local
development and need to rapidly see updates and <code>yarn link</code> isn't working out there's always tools like
<a href="https://github.com/whitecolor/yalc#yalc">yalc</a> to help you out. That's really only for local development though.</p>

<p>What if you need to test packages together in a staging environment? Generally the approach would to be to deploy a
<a href="https://martinfowler.com/bliki/CanaryRelease.html">canary</a> version to npm that you can use in your staging
environment. I'll go over how to do that and how Artsy automates it.</p>

<!-- more -->


<p>Publishing a canary isn't necessarily very hard. It's just a regular publish to npm with a few more steps.</p>

<p>For example, if we were wanting to publish a canary version of <code>@artsy/reaction</code></p>

<ol>
<li>Update <code>package.json</code>, set version to a canary version, e.g. <code>2.0.0-canary-&lt;PR#&gt;</code>, <code>3.1.5-canary-&lt;PR#&gt;</code>, ...</li>
<li>Run <code>npm publish --tag canary</code> in <code>reaction</code> to publish the package under the canary tag</li>
<li>Run <code>yarn add @artsy/reaction@canary</code> to install canary package in the consuming system</li>
</ol>


<p><em>Tip: Running <code>npm dist-tag ls</code> can be helpful to see what tagged packages are available</em></p>

<p>For a lot of people, that'd be enough. End blog post. Here at Artsy, we like things to be a little more
frictionless.</p>

<p>We're already big fans of <a href="https://github.com/intuit/auto">Auto</a>, Intuit's tool for automatically deploying
releases on PR merges. Orta wrote an awesome blog post on how we
<a href="https://artsy.github.io/blog/2019/01/03/label-based-prs/">migrated to auto</a> from semantic-release a while back.</p>

<p>As a short recap, <code>Auto</code> makes the deployable units of a package be a PR instead of a commit. It uses labels like
<code>Version: Major</code>, <code>Version: Minor</code>, etc to determine how the PR will affect the package version. When a PR is
merged it'll automatically cut a released based on that label.</p>

<p>As a testament to how awesome <code>Auto</code> is, it already supports
<a href="https://intuit.github.io/auto/pages/generated/canary.html">canary deployments</a> out of the box!</p>

<p>Essentially when we're on a branch that isn't master our CI runs this command:</p>

<pre><code>auto canary
</code></pre>

<p>and auto takes care of publishing a canary version to NPM <em>and</em> updating the PR description with the version and
instructions on how to use it.</p>

<p>You can <a href="https://github.com/artsy/reaction/pull/3168">check out the PR</a> where I enabled it on reaction to see it in
action. The CI configuration itself is layered behind some
<a href="https://circleci.com/docs/2.0/orb-intro/">CircleCI Orb</a>s. You can find all that configuration in
<a href="https://github.com/artsy/orbs">artsy/orbs</a> if you're curious.</p>

<p>Ultimately the culmination of this work means that every PR to a library at Artsy gets a canary. It's incredibly
simple to test changes in another system now.</p>

<p>There is, however, one caveat. Being as canaries are being deployed to NPM, they need our NPM token. We can't just
share that with everyone, so this functionality doesn't work on forks. Given how CircleCI works, this includes
forks from folks who even have write access to the repository. We're thinking about how to solve that problem but
that'll be another blog post for another day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Releasecop Tracks Stale Releases]]></title>
    <link href="http://artsy.github.io/blog/2015/09/01/releasecop-tracks-stale-releases/"/>
    <updated>2015-09-01T17:30:00+00:00</updated>
    <id>http://artsy.github.io/blog/2015/09/01/releasecop-tracks-stale-releases</id>
    <content type="html"><![CDATA[<p>Artsy practices a sort of <a href="http://en.wikipedia.org/wiki/Continuous_delivery">continuous delivery</a>. We keep release cycles short and the process of reviewing, testing, and deploying our software as reliable, fast, and automated as possible. (This blog has touched on these practices <a href="http://artsy.github.io/blog/categories/testing/">multiple</a> <a href="http://artsy.github.io/blog/categories/continuous-integration">times</a>.)</p>

<p>Usually, commits that have been reviewed and merged are immediately built and tested. Successfully built versions of the codebase are often automatically deployed to a staging environment. On an automated or frequent-but-manual basis, that version is deployed to a production environment. Thus, commits form a pipeline:</p>

<ul>
<li>From developers' working branches</li>
<li>To the master branch</li>
<li>Through a hopefully-successful build</li>
<li>To a staging environment</li>
<li>To production</li>
</ul>


<p>The number of apps and services we deploy has grown to <em>dozens</em> per team, so sometimes things fall through the cracks. We've been using <a href="https://github.com/joeyAghion/releasecop">Releasecop</a> for the last few months to get gentle email reminders when an environment could use a deploy.</p>

<!-- more -->


<pre><code>gem install releasecop
releasecop edit
</code></pre>

<p>This opens a <em>manifest</em> file where you can describe the sequence of git remotes and branches that make up your own release pipeline. For example:</p>

<pre><code>{
  "projects": {
    "charge": [
      { "name": "master", "git": "git@github.com:artsy/charge.git" },
      { "name": "staging", "git": "git@heroku.com:charge-staging.git" },
      { "name": "production", "git": "git@heroku.com:charge-production.git" }
    ],
    "gravity": [
      { "name": "master", "git": "git@github.com:artsy/gravity.git" },
      { "name": "master-succeeded", "git": "git@github.com:artsy/gravity.git", "branch": "master-succeeded" },
      { "name": "staging", "git": "git@github.com:artsy/gravity.git", "branch": "staging" },
      { "name": "production", "git": "git@github.com:artsy/gravity.git", "branch": "production" }
    ]
  }
}
</code></pre>

<p>The <code>charge</code> app is a typical deployment to Heroku. Work progresses from the <code>master</code> branch to a <code>charge-staging</code> app to a <code>charge-production</code> app. The <code>gravity</code> app is a more complicated, non-Heroku deployment. It updates git branches to reflect what has been merged (<code>master</code>), tested (<code>master-succeeded</code>), deployed to staging, and deployed to production.</p>

<p>Run the <code>releasecop check [app]</code> command to report the status of your apps' releases:</p>

<pre><code>$ releasecop check --all
charge...
  staging is up-to-date with master
  production is up-to-date with staging
gravity...
  master-succeeded is up-to-date with master
  staging is up-to-date with master-succeeded
  production is behind staging by:
    06ca969 2015-09-04 [config] Replace Apple Push Notification certificates that expire today. (Eloy Dur√°n)
    171121f 2015-09-03 Admin-only API for cancelling a bid (Matthew Zikherman)
    4c5feea 2015-09-02 install mongodb client in Docker so that import rake tasks can run (Barry Hoggard)
    95347d1 2015-08-31 Update to delayed_job cookbook that works with Chef 11.10 (Joey Aghion)
2 project(s) checked. 1 environment(s) out-of-date.
</code></pre>

<p>A nightly <a href="https://jenkins-ci.org/">Jenkins</a> job emails us the results, but a cron job could work equally well.</p>

<p><a href="https://github.com/joeyAghion/releasecop">Releasecop</a> reminds us to deploy ready commits and close the loop on in-progress work. We hope you find it useful. (Pull requests are welcome!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Artsy Uses GitHub to Build Artsy]]></title>
    <link href="http://artsy.github.io/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy/"/>
    <updated>2012-01-29T14:26:00+00:00</updated>
    <id>http://artsy.github.io/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy</id>
    <content type="html"><![CDATA[<p><a href="http://zachholman.com/">Zach Holman</a> gave a good talk on <a href="http://zachholman.com/talk/how-github-uses-github-to-build-github">How GitHub uses GitHub to build GitHub</a> at Rubyconf. It was great to hear how similar our own processes are at Artsy, with a few notable differences.</p>

<p>Artsy engineers store almost everything on GitHub. We use GitHub Wikis, but don't use GitHub Issues much. We work in 3-week sprints with <a href="http://pivotaltracker.com/">Pivotal Tracker</a> instead. This blog is on GitHub. And, of course, we have our own Hubot which feeds funny animated GIFs after each successful deploy to our IRC channel.</p>

<p>The most interesting part for me was around these two slides.</p>

<p><img src="/images/2012-01-29-how-art-dot-sy-uses-github-to-build-art-dot-sy/github-pull.png" alt="Pull" /></p>

<p><img src="/images/2012-01-29-how-art-dot-sy-uses-github-to-build-art-dot-sy/github-fork.png" alt="Fork" /></p>

<p>Zach emphasized that you don't need forks to make pull requests. While technically true, I find forks particularly useful to keep things clean.</p>

<p>At Artsy we use personal forks to work on features, create topical branches and make pull requests into the master from there. This is the workflow of the vast majority of open-source projects too. Now, Zach is right, you don't want to create any second class developers - our entire team has write access to the master. We use pull requests from forks to do peer code reviews, even for trivial things. I would typically make a pull request including the person I'd like to code review my changes in the title. Here's an example.</p>

<p><img src="/images/2012-01-29-how-art-dot-sy-uses-github-to-build-art-dot-sy/github-pull-request.png" alt="Targeted Pull Request" /></p>

<p>(Notice the use of hash rocket. Zach, Ruby has transcended our lives too.)</p>

<p>Working on forks keeps developer branches away from "master". The main repository only has three branches: "master", "staging" and "production" and each developer can make up whatever branching strategy they like in individual forks.</p>

<p>Code reviews have nothing to do with hierarchy or organization, any developer will code review any other developer's work. We tend to avoid using the same person for two subsequent code reviews to prevent excessive buddying. Zach called his pull requests "collective experiments" - a place for active discussions, rejections and praise. I really like that. Each of my rejected pull requests has been a great learning experience.</p>
]]></content>
  </entry>
  
</feed>
