<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: people | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/people/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2020-06-12T14:35:16+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Team Working Agreements]]></title>
    <link href="http://artsy.github.io/blog/2020/04/01/team-working-agreements/"/>
    <updated>2020-04-01T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2020/04/01/team-working-agreements</id>
    <content type="html"><![CDATA[<p>Good team culture strives for cohesion. Once organizations get large enough, a tension emerges between the culture
of individual teams and the culture of the larger organization. How do you achieve team cohesion across small teams
<em>and</em> the larger organizations they comprise?</p>

<p>The culture at Artsy is driven by every team member, not mandated or handed down from above. This adds another
level of tension, between individuals and their smaller teams. Team working agreements embrace that tension to
provide a framework for converting tension into healthy culture.</p>

<!-- more -->


<p>Artsy Engineering is part of a larger organization we call PDDE (Product, Design, Data, and Engineering). PDDE is
divided into several product teams, and each team contains at least one representative from product, design, data,
and engineering. Each PDDE team delivers product solutions targeted to a specific product need.</p>

<p>Until recently, those teams could expect a significant change in team members at the start of every quarter, as we
encouraged engineers to explore other teams. The purpose of this practice was to spread knowledge throughout the
organization, and give folks the opportunity to keep themselves aligned with projects they found most interesting.</p>

<p>The downside of this practice was that it made teams feel short-lived, impermanent, and unstable. Some teams were
hit harder than others - they'd see their team completely turn over every quarter. This was felt most strongly by
our product managers who would take the time to learn the skills and strengths of each engineer on their team over
the course of a quarter, just to have to start the process all over again, making it difficult to plan projects or
set goals for the following quarter.</p>

<p>To address these challenges, PDDE decided to set the expectation that engineers would stay on the same team each
quarter, with the option to request a team change, when necessary, to fill a skill, capacity, or growth need
elsewhere. This effectively ended the practice of shuffling teams every quarter. It was too much change, too often.</p>

<p>As a result, our teams feel more stable and long-lived. We're able to build deeper team identity. We've found one
tool particularly helpful in finding and building team identity: team working agreements.</p>

<a name="How.did.team.working.agreements.come.about.at.Artsy."></a>
<h2>How did team working agreements come about at Artsy?</h2>

<p>The current breakdown of our PDDE organization is relatively new; it's also an on-going process. We are still
feeling out how these teams will/should work together. One of the core beliefs at Artsy is that when you are a part
of something - a process, a team, a culture - you are empowered to make impactful changes to it.</p>

<p><aside class="dialogue">
  <div class="answer">
    <img src="/images/dialogue/adam.jpg">
    <p class="intro">Adam Iskounen says...</p>
    <p>
      Team cohesion and unity was a common theme that kept surfacing during the retrospective meeting that led to
      PDDE ending the quarterly shuffling of teams. During my onboarding, I noticed in retros that teams were
      strong on "what went well" and light on "what could be improved." We'd have 1 or 2 "didn't go well" tickets,
      but they were usually something light-hearted/benign like "team lunch was cancelled". One team in particular
      seemed like they were dancing around each other a bit, and important things like "not getting stuff done"
      wasn't being brought up.
    </p>
    <p>I remembered that team working agreements were a tool used by
      a scrum master at my previous job to help a particular team that was struggling to gel, and brought it up
      without really knowing what was involved in the process. Fortunately my product manager - who was eager to
      form a team where each member felt empowered and excited to take ownership of our work - encouraged me to
      research and share the process for coming up with a team working agreement. At first I was nervous that some
      team members, especially those who I perceived to be more interested in technical challenges than on team-building,
      would not be interested in this and find that it was a waste of time. I was pleasantly surprised that not only did
      everyone on the team participate, but that those team members ended up being some of the more enthusiastic
      proponents for following-up on the team working agreement after our initial brainstorm.
    </p>
  </div>
</aside></p>

<p>Since being pioneered by Adam's team, team working agreements have spread to most of our engineering teams. They've
been a learning opportunity for all of us, and a chance for our team members to share experiences and practices
with each other.</p>

<a name="What.s.a.team.working.agreement."></a>
<h2>What's a team working agreement?</h2>

<p>A team working agreement is a written set of guidelines for an engineering team. It enumerates the habits and
practices that the team requires to be productive and successful. The agreement is a living document, and every
member of the team has a part in shaping it.</p>

<p><a href="https://en.wikipedia.org/wiki/Tuckman%27s_stages_of_group_development">According to Bruce Tuckman, a team moves through four phases of development: forming, storming, norming, and performing</a>.
Team working agreements can help a team move more quickly through the stages. A team in the "forming" stage will
quickly uncover areas of disagreement and move to "storming" when they attempt to align on a working agreement. A
"storming" team might move to "norming" more quickly when their points of friction are arbitrated in a working
agreement.</p>

<p>Examples of habits or practices on a team working agreement might include:</p>

<ul>
<li>Any change to the sprint backlog requires product manager approval.</li>
<li>Everyone owns the backlog and should add tickets for untracked work.</li>
<li>Update the backlog before each day’s standup.</li>
</ul>


<p>We've been using a fairly consistent process to develop team working agreements at Artsy.</p>

<a name="Step.1:.Educate.the.team.about.team.working.agreements"></a>
<h3>Step 1: Educate the team about team working agreements</h3>

<p>We want every team member to recognize the importance of creating an agreement.</p>

<p>Each team reviews
<a href="https://github.com/artsy/README/blob/master/playbooks/agile/team-working-agreement.md">our docs on the process of creating a working agreement</a>
before creating one. They might also review an existing working agreement.</p>

<a name="Step.2:.Conduct.a.brainstorming.meeting"></a>
<h3>Step 2: Conduct a brainstorming meeting</h3>

<p>The team meets for an hour to brainstorm ideas that promote success from each individual or the team as a whole.
Some of our teams have met fully in-person and used physical sticky notes for brainstorming; many have used an
online tool like <a href="https://miro.com/">Miro</a> to include remote members.</p>

<p>It's vital that <em>all</em> members of the team attend the brainstorm. For us, that includes engineers and product
managers, but also designers and data analysts. This is a discussion of how the entire team works together -
everyone's voice should be heard.</p>

<p>A sample brainstorm agenda is
<a href="https://github.com/artsy/README/blob/master/playbooks/agile/team-working-agreement.md#sample-meeting-agenda">shared in our docs</a>.
The output of the brainstorm is a set of ideas that everyone has contributed to.</p>

<a name="Step.3:.Distill.brainstorming.ideas.into.discrete..digestible.habits"></a>
<h3>Step 3: Distill brainstorming ideas into discrete, digestible habits</h3>

<p>The ideas from the brainstorming process can be sorted into themes. Within themes, we work to condense ideas into
habits and practices that are agreeable to the entire team. We have found success in keeping the language for these
habits small, discrete, and slogan-like.</p>

<p>The distillation step might take several round-trips of gathering feedback and wordsmith-ing.</p>

<a name="Step.4:.Commit.the.most.important.habits.to.a..Team.Working.Agreement..document"></a>
<h3>Step 4: Commit the most important habits to a "Team Working Agreement" document</h3>

<p>The team votes on which habits should be included in the agreement and a document is circulated.</p>

<p>It's not done, though. Remember: it's a living document.</p>

<a name="Step.5:.Revisit.the.working.agreement"></a>
<h3>Step 5: Revisit the working agreement</h3>

<p>As a team, decide how often the agreement should be revisited, and what "revisiting the agreement" means. When
should we amend it? When should we do another brainstorm? It probably doesn't make sense to scrap the old agreement
when one new team member joins, but how much change on a team would inspire us to recreate our agreement?</p>

<a name="Why.establish.a.team.working.agreement."></a>
<h2>Why establish a team working agreement?</h2>

<a name="The.brainstorm.itself.is.incredibly.valuable."></a>
<h3>The brainstorm itself is incredibly valuable.</h3>

<p>Dedicated time to talk about values, habits, and processes is incredibly helpful to a team, yet rarely scheduled.
The brainstorm for a team working agreement can fill this void.</p>

<p>During the team agreement brainstorm the team looks at <em>how</em> they work, instead of looking at <em>what</em> work they're
doing. It's similar to what you might get out of a retro but at a higher level. It offers time to discuss "soft"
skills that you don't often discuss, in a context that you don't usually discuss them - with other individual
contributors, and with your closest collaborators.</p>

<p><aside class="dialogue">
  <div class="answer">
    <img src="/images/dialogue/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>
      When joining a new team, there's often a period of "feeling it out" - where I'm afraid to verbalize an
      opinion because I'm not sure how the team feels about it. The team working agreement process has definitely
      helped lessen this feeling.
    </p>
    <p>
      There's a <a href="https://www.youtube.com/watch?v=FxTXf6qyaGk">great talk by Katherine Wu named "Ask vs Guess Culture"</a>.
      "Guess" culture is when you try to guess what a person wants or is thinking; "Ask" culture is when you flat out
      ask them. Team agreement brainstorms are a really neat way to <em>ask</em> your team how they want to work, instead of
      spending many sprints trying to guess.
    </p>
    <p>
      So far, I have seen the most value out of <em>the actual brainstorm</em> than the working agreement itself. My teams
      have learned so much about each others' habits and values.
    </p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/adam.jpg">
    <p class="intro">Adam Iskounen says...</p>
    <p>
      The process has helped confirm that the team shared interest in team dynamics &amp; the process of collaboration
      across the team. As a new member it's nice to know that information.
    </p>
    <p>
      It's been great to see teammates bring up the team agreement in different contexts. It wasn't just a one-hour
      brainstorm, it's something our team is living. Hearing our slogan-like habits recited during team meetings
      long after the brainstorm is a testament to the value of the agreement.
    </p>
  </div>
</aside></p>

<a name="It.can.lead.to.better.engagement.in.sprint.activities."></a>
<h3>It can lead to better engagement in sprint activities.</h3>

<p>One of our teams established in their working agreement that sprint meetings were valuable. This might seem too
obvious to put in a team working agreement, but it portrays clearly to everyone that they should attend all sprint
meetings and be actively engaged.</p>

<p>The same team got a lot out of making slogans for the items in their working agreement. Phrases like "Pair by
default" and "Incremental improvement over consistency" were introduced during the brainstorm. They've since become
mantras for the team to refer to during sprint work and ceremonies. Team values and habits solidify through this
kind of repetition.</p>

<a name="The.team.working.agreement.provides.on-boarding.documentation."></a>
<h3>The team working agreement provides on-boarding documentation.</h3>

<p>When new members join a team, it takes time for them to adjust. A team working agreement provides an up-to-date
reference on the team's preferred methods of working. The working agreement isn't set in stone, and as the team
changes it's important to update it... but having it in writing helps new members acclimate quickly.</p>

<a name="What.are.some.challenges.with.team.working.agreements."></a>
<h2>What are some challenges with team working agreements?</h2>

<a name="Uncertainty.about.what.the.team.agreement.should.include."></a>
<h3>Uncertainty about what the team agreement should include.</h3>

<p>Some teams have struggled to identify what belongs on a team working agreement. Should it describe our team values?
Habits? Procedures? Rules? Favorite afternoon snacks?</p>

<p>It likely varies from team to team what you want here. Some teams might require guidance around working with JIRA;
others might be more focused on taking ownership of problems. These differences are likely a reflection of the
problems the team is currently facing or has recently faced.</p>

<p>It's definitely important that you identify what you're looking for up front, and make it clear heading into the
brainstorm. Suggest categories, sample habits, &amp; questions to ask heading into the brainstorm, and keep them
visible during the meeting.</p>

<p>Take notice of known problem areas: are they addressed or avoided in the agreement? It is easy for a team to avoid
confrontation at their own expense.</p>

<p>Also be cautious about introducing individual bias.</p>

<p><aside class="dialogue">
  <div class="answer">
    <img src="/images/dialogue/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>
      During my first team agreement brainstorm, I felt like we spent a lot of time talking about details
      related to specific incidents. On my next team, I made a strong effort to constrain the suggestions
      to avoid this. To me, team values were really important for this new team - and I did such a good
      job of encouraging those types of suggestions that it's pretty much all we ended up with.
    </p>
    <p>
      As a result, our initial working agreement lacked important procedural and tactical definition. We've
      been adding things like JIRA hygiene and responsibilities of project leaders as they come up, but I would
      not push a working agreement brainstorm so strongly in one direction again.
    </p>
  </div>
</aside></p>

<p>Remember that the working agreement is a living document. If the team learns that it missed something in the
brainstorm, don't hesitate to update the agreement. Team retros are a great time to make updates.</p>

<a name="Working.agreements.are.hard.to.define.for.teams.without.a.well-established.identity."></a>
<h3>Working agreements are hard to define for teams without a well-established identity.</h3>

<p>For a team that has a strong and cohesive identity, the agreement is likely to affirm many things the team is
already believing and doing. For a less cohesive team the agreement is harder to pin down. Many opinions will
surface, and they may be in conflict with each other.</p>

<p>While this is indeed challenging, it is also important to note that teams that lack identity benefit <em>greatly</em> from
the team agreement brainstorm. Provided there is
<a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#psychological-safety">psychological safety</a>,
this is a really great time for the team to learn about what matters to each other, and move toward establishing an
identity.</p>

<a name="Facilitating.the.brainstorm.can.be.difficult.on.a.distributed.team."></a>
<h3>Facilitating the brainstorm can be difficult on a distributed team.</h3>

<p>Some of our teams were able to brainstorm with everyone on-site. They were able to rely on post-it notes and
in-person conversations, and read each other's non-verbal communication. Other teams have a mix of on-site and
remote members, and used tools like <a href="http://miro.com/">Miro</a> to facilitate. This <em>can</em> present a challenge...but if
you're already a distributed team, they are likely the same types of challenges you've worked to overcome for <em>all</em>
meetings.</p>

<p>The differences are worth noting, though. The importance of reading each other's non-verbal communication is
magnified when you're having conversations about identity. It's quicker to organize and re-organize real-life
post-its than virtual post-its in an online tool. These are all opportunities to get better at being a distributed
team.</p>

<a name="It.takes.effort.to.make.sure.one.person.isn.t.introducing.their.bias.into.the.working.agreement."></a>
<h3>It takes effort to make sure one person isn't introducing their bias into the working agreement.</h3>

<p>It's important for the team agreement brainstorm to provide an environment in which every team member is heard.
Even if your team is successful at this, there are still opportunities for individual bias to affect the working
agreement.</p>

<p>We saw earlier how bias can appear when the examples provided for the brainstorm are too narrowly scoped.</p>

<p>We recognized another bias vector in the distillation of the brainstorm into an actual agreement. If this is
handled by a single person, it's very possible for them to produce a working agreement that misrepresents <em>the
rest</em> of the team. To counter this, we've had multiple team members pair on the distillation process. Feedback on
the initial draft of the agreement is also important to ensure it does not misrepresent the team's ideas.</p>

<p>The problem of introducing bias to the distillation process is most challenging with topics that are disputed
across the team. One of our teams spent a lot of time talking about meetings in their brainstorm, but struggled to
come to consensus on them. No single person, or even a pair, could add a disputed topic like this to the working
agreement without introducing their personal bias. In this specific case, the team chose to leave meetings off the
working agreement until they could reach consensus. Topics that are disputed across the team are important to talk
about at <em>some</em> point, but the brainstorm is probably not the time.</p>

<a name="Team.health.is.easy.to.postpone.when.you.have.important.product.work.to.do."></a>
<h3>Team health is easy to postpone when you have important product work to do.</h3>

<p>One of our teams put the act of distilling the brainstorm notes into an agreement on one person. That person became
busier than expected, didn't have time to write the agreement, and the team's agreement stalled.</p>

<p>Just as personal self-care gets put on the back burner during stressful times, creating a working agreement is easy
to bump down the backlog during intense periods of sprint work. The longer a team drags out the working agreement
process, the more context is lost from the original brainstorm. We recommend not letting your working agreement
linger.</p>

<p>It's also important to revisit the working agreement often. It is a living document, not one-and-done. Review the
agreement as a team occasionally; update the agreement as your team learns how to collaborate better; cultivate the
agreement. If an agreement gets stale, it will become inaccurate, meaningless, and unused.</p>

<a name="What.does.it.even.mean.to.have.a.team.working.agreement."></a>
<h3>What does it even mean to have a team working agreement?</h3>

<p>A team working agreement is a neat artifact. The brainstorm process has great value. But there is non-obvious work
involved in turning a team working agreement into the team culture. We have many questions that we aren't sure how
to answer:</p>

<ul>
<li>How do you enforce the agreement?</li>
<li><em>Should</em> you enforce the agreement?</li>
<li>How do you get the entire team to embrace it?</li>
<li>What happens when the agreement is violated or disrespected?</li>
</ul>


<p>If you're using working agreements on your team and you've got answers for us, or you want to start using them and
have more questions, we'd love to hear from you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diagnosing our Radiation Problems]]></title>
    <link href="http://artsy.github.io/blog/2019/11/14/diagnosing-our-radiation-problems/"/>
    <updated>2019-11-14T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2019/11/14/diagnosing-our-radiation-problems</id>
    <content type="html"><![CDATA[<p>Email! Electronic mail! What a concept! Like many companies, Artsy has built products on top of email, but this is
a decision that (like many companies) Artsy periodically regrets. But overall, our email systems work well!</p>

<p>But what about when it doesn't? Well that's what today's blog post is about: what happens when things break and you
don't know why?</p>

<!-- more -->


<p>I have learned a lot
<a href="https://artsy.github.io/blog/2018/05/30/my-first-week-on-call/">since my first on-call shift</a>, but going on call
still gives me a little stage fright. As I start a shift, I'm on the look-out for things that might break, and soon
after starting a recent on-call shift, "breaking" is exactly what things did.</p>

<p><img src="/images/2019-11-07-diagnosing-our-radiation-problems/alert.png" alt="Screenshot of Slack alert" /></p>

<p>We got an automated alert on Slack that one of our email services, code-named "Radiation", had really high response
times. We <em>then</em> received an alert that too many requests to Radiation were failing completely. Yikes. The next
twenty two hours was a deep dive into Heroku, New Relic, Rails, and PostgreSQL, all to isolate the problem and
produce a solution.</p>

<p>The nice thing about email, as a protocol, is that it's based on a store-and-forward concept. That means that if a
message delivery fails, email servers will try again later (typically with an exponential backoff). SendGrid, our
email processor, has built their REST API around this same store-and-forward concept. While the Radiation server
was unresponsive, SendGrid wouldn't receive successful HTTP responses from the webhook deliveries, so it would
attempt to re-deliver the failing emails later. Email deliveries would be delayed, but the emails themselves would
not be dropped. We wasted no time addressing the problem, but we were also confident that once we fixed the issue,
the data would be okay.</p>

<p>After the alert, Ashkan (Radiation's point-person) and I communicated with our colleagues (engineers and affected
non-engineers) about the problem. With the help of Chung-Yi, we began investigating the immediate problem (with a
focus on <em>mitigating</em> it, rather than necessarily <em>fixing</em> it). Oh, we tried it all: spinning up more Heroku Dynos
to handle requests, increasing concurrency on the individual Dynos, restarting Redis and PostgreSQL stores. Each
time, things would work briefly before the Radiation API would begin timing out again. More accurately, the
requests sent to Radiation were taking longer than the Heroku router was giving them (30 seconds) before the router
gave up and timed out the request. We started examining the Radiation code and database (keeping our <em>ion the
prize</em>: mitigation).</p>

<p>Ashkan investigated slow database queries. We added new PostgreSQL indexes to speed up queries, and restructured
others to avoid expensive joins. Unfortunately, all this accomplished was extending the time after a Dyno reboot
that things would work (before beginning to timeout again). Because
<a href="https://artsy.github.io/blog/2017/05/30/database-encryption/">Artsy stores emails as encrypted-at-rest</a>, it was
difficult to pinpoint which exact message could be causing the timeouts. And Radiation itself didn't have much in
the way of logging, which would normally help us debug the problem.</p>

<p>It was frustrating to try to fix something but only manage to improve how long it took to break again. We had
enhanced Radiation's performance to the point where it was taking 10 minutes after a Dyno reboot to begin timing
out again, up from 30 seconds at the beginning of the incident. Despite an afternoon and evening spent trying to
fix the problem, we were stuck. We decided that the best course of action was a good night's sleep; we would ask
for help in the morning.</p>

<p>The next day, Ashkan and I got <em>up and atom</em> to address the problem. We brought my on-call partner Devon up to
speed, detailing the incident symptoms and what we had tried so far. While Devon and Ashkan worked on additional
logging and new timeout strategies, I took another approach.</p>

<p>Artsy has been moving to <a href="https://www.datadoghq.com">DataDog</a> for server performance monitoring, but Radiation was
still using <a href="https://newrelic.com">New Relic</a>. My background is in iOS app development and I had never really dug
into New Relic before, but I <em>am</em> very experienced at profiling iOS applications, and the Ruby and Objective-C
runtimes have more in common than they have have differences. I used New Relic to profile a production Radiation
Dyno for five minutes and, to our collective surprise, we found that more than 90% of CPU time was being spent in
<a href="https://github.com/thoughtbot/griddler/blob/ff2ad16949bf5190f93df1a3e83eb0192f136c6d/app/controllers/griddler/emails_controller.rb#L4-L10">an innocuous function of a dependency</a>,
the open source library <a href="https://github.com/thoughtbot/griddler">Griddler</a>.</p>

<p>Artsy uses Griddler to parse and sanitize emails that we receive from <a href="https://sendgrid.com">SendGrid</a>. Griddler
contained the problematic code, which was responsible for parsing email responses from threaded replies. So if an
email body received by Radiation looks like this:</p>

<pre><code>This is the most recent reply in this email conversation.

On September 28th, 2019, Someone Else Wrote:

[The rest of the email thread]
</code></pre>

<p>Then Griddler parses out the string "This is the most recent reply in this email conversation." for Radiation to
process. This is really important because some of the threads in Radiation are <em>thousands</em> of emails long. In fact,
I learned that Radiation has Artsy's largest production database.</p>

<p>Griddler does this processing via regular expressions. Ashkan had the insight to look for existing issues from
other Griddler users who ran into similar problems, and to our delight,
<a href="https://github.com/thoughtbot/griddler/pull/310">we found a pull request</a> that appeared to address the <em>exact</em>
issue that we were having.</p>

<p>It turns out that emails with large amounts of repeated newline characters would totally stall Griddler's regex.
Heroku's router would timeout any request after 30 seconds, but would leave the Ruby code churning on that regex.
That would leave the Rails server unable to respond to subsequent HTTP requests, causing more timeouts. And because
of email's store-and-forward nature, SendGrid would begin sending more problematic emails pretty quickly after any
Radiation reboot. A small change to add a regex group was all that was necessary to fix the issue.</p>

<p>Phew! We forked Griddler to Artsy's GitHub organization and applied the change from the pull request. We were
concerned about security implications of using a different regex, but my
<a href="https://artsy.github.io/blog/2018/02/06/apogee-technical-retrospective/">previous work in regular expressions</a>
helped me vet the change. We pointed Radiation's Gemfile to Artsy's fork and deployed the change.</p>

<p><img src="/images/2019-11-07-diagnosing-our-radiation-problems/heroku.png" alt="Screenshot of Heroku Dashboard, indicating a drop in load" /></p>

<p>Then, we waited. Would the system start timing out again? It took a half hour for any of us to breathe a sigh of
relief. But things appeared to be stable: response times were normal and Dyno load dropped precipitously. Our
<em>Curie</em> worked. (Okay, enough radiation puns.)</p>

<p>During our weekly incident review, Devon guided the rest of our team through our incident response and what we
learned. Radiation is now in a much better state, so that future problems will be easier to track down. We
responded to the Griddler pull request, encouraging the maintainers to merge the commit so other teams would avoid
this problem. The incident review meeting explored a number of options to mitigate future issues, including
migrating Radiation to our Kubernetes cluster, and Sam (our VP of Engineering) suggested writing this post. So here
we are.</p>

<p>Ashkan also followed up with peer feedback for Devon, Chung-Yi, and myself. In part, it read:</p>

<blockquote><p>It's rare and odd to say dealing with incident was fun, but with your help it actually was productive and fun.</p></blockquote>

<p>Which, honestly? One of my proudest accomplishments at Artsy.</p>

<p>In the end, we solved the problem and restored access to our email systems in under 24 hours. We kept our cool, we
communicated effectively with our non-engineering colleagues, and we learned a lot. What more could you want from a
Radiation incident?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS is Hard and Other Things I Learned Working on the 2019 Artsy Vanguard]]></title>
    <link href="http://artsy.github.io/blog/2019/10/29/css-is-hard-and-vanguard-2019-learnings/"/>
    <updated>2019-10-29T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2019/10/29/css-is-hard-and-vanguard-2019-learnings</id>
    <content type="html"><![CDATA[<p>The Artsy Vanguard is an annual editorial series where we feature up-and-coming, notable, and praiseworthy artists
and their contributions to the art world. 2019 was the second year that Artsy published this special feature,
although we have been publishing custom editorial segments multiple times per year since 2015.</p>

<p><em>In this post, I’ll discuss my recent experience working on the
<a href="https://www.artsy.net/series/artsy-vanguard-2019">2019 Artsy Vanguard</a> editorial feature. I’ll start by
introducing the technology stack behind our articles and then discuss what I learned from both a team/organization
and technical perspective.</em></p>

<!-- more -->


<a name="An.Introduction.to.Artsy.Editorial"></a>
<h1>An Introduction to Artsy Editorial</h1>

<p>Typically our editorial works fall under one of five or so categories:</p>

<ul>
<li><a href="https://www.artsy.net/article/artsy-editorial-hip-hop-legend-q-tip-shares-diverse-art-collection">Standard articles</a>,
which have the same layout, but whose content could broadly relate to any of the primary categories Artsy’s
editors tend to cover.</li>
<li><a href="https://www.artsy.net/news">News content</a> consisting of an infinitely scrolling feed of the latest newsworthy
events in the art world.</li>
<li><a href="https://www.artsy.net/series/artsy-editors-future-art">Sponsored</a> and non-sponsored editorial features that may
be a <a href="https://www.artsy.net/article/artsy-editorial-rise-fall-internet-art-communities">standalone</a> publication
or a <a href="https://www.artsy.net/series/how-to-be-an-artist">part of a larger related series</a> of features.</li>
<li><a href="https://www.artsy.net/series/artsy-editors-future-art-carrie-mae-weems">Video editorial series</a>.</li>
</ul>


<p>For more information on Artsy's editorals, check out this
<a href="https://artsy.github.io/blog/2019/03/05/custom-editorial-features/">blog post</a> written by Senior Software Engineer
<a href="https://artsy.github.io/author/eve/">Eve Essex</a>.</p>

<p>To maintain consistency and standardization in terms of user experience design, layout, and page interactivity
options of the editorials that we offer, we use an internal content management service.
<a href="http://pages.artsy.net/rs/609-FDY-207/images/Gallery%20Guide%20to%20Artsy%20Writer.pdf">Artsy Writer</a> enables our
editorial team to publish content to the main Artsy website without having to collaborate with our engineering
organization. (Yay software!) Given that it is designed to handle the layout of the different types of editorial
features that we offer in a uniform way, highly customized editorials like the
<a href="https://www.artsy.net/series/artsy-vanguard-2019">2019 Artsy Vanguard</a> or
<a href="https://www.artsy.net/article/artsy-editorial-people-defined-visual-culture-2018">2018 Year in Visual Culture</a>
require quite a bit of planning and cross-team collaboration, as well as customized software development to support
the features that deviate from our current layouts.</p>

<p>Creating the 2019 Artsy Vanguard was truly a company-wide effort! I’m pretty new to Artsy, having only joined last
summer, so some of the work I did on Artsy Vanguard was around understanding our existing framework for routing
article content from <a href="https://github.com/artsy/positron">Positron</a>, Artsy’s editorial API, to
<a href="https://github.com/artsy/force">Force</a>, the code that powers our <a href="https://www.artsy.net/">production site</a>. On the
Engineering side, I collaborated with the project’s technical lead Eve, a senior engineer with years of experience
working in these code repositories. There were several key stakeholders, including, but certainly not limited to, a
lead project manager, lead visuals editor, designers, content writers, as well as the
<a href="http://wax-studios.com/">external design firm</a> that delivered the initial design concept and video content used
for the series.</p>

<a name="Learnings"></a>
<h1>Learnings</h1>

<p>Vanguard was an exciting project, but as with any software endeavor, it came with its own share of learnings and
difficulties.</p>

<a name="L.strong.1..Splitting.time.between.two.teams.is.hard..strong."></a>
<h2><strong>1. Splitting time between two teams is hard</strong></h2>

<p>My team, Grow, is responsible for the development and maintenance of Engineering software related to increasing
user engagement with Artsy’s products. Some of our most notable projects include
<a href="http://files.artsy.net/documents/artsy-bmw-city-guide.pdf">City Guide</a>, an iOS feature built in collaboration with
BMW, detailing art shows and partner fairs in several major international cities,
<a href="https://www.artsy.net/collections">collections</a> and <a href="https://www.artsy.net/collect">collection hubs</a> offering
prospective art buyers more comprehensive ways to explore works and artists of interest, and of course the
<a href="https://www.artsy.net/articles">Artsy Editorial</a>, home to all of our editorial content. We typically work in
two-week sprint cycles, aiming to produce a planned set of deliverables during that time, and collaborating between
other developers on the team, a designer, product manager, data scientist, and technical team leader.</p>

<p>Given that this project involved collaboration from several teams and stakeholders outside of Engineering, we
decided to manage it as a project separate from the rest of the deliverables the Grow team did during the sprints.
This meant I had to split my time between team meetings for Vanguard work and team meetings for Grow. I would keep
the Grow team up to date on the Vanguard work we were doing but it felt like I was in a liminal space between the
two teams. In addition to attending weekly cross-team Vanguard standups, I attended daily Vanguard engineering
standups to align with Eve on the work that we needed to produce. In the interest of protecting my time and not
attending 3 different team standups in a single day, I posted updates to the Grow team via Slack to keep everyone
updated on the progress of our work. Despite our best intentions, it’s difficult to work on two teams at once and
feel fully committed to either.</p>

<a name="L.strong.2..Estimation.is.Hard..strong."></a>
<h2><strong>2. Estimation is Hard</strong></h2>

<p>Due to the way this project was organized, we allotted 1.5 sprint cycles to complete the engineering work. However,
this time allotment was decided on before we had received the completed design specifications from the design firm.
This posed a set of interesting challenges in the sense that the Grow team committed to delivering a feature by a
predetermined deadline without having all of the information needed to understand the full scope of the project. As
with any engineering project, there are often unknown unknowns, those pesky little gotchas that surface as work
commences on a project, but that cannot always be predicted. This presented an interesting lesson in learning how
to estimate the amount of work required to deliver a minimum viable product and reduce the scope to meet certain
deadlines.</p>

<p>Given the limited amount of time to deliver some fairly complex designs, it was clear that we would have to reduce
some of the technical complexity in order to meet the deadline. This is pretty standard in agile development, but
this was the first time that I was in a position of having to deliver this "bad news". It is difficult to tell team
members that a feature is not going to be able to shipped as initially expected, but these are the sort of
concessions that have to be made sometimes in order to deliver a viable product. Fortunately, I was fully supported
by my managers, tech lead, and colleagues in having to deliver the news that we were not going to be able to
deliver a feature identical to the one given to us by the design firm. From this experience, I learned that making
accurate estimations about how much work a project actually involves is hard, relying on agile as a rule makes it
easier, communicating early and often when there’s any uncertainty around delivering a feature by deadline is
critical, and working with team members that value candor, flexibility, communication, and iteration is empowering.</p>

<a name="L.strong.3..CSS.is.Hard..strong."></a>
<h2><strong>3. CSS is Hard</strong></h2>

<p>I get excited about implementing visually delightful designs, and Artsy Vanguard’s 2019 designs did not
disappoint. There were two key components that involved interesting CSS approaches:</p>

<p><strong> 1. Mixed Blending Mode to handle the inversion of the side frame text when it appeared over different
backgrounds</strong></p>

<p><strong> 2. Creating the visual effect of <code>.mp4</code> videos nested inside of SVG shapes</strong></p>

<a name="Mixed.Blend.Mode"></a>
<h2>Mixed Blend Mode</h2>

<p>Mixed blend mode is a CSS property that handles blending the colors of overlapping elements. In this case, we
wanted to create the effect of inverting the colors of the static side frame text when they overlapped with either
the white background, the black SVG shapes, or the SVG videos.</p>

<p>This inverted color effect also needed to be applied to the text of the editorial content when it overlapped with
the black SVG background, when it extended past the SVG background onto a white background, and when the current
article was in an expanded state.</p>

<p>I found <a href="https://css-tricks.com/almanac/properties/m/mix-blend-mode/">CSS-Tricks</a> and the
<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode">Mozilla Developer’s Network</a> documentation super
helpful in understanding the various blending properties. Since the designs for Vanguard involved a fairly simple
blending mode of inverting black and white, the mix-blend-mode difference property was how we created the effect of
inverting the black text against the various backgrounds it overlapped with. The blend mode property works by
calculating the rgb color value of the text, and the background-color of the underlying element, and using that
value to determine what colors to render. This inverse calculation also creates the “solarized” effect when the
black side frame text renders over the video-in-SVG.</p>

<p>In the original design specifications, the static text framing the page was intended to render black over a white
background, white over a black background, and white over the video-in-SVG. In order to achieve that effect, we
would have needed to apply the <code>difference</code> mix-blend-mode property when the text overlapped with a black or white
background, and color-dodge when it overlapped with a video-in-SVG background. However, given it is not possible to
assign multiple blending modes to a fixed element we had to deviate from the original design specifications.</p>

<p><img src="/images/2019-11-04-css-is-hard-and-vanguard-2019-learnings/mbb.png" alt="" /></p>

<pre><code class="ts">const FrameText = styled(Sans)`
  position: fixed;
  z-index: 2;
  mix-blend-mode: difference;
  color: rgb(255, 255, 255);
`
</code></pre>

<pre><code class="ts">const InvertedText = styled(Serif)` 
mix-blend-mode: \${p =&gt; (p.isMobile ? "normal" : "difference")}; 
color: rgb(255,255,255); 
will-change: color;
`
</code></pre>

<a name="Video-in-SVG"></a>
<h2>Video-in-SVG</h2>

<p>In the article series you might have noticed that each of the article subsections begins with a different polygonal
shape, which serves as a visual indicator to readers that they are viewing an article either the <em>Emerging</em>, <em>Newly
Established</em>, or <em>Getting Their Due</em> sections. You might have also noticed that each article subseries starts with
a video clip nested inside of one of these corresponding polygon shapes. These are what I refer to as video-in-SVG.
Nothing too in-depth here, but I’ll offer up the initial approach to how this effect was implemented as well as the
final solution.</p>

<p><img src="/images/2019-11-04-css-is-hard-and-vanguard-2019-learnings/getting-their-due.gif" alt="" />
<img src="/images/2019-11-04-css-is-hard-and-vanguard-2019-learnings/getting-their-due-img.png" alt="" /></p>

<p>Initially, I attempted to implement this using the
<a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject">Foreign Object</a> SVG element and adding a
<a href="https://css-tricks.com/almanac/properties/c/clip-path/">Clip Path</a> CSS property with the to the div element
wrapping the video. In both approaches the video component stopped respecting the responsiveness of the page, which
created an undesirable layout effect of having a huge video on screens smaller than 600 pixels wide, and
disproportionate sizing relative to the rest of the components in the article series.</p>

<p>In order to achieve the desired effect, the component was refactored to make the SVG "blob" a sibling of the video
wrapped inside a parent div with a fixed height. The parent div received a height equal to 100% of the viewport
width divided by the video’s aspect ratio--16:9. This prevents the video from being visible outside the borders of
the SVG. Et voila!</p>

<pre><code class="ts">const SubseriesWrapper = styled(Flex)`
  flex-direction: row;
  position: relative;
  z-index: -2;
  /* 16 x 9 aspect ratio */
  height: calc(100vw * 0.56);
`
</code></pre>

<pre><code class="html">&lt;SubseriesWrapper&gt;
  &lt;SubseriesSVGWrapper&gt;
    &lt;svg viewBox="0 0 1600 900" xmlns="http://www.w3.org/2000/svg" fill="FFF" width="100vw"&gt;
      &lt;path d="M0,0V900H1600V0ZM1489.83,896.43,146.61,805.5,47.2,182.84,320,4.17l874.07,86,360.06,148Z" /&gt;
    &lt;/svg&gt;
    &lt;VanguardSubseriesVideoWrapper&gt;
      &lt;VanguardSubseriesVideo autoPlay loop muted playsInline controls="{false}" src="{props.url}" /&gt;
    &lt;/VanguardSubseriesVideoWrapper&gt;
  &lt;/SubseriesSVGWrapper&gt;
&lt;/SubseriesWrapper&gt;
</code></pre>

<a name="Final.Thoughts"></a>
<h1>Final Thoughts</h1>

<p>One of the biggest non-technical takeaways for me was the importance of becoming skilled at thinking like a product
manager while approaching engineering work. Engineers that do this well are adept at balancing many
responsibilities–scoping out the amount of engineering work involved in producing a deliverable, communicating
technical information to non-technical team members, managing expectations and (sometimes) competing interests when
working on cross-teams projects, gracefully informing stakeholders that the scope of a project will have to be
limited in order to deliver an MVP, among others. Doing these things well is hard, and furthermore not something we
learn in computer science or engineering programs; yet is a requisite, in my opinion, to be an effective engineer.
I’m grateful for the opportunity to have collaborated with others on this year’s Artsy Vanguard and to have been
given the chance to develop these skills.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Learned Having a Coffee with Every Engineer]]></title>
    <link href="http://artsy.github.io/blog/2019/04/19/having-a-coffee-with-every-engineer/"/>
    <updated>2019-04-19T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2019/04/19/having-a-coffee-with-every-engineer</id>
    <content type="html"><![CDATA[<p>In early 2018, I was set to begin my fifth year working at Artsy. Something about my imminent Artsyversary had me
thinking about my role within the Engineering team. Not my role as an engineer <em>per se</em>, but my role as a
<em>colleague</em>. This is the longest I've ever worked for one company, and as Artsy started growing the team last year,
I wanted to <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#leverage-your-impact">leverage my impact</a> as a longtime colleague to help scale its culture.</p>

<p>Artsy collects quarterly, anonymous, company-wide surveys through <a href="https://www.cultureamp.com">Culture Amp</a> to determine how everyone is
doing. These are great for answering quantitative questions about the team, like "how engaged are we on average?",
and I always check out the breakdown of answers in the Engineering team. But there's something unsatisfying about
these reports – they're super-valuable, but they feel impersonal to me.</p>

<p>If I wanted to leverage my impact, I needed to play to my strengths and interests. I'm keenly interested in people
– as individuals – so I decided that the best way for me to contribute to the team was to get to know everyone as
individuals. To become someone the team could talk to. Someone outside the typical manager/employee structure, who
could use their history at Artsy to answer questions (or at least point them in the right direction).</p>

<p>So, I set off on a project to meet with every member of Artsy's Engineering team for a one-on-one. With no explicit
goals or expectations, but in line with Artsy's <a href="https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#people-are-paramount">People are Paramount</a> value, I got to know my colleagues
better.</p>

<!-- more -->


<p>I didn't want this project to interfere with my product work, so I decided to take things slow. I started with a
list of every Artsy engineer and then removed anyone I already had a close working relationship with. Next, I
prioritized the team leads and randomized the rest of the list. I set up a recurring task (yay OmniFocus) to
schedule a coffee with an engineer every week. When we met, I'd cross them off my list.</p>

<p>That was over a year ago, so what did I learn? Well, a lot, actually! But to get a sense of the impact my project
had, you'll need some context.</p>

<p>2018 was a complex year for Artsy, where we both gained and lost more engineers than usual. The increase in
engineering turnover was generally attributable to what I'll call "cultural churn." Scaling a team comes with new
challenges, and our team leadership tried to meet those challenges with changes to the team's structure. Some of
these changes turned out to be tougher than we'd hoped. Our team is in a great spot <em>now</em>, but we didn't get from
there to here via a straight line.</p>

<p>In the midst of this cultural churn, I was trying to have a one-on-one with every engineer. I was asking
people "hey, how are you doing? Want to grab a coffee?" And that actually had a pretty big impact: if I met someone
and they told me "this situation is stressing me out" or "this feels bad", it was really validating for them to
hear me respond "yeah, I'm feeling this too. It's not just you." This dovetailed with my contemporaneous research
into <a href="https://ashfurrow.com/blog/building-better-software-by-building-better-teams/">building compassionate teams</a>, which I leveraged throughout this project.</p>

<p>Turns out: people feel better when they know the problems they have are shared by others. <em>Sharing</em> suffering is
actually one way to <em>minimize</em> suffering, and minimizing suffering is at the core of my beliefs on compassionate
teams.</p>

<p>Once I knew something was wrong with our team culture, I went to my manager to discuss the broad-strokes themes of
what I was hearing from my peers. I would never betray the confidence of a colleague, but being able to say "lots
of people are all feeling X" provided an important data point. While leadership already knew that <em>something</em> was
not quite right, this data point was a strong indicator that leadership had to intervene quickly. I'll skip the
details of how we ultimately addressed our cultural churn (tl;dr it involved our leaders asking IC's questions, and
then listening to what they had say). I'm quite happy to say that things are a lot better now!</p>

<p>While my "have a one-on-one with everyone" project obviously didn't "fix" the situation, it put me in a position to
<em>help</em> fix it. In addition to getting to know everyone as individuals, I got to help identify and help address our
cultural churn.</p>

<p>So what next? Well, a lot, actually! Even more engineers have since joined Artsy, and I admittedly haven't had a
one-on-one with all of them. But through this project, I realized that I'm very keen to do more of this kind of
people-work. When my manager recently brought up the possibility of becoming a tech lead, <a href="https://ashfurrow.com/blog/reflecting-on-5-years-at-artsy/">I jumped on the
opportunity</a>. I started last week.</p>

<p>My initial goal, to have a coffee with everyone, remains unfulfilled. It probably won't ever be, considering that I
now have even less free time in my new role. I'm not an IC anymore – my one-on-ones have to now be focused on <em>my</em>
team. While the goal of meeting everyone for a one-on-one will never be accomplished, the journey turned out to be
more important.</p>

<p>Important both to me – getting to know my colleagues (and myself!) better – but also important for the team. I got
to help our team's culture scale up, and through that experience, I found and expanded the perimeter of my sphere
of influence as an IC.</p>

<p>I can't thank Artsy enough for giving me the freedom, as an IC, to research team dynamics, to pursue this project,
and for taking all my feedback seriously. If you're a senior engineer wondering what's next, try turning your
attention to your team. I would bet that you'll learning something worthwhile.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So You Want to Be an Engineer]]></title>
    <link href="http://artsy.github.io/blog/2019/03/12/so-you-want-to-be-an-engineer/"/>
    <updated>2019-03-12T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2019/03/12/so-you-want-to-be-an-engineer</id>
    <content type="html"><![CDATA[<p>First of all, that's very exciting! Software engineering is pretty darn cool—you get to learn lots of new things,
understand the technology you use every day better, and contribute to the mysterious maw known as "the internet".</p>

<p>Last February, I also decided that I wanted to pursue computer engineering. I'd been at Artsy for a bit less than
two years at that point, first as a marketing intern working on SEO and then as a coordinator on the CRM (read:
email) team. I'd consistently been working on small technical projects; first doing
<a href="https://github.com/artsy/positron/commit/3176282a3ea94c626e9d851b7c0dd27a1bb0fcb4">some work</a> on a tool for SEO
optimization for our Editorial team, then building
<a href="http://artsy.github.io/blog/2018/11/19/mjml/">emails with MJML</a>, and a few other bits and bobs. But I didn't think
of it as a serious pursuit.</p>

<p>Mostly, that was due to my experience programming in the past—I did about half a CS major in undergrad. At the
time, I felt that programming wasn't right for me, and I dropped the major during my third year.</p>

<p>It was Artsy's Engineering team that convinced me that programming was something that I both wanted to and could
do. Our engineers have always welcomed learners and been happy to answer questions and empower other teams to do
technical work. I eventually realized that the parts of my work where I was coding were the parts I enjoyed the
most, and that I would likely feel more fulfilled if I made programming my full-time occupation.</p>

<p>Here's what that journey looked like. Hopefully my experience proves helpful to you as you begin (or finish) yours!</p>

<!-- more -->


<a name="Step.One:.Tell.People.What.You.Want"></a>
<h1>Step One: Tell People What You Want</h1>

<p>This might've been the single biggest learning I took away from this experience: <em>if you tell people you want
something, you might just get it.</em></p>

<p>That may sound super obvious. It wasn't for me. I've usually been very passive in my career decisions, taking the
path of least resistance and considering myself lucky when I was able to keep progressing. In this case, I was
making a substantial departure from that idea by being proactive about what it was I wanted.
<a href="https://engineering.gusto.com/i-didnt-want-to-be-a-manager-anymore-and-the-world-didnt-end/">This post</a> by
<a href="https://twitter.com/NoaElad">Noa Elad</a> does a great job with this topic and is certainly worth a read.</p>

<p>The first person I told at Artsy was <a href="https://twitter.com/orta">Orta</a>. He'd often encouraged me to develop my
technical skills, and since he knows Artsy's engineering team and stack better than just about anyone, I figured
he'd be able to point me in the right direction when it came to learning resources and navigating company politics
to get to my eventual goal.</p>

<p>The second person I told was my manager on the CRM team. I fortunately had a very good relationship with my manager
and was confident that she would help me if she could. And by telling her early, I was giving her more opportunity
to advocate for me and making it easier for her to replace me in the event that I was able to switch teams.</p>

<p>The third person I told was Artsy's CTO, <a href="https://www.dblock.org/">dB</a>. This was Orta's recommendation—dB would be
able to tell me if and when a move might be possible, and he could suggest things I should do to improve my chances
of making the switch.</p>

<p>I also didn't keep it a secret from the rest of my team or the company. I didn't show up wearing a shirt that said
"ENGINEER" on it, but I told people, "I'm working on becoming an engineer. I'm really hoping to stay at Artsy, but
if there's not a role open for me, that's fine—I'll search elsewhere."</p>

<p>The net outcome of these conversations was that there wasn't a role open right then (and that I still had lot to
learn before I'd be ready when one became available), but I also left with a better idea of what I should learn and
what I could expect from the coming months.</p>

<a name="Step.Two:.Figure.Out.What.You.Want.to.Learn"></a>
<h1>Step Two: Figure Out What You Want to Learn</h1>

<p>The answer to that question really depends on who you are, where you work, and where you <em>want</em> to work.</p>

<p>I wanted to work at Artsy, and I felt that I was most interested in front-end work. So I asked a few of our
engineers to help me understand our stack and to recommend frameworks/languages I should learn.</p>

<p>If you're interested in changing companies as well as careers, it's worth seeing if your target company or
companies have open source code you can check out. See if you can find them on <a href="https://www.github.com">GitHub</a> and
look at some of their recently updated repos. If you already have some coding experience, see if you can contribute
a little bit—even fixing small bugs or typos is a good place to start, since you're both contributing to their
codebase (which will help you if you land an interview) and learning more about their stack. dB recommended that I
do this with Artsy's code.</p>

<p>As with most companies that have been around for more than a year or two, Artsy is home to projects with many
different stacks. However, most of our newer front-end stuff—things that are recently updated or currently in
development—is built on React using TypeScript. So my first question was "what do I need to know in order to write
TypeScript code in a React framework?"</p>

<p>Fortunately, a lot of other people have the same question.</p>

<a name="Step.Three:.Decide.How.You.Want.to.Learn.It"></a>
<h1>Step Three: Decide How You Want to Learn It</h1>

<p>First: <strong>there is no wrong way to go about learning to code</strong>. Whether it takes you 6 months or 6 years, whether
you learn one language or a dozen, whether you ask for a lot of help or do it all yourself, <strong>you are learning and
that is valuable</strong>. Learning to code is not a magical skill. Like just about everything, it's a matter of putting
in time. Just keep trying, even small things, and you <em>will</em> make progress.</p>

<p>Lots of people who want to become engineers go to coding bootcamps like <a href="https://flatironschool.com/">Flatiron</a> or
<a href="https://generalassemb.ly/">General Assembly</a>. That's a very reasonable thing to do! I had a decent grounding in CS
fundamentals thanks to my experience in undergrad, and as a result, I initially decided I wouldn't do a coding
bootcamp—I felt I had enough experience to benefit from the multitude of online courses and open source projects
out there.</p>

<p>However, there are definitely real and significant benefits do doing a bootcamp. Here are three that I can think
of:</p>

<ol>
<li>Clear curriculum. At times, I was overwhelmed by the possible ways to proceed and stopped making progress as a
result. Bootcamps take the guesswork out.</li>
<li>Timeline. Because I didn't have a hard date set for a transition or interview, it was up to me to determine how
fast/slow I worked on things, and I stagnated at times as a result.</li>
<li>Community. While the open source community is very much a real thing, and you can find lovely people on the
internet who want to help learners like yourself, it's not the same as having multiple people learning the same
thing at the same time in the same physical space.</li>
</ol>


<p>The downsides, of course, are that coding bootcamps are expensive and time-consuming. Most of us don't have the
luxury to leave a job, pay $10K – $15K in fees, and spend a couple months at a full-time bootcamp with no income.
There are other models, such as online-only bootcamps or after-hours classes, but those come with challenges of
their own.</p>

<p>I'd say that If you can afford a bootcamp and have the time, it's a great way to jumpstart a coding career, but you
don't have to attend one to become a good engineer.</p>

<p>If you decide to go the non-bootcamp route, you also have a lot of good options. I did courses through
<a href="https://www.udemy.com">Udemy</a>, which has a lot of courses that are literally always on sale for $10 - $20. There
are many other similar services out there as well, like <a href="https://www.udacity.com">Udacity</a>,
<a href="https://www.codecademy.com/">Codecademy</a>, and <a href="https://teamtreehouse.com/">Treehouse</a>.</p>

<p>I also highly recommend attending IRL meetups, because that's where you can make connections and learn from others
most easily. I'm a semi-regular attendee at the <a href="https://www.meetup.com/CocoaPods-NYC/">CocoaPods meetup</a> hosted by
<a href="https://twitter.com/ashfurrow">Ash</a> and Orta at Artsy HQ, and <a href="https://www.meetup.com/find/tech/">meetup.com</a> and
<a href="https://peerlab.community/">peerlab.community</a> are great places to find other events.</p>

<a name="Step.Four:.Get.Comfortable.Not.Knowing.Things"></a>
<h1>Step Four: Get Comfortable Not Knowing Things</h1>

<p>When learning engineering concepts (and practicalities), there's a lot you're not going to know.</p>

<p>This piece of advice is important both when learning and once you actually land an engineering job (it's been one
of the hardest parts of my first ~3 months on Artsy engineering).</p>

<p>Part of what makes engineering so cool is that you are always challenged to learn new things and solve new
problems. But especially at first, the mental toolbox you have is pretty limited. When you don't know a language or
framework, it's very hard to solve problems using it—your first problems are likely to be syntax errors and
misunderstandings.</p>

<p>One of the best things you can do is learn how to ask good questions and then ask them. You might be asking them on
a forum, in GitHub issues, in meetings, or in conversation with your
<a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging">favorite rubber duck</a>. Regardless, just asking them will
help, and asking lots of questions is one of the best way to learn things fast—but it takes humility and
self-awareness. <a href="https://twitter.com/b0rk">Julia Evans</a> has a <a href="https://jvns.ca/wizard-zine.pdf">great zine</a> that
has good advice on asking questions, among many other things. For a few more fun and helpful resources, see
<a href="https://github.com/artsy/README/blob/master/resources/tech-learning.md">Artsy's README</a>.</p>

<a name="Step.Five:.Recognize.What.You.Bring.to.the.Table"></a>
<h1>Step Five: Recognize What You Bring to the Table</h1>

<p>Ok, so you're reconciled to the fact that you have a lot to learn—but what about all the things you already know?
Those are important too!</p>

<p>Even if your past work and/or life experience has nothing to do with computers or programming, it can still have
value as you work towards engineering (and after you become an engineer). That value can take a lot of different
forms, and since everyone's experiences are different, I can't say for sure what impact your prior knowledge will
have.</p>

<p>For me, there are a few experiences I brought to engineering that were particularly helpful. Because I was
transitioning from one team at Artsy to another (Marketing → Engineering), I brought with me a broad understanding
of Artsy's goals and needs, which helps with day-to-day prioritization. And when I'm in a sprint planning meeting
or a product review and someone has a question about email or marketing, I can often answer—or at least I know who
to talk to to get to the bottom of the issue quickly. Plus if at some point my team needs to code emails, my
<a href="http://artsy.github.io/blog/2018/11/19/mjml/">past experience</a> will come in very handy.</p>

<p>There are also life experiences that serve me well on the Engineering team. My work as a server and bartender made
me good at clear communication with stakeholders. Cooking for big groups of friends has made me better at
estimating how long I'll need for tasks. Don't underestimate the power of "soft skills"—even companies like Google
<a href="https://www.washingtonpost.com/news/answer-sheet/wp/2017/12/20/the-surprising-thing-google-learned-about-its-employees-and-what-it-means-for-todays-students">have come to recognize</a>
that it's often the non-technical skills that separate good engineers from great ones.</p>

<p>————</p>

<p>Moving to engineering has been a tricky process, but one I'm very grateful to have experienced. I'm lucky to work
at an organization where moving from email marketing to engineering is possible, and I'm even luckier to have had
the support of engineers, friends, and engineer-friends in making the move. If you end up pursuing this course as
well, I wish you the best of luck!</p>
]]></content>
  </entry>
  
</feed>
