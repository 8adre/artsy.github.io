<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: people | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/people/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2019-01-23T22:12:24+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How Artsy Hires Engineers]]></title>
    <link href="http://artsy.github.io/blog/2019/01/23/artsy-engineering-hiring/"/>
    <updated>2019-01-23T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2019/01/23/artsy-engineering-hiring</id>
    <content type="html"><![CDATA[<p>Interviewing is hard. Interviewers want to make sure they're hiring the person who will add the most value to their
team; candidates want to make sure they're joining a company that aligns with their goals and perspectives.</p>

<p>Recent trends in hiring are white-boarding sessions, trivia questions, and hours of take-home assignments. At
Artsy, we don't use any of these. We often get asked why not - and how we assess technical skill without them.</p>

<!-- more -->


<p>We think our interview process at Artsy is unique, but we also think our interview process is great. We'd love to
see the tech community examine its hiring practices, and hopefully to adopt some of what's made our hiring process
successful. Focusing on knowledge and facts that are already acquired is one way to approach hiring; we prefer to
look at how a person can fill a gap in our team and help us grow.</p>

<p><aside>
  <div class="question">
    <h3>What surprised you about the hiring process at Artsy while you were a candidate?</h3>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/ash.jpg">
    <p class="intro">Ash Furrow says...</p>
    <p>What most surprised me at the time was <em>who</em> was interviewing me. I had a teleconference screening with Artsy's now-CTO before moving on to in-person interviews. Since I was living in Amsterdam at the time, Artsy flew me its nascent London office to meet two interviewers: a data engineer and a member of (what was then) the Arts team.</p>
    <p>I was surprised, but encouraged, to be speaking with someone who wasn't an engineer. They asked me questions to find out what motivated me, to evaluate how well those motivations would help Artsy achieve its mission. It was a natural fit!</p>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/lily.jpg">
    <p class="intro">Lily Pace says...</p>
    <p>Everything. I was pleasantly surprised by how different the interview process at Artsy was from my previous experiences, which felt more like standardized tests than conversations. The underlying presumption with "traditional" tech hiring practices is that candidates are somehow trying to trick their way into positions they aren’t qualified for. It's no wonder that impostor syndrome is so prevalent in underrepresented groups when the interview process is set up like an interrogation.</p>
    <p>I felt like the interviewers at Artsy had read my resume and cv and taken it at face value, so the interview was spent diving deeper into my skill-set and personality and determining compatibility, instead of trying to identify gaps in my knowledge.</p>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>With 20 years (!!!) of experience as a software engineer, I've seen my share of interviews - from both sides. On the hiring side, I've said for years that technical interviews are unnecessary. If I can get a 30 minute conversation with a candidate, I feel like I can learn enough about them to know if they can do the job from a technical perspective. It's much less about knowing trivia or syntax, and much more about having the personality to solve problems.</p>
    <p>I'd never experienced that on the candidate side, though. When I did, I definitely felt like Artsy had forgotten part of the interview. Where was the whiteboard? The homework? People looking over my shoulder while I coded an anagram-checker? A technical challenge has been a part of every interview I've done as a candidate - until Artsy.</p>
  </div>
</aside></p>

<p>Artsy's process of hiring new engineers was created and is maintained <em>by</em> our current engineers. It has evolved
over time as we learn new lessons and new perspectives join our team. Our process has always been driven by a
top-down culture of respect for candidates, which aligns with
<a href="https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#artsy-values">our company values</a>. Our team
currently has 36 engineers, and we refreshed our hiring practices last year to support our team's growth; we hired
a dozen engineers in 2018. We don't use recruiters (though we did to hire our recent VP of Engineering).</p>

<p>Our former Director of Web Engineering has a blog post where he
<a href="https://www.zamiang.com/post/learning-from-artsy-how-to-hire-awesome-engineers">describes Artsy's hiring process</a>.
Though some specifics have since changed, the foundations remain the same.</p>

<blockquote><p>If Artsy has a secret sauce, it is how it hires. All else falls from the assumption that they have hired the best
people who want to work together to achieve Artsy’s mission.</p></blockquote>

<p>Our hiring process starts with an informational, where candidates are met for a coffee or over a teleconference
call. We have <a href="https://github.com/artsy/README/blob/master/playbooks/informationals.md">public documentation</a> so
candidates can know what to expect. We do a lot of these and move candidates who we think would succeed at Artsy on
to in-person interviews. The interviews last 3 hours and are split across four 45-minute
<a href="https://www.livecareer.com/career/advice/interview/behavioral-interviewing">behavioral interviews</a>, conducted by
engineers and other colleagues, ranging from gallery liaisons to product managers to editorial writers. Artsy
generally, and Engineering specifically, have both significantly invested in helping interviewers be effective and
consistent; this includes documentation, question banks, and <a href="https://managingbias.fb.com">unconscious bias</a>
training.</p>

<p>Each interviewer is given key areas to focus on, based on the candidate's background. We have documentation
specifying how to evaluate each of these areas, including example questions. These areas include, but aren't
limited to:</p>

<ul>
<li>Comprehension of Artsy</li>
<li>Artsy company values alignment</li>
<li>Ability to communicate complex ideas</li>
<li>Learning and adaptation</li>
<li>Self-learning and drive</li>
<li>Independence and teamwork</li>
<li>Systems development</li>
<li>Product knowledge</li>
</ul>


<p>After the interview, feedback is written up as quickly as possible. To limit bias, interviewers can't see each
other's feedback until after they write up their own. The write-up includes a recommendation: do you think we
should move on to reference checks? Answers are either "strong yes", "yes", "no", or "strong no"; after everyone
has completed their write-ups, the interviewers debrief and reflect on how to do a better job next time. Their
feedback is used by the hiring manager to decide whether to move on to reference checks.</p>

<p>Quoting again from our former Director of Web's blog post:</p>

<blockquote><p>Artsy believes that 'references are not a defense against hiring poorly, they are a way to hire great people'.</p></blockquote>

<p>Artsy's reference checks are in-depth and deserve their own blog post; they are <em>key</em> to our hiring process. We
know that job interviewers only evaluate how good someone is at interviewing, so we put a larger emphasis than most
companies on references. The most accurate predictor of future job performance is past job performance, not how
well someone can perform in an interview.</p>

<p>If we decide to hire the candidate, we make them a job offer. Artsy offers what we think is a fair wage based on
the local market and the candidate; we do not low-ball candidates and we don't negotiate on compensation.</p>

<a name="What.s.wrong.with.typical.hiring.practices."></a>
<h2>What's wrong with typical hiring practices?</h2>

<p>There are many tactics for assessing a candidate's technical abilities, but we've found that many are unfair to the
candidate. Some strategies put unnecessary pressure on the candidate. Some select against qualified candidates who
have competing responsibilities outside work. Some unwittingly weed out underrepresented applicants, even at a time
when companies are trying to diversify their teams.</p>

<a name="In-person.coding.challenges"></a>
<h3>In-person coding challenges</h3>

<p>The intention of in-person coding challenges is to verify that the engineer can "actually write code." This
strategy puts excessive pressure on the candidate to perform in front of an audience. This is usually not a good
reflection of what the candidate would be doing if they were hired. Sometimes it <strong>is</strong> a reflection of the
stressful conditions on the team, and the act of applying pressure to the candidate is intentional, to measure
their ability to handle it. In either case, we don't feel like this is how we want to measure engineers; it just
doesn't reflect reality.</p>

<a name="Whiteboard.interviews"></a>
<h3>Whiteboard interviews</h3>

<p>One intention of whiteboard interviews is to reduce the stress on the candidate, because they don't have to worry
about code syntax while under a microscope. These types of interviews still lead to
<a href="https://code.dblock.org/2012/12/08/five-ways-to-torture-candidates-in-a-technical-interview.html">stressful conditions</a>,
though, and they don't provide a good measure of what makes a great teammate or even a great developer. Again,
sometimes the pressure is intentional, to see how the candidate reacts.</p>

<p>It can be very difficult to find a problem that is succinct enough for a whiteboard exercise but still reflective
of the work the candidate will actually be doing on the job. The ability to write an algorithm to search a binary
tree might be reflective of whether a candidate has a traditional Computer Science degree, but doesn't necessarily
speak to their ability to build complex interfaces or streamline performance. More importantly, whether or not they
can write a binary search tree from scratch on a whiteboard doesn't even necessarily speak to their ability to
<em>use</em> search trees in day-to-day work. Questions like this can eliminate excellent developers who took a
non-traditional approach to their knowledge building but are still highly capable.</p>

<a name="Sample.code"></a>
<h3>Sample code</h3>

<p>Sometimes a company will request a code sample from candidates - after all, what shows off their ability to code
better than their actual code? The downfall of this strategy is that it eliminates developers who don't have code
they can share. Many great engineers work for closed-source companies; many great engineers have family
responsibilities that prevent them from contributing to open-source at night.</p>

<p>It is also important to consider the insularity and biases that exist in the open source community that can make
contributing more difficult for developers from underrepresented groups. A study published in the PeerJ Computer
Science journal found that women’s contributions to open source projects were accepted more frequently than men’s
contributions when the gender of the contributor was unknown. However, when the gender of the contributor was
apparent, men's contributions were
<a href="https://code.likeagirl.io/gender-bias-in-open-source-d1deda7dec28">accepted more frequently than women's</a>.</p>

<a name="Take-home.challenges"></a>
<h3>Take-home challenges</h3>

<p>The most recent trend in hiring is the take-home exercise. The goal is honorable - have the candidate produce code
on their own time, so they aren't overwhelmed with the pressure of an audience. We’ve found that requiring this
early in the process is unfair, and including it later in the process is uninformative; by the time a take-home
challenge would be appropriate, we have already evaluated the candidate's technical skills to our satisfaction
(more on that later).</p>

<p>This strategy also assumes the candidate has time to work on homework. Many single parents do not for example, nor
do engineers who care for family members. There can also be misalignment on the expected time to complete a
take-home challenge. While the exercise might take a current engineer at the company 2 hours to complete, that
doesn't consider several factors: (1) a candidate might not be familiar with all technologies requested, and can
easily lose time to research and learning; (2) the candidate wants to look good, so they're likely to work longer
than you expect; and (3) the candidate might be interviewing for several companies at once, and have multiple
competing assignments to work on.</p>

<p>Many companies use take-home challenges early in the hiring process to shift the burden of evaluation from the
company on to the candidates themselves. This unfairly excludes lots of potentially amazing colleagues.</p>

<p><aside>
  <div class="question">
    <h3>Why do you think these kinds of bad hiring practices are so common in the tech industry? And what sets hiring practices in tech apart from hiring in other industries?</h3>
  </div>
    <div class="answer">
    <img src="/images/artsy-engineering-hiring/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>We are very logical people in the tech industry. We want to create algorithms or heuristics for everything, including hiring. Using a yardstick like "Fizz Buzz" or trivia questions allows us to easily narrow down the candidate pool. It's a simple, intentional form of gate-keeping. The hiring algorithm is much easier to write when it's "Oh, you don't know what a closure is? Sorry, we're not interested." It's much harder to write a hiring algorithm that respects nuance: "well...it depends. Maybe you have different experiences than I do. It'll take some digging to find out if our experiences will complement each other."</p>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/lily.jpg">
    <p class="intro">Lily Pace says...</p>
    <p>I think the tech industry has an elitism problem, and this is reflected in the way candidates are evaluated. There’s a general feeling in some parts of the industry that what we do is different and somehow elevated from other professions, that engineering is a skill that only a select few are capable of, not something that anyone can learn with the right training and enthusiasm. Making candidates go through a gauntlet of challenges during the interview process reinforces this idea.</p>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/ash.jpg">
    <p class="intro">Ash Furrow says...</p>
    <p>I think when looking at the current state of the computer programming industry, and its hiring practices, we need to pay special attention to its history. The original computer programmers of the twentieth century were women, but they were <a href="https://www.theguardian.com/careers/2017/aug/10/how-the-tech-industry-wrote-women-out-of-history">systematically pushed out of the industry</a>. One way they were pushed out was through discriminatory hiring practices, especially interview questions and techniques specifically designed to exclude non-white, non-male applicants. Sadly, these hiring practices persist, even if their original motivations have been obscured by time.</p>
  </div>
</aside></p>

<a name="What.we.do.instead"></a>
<h2>What we do instead</h2>

<p>In addition to the above strategies not being fair, we've found that they measure things that are secondary to what
we're looking for.</p>

<p>Artsy is more complicated than FizzBuzz. Too complicated for any one engineer to build, in fact. Individual
engineers working alone can’t build the software Artsy needs to succeed – they must work together. So the skills we
evaluate for are things like empathy, communication, and kindness. Not that technical skills aren’t important, but
the ability to communicate and learn is more important.</p>

<p>Engineers who excel at empathy, communication, and kindness can pick up the technical stuff once they're hired;
personal and interpersonal skills are harder to teach. Adding a colleague to the team who lacks these skills could
harm the culture we've built.</p>

<p>When you interview with Artsy as an engineer, you won't just meet other engineers and a manager. You'll meet with
people from other departments too. If you're hired as an Artsy engineer, you're going to work with folks from all
across the company - we want to make sure you can communicate with them because that's something we do every day.</p>

<p><aside>
  <div class="question">
    <h3>How has this impacted your day-to-day work at Artsy so far?</h3>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/lily.jpg">
    <p class="intro">Lily Pace says...</p>
    <p>I had a negative experience in the past with a coworker who lacked empathy and boundaries and made me feel unwelcome and othered as the only woman on the team and someone from a non-traditional background. It made me afraid to ask for help and stifled my progress. This experience made me hesitant to open up to new coworkers, especially when I needed assistance. Because Artsy evaluates candidates based on empathy, communication, and kindness, I arrived with a <a href="https://medium.com/artsy-blog/what-it-feels-like-to-work-in-a-supportive-environment-for-female-engineers-3c994a001007">level of trust in my new coworkers</a> that usually takes weeks or months to develop. </p>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>In most of my previous jobs, it's taken me a while to learn who I can be vulnerable around and who I can't. At Artsy I have quickly learned that I don't need to worry about it. I feel an incredible sense of psychological safety with the Artsy team. I can be vocal about not understanding something, and I can ask for help without feeling like a burden or fool.</p>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/ash.jpg">
    <p class="intro">Ash Furrow says...</p>
    <p>I'm a sensitive person. I don't like pointless or inflammatory conflict – I find it distracting and counterproductive. However, I can relax and let my guard down at Artsy. My sensitivity to how others are feeling is a part of my contributions to the team, and I'm able to fold the emotional wellbeing that <strong>I</strong> get from everyone back into our team: a sort of constantly-accelerating feedback loop of good feelings.</p>
  </div>
</aside></p>

<a name="But.we.still.evaluate.technical.aptitude"></a>
<h2>But we still evaluate technical aptitude</h2>

<p>Technical aptitude is less important to us than interpersonal skills, but it is still important. Note that we said
"aptitude," not "skills": we don't expect our engineers to already know everything about the tech stack we're
using. Instead, we expect them to have a strong ability to learn our stack and use it effectively once they have.
(This is touched on in our docs on
<a href="https://github.com/artsy/README/blob/master/careers/juniors.md">what we look for in junior engineers</a>.)</p>

<p>So if we skip all the usual tactics for evaluating technical aptitude, how do we do it? <strong>By talking to people</strong>.</p>

<p>We learn a lot about candidates in their interviews. We'll have a conversation with them about technology. Instead
of white-boarding, we ask them to describe what they like about their favorite library, or what they wish they
could change. We ask them to describe some legacy code they’ve worked with, and ask them how they think it got that
way. We’re looking for a mix of technical skills as well as empathy and an ability to communicate nuanced ideas.</p>

<a name="References.are.important.to.us"></a>
<h2>References are important to us</h2>

<p>We also learn a lot through reference checks. Our reference checks aren't simply validation of your employment
history - they are a 30 minute-long conversation with each of your three references that go into detail about your
work history and career growth. It's quite an in-depth conversation, with questions structured to dig into
specifics about the candidate's behavior.</p>

<p>An Artsy reference call might include the following structured questions:</p>

<blockquote><ul>
<li>In your capacity as [relationship to the candidate], how many people have you worked with in the candidate's
role?</li>
<li>Okay, in <em>just</em> terms of job performance, how you rank the candidate out of that [X] many people?</li>
<li>Okay, finally, what's the difference between [the candidate's rank] and number one? How would the candidate
need to grow to get to number one?</li>
</ul>
</blockquote>

<p>The first question establishes the context for the reference. The second question primes the reference to use that
context when answering the next question. The third question is what we're <em>actually</em> interested in. These aren't
easy or comfortable questions, but they give us an insight into the candidate's career, history, and areas to grow.</p>

<p>Fully half of our decision to make an offer or not is based on our reference checks. Artsy Engineering candidates
go through the same reference check process as anyone applying for a job at Artsy, with Engineers sitting in on the
call with Artsy's hiring staff.</p>

<a name="But.seriously..we.really.care.about.the.personal.side"></a>
<h3>But seriously, we really care about the personal side</h3>

<p>We also make sure every interview ends amicably. No candidate should feel bad after interviewing with Artsy, even
if we don't give them an offer. This seems self-evident to us, given our values, but it makes a lot of business
sense to maintain our reputation as an engineering team.</p>

<a name="Our.hiring.practice.philosophy"></a>
<h2>Our hiring practice philosophy</h2>

<p>One of our core values at Artsy is that
<a href="https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#people-are-paramount">People Are Paramount</a>.
We like to think that our interview process was built to reflect this.</p>

<p>We see the interview process as an opportunity to build a relationship with a candidate. We talk to them to find
out if they're a good fit for Artsy, and we help them decide if Artsy is a good fit for them. Our hiring process
focuses more on human skills than most processes do. It's not perfect, but it has served us well.</p>

<p><aside>
  <div class="question">
    <h3>Where do you still think Artsy has to grow, in terms of how it hires engineers?</h3>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/lily.jpg">
    <p class="intro">Lily Pace says...</p>
    <p>I think Artsy is really unique and innovative in how it evaluates candidates and I think the more we can express this in our job postings the better. Stressing alignment with our values and an ability to learn and posting fewer hard requirements are some simple ways to convey to potential applicants that we evaluate differently.</p>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/ash.jpg">
    <p class="intro">Ash Furrow says...</p>
    <p>I think one area we've historically struggled with, and still do, is sourcing candidates from a wide range of backgrounds. Artsy Engineering's hiring pool still draws heavily from the professional networks of existing Artsy staff; while this has a lot of benefits, it also has the potential to exclude groups who aren't already represented on our team.</p>
  </div>
  <div class="answer">
    <img src="/images/artsy-engineering-hiring/steve.jpg">
    <p class="intro">Steve Hicks says...</p>
    <p>I agree with Ash. I think all companies hire based on their employees' networks, because that's the easiest way to find people. <a href="https://twitter.com/seldo/">Laurie Voss</a> talked about this recently on <a href="https://reactpodcast.simplecast.fm/33">the React Podcast</a>. He pointed out that diversity at NPM has been better than average since the company started; and that the ratios of diversity have been consistent from the beginning, as a result of hiring from their own networks. I'd love to see Artsy hire beyond our networks (and as a result expand our networks).</p>
  </div>
</aside></p>

<p>Our hiring process will never be "finished" because we're always improving on it. Some recent improvements are
inward-facing to help <em>us</em> get better, like:</p>

<ul>
<li>Starting a #dev-ersity Slack channel for talking about how to diversify our team and the industry at large.</li>
<li>Integrating hiring updates into our weekly standup.</li>
<li>Creating a Slack bot for engineers to monitor our hiring pipeline.</li>
<li>Periodically rotating hiring managers to spread institutional knowledge and get new perspectives.</li>
<li>Many, many docs written on guiding the process.</li>
</ul>


<p>Artsy engineers, guided by our company values, created the hiring process for new engineers. Combined with an
iterative process and a desire to constantly improve, we've created a hiring process that is fair, effective, and
respectful. This kind of engineering-led approach is gaining popularity; for example, Microsoft recently
<a href="https://blog.usejournal.com/rethinking-how-we-interview-in-microsofts-developer-division-8f404cfd075a">revamped its hiring process</a>
with this approach.</p>

<p>We hope this catches on.</p>

<p>So what can <em>you</em> do? A great first step is send this post to your HR rep. Another great step is to open source
your hiring documentation; you'd be surprised how motivating this can be, and it's a great opportunity to get
feedback from other companies. Leave a comment below, let's brainstorm on other ways to improve the state of hiring
in software engineering!</p>

<p>And remember: while <em>you</em> might be motivated based on what feels "right", businesses are motivated by bottom lines.
Fortunately for us, the evidence is on our side: this is a better way to hire, for everyone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Week On Call]]></title>
    <link href="http://artsy.github.io/blog/2018/05/30/my-first-week-on-call/"/>
    <updated>2018-05-30T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2018/05/30/my-first-week-on-call</id>
    <content type="html"><![CDATA[<p>As I write this, I have completed my first ever engineering on-call rotation at Artsy, so naturally I had to write a blog post about some of the things I learned.</p>

<!-- more -->


<p>A year ago, I would have been terrified to be one of two engineers responsible for handling everything from re-sending automated emails to fixing total site outages, but <a href="https://ashfurrow.com/blog/perspective-of-the-polyglot/">I have grown a lot</a> so being on-call was only <em>regular</em>-level intimidating. And indeed, with supportive documentation and a good partner, I didn't experience any situations where I felt truly lost about what to do next.</p>

<p>But I did learn a few things. So let's discuss a few things that weren't immediately obvious to me.</p>

<a name="Ignore.My.Instinct.to.Fix.Things.Right.Away"></a>
<h2>Ignore My Instinct to Fix Things Right Away</h2>

<p>This sounds really counterintuitive, right? I mean, a server is down, let's reboot it so it's up again! It's got a little red X next to it in AWS, let's make it a green checkmark again! I want that checkmark!</p>

<p>But that's not always the best course of action. Sometimes, fixing something right away would deprive us of the opportunity to figure out <em>why</em> it broke in the first place. For example: we had Rails servers running out of disk space, and rebooting those servers would have refreshed their drives and fixed the problem, but one of our platform engineers asked me to wait so they could ssh in and examine the contents of the filesystems. In the mean time, the load balancer had already routed traffic around the servers, so there was no need to rush to fix anything.</p>

<p>My instinct to fix things right away was at odds with the team's desire to understand why something broke.</p>

<a name="What.is.an.Incident..Even."></a>
<h2>What is an Incident, Even?</h2>

<p>One thing became really clear to be, really quickly: people have many different, valid perspectives on what an "incident" is. Our support documentation goes into detail about what our responsibilities as on-call engineers are responsible for, and what should be routed through product teams to be prioritized, but my support partner and I still hit cases where we weren't quite sure if we should take action.</p>

<p>Sometimes, issues of critical importance were brought to our #incidents Slack channel, but weren't <em>really</em> incidents, from an Engineering perspective. We erred on the side of helping our colleagues, but it's difficult. I want to help people! But I also have responsibilities. Balancing the two is a skill every engineer has to develop, and being on-call highlighted the importance of balance in a new way for me.</p>

<p>My first ever jobs were retail, where I helped rural Canadians learn to use their first ever cell phones, and IT helpdesks; both taught me how to handle support requests in a way that makes the other person feel like things are going to be okay. I had to reapply those skills when on-call because sometimes what people were bringing to my attention fell outside the scope of an "incident". Consider the response:</p>

<blockquote><p>What you've reported isn't an incident, talk to your PM.</p></blockquote>

<p>... and contrast it with:</p>

<blockquote><p>This falls outside the scope of immediate support, so I've opened a ticket for you. You can talk to the team PM about prioritization.</p></blockquote>

<p>This kind of reply also aligns with Artsy's <a href="https://github.com/artsy/meta/blob/master/meta/what_is_artsy.md#artsy-values">values</a> of <strong>Positive Energy</strong> and <strong>People are Paramount</strong>. Everyone working at Artsy is here to make art a bigger part of culture, and that shared understanding helped.</p>

<a name="We.Need.to.Improve.our.Automated.Alerts"></a>
<h2>We Need to Improve our Automated Alerts</h2>

<p>For a few months now, Artsy Engineering has been discussing how to consolidate our automated alerts. I somehow got it in my head that anything in our #alerts channel needed immediate engineer attention, when in fact, our #alerts channel is often noisy. By the final day of my rotation, I learned that not everything needed immediate attention.</p>

<p>That's a bit of a problem. There are alerts that need immediate intervention ("the API servers are all down") and there are alerts that need no intervention ("this server is responding slowly, oh wait, it's back to normal, never mind"), and then there are the tricky ones: the ones that need <em>eventual</em> intervention ("gosh, our image processing API out of disk space for the third time in a month, we need to look into that"). Figuring out how to sort mid-level, important-but-not-urgent automated alerts from critical ones will be a critical part of our long-term support process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fully Automated Standups]]></title>
    <link href="http://artsy.github.io/blog/2018/05/07/fully-automated-standups/"/>
    <updated>2018-05-07T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2018/05/07/fully-automated-standups</id>
    <content type="html"><![CDATA[<p>When I began working at Artsy four years ago, remotely, I really didn't like the weekly engineering standup. I'd sit in front of my computer and strain to hear a dozen people gathered around a laptop with Google Hangout. They'd discuss implementation details for projects I wasn't familiar with, and then I'd do the same to them (our mobile team was still very separate from our web team). Twenty minutes would pass and I didn't feel like my work experience at Artsy had been enriched in any way.</p>

<p>The first time I came to New York to visit the office – before moving here – I sat down with <a href="https://github.com/dylanfareed">Dylan</a> and <a href="https://github.com/orta">Orta</a>. Dylan ran the weekly standup, and Orta was also not a fan of the meeting. Dylan was clear: if the standup wasn't working for the two of us, then it wasn't working for anyone. So let's fix it together.</p>

<!-- more -->


<p>And we did. We installed new sound-baffling ceiling tiles to help remote workers hear the boardroom more clearly. We restructured updates, moving from individual updates to team updates. We introduced a section for people to ask and offer help. All kinds of changes. I started looking forward to standup.</p>

<p>At Artsy, when you see something that could be improved about the way that we work, you are expected to help improve it. Dylan taught me that lesson, and I still take it to heart.</p>

<p>Last summer, I started taking on more responsibilities for the Artsy Engineering team, including running the weekly standup meeting. It was previously run by a single engineer, <a href="https://github.com/craigspaeth">Craig</a>, who was juggling a lot of team-wide responsibilities. I was happy to help him out and run the meeting, but I had only replaced <em>myself</em> as a single-point-of-failure for standup; even with Orta running things sometimes, the process itself was still as brittle as when Craig was running things alone. After a few months, Orta and I decided to fix things.</p>

<p>Our goal: fully automated standups. No single person should ever be a point-of-failure for our team. We moved through a few distinct steps.</p>

<p>First, we had to document the process of running the standup. This was crucial: standups should be run as a function of the documentation, so that any engineer at Artsy can run an effective standup. The docs should not only help the engineer run the meeting, but help them feel <em>capable</em> of running the meeting. And once documentation is in place, anyone can help improve the docs (and consequently, improve the process). The current <a href="https://github.com/artsy/meta/blob/master/meta/open_standup.md">docs are open source</a>.</p>

<p>Next, we had to get other engineers running the meeting. We split up the responsibilities of the meeting into two roles: a talking part, and a note-taking part. Both are integral, and different people gravitate towards differently roles. Splitting things up not only made running the meeting easier, but it made running the meeting more appealing to newcomers.</p>

<p>Once the meeting was a two-person responsibility, we started bringing on other engineers to help. I would ask around to see who was interested in helping running a meeting, giving choice of role to the other person. After each meeting, I'd ask the person about how we could improve the docs. Each week, the docs got better and better.</p>

<p>The next phase was moving to having standup run entirely by other engineers. I had a list of engineers who had never run a standup, and worked down the list to get as many engineers having run a meeting as possible. I made <a href="https://github.com/artsy/meta/pull/21">this pull request</a> making it clear that running the standup meeting is a responsibility that every member of the team <em>shares</em>.</p>

<p>Eventually, I felt we were ready to move to a self-perpetuating standup. At the end of each standup, we would solicit volunteers to run next week's meeting. Fully-automated standups! We'd done it! Things were working, though we did recently decide to <a href="https://github.com/artsy/meta/pull/32">integrate the standup schedule into our new support on-call schedule</a>; the engineers beginning their rotation were responsible for running the standup. This eliminated the kind of awkward "okay who wants to do this next week?" part of our meeting.</p>

<p>At each step, we improved the process. Through effective documentation and positive energy, we reduced the <a href="https://en.wikipedia.org/wiki/Bus_factor">bus factor</a> for our engineering team's management. And more importantly, I think, we made it clear to every Artsy engineer that managing our team and improving how we work is a responsibility we have, together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What it Feels Like to Work in a Supportive Environment for Female Engineers]]></title>
    <link href="http://artsy.github.io/blog/2017/09/29/supportive-environment-for-female-engineers/"/>
    <updated>2017-09-29T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2017/09/29/supportive-environment-for-female-engineers</id>
    <content type="html"><![CDATA[<p>With the often overwhelming and downright discouraging reality that the tech industry isn’t a diverse and inclusive environment, I felt compelled to share what a productive, empathetic, and nurturing environment for female and female-identifying engineers looks like.</p>

<p>I have just shipped a post over on the Life at Artsy blog about how: Our culture of empathy, our hiring process and our company values provide a competitive advantage. This all contributes to ensuring that all engineers regardless of gender feel valued.</p>

<p><a href="https://medium.com/artsy-blog/what-it-feels-like-to-work-in-a-supportive-environment-for-female-engineers-3c994a001007">Read on at the Life at Artsy Blog →</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevSwap: An Experiment in Randomizing Teams]]></title>
    <link href="http://artsy.github.io/blog/2017/09/11/DevSwap/"/>
    <updated>2017-09-11T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2017/09/11/DevSwap</id>
    <content type="html"><![CDATA[<p>A few weeks ago, every engineer at Artsy went to work for a different team for two full days. We called it DevSwap. In this post, I'll go over why and how we did it.</p>

<!-- more -->


<p>If you’ve read about Artsy's <a href="http://artsy.github.io/blog/2016/03/28/artsy-engineering-organization-stack/">Engineering Team</a> before, you might know that we organize ourselves into product teams that serve different parts of our business. Today, Artsy employs 26 engineers, spread across four product teams — Publishing, Auctions, Collector GMV, and Partner Success. We also have a Platform team that is responsible for systems, infrastructure, and data, among other things. Across these teams, we share systems and apps. To stay cohesive with one another, we also have what we call “practices,” which are cross-team groups that meet and discuss shared tech.</p>

<p>Around two years ago, we didn't have product teams. Back then, most engineers worked in a variety of stacks. As our business models changed, so did the way we organized ourselves. Interestingly, the number of engineers has not changed drastically, but the way we work has. We have greater focus now that we are organized into product teams with specific business goals, but that means there aren't as many opportunities to work in other stacks.</p>

<p>Earlier this summer, the engineering leads received some feedback from our engineers about wanting more cross-team collaboration and knowledge sharing. In our weekly engineering-wide meeting, we get to hear what features each team is working on, but it can sometimes feel like there's missing context. Within our practices, there is a better sense of the details, but usually the work itself is deeply nested in another team.</p>

<p>We brainstormed several ideas related to knowledge sharing and cross-team collaboration. What stood out the most was that being in product teams meant fewer opportunities to work in other parts of the business. This led to the question: What would happen if we redistributed ourselves into entirely new teams?</p>

<a name="Setup"></a>
<h2>Setup</h2>

<p>Over the course of a few weeks, the engineer leads devised a plan for DevSwap. Here are some questions we asked ourselves:</p>

<ul>
<li>How can we become closer as a team while learning something new?</li>
<li>How can we keep ourselves as engineers nimble, flexible, and full-stack?</li>
<li>How can we reduce risk in our systems by spreading knowledge?</li>
<li>How can we have fun before summer is over?</li>
</ul>


<p>For the first iteration, we decided to spend two full business days swapping. Every engineer  worked with a different team. Each team contained the same number of people as the original team. The leads of each team stayed to onboard, provide support and facilitate work.</p>

<p>The Monday before DevSwap, we had an engineering-wide meeting to go over some guidelines and pick teams. Here are the guidelines we shared:</p>

<ul>
<li>DevSwap will last 2 days. 🕑</li>
<li>Product managers have been notified so don't worry about your regular work. Hopefully a new member will pick some up for you 😄.</li>
<li>If possible, try and sit by your new team and if not, coordinate meeting times with remote members. 📞</li>
<li>See this as a pairing opportunity! 👫</li>
<li>In terms of work, it's business as usual. Your new lead will give you guidance. 💼</li>
</ul>


<p>In this meeting, we also had our leads "pitch" their teams. The goal of this was to get people excited about joining new teams and to get a sense of what projects they might work on. To choose the actual teams, each engineer picked their top three choices and we drew names out of a bucket. If their first choice was already full, we would place them in their next available choice. The following Monday and Tuesday, we were all writing code for different teams.</p>

<a name="So.what.happened."></a>
<h2>So what happened?</h2>

<p>Our EU engineers kicked off DevSwap on Monday, tackling both the struggle of learning new stacks and being remote (our headquarters is located in NYC). Leads mitigated the latter problem by prepping EU folks on Friday so they had some direction come Monday morning.</p>

<p>There was lots of Slack-ing, Screenhero-ing, and pairing. It was wonderful to see people interact in a new environment with new goals, even if it was temporary. Some got to learn about <em>how</em> teams operate and learned about issue prioritization and even attended meetings with stakeholders.</p>

<p>Some people worked on modernizing codebases with projects like <a href="https://github.com/artsy/positron/pull/1225">server-side hot file swapping</a> and the introduction of a GraphQL endpoint to our consignments app. Others worked on building features like <a href="https://github.com/artsy/aprb/pull/104/files">setting up Slack notifications</a> when we receive customer feedback and adding ElasticSearch indexing to projects. We learned new languages <a href="https://github.com/artsy/eigen/pull/2412">by building features</a> and updated <a href="https://github.com/artsy/metaphysics/pull/702">many</a> <a href="https://github.com/artsy/positron/pull/1235">docs</a>.</p>

<p>All work aside, the fact that we were having conversations with each other about the details of the technology while gaining a fresh perspective of someone else's experience was valuable.</p>

<a name="Feedback.from.Engineers"></a>
<h2>Feedback from Engineers</h2>

<p>I learned a lot and had fun, but I wondered what everyone else thought. At the end of the second day, I sent out a survey to all 26 engineers and received 14 responses. Here are some of those results:</p>

<p>Did you get a chance to collaborate with someone you don't normally work with?</p>

<iframe width="600" height="371" seamless frameborder="0" scrolling="no" src="https://docs.google.com/spreadsheets/d/e/2PACX-1vQoAQpvGiq2-5EJWz__vS0n4Iw9r3rY_eSEaPqKQzUlPnObnono-RFS4qLSjrmGTqGnbMOoQsA1L9WX/pubchart?oid=942845256&amp;format=interactive"></iframe>


<p><br>
Did you gain a better understanding of a piece of Artsy Engineering you don't normally interact with?</p>

<iframe width="600" height="371" seamless frameborder="0" scrolling="no" src="https://docs.google.com/spreadsheets/d/e/2PACX-1vQoAQpvGiq2-5EJWz__vS0n4Iw9r3rY_eSEaPqKQzUlPnObnono-RFS4qLSjrmGTqGnbMOoQsA1L9WX/pubchart?oid=543941925&amp;format=interactive"></iframe>


<p><br>
If we were to swap again in 6 months, how long should it last?</p>

<iframe width="600" height="371" seamless frameborder="0" scrolling="no" src="https://docs.google.com/spreadsheets/d/e/2PACX-1vQoAQpvGiq2-5EJWz__vS0n4Iw9r3rY_eSEaPqKQzUlPnObnono-RFS4qLSjrmGTqGnbMOoQsA1L9WX/pubchart?oid=1071239654&amp;format=interactive"></iframe>


<p><br>
<br></p>

<blockquote><p>"Would make the swap slightly longer -- was a short timeframe to get through a project."</p>

<p>"Onboarding took up most of the time. It was hard to get anything beyond that done."</p></blockquote>

<p>One clear piece of feedback was the desire to spend more time on an assigned team. Some engineers had trouble onboarding, setting up projects, and accomplishing meaningful work within the two days. If engineers can't spin up a dev environment within a day, what does that mean for usability? These are solvable problems — we could think about dockerizing apps or having better READMEs. During the session, some folks went back to their old teams to help new members with problems. While this was great, it meant less time for their own learning. One option is to extend the duration of the swap. But by extending it too long, it could remove the hackathon mentality that kept people highly focused. It seems like a combination of tweaking the duration, providing better initial setup, and clearly communicating expectations might help for next time.</p>

<p>We also requested feedback on the leads. Responding to a multiple choice question about what their newly assigned lead did best, most engineers chose "Assisted me when I got stuck" and "Checked in with me frequently." The least chosen answers were "Taught me something new" and "Made the work enjoyable." It's possible that taking more time to prepare for new teams (i.e. introduction meetings, dev environment setup workshop) could provide more opportunities for deeper learning.</p>

<p>When we asked if there were any good takeaways that could be applied to your own team, we had some interesting answers.</p>

<blockquote><p>"Partner Success does a 'show &amp; tell' where you just casually mention something you learned, dev/tech related. That was fun. We should do that on [Collector Experience]."</p>

<p>"Finally got to play with Redux in a production app, which I'd be very happy to see implemented in <a href="https://github.com/artsy/positron">Positron</a>."</p>

<p>"I've been thinking a lot about GraphQL and what it could mean to the [Partner Success] team. Also thinking about what it means for Kinetic and how our projects talk to Gravity."</p></blockquote>

<p>Finally, what did people like most?</p>

<blockquote><p>"Working with people that I normally don't get a chance to work with on daily basis and also working on the areas of our systems. The fact that now each engineer knows how to setup and run another part of our system by itself is a huge win."</p>

<p>"The tight time period forces projects to be very granular. It also forces repo set-up time to be minimized (e.g., via setup/bootstrap scripts, docker, etc.)."</p>

<p>"I liked feeling like I was able to figure out a codebase that was completely new to me and add value even in the short time that we had to work with. It made me feel like something intimidating was actually within my reach and that made me feel smart. :)"</p>

<p>"I wasn't sure if we should expect to get much accomplished but was pleasantly surprised to ship a small but useful feature."</p>

<p>"Awesome idea, it feels great to be part of the team that takes risks like this to increase teamwork and knowledge share among engineers and give engineers chance to get out of their comfort zone."</p></blockquote>

<p>Despite a few issues with onboarding and timing, it seems that most people found DevSwap to be valuable. This feedback gives us a lot to consider when planning the next one. We hope to bring it back soon!</p>
]]></content>
  </entry>
  
</feed>
