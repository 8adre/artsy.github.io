<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2016-06-25T15:55:32+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift Type Aliases: Use Early and Often]]></title>
    <link href="http://artsy.github.io/blog/2016/06/24/typealias-for-great-good/"/>
    <updated>2016-06-24T12:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/06/24/typealias-for-great-good</id>
    <content type="html"><![CDATA[<p>It's been so fun to watch the Swift developer community experiment with Swift and to experiment with what idiomatic Swift will look like. No one really knows the answer yet, but we're starting to see some design patterns used more than others. We're seeing some language features used in key ways that define idiomatic Swift, and other language features that are being mostly ignored.</p>

<p>Regrettably, one of my favourite features of Swift has not enjoyed the meteoric rise in popularity I believe it deserves: <code>typealias</code>.</p>

<!-- more -->


<p>Type aliases allow developers to define synonyms for pre-existing types. It might sound dull because it <em>is</em> dull. In fact, its usefulness isn't even apparent when <em>writing</em> code, mostly when <em>maintaining</em> it.</p>

<p>But before I dig into how <code>typealias</code> is useful, let's review what it is to make sure we're all on the same page. Developers use <code>typealias</code> to create a new type identifier that's a synonym for another type. For example, we can declare <code>typealias BigNumber = Int64</code> and use "BigNumber" any place we could have used "Int64".</p>

<pre><code class="swift">func multiply(lhs: BigNumber, rhs: BigNumber) -&gt; BigNumber

...

let number: BigNumber = 5

...

let number = BigNumber(5)
</code></pre>

<p>You can use <code>typealias</code> for most any type: classes, enums, structs, tuples, closures, etc. Here are a few examples.</p>

<pre><code class="swift">typealias Name = String
typealias Employees = Array&lt;Employee&gt;
typealias GridPoint = (Int, Int)
typealias CompletionHandler = (ErrorType?) -&gt; Void
</code></pre>

<p>Now that we're familiar with <code>typealias</code>, I want to discuss four examples that show how <code>typealias</code> has helped us maintain code.</p>

<h3>Promoting Existing Types Semantics</h3>

<p>When writing web socket communication for eigen, Orta and I were using <a href="https://jwt.io">JSON Web Tokens</a> to authenticate the user. If you've never used JWTs before, don't worry, here's the tl;dr JWTs are a way to authenticate users in a way that clients can cryptographically verify. It's <em>basically</em> a base64 encoded string of JSON.</p>

<p>Clients don't need to verify the JWT in order to use them, and in fact when Orta and I began using them, we treated them only as strings retrieved from one API and sent to another (like an access token). However, instead of using the <code>String</code> type, I decided to define a <code>JWT</code> type alias.</p>

<pre><code class="swift">typealias JWT = String
</code></pre>

<p>I used the new <code>JWT</code> type throughout the code as a hint to other developers about what <em>kind</em> of string it is. This gave it some semantic meaning on top of being a string. Neat. Only later, when we needed to start decoding the JWT itself did this really come in handy.</p>

<p>After deleting the <code>typealias</code> and replacing it with a class of the same name, we didn't have to worry about changing function definitions and property types all throughout our codebase. We made the changes locally, in one file, and most all the rest of our code still compiled. Pretty cool! Here's the <a href="https://github.com/artsy/eigen/pull/1638/files/911473424849240bb71b89c412b0a1887e5c1418#diff-6d73ebd58fdd2d00c32813f60608fbd1R10">relevant portion of the pull request</a> that made that change.</p>

<h3>Consolidating Tuple Types</h3>

<p>I <a href="https://ashfurrow.com/blog/uicollectionview-unjustly-maligned/">recently wrote about UICollectionView</a> and how I used them to solve a difficult layout problem. I detailed how I created a pipeline of simple math functions that used previous results to calculate the next step of the layout. What I didn't mention was that I used tuples to help, specifically tuples with <code>typealias</code>.</p>

<p>Tuples are useful for composing several different values into a lightweight type. Think of tuples as junior structs. I was writing functions to do some calculations and return their result as a tuple. Something like this:</p>

<pre><code class="swift">func layoutMetricsForPosition(position: CellPosition, aspectRatio: CGFloat) -&gt; (restingWidth: CGFloat, restingHeight: CGFloat, targetWidth: CGFloat, targetHeight: CGFloat)
</code></pre>

<p>And because of how the layout pipeline worked, I then needed to use the <em>same</em> tuple as a parameter for the next function.</p>

<pre><code class="swift">func centersForPosition(position: CellPosition, metrics: (restingWidth: CGFloat, restingHeight: CGFloat, targetWidth: CGFloat, targetHeight: CGFloat)) -&gt; ...
</code></pre>

<p>Any time you use the same tuple type more than once, consider making a <code>typealias</code>. In this case, the code became a lot shorter and easier to skim and understand.</p>

<pre><code class="swift">typealias LayoutMetrics = (restingWidth: CGFloat, restingHeight: CGFloat, targetWidth: CGFloat, targetHeight: CGFloat)
typealias CenterXPositions = (restingCenterX: CGFloat, targetCenterX: CGFloat)

func layoutMetricsForPosition(position: CellPosition, aspectRatio: CGFloat) -&gt; LayoutMetrics

func centersForPosition(position: CellPosition, metrics: LayoutMetrics) -&gt; CenterXPositions
</code></pre>

<p>If we need to change something about the tuple later on, we only need to change it in one place. We've also made it easier to promote this tuple to a struct or class later on, just like in the JWT example, because all the functions are already referring to it as its own type. You can check out how we used type alias'd tuples <a href="https://github.com/artsy/eigen/blob/12eac80948bcfd1e5c6fc2aa85b22ccb2a4421dd/Artsy/View_Controllers/Live_Auctions/Views/LiveAuctionFancyLotCollectionViewLayout.swift#L104">in the code</a>.</p>

<h3>Defining Closures Signatures</h3>

<p>Objective-C developers, burdened with <a href="http://goshdarnblocksyntax.com">arcane syntax for blocks</a>, use C's <code>typedef</code> to isolate that syntax strangeness in one place. And even though Swift's closure syntax is <em>awesome</em>, we can still benefit from Objective-C's example â€“ we can use type aliases for closure signatures.</p>

<p><a href="https://github.com/Moya/Moya">Moya</a> uses this technique quite a bit, because it has so many closures. Let's take a look at the <code>StubClosure</code>, which <a href="https://github.com/Moya/Moya/blob/6666947219f231091d5c3e0b9d5f63ac4091718d/Source/Moya.swift#L78-L79">defines if (and how) a network request should be stubbed</a>.</p>

<pre><code class="swift">typealias StubClosure = Target -&gt; StubBehavior
</code></pre>

<p>We use this type as an initializer parameter instead of the full closure syntax, making our code a lot shorter and more legible. Nice! Since the user usually doesn't want to customize this parameter, so we've <a href="https://github.com/Moya/Moya/blob/6666947219f231091d5c3e0b9d5f63ac4091718d/Source/Moya.swift#L97">defined a default value</a>.</p>

<pre><code class="swift">init(...
    stubClosure: StubClosure = MoyaProvider.NeverStub,
    ...)
</code></pre>

<p><code>MoyaProvider</code> has a class function on it called <code>NeverStub</code> <a href="https://github.com/Moya/Moya/blob/6666947219f231091d5c3e0b9d5f63ac4091718d/Source/Moya.swift#L246-L248">whose type</a> matches our closure.</p>

<pre><code class="swift">class func NeverStub(_: Target) -&gt; Moya.StubBehavior {
    return .Never
}
</code></pre>

<p>This particular function doesn't use the <code>typealias</code>, but another one does. We have a function named <code>DelayedStub</code> that returns the <code>typealias</code> instead of the raw closure. Take a look!</p>

<pre><code class="swift">class func DelayedStub(seconds: NSTimeInterval) -&gt; Moya.StubClosure {
    return { _ in return .Delayed(seconds: seconds) }
}
</code></pre>

<p>Super cool! Closures are a powerful tool in Swift already, but by using a <code>typealias</code>, we refer to it as <code>StubClosure</code> throughout our code.</p>

<p>In isolation, this gain may not seem significant, but the dividends have accrued dramatically for the project. <code>typealias</code> has made it easy to maintain Moya as it has evolved alongside Swift. Check out more examples of type aliasing closures <a href="https://github.com/artsy/eigen/blob/12eac80948bcfd1e5c6fc2aa85b22ccb2a4421dd/Artsy/View_Controllers/Live_Auctions/LiveAuctionStateManager.swift#L20-L21">in this eigen class</a>, which uses them for dependency injection.</p>

<h3>Extending Typealiases</h3>

<p>The last example I want to discuss is extensions, specifically extensions to <em>your own</em> types.</p>

<p>When writing classes, especially view controllers, developers have a habit of writing long, unwieldy files that are difficult to navigate and maintain. Preventing such files is far easier than fixing them, which is why I use <code>typealias</code> early, and I use it often.</p>

<p>I recommend using a descriptive <code>typealias</code> that is private to your file, and then extending that <code>typealias</code> so you can keep things neat and tidy. It's a bit confusing, so let's take a look at an example.</p>

<pre><code class="swift">private typealias PrivateHelperFunctions = MyViewController
extension PrivateHelperFunctions {
    ...
}

private typealias TableViewMethods = MyViewController
extension TableViewMethods: UITableViewDelegate, UITableViewDataSource {
   ...
}
</code></pre>

<p>We're still extending the view controller, but specifically we're extending the <code>typealias</code> so that the extension has a helpful name. This is another way that <code>typealias</code> can help add semantic meaning to your code.</p>

<p>Beyond helping you find code quickly, having code in extensions also makes it <em>way</em> easier to move that extension to another file or create a new helper class altogether. So not only does it keep classes tidy, but it also helps you keep classes <em>small</em>.</p>

<p>This technique can also serve as a workaround for Swift's <a href="http://stackoverflow.com/questions/24017316/pragma-mark-in-swift">awful Xcode sectioning syntax</a>.</p>

<p><img src="/images/2016-06-24-typealias-for-great-good/jumpbar.png" alt="Xcode Jumpbar" /></p>

<p>You can <a href="https://github.com/artsy/eigen/search?l=swift&amp;q=private+typealias&amp;utf8=%E2%9C%93">search through eigen</a> for more examples of using a private <code>typealias</code> to divide your code into manageable pieces.</p>

<hr />

<p>Look, I'm not saying that using <code>typealias</code> more is universally a good idea. You might disagree with some of the use cases in this post, which is fine! And this isn't meant to be an exhaustive list of examples, either.</p>

<p>My point is, used in a few key ways, <code>typealias</code> has helped me maintain my code more easily. It's a good tool to be familiar with. Even if it won't revolutionize the way you write software, <code>typealias</code> can help make your job a smidgen easier, and who could argue with that?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Injection for Xcode]]></title>
    <link href="http://artsy.github.io/blog/2016/03/05/iOS-Code-Injection/"/>
    <updated>2016-03-05T12:09:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/03/05/iOS-Code-Injection</id>
    <content type="html"><![CDATA[<p>I have been writing code for roughly a decade. A large chunk of that time has been sitting waiting for my project to compile. It's a nice excuse to <a href="https://xkcd.com/303/">practice sword fighting</a> in the office, but really, deep down. It's frustrating. It's so easy to become <a href="https://xkcd.com/356/">nerd-sniped</a> when you wait for a long time.</p>

<p>As we integrate Swift into our projects, I've been seeing our compile times increase. So, I took some time to look at ways to improve this. The best option, so far, has been dynamic code injection via <a href="https://github.com/johnno1962/injectionforxcode">Injection Plugin for Xcode</a>. In a gist: This means that we don't recompile and re-launch, instead we inject new bits of code into a running application. This reduced the compile cycle on Eigen from 7 seconds to 1 second.</p>

<p>I took some time over the weekend to try and put together a video showing how I used code injection on a trivial app to create a view controller in code. It covers the technique I've <a href="https://github.com/artsy/eigen/pull/1236">started using in Eigen</a> and talks a little bit about how the pieces come together.</p>

<p>Jump <a href="https://www.youtube.com/watch?v=uftvtmyZ8TM">to YouTube</a> for the video, or click more for a smaller inline preview.</p>

<!-- more -->


<p></div></div><iframe width='100%' height='600' src='https://www.youtube.com/embed/uftvtmyZ8TM ' frameborder='0' allowfullscreen></iframe><div class='meta-container'><header>&nbsp;</header></div><div class='content-container'><div class='entry-content'></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being a Good OSS Citizen]]></title>
    <link href="http://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen/"/>
    <updated>2016-01-28T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen</id>
    <content type="html"><![CDATA[<p>Let's take a look at the day in the life of an open source citizen: me. On our app, I was given <a href="https://github.com/artsy/eigen/issues/971">an issue</a> that would allow users to refine what kinds of sale artworks they were looking at, and it included this <em>awesome</em> slider control so they could set min/max price ranges.</p>

<!-- more -->


<p></div></div><a href='/images/2016-01-28-being-a-good-open-source-citizen/design.png'><img src="/images/2016-01-28-being-a-good-open-source-citizen/design.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Nice.</p>

<p>But iOS doesn't have a slider like that built into UIKit, so I headed to <a href="https://cocoapods.org">CocoaPods.org</a> to find something that would work for me. Searching for "range slider" yielded a bunch of results, and I looked through three or four of them.</p>

<p>I picked <a href="https://cocoapods.org/pods/MARKRangeSlider">this one</a> because it did <em>almost exactly</em> what I needed, provided a reasonable level of customization, and had a history of development leading up to a recent v1.0.</p>

<p>But I said it did "almost exactly" what I needed, which meant I'd have to modify it. At this point, many developers either look for a different library or abandon the idea of using an existing library altogether and invent one themselves. That's a shame, because it's almost always faster and easier to improve an existing library than it is to build your own.</p>

<p>So let's step through what I did to modify this library for my needs. First, I checked to see if there was an issue for my feature already opened on the repository; maybe someone else had tried this, and I could benefit from their experience! That wasn't the case, so I forked the library to my personal account and cloned my fork locally. Now I can modify the library's code and commit it to my fork.</p>

<p>Next I add the library to my <code>Podfile</code>, but I'm clever about it.</p>

<pre><code class="rb">pod 'MARKRangeSlider', :path =&gt; '../MARKRangeSlider'
</code></pre>

<p>This tells CocoaPods that I'm <em>working</em> on the pod, and, it is stored in a local directory (the one where I cloned my fork). This makes it a "development pod", so that the files in Xcode are actually the ones I've cloned locally.</p>

<p>This is a really important, but subtle point. Normally, CocoaPods downloads copies of the files and stores those copies, but in this case, it refers to the existing files. It doesn't copy them at all: any changes I make to the library while working on my app are to the files I cloned. That means they can be easily committed and pushed up to my fork.</p>

<p>That's exactly what I did. I made my changes from within the app until I was satisfied, and <a href="https://github.com/ashfurrow/MARKRangeSlider/commit/aefbeb181b62c8c257a7d0ada1e75834489b1909">pushed them to my fork</a>, then pointed the <code>Podfile</code> to my fork of the pod.</p>

<pre><code class="rb">pod 'MARKRangeSlider', :git =&gt; 'https://github.com/ashfurrow/MARKRangeSlider.git'
</code></pre>

<p>Nice. At this point, I continued on as a developer, running a <code>pod install</code> to download the forked library with my commits as usual. I finished building the feature and <a href="https://github.com/artsy/eigen/pull/1075">PR'd it using my fork</a>.</p>

<p><img src="/images/2016-01-28-being-a-good-open-source-citizen/done.gif" alt="" /></p>

<p>I could've stopped here, but that'd be a shame. Someone else might want the same changes I made, and I should submit them back. I <a href="https://github.com/vadymmarkov/MARKRangeSlider/pull/22">opened a PR</a> on the library to contribute my changes back, and I made sure to explain <em>why</em> my changes were necessary. Because our app is open source, I was even able to link to <em>our</em> PR to show the library author how their work was being used.</p>

<p>The next morning, I woke up to find my PR had been merged, and after the author pushed an updated version of the library (including my changes), I updated our app's <code>Podfile</code> once more.</p>

<pre><code class="rb">pod 'MARKRangeSlider'
</code></pre>

<p>Then ran <code>pod update MARKRangeSlider</code> so it would update <em>just</em> that pod, and point it to the new release. I re-ran the unit tests to make sure I hadn't broken anything, and <a href="https://github.com/artsy/eigen/pull/1077">PR'd the change</a>.</p>

<p>This sounds like a lot, and having written it all out, I guess it is. But it's a series of small steps, not big ones, and I've worked like this long enough that it's second-nature to me now.</p>

<hr />

<p>I believe that using existing open source libraries is almost always better than writing your own, and I believe that improvements made to open source ought to be shared. Those beliefs shape my behaviour as a developer, and as a person.</p>

<p>Making your first contribution to a project may seem scary, but we all <a href="https://github.com/B-Sides/ELCSlider/pull/1">start somewhere</a>. It gets easier, and in time, you will become a paragon of open source citizenry.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Teaching Swift at Artsy]]></title>
    <link href="http://artsy.github.io/blog/2016/01/26/swift-at-artsy/"/>
    <updated>2016-01-26T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/01/26/swift-at-artsy</id>
    <content type="html"><![CDATA[<p>While the Artsy engineering team includes many disciplines, tech stacks, and personalities, we all share a few things in common: a respect for each other, an appreciation of art-meets-science, and a celebration of learning. These are actually traits shared with our entire company, even non-engineers. So last Summer when Orta and I had some down time, it occurred to us how we could do something super-productive that was congruent with our values: we could teach the company Swift.</p>

<!-- more -->


<p>Like most project ideas, the first step was to create a <a href="https://github.com/orta/Swift-at-Artsy">GitHub repo</a>. We made it open source because <a href="http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html">why not</a>. Orta and I chatted and realized that to teach the company Swift, we would need two tracks:</p>

<ul>
<li>A track for newcomers who may have never programmed before.</li>
<li>A track for anyone who could explain what "object-oriented programming" meant.</li>
</ul>


<p>It was really important to us to include beginners who had no exposure to programming â€“ the digital marketing and genoming teams specifically were keen to learn how to program.</p>

<p>I'm a big believer in using "newcomer" and "informed" to describe the two groups of developers â€“ it helps prevent newcomers from feeling inadequate and better describes the expectations for students.</p>

<p>We also focused on Swift-only, no iOS. That allowed us to focus on the language â€“ which was fun because it let us focus on us learning new stuff, too â€“ and we kept the course to five one-hour sessions (per track).</p>

<p>Next step was obviously to create a Slack chatroom. We re-purposed the oft-neglected room dedicated to Taylor Swift and turned it into a place where anyone could ask questions and share resources. It's also a helpful place to @channel everyone to remind them about the classes.</p>

<p></div></div><a href='/images/2016-01-26-swift-at-artsy/chatroom.png'><img src="/images/2016-01-26-swift-at-artsy/chatroom.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Orta taught the beginner course and I TA'd it, answering questions as he instructed and offering suggestions when I felt something should be clarified (kind of like pair-programming except for teaching). We switched roles for the informed class. Preparing course materials was done through GitHub pull requests, which integrated well into our existing workflow on the mobile team.</p>

<p>We ran into some troubles in the first classes of both tracks: Swift 2 was in beta, and getting everyone on the correct versions of Xcode proved... difficult. Keeping them up-to-date as Xcode betas continued to be released over five weeks was also challenging. This was a problem in both tracks, but some problems were track-specific.</p>

<p>Explaining fundamental concepts like variables and for-loops to beginners is challenging. It reminded me of when I TA'd intro-to-Java courses in University (while the code then was obviously much uglier, <code>javac</code> is arguably more user-friendly than Xcode). Having the pair-programming approach worked well to help explain these concepts.</p>

<p>The biggest challenge with the informed class was rounding everyone up to actually attend the classes. Engineers are addicted to being busy, and like most side-projects, everyone was initially very excited about the course, but that interest dropped off quickly. Orta would help by physically going to our colleagues' desks and gently reminding them.</p>

<p>Regardless of the challenges, the course had a significant impact, both within Artsy and in the larger Swift community. Some of the course materials have been <a href="https://github.com/orta/Swift-at-Artsy/blob/master/Beginners/Lesson%20One/README_ZH.md">translated into Chinese</a> and we regularly received suggestions (and occasionally corrections) about our content. Newcomers to programming gained insights into <em>what exactly engineers do</em> and why bugs happen, while informed colleagues saw parallels between Swift and their own favourite languages (most often Scala). The course materials have also helped other mobile team members (who usually write only Objective-C) get started with Swift.</p>

<p>The beginner students really appreciated <a href="https://github.com/orta/Swift-at-Artsy/tree/master/Beginners/Lesson%20Three">lesson three</a> because we used real-world (scaled down) data structures that Artsy actually uses. We presented problems to solve â€“ problems our colleagues were familiar with from their day-to-day work â€“ and we showed how they can be solved with programming. <a href="https://github.com/orta/Swift-at-Artsy/tree/master/Beginners/Lesson%20Four">Lesson four </a> was the most well-received lesson as it featured some concrete "making the computer do cool stuff" material.</p>

<p>Finally, there was just a great sense of accomplishment. Orta and I had taken time during a downtime in engineering work and turned it into something that helped the company and helped the community. We got thanked internally and externally, and that felt great; helping others has a lot of tangible benefits, but feeling good about it is one of my favourites.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Review: Eidolon]]></title>
    <link href="http://artsy.github.io/blog/2016/01/14/eidolon-code-review/"/>
    <updated>2016-01-14T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/01/14/eidolon-code-review</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/artsy/eidolon">Eidolon</a> is the third app from Artsy's mobile team, and it was the <a href="http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/">first to be developed totally in the open</a>. It's often used as a reference for what an app written in Swift, or written using FRP, should look like. Given how interested the community seems to be around the app, it's about time we did a walkthrough of the code.</p>

<!-- more -->


<p>This was done as a part of the engineering team's weekly lunch and learn sessions, where we get together and share what we've been working on. Since most of you aren't Artsy engineers, and so you can't ask questions in-person, please feel free to <a href="https://github.com/artsy/eidolon/issues/new">open an issue</a> to ask for any clarifications.</p>

<p>Jump <a href="https://www.youtube.com/watch?v=LAAMk7oLrmg">to YouTube</a> for the video, or click more for a smaller inline preview.</p>

<p></div></div><iframe width='100%' height='600' src='https://www.youtube.com/embed/LAAMk7oLrmg ' frameborder='0' allowfullscreen></iframe><div class='meta-container'><header>&nbsp;</header></div><div class='content-container'><div class='entry-content'></p>
]]></content>
  </entry>
  
</feed>
