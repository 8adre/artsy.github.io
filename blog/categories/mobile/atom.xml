<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mobile | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/mobile/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2016-06-23T16:46:50+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GraphQL for iOS Developers]]></title>
    <link href="http://artsy.github.io/blog/2016/06/19/graphql-for-mobile/"/>
    <updated>2016-06-19T12:09:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/06/19/graphql-for-mobile</id>
    <content type="html"><![CDATA[<p>GraphQL is something you may have heard in passing, usually from the web team. It's a Facebook API technology, that describes itself as a <em>A Data Query Language and Runtime</em>. GraphQL is a <a href="http://facebook.github.io/graphql/">spec</a>, and there are <a href="https://github.com/chentsulin/awesome-graphql#libraries">multiple implementation</a> of it. As mobile engineers, we can consider it an API, where the front-end team have as much control as the backend.</p>

<p>This blog post covers our usage of GraphQL, and what I've learned in the last 3 months of using it in <a href="https://github.com/artsy/eigen/">Eigen</a>.</p>

<!-- more -->


<h3>So what is GraphQL</h3>

<p>You can get the full explanation on <a href="http://graphql.org">the GraphQL website</a>. Though, I found running through <a href="https://learngraphql.com">Learn GraphQL</a> site to really hammer down how it works. Reading the <a href="https://facebook.github.io/react/blog/2015/05/01/graphql-introduction.html">introduction blog post</a> can be useful too.</p>

<p>GraphQL is an API middle-layer. It acts as an intermediate layer between multiple front-end clents and multiple back-end APIs. This means it can easily coalesce multiple API calls into a single request, this can be a <em>massive</em> user experience improvement when you have a screen that requires information from multiple sources before you can present anything to a user.</p>

<p><img src="/images/2016-06-19-graphql-for-iOS-devs/graphQL.svg" width=100%></p>

<p>As a client, you <a href="https://github.com/artsy/eigen/blob/dac7c80b66b600f9a45aaae6095544fe420f0bbc/Artsy/Networking/ARRouter.m#L1011">send</a> a "<a href="http://graphql.org/docs/getting-started/#queries">JSON-shaped query</a>" structure, which is heirarchical and easy to read:</p>

<pre><code class="json">{
  artwork(id: "kimber-berry-as-close-to-magic-as-you-can-get") {
    id
    additional_information

    is_price_hidden
    is_inquireable
  }
}
</code></pre>

<blockquote><p>This will search for a <a href="https://www.artsy.net/artwork/kimber-berry-as-close-to-magic-as-you-can-get">specific artwork</a>, sending back the Artwork's <code>id</code>, <code>additional_information</code>, <code>is_price_hidden</code> and <code>is_inquireable</code>.</p></blockquote>

<p>It's important to note here, the data being sent <em>back</em> is only what you ask for. This is not defined on the server as a <em>short</em> or <em>embedded</em> version of a model, but the specific data the client requested. When bandwidth and speed is crucial, this is the other way in which GraphQL improves the app-user experience.</p>

<p>That's the two killer features:</p>

<ol>
<li>Coalesce Multiple Network Requests. Reducing the amount of network requests that need to be made.</li>
<li>Only Send The Data You Want. Only sending the data you are interested in.</li>
</ol>


<p>With mobile apps you're working with unreliable, slow networks with high bandwidth costs. Optimising towards less networking with richer data means your app is more resiliant to things outside of your control.</p>

<p>This is in stark contrast to existing API concepts, like <a href="http://stateless.co/hal_specification.html">HAL</a> and <a href="http://jsonapi.org">JSON-API</a> - both of which are optimised for caching, and rely on "one model, one request" types of API access. E.g. a list of Artworks would actually contain a list of hrefs instead of the model data, and you have to fetch each model as a separate request.</p>

<h3>Using GraphQL</h3>

<p>Artsy's GraphQL server is (unsurprisingly) open-source, it's at <a href="https://github.com/artsy/metaphysics">artsy/metaphysics</a>. However, it's not publicly accessible, (<a href="https://github.com/artsy/metaphysics/issues/279">yet?</a>). One of the coolest things about developing against a GraphQL server is GraphiQL - an IDE for exploring your API. I can't show you ours, but I can send you to <a href="http://clayallsopp.com">Clay Allsop's</a> <a href="https://www.graphqlhub.com">GraphQLHub</a>:</p>

<p><a href="https://www.graphqlhub.com/playground?query=%23%20Hit%20the%20Play%20button%20above!%0A%23%20Hit%20%22Docs%22%20on%20the%20right%20to%20explore%20the%20API%0A%0A%7B%0A%20%20graphQLHub%0A%20%09reddit%20%7B%0A%20%20%20%20user(username%3A%20%22orta%22)%20%7B%0A%20%20%20%20%20%20username%0A%20%20%20%20%20%20commentKarma%0A%20%20%20%20%20%20createdISO%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20subreddit(name%3A%20%22swift%22)%7B%0A%20%20%20%20%20%20newListings(limit%3A%202)%20%7B%0A%20%20%20%20%20%20%20%20title%0A%20%20%20%20%20%20%20%20comments%20%7B%0A%20%20%20%20%20%20%20%20%20%20body%0A%20%20%20%20%20%20%20%20%20%20author%20%7B%20%0A%20%20%20%20%20%20%20%20%20%20%20%20username%0A%20%20%20%20%20%20%20%20%20%20%09commentKarma%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D">Here</a> ( I strongly recommend pausing to open that link in a new window. Press cmd + enter to see the results. We also have an example of refactoring that request <a href="https://www.graphqlhub.com/playground?query=%23%20Hit%20the%20Play%20button%20above!%0A%23%20Hit%20%22Docs%22%20on%20the%20right%20to%20explore%20the%20API%0A%0A%7B%0A%20%20graphQLHub%0A%20%09reddit%20%7B%0A%20%20%20%20user(username%3A%20%22orta%22)%20%7B%0A%09%09%09...userFields%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20subreddit(name%3A%20%22swift%22)%20%7B%0A%20%20%20%20%20%20newListings(limit%3A%202)%20%7B%0A%20%20%20%20%20%20%20%20title%0A%20%20%20%20%20%20%20%20comments%20%7B%0A%20%20%20%20%20%20%20%20%20%20body%0A%20%20%20%20%20%20%20%20%20%20author%20%7B%20%0A%09%09%09%20%20%20%20%20%20...userFields%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A%0Afragment%20userFields%20on%20RedditUser%20%7B%0A%20%20username%0A%20%20commentKarma%0A%20%20createdISO%0A%7D">here</a>. )</p>

<p>GraphQL comes with a playground for the API! It's amazing! Clay called it the <a href="https://medium.com/the-graphqlhub/graphiql-graphql-s-killer-app-9896242b2125#.6ht6374bq">"Killer App" of GraphQL</a> - I'm inclined to concur. I've never had API docs this useful. This is built on top of the schema/docs/type reflection APIs inside the GraphQL spec.</p>

<p></div></div><a href='/images/2016-06-19-graphql-for-iOS-devs/graphiql.png'><img src="/images/2016-06-19-graphql-for-iOS-devs/graphiql.png" title="Selection diagram" ></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<h3>How GraphQL Changed How We Write Native Code</h3>

<h4>View Models</h4>

<p>Our GraphQL server is owned by the <a href="http://artsy.github.io/blog/2016/03/28/artsy-engineering-organization-stack/">web-practice</a> and the mobile practice also help out occasionally. This ownership distinction is important, an API like this would normally be handled by our platform team.</p>

<p>Because of Metaphysics' ownership as a "front-end" product, it can contain additional information that is specific to front-end needs. For example, in our first example of a request to our GraphQL server we requested <code>id</code>, <code>additional_information</code>, <code>is_price_hidden</code> and <code>is_inquireable</code> - only two of these items come from the database. Both is <code>is_price_hidden</code> and <code>is_inquireable</code> are derived from the</p>

<p>This is <em>awesome</em>, because previously a <a href="https://github.com/artsy/eigen/blob/dac7c80b66b600f9a45aaae6095544fe420f0bbc/Artsy/Views/Artwork/ARArtworkActionsView.m#L310-L362">lot of this logic</a> existed in a <a href="https://github.com/artsy/eigen/blob/dac7c80b66b600f9a45aaae6095544fe420f0bbc/Artsy/Views/Artwork/ARArtworkActionsView.m#L108-L109">Google Doc</a> which needed to be re-implemented in 3-4 clients. On the native side we would regularly find out we were out-of-date mid-release cycle and neded to rush to catch up.</p>

<p>So, what does this mean for view models? It lessens the need for them. If you can move a lot of your derived data to the server, it is handling the logic that goes in a view model. We've not stopped writing view models, but now discussions on them includes "should this move to Metaphysics?".</p>

<h4>React Native</h4>

<p>We've already <a href="https://twitter.com/orta/status/734880605322776576">shipped one full view controller</a> in <a href="https://facebook.github.io/react-native/">React Native</a> for our flagship app, <a href="https://github.com/artsy/eigen/">Eigen</a>. The advantages that came from GraphQL were a big part of the discussion around using React Native.</p>

<p>There will be longer articles on the "why" and "how" we choose to work this way. However, the key thing that we're excited about in using React Native is Relay. Using Relay, our <a href="https://github.com/artsy/emission/tree/2ac6e9fc0f85ca81483bcbd6c841841104f07833/lib/components/artist">views</a> can declare a fragment of the GraphQL query that each respective <a href="https://github.com/artsy/emission/blob/2ac6e9fc0f85ca81483bcbd6c841841104f07833/lib/components/artist/biography.js#L60-L69">view needs</a>.</p>

<p>So, in our Artist View Controller, the Biography "View" (<a href="https://facebook.github.io/react-native/docs/native-components-ios.html">component</a>) declares "when I am in the view heirarchy, you need to grab a <code>bio</code>, and <code>blurb</code>"</p>

<pre><code class="js">export default Relay.createContainer(Biography, {
  fragments: {
    artist: () =&gt; Relay.QL`
      fragment on Artist {
        bio
        blurb
      }
    `,
  }
});
</code></pre>

<p>Once your views are declaring what data they need, and are acting on that data - you see less of a need to use models.</p>

<hr />

<p>GraphQL is having a massive impact in the way that we write our apps. It means we can make much faster mobile apps, as the network is our critical path. Faster apps means happier users, happier users means happier developers. I want to be happy. So I'm thankful that the <a href="https://github.com/artsy/metaphysics/graphs/contributors">Web practice</a> gave GraphQL a try, and <a href="https://github.com/artsy/metaphysics/pull/243">welcome'd</a> <a href="https://github.com/artsy/metaphysics/pull/313">us</a> <a href="https://github.com/artsy/metaphysics/pull/226">to</a> <a href="https://github.com/artsy/metaphysics/pull/302">the</a> <a href="https://github.com/artsy/metaphysics/issues/2">party</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why does my team's Podfile.lock Podspec checksums change?]]></title>
    <link href="http://artsy.github.io/blog/2016/05/03/podspec-checksums/"/>
    <updated>2016-05-03T12:09:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/05/03/podspec-checksums</id>
    <content type="html"><![CDATA[<p>We use CocoaPods, and <a href="https://github.com/artsy/eigen/issues/418">we don't check in our Pods</a> directory for one of our fastest moving apps, <a href="https://github.com/artsy/eigen/">Eigen</a>. This sometimes can cause an <a href="https://github.com/artsy/eigen/pull/1464">interesting data churn</a> inside the <code>Podfile.lock</code> when developers have different sha checksums for their Pods. This is weird, what gives?</p>

<!-- more -->


<h3>What are the Lockfiles?</h3>

<p>First off, to ensure we're talking about the same thing, this is our <a href="https://github.com/artsy/eigen/blob/master/Podfile.lock">Podfile.lock</a>. The lockfile is used on <code>pod install</code> to ensure all the members of your team have the <em>exact same</em> version of the libraries as each other. Otherwise, with a Podfile like:</p>

<pre><code class="ruby">platform :ios, '9.3'
pod 'AFNetworking/Serialization', '~&gt; 3.0'
target 'MyApp'
</code></pre>

<p>A developer running <code>pod install</code> would get the latest <code>3.x</code> version, which could be <code>3.1</code> originally, but then 6 months later they could get <code>3.4</code> - without a lockfile there is no way to keep track of the specific build. This is why it should always be in your code repo. In the case above my lockfile looks like this:</p>

<pre><code class="yaml">PODS:
  - AFNetworking/Serialization (3.1.0)

DEPENDENCIES:
  - AFNetworking/Serialization (~&gt; 3.0)

SPEC CHECKSUMS:
  AFNetworking: 5e0e199f73d8626b11e79750991f5d173d1f8b67

PODFILE CHECKSUM: 876ceaa409f4ade2b3d58d310dbe026393824bcc

COCOAPODS: 1.0.0.beta.8
</code></pre>

<h3>What do the Spec Checksums do?</h3>

<p>With the CocoaPods Master Specs repo, we do our best <a href="https://github.com/CocoaPods/Specs/pull/12199">to try</a> and ensure a write-once repository of Podspecs for the public. However, there are many times when you cannot guarantee that every you have the same version of a Podspec as everyone else in your team.</p>

<p>So, CocoaPods makes a checksum of the JSON representation of your Podspec and keeps that in the lockfile. You can easily <a href="https://github.com/CocoaPods/CocoaPods/issues/3371">replicate</a> the work to generate a checksum with:</p>

<pre><code class="sh">~/D/MyApp ⏛  pod ipc spec ~/.cocoapods/repos/master/Specs/AFNetworking/3.1.0/AFNetworking.podspec.json  | openssl sha1
5e0e199f73d8626b11e79750991f5d173d1f8b67
</code></pre>

<h3>So why am I seeing churn?</h3>

<p>A normal git development flow when working with libraries is to:</p>

<ul>
<li>Fork a library, change your Podfile to reflect that change</li>
<li>Make some changes</li>
<li>Commit them back to the main repo</li>
<li>Update the Podspec, then make changes bringing your Podfile back to a real (tagged) release</li>
</ul>


<p>CocoaPods is smart about updating your libraries behind the scenes, but it's not perfect. In order to avoid re-creating your entire Pods folder every time it will check whether your libraries are at the expected version and skip re-creating the whole process.</p>

<p>In the example above, we used the CocoaPods' Specs repo version of the Podspec. In forked repos, e,g,</p>

<pre><code class="ruby">pod 'AFNetworking/Serialization', :git =&gt; "https://github.com/orta/AFNetworking.git", :commit =&gt; "6f31b5c7bcbd59d4dac7e92e215d3c2c22f3400e"
</code></pre>

<p>The Podspec is saved into the <code>Pods</code> directory in JSON format at <code>Pods/Local\ Podspecs/AFNetworking.podspec.json</code>, this is to ensure there's always access within the CocoaPods sandbox for the Podspecs, and speed probably. This is the podspec used for generating the checksum.</p>

<p><strong>So how can this get out of sync?</strong></p>

<ul>
<li>During the development cycle, when working with a library you would have used <code>pod update [library]</code> to update just that library you were working on.  This could happen multiple times as you build your changes.</li>
<li>You continued working against your fork till it was ready for review. At this point you have a working version, you submit a PR for code review on the library.</li>
<li>There are changes that affect the podspec that come up in review, you don't do a <code>pod update [library]</code> but send the code back to review ( maybe you changed some metadata for example, which doesn't warrant another update to pass CI. )</li>
<li>Once all code is reviewed, everything is merged back into master.</li>
<li>You <code>pod install</code> - which continues to use the older version of the Podspec inside the Pods dir, e.g. <code>Pods/Local\ Podspecs/AFNetworking.podspec.json</code>.</li>
<li>You now have the older <code>AFNetworking.podspec.json</code> inside your local Pods folder, when the next person runs <code>pod install</code> with your changes merged, they get a different SHA, as they've got the version with the metadata changes.</li>
</ul>


<h3>Simple Fix</h3>

<p>The best option is to run <code>pod update [library]</code> on the computer which is causing churn, this will tell CocoaPods specifically to request a new version of the library. If that fails to give the same checksum as the rest of your team, there's the good old fasioned <code>rm -rf Pods &amp;&amp;  pod install</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Paw with Per-Developer Settings]]></title>
    <link href="http://artsy.github.io/blog/2016/04/14/net-working-with-paw/"/>
    <updated>2016-04-14T12:09:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/04/14/net-working-with-paw</id>
    <content type="html"><![CDATA[<p>I am a big fan of developer tooling, as spending time upfront on improving your process can pay a lot of dividends over time. I want to talk about one in particular: <a href="https://luckymarmot.com/paw">Paw</a>. Paw is a native HTTP client with a bunch of features. I want to cover one that means that we can now <a href="https://github.com/artsy/energy/pull/192">introduce</a> <code>[AppName].paw</code> files in our mobile projects, making it easy for us to discuss networking requests.</p>

<!-- more -->


<h3>OK, what is Paw?</h3>

<p>Paw is a tool that stores collections of API endpoints, along with all the metadata required to call them. We first started using Paw during the creation <a href="https://github.com/artsy/eidolon/blob/master/Kiosk/Stubbed%20Responses/Me.json">of Eidolon</a> as a way to keep track of the auction-related API calls we would need to stub for <a href="http://cocoapods.org/pods/moya">Moya</a>, an iOS networking library that required stubbed data. It made it easy for us to keep track of how all the different API routes work together, and to verify that we were doing things right.</p>

<p></div></div><a href='/images/2016-04-14-Paw/eidolon.png'><img src="/images/2016-04-14-Paw/eidolon.png" title="paw tokens" ></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>We used environment variables to keep track of things we wanted to change, but in using them this way we couldn't publicise our Paw files, the real versions contained secrets that should stay secret.</p>

<p><img src="/images/2016-04-14-Paw/eidolon-env.png" alt="Environments for Eidolon" /></p>

<p>The environment tooling made it easy to change the routes, users and settings easily, but were also the thing keeping us from being able to share the files in source. Because of this, we stopped using Paw to keep track of our routes as we had to ad-hoc share the file over chat.</p>

<h3>A Second Shot</h3>

<p>This week, roughly a year and a half later, I started work on a <a href="https://github.com/artsy/energy/pull/189">large project</a> that I knew would involve using new networking APIs. So I took the time to look for ways to interpret what I was going to be working with. After exploring some alternatives, I came back to Paw, and discovered they had a <a href="https://blog.luckymarmot.com/posts/paw-23-keep-it-secret-keep-it-safe/">new feature</a>: Keychain integration. This stopped my search.</p>

<p>In our iOS projects, as they are all open source, we use <a href="https://github.com/orta/cocoapods-keys">CocoaPods-Keys</a> to ensure that our development configuration secrets are kept safe and outside of the project's source code. It stores the per-project keys inside a developer's Keychain. This means they can be accessed from inside the iOS app, but also from the <a href="/images/2016-04-14-Paw/keychain.png">developer's computer</a> via a determinate location in the Keychain app.</p>

<pre><code>~/d/i/a/energy (master) ⏛  bundle exec pod keys
Keys for Folio
 ├  ArtsyAPIClientSecret - [***********]
 ├  ArtsyAPIClientKey - [***********]
 ├  HockeyAppBetaID - [***********]
 ├  HockeyAppLiveID - [***********]
 ├  IntercomAppID - [***********]
 ├  IntercomAPIKey - [***********]
 ├  SegmentProduction - [***********]
 ├  SegmentBeta - [***********]
 └  SegmentDev - [***********]
</code></pre>

<p>This means that we can use CocoaPods-Keys with Paw in order to use the same <code>ArtsyAPIClientSecret</code> and <code>ArtsyAPIClientKey</code> environment config variables. Great. This is almost enough to make the first API call to to get an access token.</p>

<p>I re-used this idea to allow developers to have unique username and passwords. I created two more entries in Keychain, username and <a href="/images/2016-04-14-Paw/keychain-password.png">password</a>. This is something that every developer using our Paw file has to do, otherwise Paw won't know who to log you in as.</p>

<p><img src="/images/2016-04-14-Paw/keychain-username.png" alt="Keychain Email" /></p>

<p>With these all hooked up, I could set up Paw to use all of our Keychain entities:</p>

<p><img src="/images/2016-04-14-Paw/paw-adding-keychain.png" alt="Paw Adding Keychain" />
<img src="/images/2016-04-14-Paw/paw-setting-password.png" alt="Paw Setting Password" /></p>

<p>Tada! Now I can run my route, and I've got an access token to use with our API.</p>

<h3>Route Resolving</h3>

<p>Automating the route to get an access token is the first step because Paw allows you to use the output of one route inside any new route. I'll show you, then talk it through.</p>

<p></div></div><a href='/images/2016-04-14-Paw/paw-tokens.png'><img src="/images/2016-04-14-Paw/paw-tokens.png" title="paw tokens" ></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>I made it so that my new request ( for the route <code>api/v1/me</code>)  passes in an header of <code>X-Access-Token</code>, with the value being the <code>access_token</code> from the route we just made called <code>Auth</code>. This means that when the token expires, it will automatically re-generate a new one and we're never storing the token explicitly inside the Paw file. Our secrets stay secret, and per-developer - I don't want to know other people's passwords.</p>

<p>Once those two routes were set up, it was a matter of looking up what routes I would need and added them to the paw file for the project. I used the group system to make it easy to show / hide sections, and experimented with using environments to differentiate between staging and production servers. Not quite figured that yet.</p>

<h3>Wrap up</h3>

<p>It's easier to talk about your API when any other developer can open this one file and shoot off requests at the same time as you. One of my favourite nice-touches is to be able to easily convert any request into a cURL command.</p>

<p>I am using this event as a reminder to myself that tools evolve, and maybe your first impression on a developer tool may require re-interpreting in light of software evolution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Xcode's Schemes to run a subset of your tests]]></title>
    <link href="http://artsy.github.io/blog/2016/04/06/Testing-Schemes/"/>
    <updated>2016-04-06T12:09:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/04/06/Testing-Schemes</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/artsy/eigen">Eigen</a> has hit the point where testing is a chore. This is a positive sign, the app has grown in terms of size, complexity, and number of developers considerably over the last 3 years. The test suite makes us feel comfortable making changes.</p>

<p>On my fastest computer, we're just under a minute - <code>Executed 1105 tests, with 1 failure (0 unexpected) in 43.221 (48.201) seconds</code>  for the whole suite. I think I could probably live with 20 seconds max. So I studied how <a href="https://www.jetbrains.com/objc/">AppCode</a> handles running tests, and this will be an illustrated guide as to how you can easily run the subset of tests in Xcode based on their techniques.</p>

<p> I <a href="https://github.com/orta/life/issues/71">have ideas</a> on how to improve time for testing in general, based on <a href="http://artsy.github.io/blog/2016/03/05/iOS-Code-Injection/">Code Injection</a>, but they aren't fully fleshed out and I expect it to be time-intensive to pull off. Time I haven't made yet.</p>

<!-- more -->


<h3>What are Schemes?</h3>

<blockquote><p>An Xcode scheme defines a collection of targets to build, a configuration to use when building, and a collection of tests to execute.</p>

<p>You can have as many schemes as you want, but only one can be active at a time. You can specify whether a scheme should be stored in a project—in which case it’s available in every workspace that includes that project, or in the workspace—in which case it’s available only in that workspace. When you select an active scheme, you also select a run destination (that is, the architecture of the hardware for which the products are built).</p></blockquote>

<p>To <a href="https://developer.apple.com/library/ios/featuredarticles/XcodeConcepts/Concept-Schemes.html">quote Apple</a>.</p>

<h3>Hatching a Scheme</h3>

<p>The Eigen Test Suite is around 50 test classes, these look a bit like this:</p>

<p><img src="/images/2016-04-06-Testing-Schemes/tests.png" alt="Tests" /></p>

<p>Before you start, you want to be able to say, "I want to only run tests for the Fairs section of Eigen", as that is where I will be working for the next few days. To get started, I need to create a new Scheme. You will have seen the schemes before when you click on the Target side of this Targer/Sim button in the top left of Xcode.</p>

<p><img src="/images/2016-04-06-Testing-Schemes/empty_scheme.png" alt="Empty Scheme" /></p>

<p>This is what it looks like on mine, we want to create a new scheme. This brings up a modal window where you need to choose your App's target (this is so you can continue running by pressing <code>cmd + r</code>.)</p>

<p><img src="/images/2016-04-06-Testing-Schemes/new_scheme.png" alt="New Scheme" /></p>

<p>I've called mine "Artsy just for Fairs", as I'm the only person who would see it, I can name it whatever I want. Clicking "OK" selects it, and hides the modal. You now need to go back to the target selector, and go to "Edit Schemes ..." to continue though.</p>

<p><img src="/images/2016-04-06-Testing-Schemes/edit_schemes.png" alt="Edit Schemes" /></p>

<h3>Making Amends</h3>

<p>OK, click on "Test" in the sidebar, and now you're in the Schemes Test editor. This is where you do the work.</p>

<p><img src="/images/2016-04-06-Testing-Schemes/empty_edit_schemes.png" alt="Empty Edit Schemes" /></p>

<p>You need to hit the "+" in order to add your Test Target to the Scheme</p>

<p><img src="/images/2016-04-06-Testing-Schemes/test_scheme.png" alt="Test Scheme" /></p>

<p>Select and "Add" you Targets. This adds the target, you then need to click the disclosure arrow in order to show all the Test Classes.</p>

<p><em>OK, here's some magic</em>. Hold <code>alt</code> and click on the blue tickbox to the right of your test target to turn it off. Then click again, without <code>alt</code>. It should then deselect all of the classes. This is standard in all Mac apps, so go wild there.</p>

<p><img src="/images/2016-04-06-Testing-Schemes/deselect_all.png" alt="Deselect All" /></p>

<p>This means you can go find the classes you do want to run, in my case that is the Test Classes relating to Fairs.</p>

<p><img src="/images/2016-04-06-Testing-Schemes/just_the_good_tests.png" alt="Just The Good Tests" /></p>

<p>Now when I press <code>cmd + u</code> it will only run those test classes.</p>

<h3>Wrapping Up</h3>

<p>Which means I can now get back to work at a reasonable pace. <code>Executed 15 tests, with 0 failures (0 unexpected) in 0.277 (0.312) seconds</code>. I can then run the full suite whenever I go and make a cup of tea.</p>

<p><em>Note:</em> If you want to avoid using the mouse to change scheme, the <a href="/images/2016-04-06-Testing-Schemes/next_prev.png">key commands</a> to change between visible schemes is <code>cmd + ctrl + [</code> and  <code>cmd + ctrl + ]</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Injection for Xcode]]></title>
    <link href="http://artsy.github.io/blog/2016/03/05/iOS-Code-Injection/"/>
    <updated>2016-03-05T12:09:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/03/05/iOS-Code-Injection</id>
    <content type="html"><![CDATA[<p>I have been writing code for roughly a decade. A large chunk of that time has been sitting waiting for my project to compile. It's a nice excuse to <a href="https://xkcd.com/303/">practice sword fighting</a> in the office, but really, deep down. It's frustrating. It's so easy to become <a href="https://xkcd.com/356/">nerd-sniped</a> when you wait for a long time.</p>

<p>As we integrate Swift into our projects, I've been seeing our compile times increase. So, I took some time to look at ways to improve this. The best option, so far, has been dynamic code injection via <a href="https://github.com/johnno1962/injectionforxcode">Injection Plugin for Xcode</a>. In a gist: This means that we don't recompile and re-launch, instead we inject new bits of code into a running application. This reduced the compile cycle on Eigen from 7 seconds to 1 second.</p>

<p>I took some time over the weekend to try and put together a video showing how I used code injection on a trivial app to create a view controller in code. It covers the technique I've <a href="https://github.com/artsy/eigen/pull/1236">started using in Eigen</a> and talks a little bit about how the pieces come together.</p>

<p>Jump <a href="https://www.youtube.com/watch?v=uftvtmyZ8TM">to YouTube</a> for the video, or click more for a smaller inline preview.</p>

<!-- more -->


<p></div></div><iframe width='100%' height='600' src='https://www.youtube.com/embed/uftvtmyZ8TM ' frameborder='0' allowfullscreen></iframe><div class='meta-container'><header>&nbsp;</header></div><div class='content-container'><div class='entry-content'></p>
]]></content>
  </entry>
  
</feed>
