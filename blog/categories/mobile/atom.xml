<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mobile | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/mobile/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2016-02-03T07:54:04+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Interviewing, applying and getting your first job in iOS]]></title>
    <link href="http://artsy.github.io/blog/2016/01/30/iOS-Junior-Interviews/"/>
    <updated>2016-01-30T11:09:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/01/30/iOS-Junior-Interviews</id>
    <content type="html"><![CDATA[<p>When I was at the beginning of my career, my first developer job application was to a design agency who were doing Mac development too. It was pretty nerve-wracking to apply for my first programming job, and I came into the interview with no idea what to expect. I had just graduated from university and was at the first few steps of my career, I'd call this being a junior. It was a time period where I would need mentoring, and supervision in order to grow. A good explanation is in <a href="http://programmers.stackexchange.com/questions/14914/whats-the-difference-between-entry-level-jr-sr-developers">this StackOverflow</a>.</p>

<p>Now that I'm both further on in my career, and involved with so many juniors in NYC, I'm meeting with a lot of people who are in the same position I was then and I get a lot of questions asking what they can do to prepare. This post <em>attempts</em> at being a comprehensive collection of recommendations. It is subjective, of course, and strongly biased towards my experiences.</p>

<p>Before I jump through to the article, there's one thing that should be above the fold. <em>Chill out</em>. You might not get it right on the first try, I've applied for jobs and received a "no thanks." Yet eventually I became the head of mobile at Artsy. Everyone finds their place in time.</p>

<!-- more -->


<h3>On Your Readiness</h3>

<p>No-one starting out is ever ready, and an individual is <a href="https://ashfurrow.com/blog/you-never-arrive/">never really "done"</a>. However, in this <a href="http://dbgrandi.github.io/minimum_viable_programmer/">post @dbgrandi</a> neatly sums up the lower bar to entry.</p>

<blockquote><p>I had a long list of specific things relating to Xcode and iOS. They were very tedious things like, “you should know how to add a new file to an Xcode project.” I’ve shortened that list to a general description here.</p>

<p>I expect you to be able to start a new project, write some code to download a bit of JSON via HTTP, and use the parsed JSON to present some data in a UITableView.</p>

<p>If you can do that, in a well organised manner, and can discuss the choices you made to get your app built you’ll have been able to do almost everything that was on that long and tedious list.</p></blockquote>

<p>This is a great starting point. In an ideal world, an interviewer isn't going to judge you on not knowing every detail about the whole system. They will have expectations that you're going to have to learn on the job for a lot of things, and that's ok.</p>

<h3>On the lookout</h3>

<p>There are a bunch of websites for putting up job adverts.</p>

<ul>
<li><a href="http://stackoverflow.com/jobs">StackOverflow jobs</a></li>
<li><a href="https://www.natashatherobot.com/swift-jobs/">Natasha The Robot's Swift Jobs</a></li>
<li><a href="http://jobs.coreint.org">Core Intuition's Jobs Board</a></li>
<li><a href="https://www.apple.com/jobs/us/">Apple's Jobs Site</a></li>
<li><a href="https://twitter.com/xcodejobs">@xcodejobs</a></li>
</ul>


<p>These kind of things work, I got my first programming job through <a href="http://www.cocoabuilder.com/archive/cocoa/174142-ann-cocoadev-jobs-board.html">CocoaDev Jobs</a>.</p>

<p>These are great, but in my opinion the best way to find out what companies are hiring is to attend meet-ups in the city. In NYC we have 3-4 big iOS meet-ups a month, and all of them give a chance for people looking for others to work to speak up. You might not live in as big of a city, but I used to travel an hour to Manchester to attend a meet-up, they would have the same thing, I almost became a full-time rubyist because of it. I have quite a few friends in NYC who started their careers by talking to someone at a meet-up.</p>

<p>Generic job websites can be good, for example Artsy's job postings are on <a href="https://angel.co/artsy">AngelList</a> and <a href="https://www.glassdoor.co.uk/Job/Artsy-Jobs-E793485.htm">Glassdoor</a> but the vast majority of applications feel like they were sent to a lot of companies. They are given a low priority when compared to direct inquiries because of this. I can't speak from experience but <a href="https://www.theladders.com">Ladders</a>, <a href="https://www.linkedin.com">LinkedIn</a>, <a href="http://hired.com">Hired</a> and <a href="https://weworkremotely.com">weworkremotely</a> are probably worth a look too.</p>

<p>Finally, search the websites of companies you like for careers or jobs pages.</p>

<p>If you see an advert for a mobile developer, but they don't mention juniors, you should apply anyway. We've never had junior positions on our jobs pages, but have hired some who inquired anyway. Don't pretend to be more senior than you are though, set the right expectations.</p>

<p>Finally, consult your network, talk to people at meet ups, sneakily contribute to open source projects with people you want to talk to and then email the project owner after they've got to know your name.</p>

<h3>On a Coffee</h3>

<p>Know what goes a long way? Talking with someone before applying. I regularly get coffee with applicants or potential applicants when I'm in NYC. Coffee can be hard when applying for junior roles when remote, but so far, to my knowledge I've not talked to anyone who hires a junior as a remote developer. I'm not sure it could work unless the entire team was remote, or the junior developer had a lot of experience and was only a junior in the sense that they were just hitting the work-force.</p>

<p>These are 15-30 minute informal chats, but from an employers perspective they are definitely a good way to filter candidates. A coffee is time-cheap, interviews are time-expensive. So ask someone on the dev team to do them, you'll usually get a yes. Tamar Nachmany has some <a href="https://booleancubes.tumblr.com/post/137057622039/the-networking-with-awesome-strangers-checklist">great, salient points</a> on the right way to pitch these emails.</p>

<p>It's definitely worth doing your homework on both the person doing coffee, and the company they work for. A coffee could turn into an interview.</p>

<h3>On an Intro Email</h3>

<p>Look at the language in the jobs page, and have your email / intro letter reflect that. When I receive very formal "dear hiring manager" emails it reflects badly on the applicant, <a href="https://www.artsy.net/article/artsy-jobs-mobile-engineer">our jobs page</a> states to not worry about that, as we're not that kind of culture.</p>

<p>An intro email is your chance to show that you understand the core value of a company. For example when I receive applications that only talk about our contributions to OSS then I wonder if they've even studied what Artsy is, and how OSS by Default is derived from deeper values as opposed to being an end-goal in itself. If you apply to Facebook and the only thing you mention is <a href="http://facebook.github.io/react-native/">React-Native</a> I think you'd also be missing the point of Facebook. A great opener to Facebook might talk about how amazing it is that they can work on a product that pretty much everyone they meet uses, and you think it's amazing that there is now 1 billion active users a day. It shows you understand the scope of their problems, and have done your homework.</p>

<p>Let's look at Ash's intro email:</p>

<blockquote><p>My name is Ash Furrow and I’m writing in regards to your mobile engineering position. I heard about the position first through Orta Therox, who spoke highly of Artsy.</p>

<p>Upon further reading, Artsy sounded exactly like the kind of place I want to work. An ambitious goal, to change the world, with a thorough mix of math, software engineering, and art. I consider myself to be an artist, both when I code and when I am behind the lens of a camera (I like to develop my own film). I love working with companies who understand the important role of art in our society, as I did with 500px.</p></blockquote>

<p><em>10/10.</em> Extremely on topic.</p>

<p>Next, you're going to want to now talk about great of a fit you would be, how well you understand the domain and how you've been doing similar work already.</p>

<blockquote><p>I love how you’ve contributed back to the open source community. I am a strong believer in the power of open source, especially in the iOS community, where there has historically been a resistance to opening software. Sponsoring CocoaPods is a fantastic contribution toward the iOS community and I thank you for it. I’ve contributed back to several projects on GitHub, have written for the Teehan+Lax blog professionally, and have a selection of the apps I’ve written on my portfolio.</p></blockquote>

<p>I know what you're thinking: "Ash wasn't a junior when he applied", well, chances are you've still got a history of things that can be applied towards an email like this. Also, flattery can get you everywhere. "I've been using your app for years, I love how it does 'x' - have you thought of doing 'y'?"</p>

<p>Sarah's was similar:</p>

<blockquote><p>First, I'd just like to say I love Artsy and have been following your company since I learned of its existence two years ago. Making art accessible to the world is a problem the architects of the Internet should undoubtedly be solving and Artsy is doing so with elegance.</p></blockquote>

<p><em>10/10</em> ✔</p>

<blockquote><p>I'm currently transitioning from embedded systems to iOS development and looking for a place where I can learn a lot while making significant contributions to a product. As for my background, I just graduated from NYU with a B.S. in Electrical Engineering and completed a seven-month-long research and development internship at Canary (a home security hardware startup). While I do enjoy building hardware, I find software engineering generally more fun and in tune with my intellectual and creative preferences.</p></blockquote>

<p>Dead on. Later on in the email, she references <a href="https://en.wikipedia.org/wiki/Rosalind_E._Krauss">art critics</a> while discussing <a href="https://en.wikipedia.org/wiki/Enumeration">programming concepts</a>. A great introduction email.</p>

<h3>On a Portfolio</h3>

<p><em>on wording</em>: I use the word portfolio, to encapsulate a CV/Resume/Design Portfolio. They all have <a href="http://www.diffen.com/difference/Curriculum_Vitae_vs_R%C3%A9sum%C3%A9">specific meanings</a>, but in this case, I mean something you attach to the email to provide the full context of your history/experiences.</p>

<p>There are a lot of places for good, solid advice on the document you are using to persuade someone to interview you. So I'll tell you what has worked for me. I think it should be a one page document, that captures a snapshot of you. Things they must have: your name, a way to contact you and a list of things you think is relevant.</p>

<p>You should consider what you think are qualities that you bring to the table, for some job applications I have submitted both a resume and a design portfolio. If you are particularly proud of your design work, perhaps find a way to include your app store screenshots and branding, or make your portfolio distinctive via design.</p>

<p>Finally, consider that this is a document someone else will have to read. A dense document full of long descriptions and wordy titles is tough to read. Spend some time on making it as readable and easily digestible as possible.</p>

<h5>On Representing Myself</h5>

<p>I dug through my archives and found every resume I have ever created; ranging from my first as a student, through to last year.</p>

<ul>
<li><a href="/images/2016-01-30-iOS-Junior-Interviews/2007-144.jpg">2007</a> as a part of the WWDC Student Scholarship. It was significantly less competitive then.</li>
<li><a href="/images/2016-01-30-iOS-Junior-Interviews/2008-general-144.jpg">2008</a> as a graduate applying for jobs that were not programming focused.</li>
<li><a href="/images/2016-01-30-iOS-Junior-Interviews/2008-programming-144.jpg">2008</a> as a graduate applying for programming jobs.</li>
<li><a href="/images/2016-01-30-iOS-Junior-Interviews/2010-144.jpg">2010</a> when applying for jobs once I had stopped being a junior.</li>
<li><a href="/images/2016-01-30-iOS-Junior-Interviews/2015-144.jpg">2015</a> my CV as a part of my U.S. VISA process.</li>
</ul>


<table>
  <thead>
  </thead>
  <tbody>
    <tr>
      <td>
            <a href="/images/2016-01-30-iOS-Junior-Interviews/2007-144.jpg">
                <img height="200" src="/images/2016-01-30-iOS-Junior-Interviews/2007-thumb.jpg">
            </a>
        </td>
      <td>
            <a href="/images/2016-01-30-iOS-Junior-Interviews/2008-general-144.jpg">
                <img height="200" src="/images/2016-01-30-iOS-Junior-Interviews/2008-general-thumb.jpg">
            </a>
        </td>
         <td>
            <a href="/images/2016-01-30-iOS-Junior-Interviews/2008-programming-144.jpg">
                <img height="200" src="/images/2016-01-30-iOS-Junior-Interviews/2008-programming-thumb.jpg">
            </a>
        </td>
      <td>
            <a href="/images/2016-01-30-iOS-Junior-Interviews/2010-144.jpg">
                <img height="200" src="/images/2016-01-30-iOS-Junior-Interviews/2010-thumb.jpg">
            </a>
        </td>
      <td>
            <a href="/images/2016-01-30-iOS-Junior-Interviews/2015-144.jpg">
                <img height="200" src="/images/2016-01-30-iOS-Junior-Interviews/2015-thumb.jpg">
            </a>
        </td>
    </tr>
  </tbody>
</table>


<p>You can definitely get a sense of my skill specialisations happening over the last 8 years, but the tone of how I present myself hasn't really changed.</p>

<p>I also consider my personal web-page <a href="http://orta.io">orta.io</a> to act as a portfolio, Ash Furrow's portfolio page has a <a href="https://ashfurrow.com/portfolio/">similar vibe</a>.</p>

<h5>On the team</h5>

<p>Want to know what the resumes looked like for people applying to Artsy? I asked some of our team to send me their last resumes</p>

<table>
  <thead>
  </thead>
  <tbody>
    <tr>
      <td>
            <a href="/images/2016-01-30-iOS-Junior-Interviews/ash-furrow-resume.pdf">
                <img height="200" src="/images/2016-01-30-iOS-Junior-Interviews/ash-thumbnail.jpg"></br>
                Ash Furrow (2013)
            </a>
        </td>
      <td>
            <a href="/images/2016-01-30-iOS-Junior-Interviews/sarah-scott-resume.pdf">
            <img height="200" src="/images/2016-01-30-iOS-Junior-Interviews/sarah-scott-resume.jpg"><br/>
            Sarah Scott (2014)
            </a>
        </td>
      <td>
            <a href="https://ortastuff.s3.amazonaws.com/artsy/maximcramer_artsy_portfolio.pdf">
                <img height="200" src="/images/2016-01-30-iOS-Junior-Interviews/maximcramer_artsy_portfolio_thumb.jpg"></br>
                Maxim Cramer (2015)
            </a>
        </td>
    </tr>
  </tbody>
</table>


<p>&nbsp;</p>

<p>A portfolio can be whatever you want it to be. You could spend forever on a portfolio, but it's really just an exercise in restraint and prioritisation. Eventually it's been shaved to a point where you can remove nothing more.</p>

<p><em>More infö that I've reviewed and given a 👍:</em></p>

<ul>
<li><a href="http://www.raywenderlich.com/54029/ios-developer-resume-examples">iOS Developer Resume Examples</a> - Somehow I ended up sneaking on this article too.</li>
<li><a href="https://rooting-for-you.cenedella.com/8-minute-resume-my-guide-to-writing-your-resume-effectively-3b0b117d94a#.ouqnzegkh">8 Minute Guide to Writing a Resume</a> - Marc has a lot of experience in this space, plus his advice is definitely better if you're focusing on larger companies.</li>
</ul>


<h3>On The One</h3>

<p>So you know exactly who you are interested in applying to. One of your passions in life is to make music, and you think being a engineer at Spotify would be a dream job. How do you increase your chances?</p>

<p>First up, you should have some experience before you apply. Apply at one or two other companies that you'd also really like to work for first, test out the water. Then for Spotify, you should make sure everything is perfect for them. Write a new CV and mention your band on it, include links to your music in the bottom. Consider Maxim's portfolio above, this was obviously made specifically for an audience of Arts/Tech people, Sarah's also talks about activism and art projects. These are well-tuned portfolios for an audience of Artsy.</p>

<p>A lot of companies have public employee get-togethers, for example at Artsy we have weekly Happy Hour in the office, or <a href="https://artsy.github.io/blog/2015/08/10/peer-lab/">Peer Labs</a> where you can meet a lot of the people working at a company. This is a great way to mine the employees for information about the culture and to try and peek behind the curtain. In the case of Spotify, they host a lot of meet-ups, try attending some at their offices.</p>

<h3>On Interview Preparation</h3>

<p>So you've got an interview, be gracious in setting up a time, it's normal for a bit of back and forth, the company probably has to find a time for a lot of people.</p>

<p>There's a lot of value in a collection of interview questions though, one that IMO is a solid resource is <a href="https://github.com/CameronBanga/iOS-Developer-and-Designer-Interview-Questions">CameronBanga/iOS-Developer-and-Designer-Interview-Questions</a> on GitHub. You could get asked a few of these.</p>

<p>Be cautious with links on the internet here, some of the <a href="http://www.raywenderlich.com/53962/ios-interview-questions">top</a> <a href="http://www.geekinterview.com/Interview-Questions/iOS">links</a> <a href="http://way2ios.com/development/ios-development-2/ios-interview-questions-with-answers/">to</a> <a href="http://www.toptal.com/ios/interview-questions">search</a> here are probably not great for people starting. They aim at a different audience, or focus on minutiae that juniors probably don't know. If you want to help out there, and you're linking to this blog post on a website link it with the name include "iOS interview" in the text of the <a href="http://answers.google.com/answers/threadview/id/141243.html">link</a>.</p>

<p>One book that is considered the go-to for interview preparation is <a href="http://www.crackingthecodinginterview.com">Cracking the Coding Interview</a>, it's considered a great guide to some of the computer-science-y questions you could get asked.</p>

<h5>I didn't study Computer Science</h5>

<p>Then I'd definitely recommend Cracking the Coding Interview. I don't think this is a blocker <em>at all</em> - we have a lot of engineers on staff who do not have a computer science degree. In our line of work, having experience of the art world can be more useful in a lot of cases. It's very likely that you'll feel a hint of <a href="http://geekfeminism.wikia.com/wiki/Impostor_syndrome">impostor syndrome</a> - <a href="https://medium.com/@aliciatweet/overcoming-impostor-syndrome-bdae04e46ec5#.ilrvfqjow">you shouldn't</a> - the tech industry should be (and is) begging for people who can bring interesting new contexts.</p>

<p>During the process of setting up your interviews, you should ask what to expect from the interviews. If they are going to be whiteboards + algorithms like they do at Google/Facebook, then I think you're gonna have to hit the books.</p>

<h5>On Mocks</h5>

<p>If you can do Mock Interviews you should. You need an existing network in order to pull that off, but you can get real feedback that can be extremely helpful. As an employer you have to be very cautious in the way you word a rejection, in a mock interview you don't. This isn't a one-sided process, the interviewer can use the chance to try out a different technique or to improve their interviewing skills.</p>

<p>If you don't know anyone who can do this for you, I'd feel like there are two options: <a href="http://www.careercup.com/interview">buy a mock interview</a> and befriend someone who says they're looking for someone at a meet-up - they must be interviewing so they might want a practice run too. I've given about as many mock interviews as I have done real interviews in the last 2 years.</p>

<p><em>More infö that I've reviewed and given a 👍:</em></p>

<ul>
<li><a href="http://macoscope.com/blog/so-you-have-a-technical-interview-at-macoscope/">So You Have a Technical Interview at Macoscope</a> - Again, probably a bit more than expected of a junior, but a great summary of how they do it</li>
<li><a href="http://www.google.com/about/careers/lifeatgoogle/hiringprocess/">How we hire</a> - How Google's hiring process works.</li>
</ul>


<h3>On iOS Interviews</h3>

<p>To be at this point, a employer has already decided to invest probably something like 10 hours into you. This is spread across a few people but the point is important. To have got here, someone has to be on your side. They will have had to put in work to even get people to agree to schedule you into their day. Your mindset should reflect this, it's not you vs them. It's you and someone. Your job from here is persuading everyone else that gut feeling from that person is correct.</p>

<p>There is no catch-all solid advice for interviews, but I can give you some of the things we talk about in Artsy.</p>

<p>We look for <a href="https://en.wikipedia.org/wiki/T-shaped_skills">T shaped</a> engineers, even in juniors. This means someone who has experience in a pretty wide net of things, but that they have a solid focus. This could be building their APIs for apps, writing their own blog, designing their website, automating some regular tasks or using technology for art.</p>

<p>As a junior, the employer is looking for growth potential. Looking for people who, in the right environment could really thrive. However it's important to note, an interview only lets you know how well someone interviews. The greatest programmers can choke on interviews.</p>

<h5>How I interview Juniors</h5>

<p>One thing I can tell you concretely though, is what I do. My interviews with juniors come in three parts:</p>

<ul>
<li><p>A Chat</p>

<p>I want to get someone comfortable with the interview, I'll have taken points from looking over the portfolio to explore. It will be a pretty one-sided conversation with me only trying to provide points to spring off. "So tell me about when you did x".</p></li>
<li><p>Pair Programming</p>

<p>I want to get a sense of how you use a computer and act under mentorship. So I do one of two things, depending on how work has been the last week. If there's been a pull request which seem small and contained enough from our team on one of our apps, I will pair on re-creating the pull request from scratch, without letting it be known that the PR had already been built and accepted. If there isn't, we'll take a pre-built broken app and fix it.</p>

<p>I want to see things like; do you use Xcode shortcuts? Can you explain the code you're looking at? If I offer some advice, do you use it? Can you present ideas when we're figuring out an abstraction? Can you identify where problematic behaviour lies?</p></li>
<li><p>Learn you a thing</p>

<p>Alright, so I've been building up the applicant's confidence and now it's time to bring that all down. Sorry. I have been paying attention to finding out what the applicant doesn't know. Then I start asking questions about this. It doesn't really matter what the topic is, it could be threading, view controller lifecycle, code coupling, dynamic vs static dispatch, whatever. The point is that I want to understand how someone learns during a discussion. So the conversation tends to switch around, where-in I lead a conversation on the topic - try to lay foundations then experiment with questions that should require an understanding of the topic.</p></li>
</ul>


<p>Here's <a href="https://medium.com/@jon.lazar/my-approach-to-learning-ios-fccf943aead#.ei4yvc38k">a long writeup</a>, with a lot of depth (and places to jump off from) from someone who has just come out of a mock interview with me. Thanks Jon.</p>

<p>None of this process aims to be adversarial, if someone has got this far, I really want to have a sense of how much time and attention will be required to give them some independence. I think a lot of interviewing techniques are created organically, so it's hard to provide a lot of context.</p>

<h3>On References</h3>

<p>References are important to everyone. When you're trying to get a sense of what someone's like on the long-term, asking their friends is a great idea. Colleagues tend to be the next best thing. We tend to ask for someone you reported to, someone who was a colleague and if you had reports one of them.</p>

<p>Artsy puts a lot of priority on references,  Check out <a href="https://www.zamiang.com/posts/post/2015/07/05/learning-from-artsy-how-to-hire-awesome-engineers/">Brennan Moore's article</a> on this, a lot of the behind the scenes emails afterwards uses quotes taken from references as examples of why someone should be hired. I don't think this will be unique to Artsy. References should be your cheerleaders. In an ideal world you should be looking for references like the ones we got for Maxim:</p>

<blockquote><p>However, if I had to fire people gradually, I'd fire her last. her skill-set is so valuable, and so scarce that it's super valuable. I'd fire me before her.</p></blockquote>

<p>and</p>

<blockquote><p>She was the glue that held the team together - could talk at a different level to each contributor. Great intuition, could put in a room with anyone and they could understand how to get their bits done.</p></blockquote>

<p>I respect that no-one is in control of other people, so yes, references are a bit of a wild card from a junior's perspective. However, hopefully you've had a collection of positive interactions with people who can talk about that. It's not about your programming prowess at this point, it's about how you work with others and character reference. Consider listing professors, advisers or supervisors from other jobs.</p>

<h3>On the Aftermath</h3>

<p>So, interviews are over. What is happening behind the scenes? After your interviews are done, there will be a flurry of behind the scenes emails. From my experience at Artsy, it probably takes a few days to get enough of a consensus around a yay/nay. Someone should be keeping the applicant up to date, even if it's a matter of "not yet, but we're talking."</p>

<p>This bit is hard, because you're in limbo, and it can take a while. I think with Sarah this took about a week and a half, from her final interviews to being able to send her an offer. Which I'm sure for her weren't great, she could be so close to an offer - or weeks wasted on moving towards another. Sending "How's it going?" emails is totally fine if you've not heard back in a week. It's not cool for a company to not get back to you if you have interviewed.</p>

<h3>On the Launch Pad</h3>

<p>OK, so you've been given an offer. If it's a startup, you might be offered equity. If you don't know this world, that's OK, it's hard to give advice here - but <a href="https://github.com/jlevy/og-equity-compensation">this</a> seems to be the most comprehensive resource, and this seems to be the <a href="http://jvns.ca/blog/2015/12/30/do-the-math-on-your-stock-options/">best starter</a>. I started with no knowledge, and eventually got a reasonable understanding. If you want one sentence from me, "equity is a risk, be damn sure you think the company is going to go somewhere." I opted for a chunk of equity in Artsy, but I've worked at places where I've taken the minimum option.</p>

<p>Ideally you are presented with a great offer, I've never negotiated salary and we don't do it at Artsy as it <a href="https://en.wikipedia.org/wiki/Gender_pay_gap_in_the_United_States#Negotiating_salaries">introduces bias</a>, so I can't offer much there. But I have recieved <a href="https://github.com/artsy/artsy.github.io/pull/205#discussion_r51386447">some good</a> advice I'll paraphrase.</p>

<p>It's up to you whether to negotiate. In order to negotiate, you need to have an understanding of what people in similar companies/positions are. Ask people in the industry, friends and mentors. Talk in pay-ranges if that's easier. Note: The type of company, it's/your location, benefits, equity and the economy are all things that will move those ranges.</p>

<h3>OK, so, while I have your attention, what else can I recommend?</h3>

<p>The way in which you present yourself online will attract similar people. If you are always being negative, and it sure is easy, expect to end up surrounded with people who are similar. <a href="https://realm.io/news/altconf-orta-therox-being-nice-in-open-source/">Being nice is nice</a>.</p>

<p>If you have a blog, and it's on medium, look into making/editing your own blog. <a href="http://jekyllrb.com">Jekyll</a> is the defacto go-to in that space, but I know people have enjoyed using <a href="https://middlemanapp.com">middleman</a> and <a href="http://gohugo.io">hugo</a>. Do not use Octopress, vanilla Jekyll will do you just fine.</p>

<p>If you're not active on Twitter, you should start trying. Every time you think of something worth saying to someone next to you, say it to them, then say it to twitter. Show off pictures of what you're working on, reply to people with more followers than you when they ask questions, talk about code. It took me 4 years to hit my first thousand followers, hopefully you can be more interesting <a href="https://twitter.com/orta/status/13912101">than I was</a> for a while.</p>

<p>This article covers <a href="http://blog.leif.me/2013/11/how-software-developers-use-twitter/">how developers in general use twitter</a> it's an interesting read. You can get a lot of value by following developers whose work you rely on, or whose <a href="https://twitter.com/orta">blog posts you think are awesome</a>.</p>

<p>When people say GitHub is your resume, they are right and they are wrong. GitHub can help get you through the door, but you can't rely on that in your interviews. Check out the advice at the <a href="http://code.dblock.org/2011/07/14/github-is-your-new-resume.html">end of this post</a> on how to make your GitHub look good for people looking at whether to interview you.</p>

<p>However you can <a href="https://ma.tt/2016/02/getting-a-job-after-coding-bootcamp/">distinguish yourself by contributing to Open Source</a>. <a href="https://github.com/alloy/lowdown/pull/8">Fix READMEs</a>, <a href="https://github.com/supermarin/ObjectiveSugar/pull/20">improve documentation </a> or <a href="http://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen/">the Pods you use</a>. These slides go <a href="https://speakerdeck.com/orta/contributing-to-open-source-doesnt-require-changing-the-world">into other ways</a> to contribute."</p>

<h4>Some links for further reading</h4>

<ul>
<li><a href="http://geekfeminism.wikia.com/wiki/Male_Programmer_Privilege_Checklist">Male Programmers Privilege</a> - The geek feminism wiki is a great resource for understand some of the  less positive aspects of a male-dominated culture.</li>
<li><a href="http://blog.testdouble.com/posts/2014-12-02-the-social-coding-contract.html">The Social Coding Contract</a> - I'd recommend this to anyone on any topic, regardless of what they were really asking.</li>
<li><a href="http://blog.testdouble.com/posts/2016-01-25-an-empathetic-guide-to-git-conflicts.html">Git Conflicts and Empathy</a> - Understanding that a git conflict is that two people really want to do something positive.</li>
<li><a href="http://blog.testdouble.com/posts/2015-06-08-finding-joy-at-work.html">Finding Joy at Work</a> - On the risks of being in a small company.</li>
</ul>


<h4>This blog's best-of for Juniors:</h4>

<ul>
<li><a href="http://artsy.github.io/blog/2016/01/13/OSS-Expectations/">OSS Expectations</a> - On how to talk the talk when thinking about Open Source.</li>
<li><a href="http://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen/">Being a good OSS citizen</a> - On how to walk the walk when contributing back.</li>
<li>Video code-reviews: <a href="http://artsy.github.io/blog/2016/01/14/eidolon-code-review/">Eidolon</a> / <a href="http://artsy.github.io/blog/2015/11/05/Emergence-Code-Review/">Emergence</a> - On the gestalt of an app.</li>
<li><a href="http://artsy.github.io/blog/2015/09/01/Cocoa-Architecture-Dropped-Design-Patterns/">Dropped Design Patterns</a> - On understanding that technical decisions aren't permanent.</li>
<li><a href="http://artsy.github.io/blog/2015/07/06/how-to-write-unit-tests-like-a-brood-parasite/">How To Write Unit Tests Like a Brood Parasite</a> - On using metaphors to understand complex ideas.</li>
<li><a href="http://artsy.github.io/blog/2015/04/03/artsy-engineering-compensation-framework/">Artsy's Engineering Compensation Framework</a> - On ways in which you can rank yourself.</li>
<li><a href="http://artsy.github.io/blog/2015/03/31/the-culture-of-openness-artsy-mobile/">The Culture of Openness in the Artsy Mobile Team</a> - On how a team talks about it's culture.</li>
<li><a href="http://artsy.github.io/blog/2014/06/17/building-the-xcode-plugin-snapshots/">Building the Xcode Plugin Snapshots</a> - On how your tools can be improved, and how easy it is to get started.</li>
<li><a href="https://artsy.github.io/blog/2015/09/24/mvvm-in-swift/">MVVM in Swift</a> - On understanding that there is more than one way to skin a cat.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being a Good OSS Citizen]]></title>
    <link href="http://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen/"/>
    <updated>2016-01-28T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen</id>
    <content type="html"><![CDATA[<p>Let's take a look at the day in the life of an open source citizen: me. On our app, I was given <a href="https://github.com/artsy/eigen/issues/971">an issue</a> that would allow users to refine what kinds of sale artworks they were looking at, and it included this <em>awesome</em> slider control so they could set min/max price ranges.</p>

<!-- more -->


<p></div></div><a href='/images/2016-01-28-being-a-good-open-source-citizen/design.png'><img src="/images/2016-01-28-being-a-good-open-source-citizen/design.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Nice.</p>

<p>But iOS doesn't have a slider like that built into UIKit, so I headed to <a href="https://cocoapods.org">CocoaPods.org</a> to find something that would work for me. Searching for "range slider" yielded a bunch of results, and I looked through three or four of them.</p>

<p>I picked <a href="https://cocoapods.org/pods/MARKRangeSlider">this one</a> because it did <em>almost exactly</em> what I needed, provided a reasonable level of customization, and had a history of development leading up to a recent v1.0.</p>

<p>But I said it did "almost exactly" what I needed, which meant I'd have to modify it. At this point, many developers either look for a different library or abandon the idea of using an existing library altogether and invent one themselves. That's a shame, because it's almost always faster and easier to improve an existing library than it is to build your own.</p>

<p>So let's step through what I did to modify this library for my needs. First, I checked to see if there was an issue for my feature already opened on the repository; maybe someone else had tried this, and I could benefit from their experience! That wasn't the case, so I forked the library to my personal account and cloned my fork locally. Now I can modify the library's code and commit it to my fork.</p>

<p>Next I add the library to my <code>Podfile</code>, but I'm clever about it.</p>

<pre><code class="rb">pod 'MARKRangeSlider', :path =&gt; '../MARKRangeSlider'
</code></pre>

<p>This tells CocoaPods that I'm <em>working</em> on the pod, and, it is stored in a local directory (the one where I cloned my fork). This makes it a "development pod", so that the files in Xcode are actually the ones I've cloned locally.</p>

<p>This is a really important, but subtle point. Normally, CocoaPods downloads copies of the files and stores those copies, but in this case, it refers to the existing files. It doesn't copy them at all: any changes I make to the library while working on my app are to the files I cloned. That means they can be easily committed and pushed up to my fork.</p>

<p>That's exactly what I did. I made my changes from within the app until I was satisfied, and <a href="https://github.com/ashfurrow/MARKRangeSlider/commit/aefbeb181b62c8c257a7d0ada1e75834489b1909">pushed them to my fork</a>, then pointed the <code>Podfile</code> to my fork of the pod.</p>

<pre><code class="rb">pod 'MARKRangeSlider', :git =&gt; 'https://github.com/ashfurrow/MARKRangeSlider.git'
</code></pre>

<p>Nice. At this point, I continued on as a developer, running a <code>pod install</code> to download the forked library with my commits as usual. I finished building the feature and <a href="https://github.com/artsy/eigen/pull/1075">PR'd it using my fork</a>.</p>

<p><img src="/images/2016-01-28-being-a-good-open-source-citizen/done.gif" alt="" /></p>

<p>I could've stopped here, but that'd be a shame. Someone else might want the same changes I made, and I should submit them back. I <a href="https://github.com/vadymmarkov/MARKRangeSlider/pull/22">opened a PR</a> on the library to contribute my changes back, and I made sure to explain <em>why</em> my changes were necessary. Because our app is open source, I was even able to link to <em>our</em> PR to show the library author how their work was being used.</p>

<p>The next morning, I woke up to find my PR had been merged, and after the author pushed an updated version of the library (including my changes), I updated our app's <code>Podfile</code> once more.</p>

<pre><code class="rb">pod 'MARKRangeSlider'
</code></pre>

<p>Then ran <code>pod update MARKRangeSlider</code> so it would update <em>just</em> that pod, and point it to the new release. I re-ran the unit tests to make sure I hadn't broken anything, and <a href="https://github.com/artsy/eigen/pull/1077">PR'd the change</a>.</p>

<p>This sounds like a lot, and having written it all out, I guess it is. But it's a series of small steps, not big ones, and I've worked like this long enough that it's second-nature to me now.</p>

<hr />

<p>I believe that using existing open source libraries is almost always better than writing your own, and I believe that improvements made to open source ought to be shared. Those beliefs shape my behaviour as a developer, and as a person.</p>

<p>Making your first contribution to a project may seem scary, but we all <a href="https://github.com/B-Sides/ELCSlider/pull/1">start somewhere</a>. It gets easier, and in time, you will become a paragon of open source citizenry.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Teaching Swift at Artsy]]></title>
    <link href="http://artsy.github.io/blog/2016/01/26/swift-at-artsy/"/>
    <updated>2016-01-26T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/01/26/swift-at-artsy</id>
    <content type="html"><![CDATA[<p>While the Artsy engineering team includes many disciplines, tech stacks, and personalities, we all share a few things in common: a respect for each other, an appreciation of art-meets-science, and a celebration of learning. These are actually traits shared with our entire company, even non-engineers. So last Summer when Orta and I had some down time, it occurred to us how we could do something super-productive that was congruent with our values: we could teach the company Swift.</p>

<!-- more -->


<p>Like most project ideas, the first step was to create a <a href="https://github.com/orta/Swift-at-Artsy">GitHub repo</a>. We made it open source because <a href="http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html">why not</a>. Orta and I chatted and realized that to teach the company Swift, we would need two tracks:</p>

<ul>
<li>A track for newcomers who may have never programmed before.</li>
<li>A track for anyone who could explain what "object-oriented programming" meant.</li>
</ul>


<p>It was really important to us to include beginners who had no exposure to programming – the digital marketing and genoming teams specifically were keen to learn how to program.</p>

<p>I'm a big believer in using "newcomer" and "informed" to describe the two groups of developers – it helps prevent newcomers from feeling inadequate and better describes the expectations for students.</p>

<p>We also focused on Swift-only, no iOS. That allowed us to focus on the language – which was fun because it let us focus on us learning new stuff, too – and we kept the course to five one-hour sessions (per track).</p>

<p>Next step was obviously to create a Slack chatroom. We re-purposed the oft-neglected room dedicated to Taylor Swift and turned it into a place where anyone could ask questions and share resources. It's also a helpful place to @channel everyone to remind them about the classes.</p>

<p></div></div><a href='/images/2016-01-26-swift-at-artsy/chatroom.png'><img src="/images/2016-01-26-swift-at-artsy/chatroom.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Orta taught the beginner course and I TA'd it, answering questions as he instructed and offering suggestions when I felt something should be clarified (kind of like pair-programming except for teaching). We switched roles for the informed class. Preparing course materials was done through GitHub pull requests, which integrated well into our existing workflow on the mobile team.</p>

<p>We ran into some troubles in the first classes of both tracks: Swift 2 was in beta, and getting everyone on the correct versions of Xcode proved... difficult. Keeping them up-to-date as Xcode betas continued to be released over five weeks was also challenging. This was a problem in both tracks, but some problems were track-specific.</p>

<p>Explaining fundamental concepts like variables and for-loops to beginners is challenging. It reminded me of when I TA'd intro-to-Java courses in University (while the code then was obviously much uglier, <code>javac</code> is arguably more user-friendly than Xcode). Having the pair-programming approach worked well to help explain these concepts.</p>

<p>The biggest challenge with the informed class was rounding everyone up to actually attend the classes. Engineers are addicted to being busy, and like most side-projects, everyone was initially very excited about the course, but that interest dropped off quickly. Orta would help by physically going to our colleagues' desks and gently reminding them.</p>

<p>Regardless of the challenges, the course had a significant impact, both within Artsy and in the larger Swift community. Some of the course materials have been <a href="https://github.com/orta/Swift-at-Artsy/blob/master/Beginners/Lesson%20One/README_ZH.md">translated into Chinese</a> and we regularly received suggestions (and occasionally corrections) about our content. Newcomers to programming gained insights into <em>what exactly engineers do</em> and why bugs happen, while informed colleagues saw parallels between Swift and their own favourite languages (most often Scala). The course materials have also helped other mobile team members (who usually write only Objective-C) get started with Swift.</p>

<p>The beginner students really appreciated <a href="https://github.com/orta/Swift-at-Artsy/tree/master/Beginners/Lesson%20Three">lesson three</a> because we used real-world (scaled down) data structures that Artsy actually uses. We presented problems to solve – problems our colleagues were familiar with from their day-to-day work – and we showed how they can be solved with programming. <a href="https://github.com/orta/Swift-at-Artsy/tree/master/Beginners/Lesson%20Four">Lesson four </a> was the most well-received lesson as it featured some concrete "making the computer do cool stuff" material.</p>

<p>Finally, there was just a great sense of accomplishment. Orta and I had taken time during a downtime in engineering work and turned it into something that helped the company and helped the community. We got thanked internally and externally, and that felt great; helping others has a lot of tangible benefits, but feeling good about it is one of my favourites.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eidolon: Code Review]]></title>
    <link href="http://artsy.github.io/blog/2016/01/14/eidolon-code-review/"/>
    <updated>2016-01-14T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/01/14/eidolon-code-review</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/artsy/eidolon">Eidolon</a> is the third app from Artsy's mobile team, and it was the <a href="http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/">first to be developed totally in the open</a>. It's often used as a reference for what an app written in Swift, or written using FRP, should look like. Given how interested the community seems to be around the app, it's about time we did a walkthrough of the code.</p>

<!-- more -->


<p>This was done as a part of the engineering team's weekly lunch and learn sessions, where we get together and share what we've been working on. Since most of you aren't Artsy engineers, and so you can't ask questions in-person, please feel free to <a href="https://github.com/artsy/eidolon/issues/new">open an issue</a> to ask for any clarifications.</p>

<p>Jump <a href="https://www.youtube.com/watch?v=LAAMk7oLrmg">to YouTube</a> for the video, or click more for a smaller inline preview.</p>

<p></div></div><iframe width='100%' height='600' src='https://www.youtube.com/embed/LAAMk7oLrmg ' frameborder='0' allowfullscreen></iframe><div class='meta-container'><header>&nbsp;</header></div><div class='content-container'><div class='entry-content'></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Expectations]]></title>
    <link href="http://artsy.github.io/blog/2016/01/13/OSS-Expectations/"/>
    <updated>2016-01-13T11:09:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/01/13/OSS-Expectations</id>
    <content type="html"><![CDATA[<p>The Artsy engineering team has been moving towards Open Source by Default. In 2015 the Mobile team managed to get there. Since then, we've been writing up our process on this blog and offering advice to anyone would would ask for it.</p>

<p>I've been in talks with lots of companies you've heard of, on the how and the why of this. Recently <a href="https://ello.co">Ello</a> got in touch, and we tried to <a href="https://en.wikipedia.org/wiki/Dyson_sphere">capture the process</a>.  They came out with a great post that I'd strongly <a href="https://ello.co/jayzes/post/tqLL-Z8U8GfbDySRk6wbKg">recommend reading</a>. I'd like to try and come from the other side, and address what are the questions people ask. Consider this a FAQ for how the mobile team does/got to OSS by default.</p>

<!-- more -->


<p><img src = "https://d324imu86q1bqn.cloudfront.net/uploads/asset/attachment/3421690/ello-optimized-08acbd80.gif"></p>

<h3>Really, is <em>everything</em> Open Source?</h3>

<p>No, and it probably never will. There are companies who are (e.g. <a href="https://buffer.com/transparency">Buffer</a> &amp; <a href="https://automattic.com">Automattic</a>) however Artsy is considerably less transparent in-comparison. We have code-bases that will stay closed, and we have data that could stay closed.</p>

<p>Companies revolve around ideas, and understanding what your core value is important. A company who make money purely off selling their apps could be easily copied, and OSS by default won't work for them. Artsy is a platform, but OSS by default can work for us because a technical platform is just one aspect of what we offer.</p>

<h3>How did we start the process?</h3>

<p>We're lucky to have <a href="http://www.forbes.com/special-report/2014/30-under-30/art-and-style.html">technical</a> <a href="https://www.linkedin.com/in/sebastiancwilich">co-founders</a>, and a CTO with a strong belief in <a href="http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html">Open Source</a>. So we had a head-start, I respect that.</p>

<p>Like all big ideas, it started out small. We'd abstract out shared concerns into libraries. This is something that anyone who has heard a little bit about Open Source can get behind. "We're building on top of <em>x</em>, so we really should give back out <em>x</em>+<em>y</em>" it's low-risk, and potentially high reward. Getting the company on-board with your OSS libraries is about acclimatisation.</p>

<p>This works best by taking small incremental steps. You need buy-in from everyone involved through-out the process. Moving to OSS by Default is 30% technical work and 70% political relationships. There has to be infrastructure in place in order to not leak secrets, but you also need to ensure that the entire company doesn't feel threatened by the insight offered by opening the development process. There is no shortcut here.</p>

<p>For me, this process involved talking with everyone involved in each project. Setting aside 1-on-1 time specifically on the subject to answer question about the ramifications for OSSing it. This ranged from "we will need to change the flow around <em>x</em> and <em>y</em>." to "Yes, the competition will be able to see how we do <em>x</em> and <em>y</em>." I came very prepared to these meetings.</p>

<p>For our mobile apps, we progressively introduced Open by Default to our apps based on their age. We started out by creating a whole <a href="/blog/2014/11/13/eidolon-retrospective/">new project</a> as Open Source. Then started applying what we had learned to <a href="/blog/2015/04/28/how-we-open-sourced-eigen/">older</a> <a href="/blog/2015/08/06/open-sourcing-energy/">projects</a>. They had more risk, given that they were mature apps.</p>

<h3>Couldn't someone make a business copying me?</h3>

<p>It's also worth remembering that an app being OSS does not stop it <a href="http://venturebeat.com/2014/03/30/threes-vs-2048-when-rip-offs-do-better-than-the-original-game/">being copied</a>. Or, well, your <a href="http://www.bloomberg.com/bw/articles/2012-02-29/the-germany-website-copy-machine">entire business</a>.</p>

<p>Code only represents the <em>past to almost present</em> of your business, losing a valuable colleague hurts because of their ability to move your business forwards. A "fresh replacement" has a while to go in terms of being able to make the change you want. Someone trying to build off your source, has to learn to understand your motivations, your aspirations and then try build what they'd like around that. It's not good business sense.</p>

<h3>License Selection</h3>

<p>I covered this in <a href="/blog/2015/12/10/License-and-You/">Licensing for OSS</a>. If you want the TL:DR for Apps on app stores, jump to "Viral".</p>

<p>We use the <a href="https://en.wikipedia.org/wiki/MIT_License">MIT license</a> on all Open Source projects. It's worked out so far for us, because as a platform each individual component can exist standalone. Having a fork of all our projects does not make you a competitor to us.</p>

<h3>I have code that <em>has</em> to stay hidden</h3>

<p>So do we! In the iOS world, we use API compatible Open/Closed CocoaPods that allow for us to mock out for OSS consumers and let us use <a href="/blog/2014/06/20/artsys-first-closed-source-pod/">private implementations</a>. If you're trying to hide secret API calls, it's probably easier for someone to run a <a href="http://www.charlesproxy.com">proxy</a> than it is to find the section of code calling it.</p>

<p>Having the core of your application Open Source doesn't mean you cannot develop features in private. I <a href="https://github.com/artsy/eigen/pull/302">built a WatchOS app</a> for Eigen entirely on a private repo, where once a week for 2 months I rebase'd changes from the main repo. When we felt comfortable about making it known publicly we were working on it - I brought it over to a public repo and initiated the <a href="https://github.com/artsy/eigen/pull/302">code review</a>.</p>

<h3>Our expectations of OSS contributors</h3>

<p>We don't expect people to contribute to our apps. For libraries, that's different. I think <a href="https://ello.co/jayzes/post/tqLL-Z8U8GfbDySRk6wbKg">Ello's write-up</a> really nailed this point, so I'll just quote jayzes:</p>

<blockquote><p>On one hand, we have library and infrastructure code — things that are more generic and reusable. These are the sort of thing that we can more easily envision starting to grow communities around, albeit small ones.</p>

<p>On the other hand, we have custom-built applications, which are likely to have limited utility outside of their current purpose due to size and coupling to other parts of Ello’s infrastructure (the Ello API, for one). We don’t envision these apps building much of a community around themselves in the way that most open source tools and libraries do, and see the primary value in opening them up coming as a result of increased transparency. That having been said, we’ll certainly accept pull requests that fit our product roadmap and engineering standards, should anyone feel like jumping in and contributing!</p></blockquote>

<p>Beautiful. This is exactly how I feel, and in over a year these expectations have been met. Some of our libraries have become big, and our apps have received small feature PRs. We're pleasantly surprised when it happens, but we don't expect it.</p>

<h3>What didn't we expect?</h3>

<p>I didn't expect to be told face to face how many people have read, and learned from our codebases. We get around 120 unique clones of our iOS apps every week. People tell us that it's where they found a certain technique, or that they could see how the trade-offs were made for certain decisions.</p>

<p>I also under-estimated how useful open code is in encouraging a culture of writing. Ash once quoted <a href="https://twitter.com/ashfurrow/status/676814159363842048">me in a tweet</a> saying:</p>

<blockquote><p>Order of importance: blog posts > types > tests</p></blockquote>

<p>While it is a joke against functional programmers, in general; having these huge codebases gives a lot to talk about. A commit says the what, a pull request the how and a blog post gives the why. Writing about our code allows us to provide documentation for future employees with the context around how decisions were made. Nobody <em>wants</em> to ship messy code, but a lot of the time you choose to in order to provide something positive.</p>

<h3>How does Open Source affect security</h3>

<p>Artsy has a <a href="https://www.artsy.net/security">security policy</a>, with bounties and ways to report issues. From our perspective so far, having this open has not affected the reports we receive. If 1Password <a href="https://teams.1password.com/white-paper/1Password%20for%20Teams%20White%20Paper.pdf">can say</a></p>

<blockquote><p>We believe that openness always trumps “security through obscurity”.</p></blockquote>

<p>Then show off their algorithms that keep passwords safe, then so long as we're careful about our keys and stick to best security practices. We seem to be doing alright.</p>

<h3>What is a good approach to talk to the legal team?</h3>

<p>I have a friend who works in a very large company. He told me that he was aiming to Open Source his app. He had had a few meetings with the legal team that didn't really go anywhere. After a few meetings, he explained that they weren't aiming for community-building with this, but aiming to develop in the open. This change of perspective, changed the tone of the meetings from then on in. It became much easier to start the political work necessary to even begin working on the technical aspect.</p>

<h3>Alright, so I'm gonna need ammo for these meetings.</h3>

<p>Looking back at the last year, here's been some highlights:</p>

<h4>Personal</h4>

<ul>
<li>It's gratifying to give back to communities who help you get things done.</li>
<li>It's so much easier to talk about <a href="https://github.com/artsy/eigen/issues/586">technical challenges</a>, and <a href="/blog/2015/12/15/Automating-Testflight-Deploys/">achievements</a> when you can let people explore; before, the code review, and after.</li>
<li>The code you write does not become unavailable to you when you leave the company. Carry your best ideas between jobs.</li>
</ul>


<h4>Company-wide</h4>

<ul>
<li>You can structure in a way so that contributions within your team reflect how working in the OSS community is. Lowering the barrier of entry for your team to contribute back to their dependencies. There is little cultural differences between being a high-level contributor to CocoaPods and working in the Artsy mobile team.</li>
<li>Working in the open is a great way to raise the profiles of your team, and the individuals on it. This opens extra potential for personal growth for individuals. Not just professional.</li>
<li>It can make it easier to hire, because you can "<a href="https://github.com/artsy/mobile/">show</a>", not "<a href="https://www.artsy.net/article/artsy-jobs-mobile-engineer">tell</a>" the positives in your team culture.</li>
<li>You open the doors to potential contributors. Those contributors could eventually become hires.</li>
</ul>


<p>This is still pretty new, there's a lot to explore in the space. The mobile team at Artsy is always happy to talk with people interested in doing it themselves. Send us an email at <a href="mailto:mobile@artsy.net">mobile@artsy.net</a>, tweet to <a href="https://twitter.com/ArtsyOpenSource">@ArtsyOpenSource</a> or DM me <a href="https://twitter.com/orta">@orta</a>.</p>
]]></content>
  </entry>
  
</feed>
