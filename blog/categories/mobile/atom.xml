<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mobile | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/mobile/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2016-08-24T14:15:23+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learn Swift at Artsy, Beginners Lesson Two]]></title>
    <link href="http://artsy.github.io/blog/2016/08/23/swift-at-artsy-beginners-lesson-two/"/>
    <updated>2016-08-23T09:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/08/23/swift-at-artsy-beginners-lesson-two</id>
    <content type="html"><![CDATA[<p>And we're back! With lesson two of the beginners' Swift-at-Artsy course. To recap, Orta and I <a href="http://artsy.github.io/blog/2016/01/26/swift-at-artsy/">led a course at Artsy</a> to teach our colleagues Swift <em>last</em> August, and we're doing it again. I'm leading the stream for people who've never programmed before.</p>

<p>Yesterday was lesson two and I have a <a href="https://youtu.be/EBtzqx1YRBg">screen recording</a> of my walkthrough of <a href="https://github.com/artsy/Swift-at-Artsy/tree/master/Beginners/Lesson%20Two">the material</a>.</p>

<!-- more -->


<p></div></div><iframe width='100%' height='600' src='https://www.youtube.com/embed/EBtzqx1YRBg ' frameborder='0' allowfullscreen></iframe><div class='meta-container'><header>&nbsp;</header></div><div class='content-container'><div class='entry-content'></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On our implementation of React Native]]></title>
    <link href="http://artsy.github.io/blog/2016/08/18/On-Emission/"/>
    <updated>2016-08-18T12:17:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/08/18/On-Emission</id>
    <content type="html"><![CDATA[<center>
 <img src="/images/emission/emission-logo-artsy.svg" style="height:300px;">
</center>


<p>I arrived fashionably late to the <a href="/blog/2016/08/15/React-Native-at-Artsy/">React Native party</a> in Artsy. I had been a part of our <a href="/blog/2016/08/09/the-tech-behind-live-auction-integration/">Auctions Team</a>, where we worked in Swift with <a href="https://cocoapods.org/pods/Interstellar">some light-FRP</a>. We were not affected by the 4 months of simultaneous work on moving to React Native, at all.</p>

<p>It was a quiet revolution. I did not have to install <code>npm</code>, I made zero changes to the code for auctions and the whole app's infrastructure barely changed. Yet we moved to making all new code inside our 3 year old iOS app use React Native. What gives?</p>

<p>Well, first up we weren't planning a re-write, we don't have that kind of luxury and the scope of our app is too big compared to the team working on it. Second, we reused existing dependency infrastructure to support JavaScript based apps. Read on to find out what that looks like.</p>

<!-- more -->


<h3>Why we were in a good position to do this</h3>

<p>Let's talk a little about the Artsy flagship app, <a href="https://github.com/artsy/eigen/">Eigen</a>. It's an app that aimed to comprehensively cover the art world. From <a href="https://www.artsy.net/shows">Shows</a> to <a href="https://www.artsy.net/galleries">Galleries</a>, <a href="https://www.artsy.net/art-fairs">Fairs</a> to <a href="https://www.artsy.net/auctions">Auctions</a>, <a href="https://www.artsy.net/institutions">Museums</a> to <a href="https://www.artsy.net/articles">Magazines</a>.</p>

<p>It all looks a bit like this:</p>

<p></div></div><a href='/images/emission/eigen-overview.jpg'><img src="/images/emission/eigen-overview.jpg"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Our app neatly splits into two areas of view controllers, ones that act as a browser chrome, and individual view controllers that normally map 1:1 to <a href="https://github.com/artsy/eigen/blob/master/Artsy/App/ARSwitchBoard.m#L122">routes</a> on the Artsy website.</p>

<p>For example, the route <code>artsy.net/artwork/glenn-brown-suffer-well</code> maps to the native <code>ARArtworkViewController</code>.</p>

<p></div></div><a href='/images/emission/eigen.svg'><img src="/images/emission/eigen.svg"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Just as a browser knows very little about the individual content of the pages that it's rendering, the eigen chrome exists <em>relatively</em> independent of the view controllers that are showing.</p>

<p>Each view controller also knows very little about each-other, so actions that trigger a new view controller are generally done by creating a string route and passing it through the routing system. I've wrote about about pattern this in <a href="https://artsy.github.io/blog/2015/08/15/Cocoa-Architecture-Router-Pattern/">Cocoa Architecture: Router Pattern</a>.</p>

<p>Interestingly, if the router cannot route a view controller, it will pass through to a web view. This is why we consider the app a <a href="http://artsy.github.io/blog/2015/08/24/Cocoa-Architecture-Hybrid-Apps/">hybrid app</a>. This pattern means adding new view controllers is extremely easy.</p>

<h3>Introducing Emission</h3>

<p>Emission is what we use to contain all of our React Native components. Our flagship app Eigen, can depend on and use without needing to bother with the implementation details of React Native. At it's core, Emission is:</p>

<ul>
<li>A node module.</li>
<li>A CocoaPod.</li>
<li>An iOS App.</li>
</ul>


<h4>The Node Module</h4>

<p>Emission itself, is a node module. In our case, it is a JavaScript library that exposes 3 JavaScript objects.</p>

<pre><code class="javascript">/* @flow */
'use strict';

import Containers from './lib/containers';
import Components from './lib/components';
import Routes from './lib/relay/routes';

import './lib/relay/config';
import './lib/app_registry';

export default {
  Containers,
  Components,
  Routes,
};
</code></pre>

<p>Another node project can have Emission as a dependency - then can access our <code>Container</code>s, <code>Component</code>s and <code>Route</code>s. A container is a <a href="https://facebook.github.io/relay/docs/api-reference-relay-container.html">Relay container</a>, a component is a <a href="https://facebook.github.io/react/docs/component-api.html">React Component</a> and a Route is a <a href="https://facebook.github.io/relay/docs/guides-routes.html#content">Relay Route</a>.</p>

<p>The thing that's interesting from the integration side, is that each <code>Container</code> is effectively a View Controller that Emission provides to a host application. React Native ignores  the concept of view controllers from the Cocoa world, so we have an <a href="https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Pod/Classes/ViewControllers/ARComponentViewController.m">ARComponentViewController</a> which is subclassed for each exposed <code>Component</code> class.</p>

<h4>The iOS App</h4>

<p>The iOS app acts as a host target for the CocoaPod, and provides an instance of an <a href="https://github.com/artsy/emission/blob/master/Pod/Classes/Core/AREmission.m">AREmission</a> object to the view controllers using React Native. The app is nothing special, it is the default app that is created using <code>pod lib create</code>. We then <a href="https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Example/Podfile">use CocoaPods</a> to bring in React from inside the <code>node_modules/</code> folder the Emission node module creates.</p>

<p>The <code>AREmission</code> instance is the intermediary between the host-app (<a href="https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Example/Emission/AppDelegate.m#L56">The Emission Example app</a>, or <a href="https://github.com/artsy/eigen/blob/41b00f6fe497de9e902315104089370dea417017/Artsy/App/ARAppDelegate%2BEmission.m">Eigen</a>.) It has an API for handling routing, and passing authentication credentials into the React Native world.</p>

<p>We use the example app to do development inside React Native. As of right now, it is simply a tableview that provides a list of view controllers <a href="https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Example/Emission/AppDelegate.m#L159-L169">that represent an exposed Container</a>. Once you are in the right view controller, you can rely on <a href="http://facebook.github.io/react-native/releases/0.31/docs/debugging.html#automatic-reloading">Hot Reloading</a> to simplify your work.</p>

<h4>The Pod</h4>

<p>An important part of working with React Native, is that you can choose to use native code when appropriate. The <a href="https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Emission.podspec">Pod for</a> Emission, created entirely in Objective-C, provides:</p>

<ul>
<li>Communication between React Native and the host app objects via <a href="https://facebook.github.io/react-native/docs/native-modules-ios.html">native modules</a>.</li>
<li><code>UIViewController</code> subclasses for Host apps to consume.</li>
<li>Bridges for existing native views (like our <a href="https://github.com/artsy/extraction/blob/d6a32186f7098eb2ec5d05e2fb5302a8378eff70/Extraction/Classes/ARSwitchView.m">SwitchView</a>) into React Native.</li>
</ul>


<p>The choice of Objective-C is for simplicity, and language stability. Swift is technically an option, but it's not  worth the complications for <a href="https://github.com/artsy/emission/tree/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Pod/Classes">a few simple objects</a>.</p>

<p>In order to share native views with our host app, Eigen, we created a library to just hold the shared UI components, <a href="https://github.com/artsy/extraction">Extraction</a>. These are <a href="https://github.com/artsy/extraction/tree/d6a32186f7098eb2ec5d05e2fb5302a8378eff70/Extraction/Classes">factored out of Eigen</a>, and into a pod. Emission and Eigen have this as a dependency.</p>

<h4>Pod Deployment</h4>

<p>What makes this work well, from the perspective of Eigen is that the React Native comes in atomically. The Podspec <a href="https://github.com/artsy/emission/blob/master/Emission.podspec#L17-L18">references</a> the few native classes, and a single JavaScript file.</p>

<p>This JavaScript file is the bundled version of all our React Native code. It's <a href="https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/package.json#L7">updated  by running</a> <code>npm run bundle</code>. This generates both the minified JS, and a source map so that we can transcribe the error reports into the code we write.</p>

<p>Using the CocoaPod, Emission can provide native view controllers that use React Native under the hood. The host app does not need to know the underlying details like <code>npm</code>.</p>

<h3>On Emission</h3>

<p>Whether this is a pattern other apps can follow is hard to say, we were in a great position to do this. Our app has view controllers have very little communication with each other and the host app does not need to bridge large amounts of information.</p>

<p>As ever, our work is open source, and we ensure that anyone can download and run Emission, so if you'd like to understand more, clone <a href="https://github.com/artsy/emission#reactions--emissions">artsy/emission</a> and study the implementation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Swift at Artsy, Beginners Lesson One]]></title>
    <link href="http://artsy.github.io/blog/2016/08/15/swift-at-artsy-beginners-lesson-one/"/>
    <updated>2016-08-15T21:18:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/08/15/swift-at-artsy-beginners-lesson-one</id>
    <content type="html"><![CDATA[<p>Last August, Orta and I <a href="http://artsy.github.io/blog/2016/01/26/swift-at-artsy/">led a course at Artsy</a> to teach our colleagues Swift. There were two parallel groups of learners: a "beginners" group who had never coded before, and an "informed" group who already knew how to code. This year, we're leading the course again with a slight twist: we're repeating the course for absolute beginners, and we're introduce a new course for anyone who completed last year's beginner course.</p>

<p>We're really excited both to help new colleagues take their first steps into programming, and to help returning colleagues continue their journey.</p>

<p>Today was lesson one of the beginner group, and I have a <a href="https://youtu.be/OLdSg0XpFqA">screen recording</a> of my walkthrough of <a href="https://github.com/artsy/Swift-at-Artsy/tree/master/Beginners/Lesson%20One">lesson one's material</a>.</p>

<!-- more -->


<p></div></div><iframe width='100%' height='600' src='https://www.youtube.com/embed/OLdSg0XpFqA ' frameborder='0' allowfullscreen></iframe><div class='meta-container'><header>&nbsp;</header></div><div class='content-container'><div class='entry-content'></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native at Artsy]]></title>
    <link href="http://artsy.github.io/blog/2016/08/15/React-Native-at-Artsy/"/>
    <updated>2016-08-15T21:17:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/08/15/React-Native-at-Artsy</id>
    <content type="html"><![CDATA[<center>
<img src="/images/react-native/artsy_react_logo.svg" style="width:300px;">
</center>


<p>As <a href="https://github.com/artsy/eigen">the Artsy iOS app</a> grew larger, we started hitting pain
points:</p>

<ul>
<li>We want to support other future platforms such as Android without creating more teams.</li>
<li>We want different business teams to work on the app without disrupting each other.</li>
<li>We want our architecture to evolve in order to increase programmer efficiency.</li>
</ul>


<p>It took us <a href="https://github.com/artsy/mobile/issues/22">about a year</a> to start resolving these issues.
Ideally, we wanted to find a solution to our architectural issues that would also improve the user
experience. Notably we wanted more efficient networking, due to mobile device constraints.</p>

<p>It would have been an easy leap to start using Swift and, as a matter of fact, we do use Swift in parts of
our flagship application and entirely in <a href="http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/">2 other apps</a>.</p>

<p>However, while Swift is a great language, it’s also just that: <em>another</em> language. It does not do much in terms of new
paradigms that solved our architectural needs, it does not help in terms of cross-platform - as most of our code is
building views and thus very framework specific, and it did not really offer anything in terms of more efficient network
data fetching.</p>

<p>We've seen that the web teams integrate React in their projects with really great results. We've been
<a href="https://github.com/artsy/mobile/issues/22">paying attention</a> to React Native since it came out; the solutions provided
by the React ecosystem ticked all of our boxes.</p>

<p>Six months ago we took the plunge, and last month we formalized that this is the direction we want to go.</p>

<!-- more -->


<h1>Cons</h1>

<p>So you decided to read the full post and the first thing you got confronted with is a list of cons… <em>boo</em>. Let’s just get
these out of the way first, it will only get better afterwards.</p>

<ul>
<li><p>Dependencies, dependencies, dependencies, both in libraries and tooling. Once you open this can, you’ll have worms
<em>everywhere</em> in no time; 593 packages to be exactly, at the time of writing, for a new React Native project. Good luck
maintaining that.</p>

<p>Having created <a href="https://cocoapods.org">a dependency manager</a>, I’m not afraid of some dependencies and don’t subscribe
to NIH, but the JavaScript community has gone <em>way</em> overboard for my taste. If, like me, you subscribe to the idea
that dependencies are <em>part</em> of your application and you want to be able to know what packages are being pulled in so
you can maintain them, then you probably won’t like this aspect very much either.</p>

<p>I’m not quite sure yet how I feel about this in the long run and what we can do about it, short of trying to get the
maintainers of the packages we directly depend on to accept changes that simplify their dependency graphs.</p></li>
<li><p>As is often the case, error reporting does not always receive the attention it should get. With the amount of tools
and libs that make up the full stack you need to work with, this lack in attention to failure resolution can quickly
cascade into deep rabbit holes.</p></li>
<li><p>React Native is still very young and fast moving. If you don’t like living on the edge (i.e. lots of updating and
dealing with breaking changes) nor have an interest in shaping an unfinished framework, this currently is not for you.</p></li>
<li><p>All Facebook open-source code is made to solve the problems that Facebook has first, thus with young projects you may
well need to put in a bunch of time to make it work for your problem set. React Native provides a lot of basic view
building blocks, but you do lose a lot that you would get with UIKit for free, e.g. <code>UICollectionView</code>.</p>

<p>However, it is important to note that this is only a heads-up for those that might think they can solve any problem
out-of-the-box; in terms of open-source code I prefer code used in production over other code <em>any</em> day.</p></li>
<li><p>There are currently many more people trying to get help, with often arguably simple questions in the context of iOS
development, compared to those willing to spend time on answering questions. Most forums I’ve seen suffer from the
tragedy of the commons problem, which can be a real problem if you have incidental framework specific questions, but
jumping to React-Native probably is a complete disaster if you know very little about iOS development yet.</p>

<p>If you’re not already knowledgable about iOS development, are not motivated to put in the time to learn about the
platform specific details, and think making rich iOS applications with React Native will be a breeze, you’ll
<a href="http://www.dwotd.nl/2008/06/443-van-een-kouwe-kermis-thuiskomen.html">come home from a very cold fair</a> indeed.</p>

<p>While you can definitely make applications that way, in my experience those often end up not feeling like proper
citizens of the platform they inhibit.</p></li>
<li><p>Due to React Natives immaturity, you will not be able to find nuanced post-mortems on the subject. The project
is only at the beginning of the <a href="https://en.wikipedia.org/wiki/Hype_cycle">hype cycle</a>, meaning there is a lot
to gain in writing about how great it is, but less incentive to discuss where it doesn't work out well.</p></li>
</ul>


<h1>Pros, why we wanted to use React Native</h1>

<ul>
<li><p>From <a href="https://facebook.github.io/react/">the React website</a>:</p>

<blockquote><p>React will efficiently update and render just the right components when your data changes.
Build encapsulated components that manage their own state, then compose them to make complex UIs.</p></blockquote>

<p>The functional model that React introduces that allows you to reason about the state of your views in much simpler
ways has for us been a welcome change that should make it much easier to write decoupled code going forward.</p>

<p>I’m by no means a functional programming purist, nor do I really care for being one. I found the React/React Native
communities to be very welcome to functional enthusiasts and pragmatists alike, a healthy mix that I find leads to
more productive outcomes.</p></li>
<li><p>Relay. From <a href="https://facebook.github.io/relay/">its website</a>:</p>

<blockquote><p>Queries live next to the views that rely on them, so you can easily reason about your app.
Relay aggregates queries into efficient network requests to fetch only what you need.</p></blockquote>

<p>The clarity this brings to the view codebase - coupled with its smart caching, networking is just ground-breaking.
No more multiple levels of model code in your application that you need to trace, just a single file with
<a href="https://github.com/artsy/emission/blob/a2e4dbdb/lib/components/artist/header.js#L87">the view component</a> <em>and</em>
<a href="https://github.com/artsy/emission/blob/a2e4dbdb/lib/components/artist/header.js#L143-L144">the data it needs</a>. Neat.</p>

<p>We do still have ‘view models’, however, those now pretty much all live in
<a href="http://artsy.github.io/blog/2016/06/19/graphql-for-mobile/">our GraphQL service</a>. The added benefit here is that we
share that model logic with Artsy’s other (web) clients.</p></li>
<li><p>“Learn once, write anywhere.” is the neo-cross-platform slogan deployed by React, which is a play on the tried
“Write once, run anywhere.” slogan of yesteryear. The difference being that you can use the same paradigms to create
products on various platforms, rather than pure code-reuse.</p>

<p>While we haven’t put this to the test yet at Artsy, we do plan to team up people across platforms to implement single
features on each respective platform, rather than having multiple people implement the same feature <em>on their own</em>.
The hope is that this will lead to better understanding of features and thus the implementations thereof, while still
taking each platform’s unique nature into account. The added benefit would be that people learn to understand and
appreciate those unique platform traits, thus making them more well-rounded engineers.</p>

<p>In the long run, we hope to extend this way of working as we start work on a React Native Android client.</p></li>
<li><p>While Auto Layout is a great step up from manual frame calculation, most of our views don’t need the granularity that
Auto Layout offers. React Native ditches Auto Layout and instead uses
<a href="https://en.wikipedia.org/wiki/CSS_Flex_Box_Layout">flexbox</a> for its layout. While my head has never been able to
fully wrap around classic CSS, I find that flexbox is an abstraction that nicely fits most of our needs.</p>

<p>I can definitely imagine situations in which more granularity would be required, however, in those cases we can always
decide to ‘drop down’ to native view code, so I don’t really worry too much about that.</p></li>
<li><p>Layout calculations are performed on a background thread, the so-called ‘shadow’ thread. This can make a big
difference when e.g. scrolling through a large complex list view.</p>

<p>Granted, you <em>can</em> do this with <code>UIView</code>, but the pattern is not as ingrained in UIKit thus usually leading to more holistic
replacements such as <a href="http://asyncdisplaykit.org">AsyncDisplayKit</a>.</p></li>
<li><p>Great separation of declarative view layout (JS, single-threaded) and technical details (native code, multi-threaded).
Because of the hard constraint of having a JS/native bridge, there really is no way to take shortcuts (e.g. spaghetti
code) that in the long run would only lead to technical debt. Constraints are great.</p></li>
<li><p>Because there’s very little code that needs to be compiled and how the isolated component nature of React makes it
it very easy to reload code in-process, development velocity lies much higher than with your typical native UIKit-based
development.</p></li>
<li><p>While, as mentioned above, there are definitely issues with the tooling and libs, on the flip-side it is all
open-source software and you <em>can</em> (officially) dive in and figure it out, unlike e.g. Xcode and UIKit. (Granted, you
still need to deal with these when using React Native, but it can be kept to a minimal surface.)</p></li>
<li><p>Because React Native is still young, fast moving, and open-source, this is a great time to help shape the framework
you’d <em>want</em> to use.</p></li>
</ul>


<h1>Things we learned</h1>

<ul>
<li><p>When we started out with React Native, I didn't want to have to re-write our application in order to take advantage of
the technology. To address this I worked within our existing application structure. We consider the App to
<a href="https://artsy.github.io/blog/2015/08/24/Cocoa-Architecture-Hybrid-Apps/">be a browser</a> of native and web view controllers. So,
we added routes <a href="http://artsy.github.io/blog/2015/08/19/Cocoa-Architecture-Switchboard-Pattern/">to our SwitchBoard</a> for
view controllers which are created in React Native. To the rest of the app, there is no difference between a Swift view controller,
or one with React Native inside.</p></li>
<li><p>All of the React Native code is kept in a completely separate repo, <a href="https://github.com/artsy/emission">Emission</a>, which
when deployed generates a minified version of the JavaScript. This means to build the Artsy iOS app you do not need to have
a JavaScript development environment.</p></li>
<li><p>We reused a lot of our existing native views, starting with loading indicators and native switch views.</p></li>
<li><p>We used new native classes to improve integration, for example the <code>&lt;OpaqueImageView&gt;</code>
<a href="https://github.com/artsy/emission/blob/master/lib/components/opaque_image_view.js">component</a> is a
<a href="https://github.com/artsy/emission/tree/master/Pod/Classes/OpaqueImageViewComponent">native</a> <code>UIImageView</code>
subclass that works with our application-wide <a href="https://cocoapods.org/pods/SDWebImage">SDWebImage</a> image cache.</p></li>
</ul>


<h1>Conclusion</h1>

<p>To really shine with React Native, you need native experience. JavaScript has not eaten everything yet. However,
you don't need a team of native experts. For example, we expect to be able to get quite far with Android support based on
our work in React Native, but to make it amazing, we will need someone with history and context in the space.</p>

<p>This frees up our engineers to widen their <a href="https://artsy.github.io/blog/2016/01/30/iOS-Junior-Interviews/">T-shaped skills</a>,
and to help remove the idea that the mobile team has to be a completely separate team with foreign tools and ideas.</p>

<p>This is only the tip of the iceberg for our writings about React Native. Follow <a href="https://twitter.com/ArtsyOpenSource">@ArtsyOpenSource</a>
to stay up to date.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling Large OSS Projects Defensively]]></title>
    <link href="http://artsy.github.io/blog/2016/07/03/handling-big-projects/"/>
    <updated>2016-07-03T12:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/07/03/handling-big-projects</id>
    <content type="html"><![CDATA[<p>I help maintain big OSS projects: from a third-party <a href="https://cocoapods.org">dependency manager</a> used in most iOS apps (<a href="https://github.com/CocoaPods/cocoapods.org">CocoaPods</a>), to the most popular Objective-C <a href="http://cocoapods.org/pods/Specta">testing framework</a> and the most popular Swift <a href="http://cocoapods.org/pods/Moya">networking API client</a>. I've been doing this for years.</p>

<p>Projects with this much impact are big time-sinks. This time comes from ensuring infrastructure continues to work, support tickets need replies, new code needs reviewing and releases need coordinating.</p>

<p><img src="/images/2016-07-03-big-oss/danger_logo_black@2x.png" alt="" /></p>

<p>Last September, almost a year ago, I started work on a new project, <a href="https://github.com/danger/danger/">Danger</a>. Danger fixes a problem we were seeing in the Artsy mobile team around adding "<a href="https://github.com/artsy/mobile/issues/31">process</a>" to our team.</p>

<p>As a part of discussing Danger internally, I've referenced that building CocoaPods has greatly influenced Danger. This blog post is about the way I've built Danger, knowing fully well that I cannot afford the level of time to maintain it at the scale it may get to.</p>

<!-- more -->


<hr />

<p>Danger is a project that could end up with a lot more users than CocoaPods. So I want to be cautious about how I create the community around Danger. If you're interested in some of the baseline setup required to run a popular project, the post "<a href="https://ashfurrow.com/blog/building-popular-projects/">Building Popular Projects</a>" by <a href="/author/ash">Ash</a> is a great place to start, this builds on that.</p>

<p>My maintenance time on CocoaPods resolves around:</p>

<ul>
<li>Handling new issues</li>
<li>Keeping infrastructure running</li>
<li>Requests around user data</li>
<li>Keeping disparate communities together</li>
</ul>


<h2>Issues</h2>

<p>From the ground up, Danger could not end up as complex as CocoaPods, the domain they cover is different and CocoaPods sits atop of an annually moving (and <em>somewhat</em> hostile) <a href="https://developer.apple.com/news/">platform</a>.</p>

<p>However, get enough people using a product and you end up with three types of issues: Bug Reports, How Do I X? and Feature Requests.</p>

<p>I wanted to keep bug-reports down, as much as possible, and so I built a system wherein the default error reporting system would also search GitHub issues <a href="https://github.com/orta/gh_inspector">for similar problems</a>. Knowing this was a generic problem, I built it with <a href="https://github.com/fastlane/fastlane/releases/tag/1.96.0">other</a> <a href="https://github.com/CocoaPods/CocoaPods/pull/5421">large</a> ruby projects in mind too.</p>

<p><code>How do I X?</code> are issues that haven't appeared much on Danger. For CocoaPods we request people use the CocoaPods tag on StackOverflow. That saves us from 5 to 6 issues a day, and provides others a great place to get internet points by responding instead.</p>

<p>Feature Requests issues are always fascinating, it gives you a chance to really see the difference between what you imagined a project's scope is, and how others perceive it. One thing that helps here is that Danger has a <a href="https://github.com/danger/danger/blob/master/VISION.md">VISION.md</a> file. This helped vocalise a lot of internal discussion, and let contributors understand the roadmap:</p>

<blockquote><p>The core concept is that the Danger project itself creates a system that is extremely easy to build upon. The codebase for Danger should resolve specifically around systems for CI, communication with Peer Review tools and providing APIs to Source Control changes. For example: Travis CI - GitHub - git.</p></blockquote>

<p>As well as providing a heuristic for determining whether something should be added to Danger:</p>

<blockquote><p>This means that decisions on new code integrated into Danger should ask "is this valid for every CI provider, every review system and source control type?" by making this domain so big, we can keep the core of Danger small.</p></blockquote>

<h3>Infrastructure</h3>

<p>CocoaPods has about 6 web properties, 3 of which are critical. The others can go down, or be behind the Xcode update schedules and people's projects will work fine. The 3 the critical projects are all simple, focused projects: <a href="https://github.com/CocoaPods/trunk.cocoapods.org">trunk</a> (provide auth, and submitting new libraries) <a href="https://github.com/CocoaPods/cocoapods.org">cocoapods.org</a>, and <a href="https://github.com/CocoaPods/search.cocoapods.org">search</a>. We control everything there.</p>

<p>Meanwhile the less critical ones like <a href="https://github.com/CocoaPods/cocoadocs.org">cocoadocs.org</a> have dependencies all over the show: AppleDoc, CLOC, Xcode, Carthage, Jazzy - every one of these can, and has, been a source of unreliability for infrastructure that I maintain.</p>

<p>With Danger, I wanted to avoid building any infrastructure that does not sit on top of solid, mature projects. The website is statically created in <a href="https://middlemanapp.com">Middleman</a>, using <a href="https://rubygems.org/gems/slim">boring</a> <a href="https://rubygems.org/gems/sass">old</a> technology, this means no server to host.</p>

<p>To support dynamic content on the website, I have a rake command to use <a href="https://rubygems.org/gems/yard/versions">a decade old</a> documentation formatter to pull content from a <a href="https://en.wikipedia.org/wiki/RubyGems">13 year old</a> dependency manager - that lets others describer their project's. In order to let them keep it up to date, I have a tiny 35 line web-server that allows specific projects to trigger a new CI build.</p>

<h3>Plugins</h3>

<center>
<blockquote class="twitter-tweet" data-lang="en-gb"><p lang="en" dir="ltr">Summary of every big OSS project. Monolith -&gt; Plugin support.<a href="https://t.co/7x4vuW4bRd">https://t.co/7x4vuW4bRd</a></p>&mdash; Orta Therox (@orta) <a href="https://twitter.com/orta/status/748561323164864512">30 June 2016</a></blockquote> <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
</center>


<p><br/></p>

<p>It's almost inevitable that once a project becomes big, maintainers have to become a lot more conservative about how they introduce new code. You become good at saying 'no', but a lot of people have legitimate needs. So, instead you end up converting your tool into a platform.</p>

<p>Some of the most interesting ideas in the CocoaPods ecosystem come from plugins.</p>

<p>I wanted plugins to be a first class citizen within Danger from day one. It's in the <a href="https://github.com/danger/danger/blob/master/VISION.md">VISION</a> file, and it's applied into how I've designed a lot of the user-facing site. I was <a href="https://github.com/danger/danger/issues/74">torn</a> after a few months of development <a href="https://github.com/danger/danger/pull/156#issuecomment-205907128">where things</a> should go. Now the core of Danger is <a href="https://github.com/danger/danger/pull/227">built as plugins</a>.</p>

<h3>Documentation</h3>

<p>My second big project on CocoaPods was collating documentation and scoping different types of documentation. In CocoaPods I ended with:</p>

<ul>
<li><strong>Highlight pages</strong> (intro pages, app pages, team pages)</li>
<li><strong>Guides</strong> (tutorials, overviews, FAQs)</li>
<li><strong>Reference</strong> (Command-line interface, APIs for developers)</li>
</ul>


<p>These 3 buckets for documentation makes it pretty easy to separate where people should look depending on what they're looking for. This pattern I'm stealing outright for Danger. Just not quite yet, it's a blocker on 1.0 though.</p>

<p>One trick I took from CocoaPods is to have as much documentation as possible generated from the source code. With Danger, all of the work that's gone into documenting the code is turned into public API documentation for end-users. This makes it really easy to ensure it's consistent and up-to-date. The same tools used to generate documentation for Danger are used for plugins. Any improvements there helps everyone.</p>

<h2>User Data</h2>

<p>Not storing any, phew! Though if <a href="https://github.com/danger/danger/issues/42">Danger as a Service</a> happens, then it will.</p>

<h2>People</h2>

<p>People are hard, Ash said in <a href="https://ashfurrow.com/blog/building-popular-projects/">Building Popular Projects</a>:</p>

<blockquote><p>The biggest existential threat to your library is this: you get burned out and stop working on it – and no one else contributes to it –</p></blockquote>

<p>Understanding motivations, encouraging ownership and accommodating multiple viewpoints are vital parts of anyone who wants to make a project bigger than themselves. There <a href="https://github.com/danger/danger/graphs/contributors">are lots of times</a> when I'm not the lead developer on Danger.</p>

<p>I owe a lot of this to the policy Ash and I created with Moya, the wordy "<a href="https://github.com/Moya/contributors">Moya Community Continuity Guidelines</a>" which define the expectations of the maintainers of a project towards contributors.</p>

<p>It's helped let a lot of other contributors make an impact. In the future, I hope those are the people that I get to hand Danger off to. Danger is bigger than me.</p>

<hr />

<p>Maintaining big projects is a learned activity, for most people it's a spectator sport, but it's not too hard to jump from writing issues to helping out. It's how I ended up contributing to CocoaPods.</p>
]]></content>
  </entry>
  
</feed>
