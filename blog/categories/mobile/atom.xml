<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mobile | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/mobile/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2016-02-02T12:15:35+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Being a Good OSS Citizen]]></title>
    <link href="http://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen/"/>
    <updated>2016-01-28T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen</id>
    <content type="html"><![CDATA[<p>Let's take a look at the day in the life of an open source citizen: me. On our app, I was given <a href="https://github.com/artsy/eigen/issues/971">an issue</a> that would allow users to refine what kinds of sale artworks they were looking at, and it included this <em>awesome</em> slider control so they could set min/max price ranges.</p>

<!-- more -->


<p></div></div><a href='/images/2016-01-28-being-a-good-open-source-citizen/design.png'><img src="/images/2016-01-28-being-a-good-open-source-citizen/design.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Nice.</p>

<p>But iOS doesn't have a slider like that built into UIKit, so I headed to <a href="https://cocoapods.org">CocoaPods.org</a> to find something that would work for me. Searching for "range slider" yielded a bunch of results, and I looked through three or four of them.</p>

<p>I picked <a href="https://cocoapods.org/pods/MARKRangeSlider">this one</a> because it did <em>almost exactly</em> what I needed, provided a reasonable level of customization, and had a history of development leading up to a recent v1.0.</p>

<p>But I said it did "almost exactly" what I needed, which meant I'd have to modify it. At this point, many developers either look for a different library or abandon the idea of using an existing library altogether and invent one themselves. That's a shame, because it's almost always faster and easier to improve an existing library than it is to build your own.</p>

<p>So let's step through what I did to modify this library for my needs. First, I checked to see if there was an issue for my feature already opened on the repository; maybe someone else had tried this, and I could benefit from their experience! That wasn't the case, so I forked the library to my personal account and cloned my fork locally. Now I can modify the library's code and commit it to my fork.</p>

<p>Next I add the library to my <code>Podfile</code>, but I'm clever about it.</p>

<pre><code class="rb">pod 'MARKRangeSlider', :path =&gt; '../MARKRangeSlider'
</code></pre>

<p>This tells CocoaPods that I'm <em>working</em> on the pod, and, it is stored in a local directory (the one where I cloned my fork). This makes it a "development pod", so that the files in Xcode are actually the ones I've cloned locally.</p>

<p>This is a really important, but subtle point. Normally, CocoaPods downloads copies of the files and stores those copies, but in this case, it refers to the existing files. It doesn't copy them at all: any changes I make to the library while working on my app are to the files I cloned. That means they can be easily committed and pushed up to my fork.</p>

<p>That's exactly what I did. I made my changes from within the app until I was satisfied, and <a href="https://github.com/ashfurrow/MARKRangeSlider/commit/aefbeb181b62c8c257a7d0ada1e75834489b1909">pushed them to my fork</a>, then pointed the <code>Podfile</code> to my fork of the pod.</p>

<pre><code class="rb">pod 'MARKRangeSlider', :git =&gt; 'https://github.com/ashfurrow/MARKRangeSlider.git'
</code></pre>

<p>Nice. At this point, I continued on as a developer, running a <code>pod install</code> to download the forked library with my commits as usual. I finished building the feature and <a href="https://github.com/artsy/eigen/pull/1075">PR'd it using my fork</a>.</p>

<p><img src="/images/2016-01-28-being-a-good-open-source-citizen/done.gif" alt="" /></p>

<p>I could've stopped here, but that'd be a shame. Someone else might want the same changes I made, and I should submit them back. I <a href="https://github.com/vadymmarkov/MARKRangeSlider/pull/22">opened a PR</a> on the library to contribute my changes back, and I made sure to explain <em>why</em> my changes were necessary. Because our app is open source, I was even able to link to <em>our</em> PR to show the library author how their work was being used.</p>

<p>The next morning, I woke up to find my PR had been merged, and after the author pushed an updated version of the library (including my changes), I updated our app's <code>Podfile</code> once more.</p>

<pre><code class="rb">pod 'MARKRangeSlider'
</code></pre>

<p>Then ran <code>pod update MARKRangeSlider</code> so it would update <em>just</em> that pod, and point it to the new release. I re-ran the unit tests to make sure I hadn't broken anything, and <a href="https://github.com/artsy/eigen/pull/1077">PR'd the change</a>.</p>

<p>This sounds like a lot, and having written it all out, I guess it is. But it's a series of small steps, not big ones, and I've worked like this long enough that it's second-nature to me now.</p>

<hr />

<p>I believe that using existing open source libraries is almost always better than writing your own, and I believe that improvements made to open source ought to be shared. Those beliefs shape my behaviour as a developer, and as a person.</p>

<p>Making your first contribution to a project may seem scary, but we all <a href="https://github.com/B-Sides/ELCSlider/pull/1">start somewhere</a>. It gets easier, and in time, you will become a paragon of open source citizenry.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Teaching Swift at Artsy]]></title>
    <link href="http://artsy.github.io/blog/2016/01/26/swift-at-artsy/"/>
    <updated>2016-01-26T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/01/26/swift-at-artsy</id>
    <content type="html"><![CDATA[<p>While the Artsy engineering team includes many disciplines, tech stacks, and personalities, we all share a few things in common: a respect for each other, an appreciation of art-meets-science, and a celebration of learning. These are actually traits shared with our entire company, even non-engineers. So last Summer when Orta and I had some down time, it occurred to us how we could do something super-productive that was congruent with our values: we could teach the company Swift.</p>

<!-- more -->


<p>Like most project ideas, the first step was to create a <a href="https://github.com/orta/Swift-at-Artsy">GitHub repo</a>. We made it open source because <a href="http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html">why not</a>. Orta and I chatted and realized that to teach the company Swift, we would need two tracks:</p>

<ul>
<li>A track for newcomers who may have never programmed before.</li>
<li>A track for anyone who could explain what "object-oriented programming" meant.</li>
</ul>


<p>It was really important to us to include beginners who had no exposure to programming – the digital marketing and genoming teams specifically were keen to learn how to program.</p>

<p>I'm a big believer in using "newcomer" and "informed" to describe the two groups of developers – it helps prevent newcomers from feeling inadequate and better describes the expectations for students.</p>

<p>We also focused on Swift-only, no iOS. That allowed us to focus on the language – which was fun because it let us focus on us learning new stuff, too – and we kept the course to five one-hour sessions (per track).</p>

<p>Next step was obviously to create a Slack chatroom. We re-purposed the oft-neglected room dedicated to Taylor Swift and turned it into a place where anyone could ask questions and share resources. It's also a helpful place to @channel everyone to remind them about the classes.</p>

<p></div></div><a href='/images/2016-01-26-swift-at-artsy/chatroom.png'><img src="/images/2016-01-26-swift-at-artsy/chatroom.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Orta taught the beginner course and I TA'd it, answering questions as he instructed and offering suggestions when I felt something should be clarified (kind of like pair-programming except for teaching). We switched roles for the informed class. Preparing course materials was done through GitHub pull requests, which integrated well into our existing workflow on the mobile team.</p>

<p>We ran into some troubles in the first classes of both tracks: Swift 2 was in beta, and getting everyone on the correct versions of Xcode proved... difficult. Keeping them up-to-date as Xcode betas continued to be released over five weeks was also challenging. This was a problem in both tracks, but some problems were track-specific.</p>

<p>Explaining fundamental concepts like variables and for-loops to beginners is challenging. It reminded me of when I TA'd intro-to-Java courses in University (while the code then was obviously much uglier, <code>javac</code> is arguably more user-friendly than Xcode). Having the pair-programming approach worked well to help explain these concepts.</p>

<p>The biggest challenge with the informed class was rounding everyone up to actually attend the classes. Engineers are addicted to being busy, and like most side-projects, everyone was initially very excited about the course, but that interest dropped off quickly. Orta would help by physically going to our colleagues' desks and gently reminding them.</p>

<p>Regardless of the challenges, the course had a significant impact, both within Artsy and in the larger Swift community. Some of the course materials have been <a href="https://github.com/orta/Swift-at-Artsy/blob/master/Beginners/Lesson%20One/README_ZH.md">translated into Chinese</a> and we regularly received suggestions (and occasionally corrections) about our content. Newcomers to programming gained insights into <em>what exactly engineers do</em> and why bugs happen, while informed colleagues saw parallels between Swift and their own favourite languages (most often Scala). The course materials have also helped other mobile team members (who usually write only Objective-C) get started with Swift.</p>

<p>The beginner students really appreciated <a href="https://github.com/orta/Swift-at-Artsy/tree/master/Beginners/Lesson%20Three">lesson three</a> because we used real-world (scaled down) data structures that Artsy actually uses. We presented problems to solve – problems our colleagues were familiar with from their day-to-day work – and we showed how they can be solved with programming. <a href="https://github.com/orta/Swift-at-Artsy/tree/master/Beginners/Lesson%20Four">Lesson four </a> was the most well-received lesson as it featured some concrete "making the computer do cool stuff" material.</p>

<p>Finally, there was just a great sense of accomplishment. Orta and I had taken time during a downtime in engineering work and turned it into something that helped the company and helped the community. We got thanked internally and externally, and that felt great; helping others has a lot of tangible benefits, but feeling good about it is one of my favourites.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eidolon: Code Review]]></title>
    <link href="http://artsy.github.io/blog/2016/01/14/eidolon-code-review/"/>
    <updated>2016-01-14T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/01/14/eidolon-code-review</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/artsy/eidolon">Eidolon</a> is the third app from Artsy's mobile team, and it was the <a href="http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/">first to be developed totally in the open</a>. It's often used as a reference for what an app written in Swift, or written using FRP, should look like. Given how interested the community seems to be around the app, it's about time we did a walkthrough of the code.</p>

<!-- more -->


<p>This was done as a part of the engineering team's weekly lunch and learn sessions, where we get together and share what we've been working on. Since most of you aren't Artsy engineers, and so you can't ask questions in-person, please feel free to <a href="https://github.com/artsy/eidolon/issues/new">open an issue</a> to ask for any clarifications.</p>

<p>Jump <a href="https://www.youtube.com/watch?v=LAAMk7oLrmg">to YouTube</a> for the video, or click more for a smaller inline preview.</p>

<p></div></div><iframe width='100%' height='600' src='https://www.youtube.com/embed/LAAMk7oLrmg ' frameborder='0' allowfullscreen></iframe><div class='meta-container'><header>&nbsp;</header></div><div class='content-container'><div class='entry-content'></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Expectations]]></title>
    <link href="http://artsy.github.io/blog/2016/01/13/OSS-Expectations/"/>
    <updated>2016-01-13T11:09:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/01/13/OSS-Expectations</id>
    <content type="html"><![CDATA[<p>The Artsy engineering team has been moving towards Open Source by Default. In 2015 the Mobile team managed to get there. Since then, we've been writing up our process on this blog and offering advice to anyone would would ask for it.</p>

<p>I've been in talks with lots of companies you've heard of, on the how and the why of this. Recently <a href="https://ello.co">Ello</a> got in touch, and we tried to <a href="https://en.wikipedia.org/wiki/Dyson_sphere">capture the process</a>.  They came out with a great post that I'd strongly <a href="https://ello.co/jayzes/post/tqLL-Z8U8GfbDySRk6wbKg">recommend reading</a>. I'd like to try and come from the other side, and address what are the questions people ask. Consider this a FAQ for how the mobile team does/got to OSS by default.</p>

<!-- more -->


<p><img src = "https://d324imu86q1bqn.cloudfront.net/uploads/asset/attachment/3421690/ello-optimized-08acbd80.gif"></p>

<h3>Really, is <em>everything</em> Open Source?</h3>

<p>No, and it probably never will. There are companies who are (e.g. <a href="https://buffer.com/transparency">Buffer</a> &amp; <a href="https://automattic.com">Automattic</a>) however Artsy is considerably less transparent in-comparison. We have code-bases that will stay closed, and we have data that could stay closed.</p>

<p>Companies revolve around ideas, and understanding what your core value is important. A company who make money purely off selling their apps could be easily copied, and OSS by default won't work for them. Artsy is a platform, but OSS by default can work for us because a technical platform is just one aspect of what we offer.</p>

<h3>How did we start the process?</h3>

<p>We're lucky to have <a href="http://www.forbes.com/special-report/2014/30-under-30/art-and-style.html">technical</a> <a href="https://www.linkedin.com/in/sebastiancwilich">co-founders</a>, and a CTO with a strong belief in <a href="http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html">Open Source</a>. So we had a head-start, I respect that.</p>

<p>Like all big ideas, it started out small. We'd abstract out shared concerns into libraries. This is something that anyone who has heard a little bit about Open Source can get behind. "We're building on top of <em>x</em>, so we really should give back out <em>x</em>+<em>y</em>" it's low-risk, and potentially high reward. Getting the company on-board with your OSS libraries is about acclimatisation.</p>

<p>This works best by taking small incremental steps. You need buy-in from everyone involved through-out the process. Moving to OSS by Default is 30% technical work and 70% political relationships. There has to be infrastructure in place in order to not leak secrets, but you also need to ensure that the entire company doesn't feel threatened by the insight offered by opening the development process. There is no shortcut here.</p>

<p>For me, this process involved talking with everyone involved in each project. Setting aside 1-on-1 time specifically on the subject to answer question about the ramifications for OSSing it. This ranged from "we will need to change the flow around <em>x</em> and <em>y</em>." to "Yes, the competition will be able to see how we do <em>x</em> and <em>y</em>." I came very prepared to these meetings.</p>

<p>For our mobile apps, we progressively introduced Open by Default to our apps based on their age. We started out by creating a whole <a href="/blog/2014/11/13/eidolon-retrospective/">new project</a> as Open Source. Then started applying what we had learned to <a href="/blog/2015/04/28/how-we-open-sourced-eigen/">older</a> <a href="/blog/2015/08/06/open-sourcing-energy/">projects</a>. They had more risk, given that they were mature apps.</p>

<h3>Couldn't someone make a business copying me?</h3>

<p>It's also worth remembering that an app being OSS does not stop it <a href="http://venturebeat.com/2014/03/30/threes-vs-2048-when-rip-offs-do-better-than-the-original-game/">being copied</a>. Or, well, your <a href="http://www.bloomberg.com/bw/articles/2012-02-29/the-germany-website-copy-machine">entire business</a>.</p>

<p>Code only represents the <em>past to almost present</em> of your business, losing a valuable colleague hurts because of their ability to move your business forwards. A "fresh replacement" has a while to go in terms of being able to make the change you want. Someone trying to build off your source, has to learn to understand your motivations, your aspirations and then try build what they'd like around that. It's not good business sense.</p>

<h3>License Selection</h3>

<p>I covered this in <a href="/blog/2015/12/10/License-and-You/">Licensing for OSS</a>. If you want the TL:DR for Apps on app stores, jump to "Viral".</p>

<p>We use the <a href="https://en.wikipedia.org/wiki/MIT_License">MIT license</a> on all Open Source projects. It's worked out so far for us, because as a platform each individual component can exist standalone. Having a fork of all our projects does not make you a competitor to us.</p>

<h3>I have code that <em>has</em> to stay hidden</h3>

<p>So do we! In the iOS world, we use API compatible Open/Closed CocoaPods that allow for us to mock out for OSS consumers and let us use <a href="/blog/2014/06/20/artsys-first-closed-source-pod/">private implementations</a>. If you're trying to hide secret API calls, it's probably easier for someone to run a <a href="http://www.charlesproxy.com">proxy</a> than it is to find the section of code calling it.</p>

<p>Having the core of your application Open Source doesn't mean you cannot develop features in private. I <a href="https://github.com/artsy/eigen/pull/302">built a WatchOS app</a> for Eigen entirely on a private repo, where once a week for 2 months I rebase'd changes from the main repo. When we felt comfortable about making it known publicly we were working on it - I brought it over to a public repo and initiated the <a href="https://github.com/artsy/eigen/pull/302">code review</a>.</p>

<h3>Our expectations of OSS contributors</h3>

<p>We don't expect people to contribute to our apps. For libraries, that's different. I think <a href="https://ello.co/jayzes/post/tqLL-Z8U8GfbDySRk6wbKg">Ello's write-up</a> really nailed this point, so I'll just quote jayzes:</p>

<blockquote><p>On one hand, we have library and infrastructure code — things that are more generic and reusable. These are the sort of thing that we can more easily envision starting to grow communities around, albeit small ones.</p>

<p>On the other hand, we have custom-built applications, which are likely to have limited utility outside of their current purpose due to size and coupling to other parts of Ello’s infrastructure (the Ello API, for one). We don’t envision these apps building much of a community around themselves in the way that most open source tools and libraries do, and see the primary value in opening them up coming as a result of increased transparency. That having been said, we’ll certainly accept pull requests that fit our product roadmap and engineering standards, should anyone feel like jumping in and contributing!</p></blockquote>

<p>Beautiful. This is exactly how I feel, and in over a year these expectations have been met. Some of our libraries have become big, and our apps have received small feature PRs. We're pleasantly surprised when it happens, but we don't expect it.</p>

<h3>What didn't we expect?</h3>

<p>I didn't expect to be told face to face how many people have read, and learned from our codebases. We get around 120 unique clones of our iOS apps every week. People tell us that it's where they found a certain technique, or that they could see how the trade-offs were made for certain decisions.</p>

<p>I also under-estimated how useful open code is in encouraging a culture of writing. Ash once quoted <a href="https://twitter.com/ashfurrow/status/676814159363842048">me in a tweet</a> saying:</p>

<blockquote><p>Order of importance: blog posts > types > tests</p></blockquote>

<p>While it is a joke against functional programmers, in general; having these huge codebases gives a lot to talk about. A commit says the what, a pull request the how and a blog post gives the why. Writing about our code allows us to provide documentation for future employees with the context around how decisions were made. Nobody <em>wants</em> to ship messy code, but a lot of the time you choose to in order to provide something positive.</p>

<h3>How does Open Source affect security</h3>

<p>Artsy has a <a href="https://www.artsy.net/security">security policy</a>, with bounties and ways to report issues. From our perspective so far, having this open has not affected the reports we receive. If 1Password <a href="https://teams.1password.com/white-paper/1Password%20for%20Teams%20White%20Paper.pdf">can say</a></p>

<blockquote><p>We believe that openness always trumps “security through obscurity”.</p></blockquote>

<p>Then show off their algorithms that keep passwords safe, then so long as we're careful about our keys and stick to best security practices. We seem to be doing alright.</p>

<h3>What is a good approach to talk to the legal team?</h3>

<p>I have a friend who works in a very large company. He told me that he was aiming to Open Source his app. He had had a few meetings with the legal team that didn't really go anywhere. After a few meetings, he explained that they weren't aiming for community-building with this, but aiming to develop in the open. This change of perspective, changed the tone of the meetings from then on in. It became much easier to start the political work necessary to even begin working on the technical aspect.</p>

<h3>Alright, so I'm gonna need ammo for these meetings.</h3>

<p>Looking back at the last year, here's been some highlights:</p>

<h4>Personal</h4>

<ul>
<li>It's gratifying to give back to communities who help you get things done.</li>
<li>It's so much easier to talk about <a href="https://github.com/artsy/eigen/issues/586">technical challenges</a>, and <a href="/blog/2015/12/15/Automating-Testflight-Deploys/">achievements</a> when you can let people explore; before, the code review, and after.</li>
<li>The code you write does not become unavailable to you when you leave the company. Carry your best ideas between jobs.</li>
</ul>


<h4>Company-wide</h4>

<ul>
<li>You can structure in a way so that contributions within your team reflect how working in the OSS community is. Lowering the barrier of entry for your team to contribute back to their dependencies. There is little cultural differences between being a high-level contributor to CocoaPods and working in the Artsy mobile team.</li>
<li>Working in the open is a great way to raise the profiles of your team, and the individuals on it. This opens extra potential for personal growth for individuals. Not just professional.</li>
<li>It can make it easier to hire, because you can "<a href="https://github.com/artsy/mobile/">show</a>", not "<a href="https://www.artsy.net/article/artsy-jobs-mobile-engineer">tell</a>" the positives in your team culture.</li>
<li>You open the doors to potential contributors. Those contributors could eventually become hires.</li>
</ul>


<p>This is still pretty new, there's a lot to explore in the space. The mobile team at Artsy is always happy to talk with people interested in doing it themselves. Send us an email at <a href="mailto:mobile@artsy.net">mobile@artsy.net</a>, tweet to <a href="https://twitter.com/ArtsyOpenSource">@ArtsyOpenSource</a> or DM me <a href="https://twitter.com/orta">@orta</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating TestFlight Deploys using Fastlane]]></title>
    <link href="http://artsy.github.io/blog/2015/12/15/Automating-Testflight-Deploys/"/>
    <updated>2015-12-15T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2015/12/15/Automating-Testflight-Deploys</id>
    <content type="html"><![CDATA[<p>I've been a really <a href="http://artsy.github.io/blog/2015/09/18/Cocoa-Architecture-Dependencies/">strong supporter</a> of the <a href="https://fastlane.tools">fastlane</a> toolset. I think it fixes a lot of common developer problems, in a space that Apple doesn't really touch. The command line.</p>

<p>We've added hints of fastlane to our apps at different rates, <a href="https://github.com/artsy/eidolon/">Eidolon</a> uses fastlane for everything but <a href="https://github.com/artsy/eigen/">Eigen</a>/<a href="https://github.com/artsy/energy">Energy</a>/<a href="https://github.com/artsy/emergence">Emergence</a> have been pretty slow on the uptake, though they have more complicated setups, being App Store apps.</p>

<p>When <a href="https://krausefx.com/">Felix</a> announced <a href="https://krausefx.com/blog/introducing-match-a-new-approach-to-code-signing">match</a> this week, I felt like he tackled a problem we face in our <a href="http://artsy.net/job/mobile-engineer">small dev team</a>. I integrated this, only to find that it could also fix my problems with deployment. The rest of this post goes into the "how I did this." You can also cheat and look at the <a href="https://github.com/artsy/eigen/compare/d06270882aadec8f03927455a5229b53dd0a73c8...9eaf9082ebdcdf75f12ad2804260587e01526f2d">commits</a> directly.</p>

<!-- more -->


<p>First up, a TLDR for <a href="https://github.com/fastlane/match">match</a>. <em>match is a tool that keeps all of your code-signing setup in a private git repo.</em> We currently keep them in a shared 1Password vault. By switching to using a private git repo we can can use our existing GitHub authentication for CI to provide access to the certificates for signing on circle.</p>

<p>We use a <a href="https://github.com/artsy/eigen/blob/master/Makefile">Makefile</a>, I know that fastlane provides an awesome tool in the form of <a href="https://github.com/fastlane/fastlane#features">fastlane lanes</a> - but we're pretty happy with a Makefile, they're the simplest tool that does what we need.</p>

<p>I wanted to lower the barrier for us shipping betas, so I opted to add another build step in the CI process. This step checks what branch is it, and if it's the beta branch, grab the certs, then deploy.</p>

<pre><code class="sh">deploy_if_beta_branch:
    if [ "$(LOCAL_BRANCH)" == "beta" ]; then make certs; make ipa; make distribute; fi
</code></pre>

<p><code>make certs</code> is really simple, it runs: <code>bundle exec match appstore --readonly</code> which and pulls metadata from a <a href="https://github.com/artsy/eigen/blob/9eaf9082ebdcdf75f12ad2804260587e01526f2d/fastlane/Matchfile">Matchfile</a>. This means we can sign app store builds on CI.</p>

<p>If you don't know what the <code>bundle exec</code> prefix is, I'd recommend reading my guide on the CocoaPods website for <a href="https://guides.cocoapods.org/using/a-gemfile.html">Gemfile</a>s.</p>

<p>The next step is generating an ipa, we do this with <a href="https://github.com/fastlane/gym">gym</a> via <code>make ipa</code> which looks like this:</p>

<pre><code class="sh">ipa: set_git_properties change_version_to_date
    bundle exec gym
</code></pre>

<p>It executes some make tasks to ensure we know what git commit each build is, and we use the date to provide a faux-<a href="http://semver.org">semver</a> for apps.</p>

<p>Gym will build our app, according to our <a href="https://github.com/artsy/eigen/blob/9eaf9082ebdcdf75f12ad2804260587e01526f2d/fastlane/GymFile">Gymfile</a>. Nothing too surprising in there. It will output an <a href="http://apple.stackexchange.com/questions/26550/what-does-ipa-stand-for">ipa</a> and a <a href="http://stackoverflow.com/questions/3656391/whats-the-dsym-and-how-to-use-it-ios-sdk">dsym</a> that <code>make distribute</code> can handle.</p>

<p><code>make distribute</code> is a pretty easy one, we generate a CHANGELOG via Ruby, then run the command <code>bundle exec pilot upload -i build/Artsy.ipa</code>, it will ship it to iTunes Connect after configuration from the <a href="https://github.com/artsy/eigen/blob/9eaf9082ebdcdf75f12ad2804260587e01526f2d/fastlane/AppFile">Appfile</a>. This is great, but it goes one better. It will, by default, run a synchronous check for whether the App has finished processing.</p>

<p></div></div><a href='/images/2015-12-15-Automating-Testflight-Deploys/ci-itunes-screenshot.png'><img src="/images/2015-12-15-Automating-Testflight-Deploys/ci-itunes-screenshot.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>This is awesome. I'd like to add a Slack message to tell us that it's shipped too, which would be much easier if we used a <a href="https://github.com/fastlane/fastlane/tree/master/docs#after_all-block">Fastfile</a>. We've not entirely moved all of our apps to TestFlight, this is our first experiment in the space, we've been really happy with Hockey, and still are. However, without trying new things we'll never be able to know what we should consider internal best practices.</p>
]]></content>
  </entry>
  
</feed>
