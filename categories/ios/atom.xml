<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Artsy Engineering]]></title>
  <link href="http://artsy.net/categories/ios/atom.xml" rel="self"/>
  <link href="http://artsy.net/"/>
  <updated>2015-08-17T11:06:37-04:00</updated>
  <id>http://artsy.net/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cocoa Architecture: ARRouter]]></title>
    <link href="http://artsy.net/blog/2015/08/15/Cocoa-Architecture:-Router-Pattern/"/>
    <updated>2015-08-15T00:00:00-04:00</updated>
    <id>http://artsy.net/blog/2015/08/15/Cocoa-Architecture:-Router-Pattern</id>
    <content type="html"><![CDATA[<p>I want to talk about a pattern that we've been using for the last few years on the Artsy Mobile team. This pattern pre-dates me joining Artsy by a few weeks, and was introduced into our codebase by <a href="http://90wpm.com">Ben Jackson</a>, this was the <code>ARRouter</code>'s first method:</p>

<pre><code class="objc">  + (NSURL *)newOAuthURLWithUsername:(NSString *)username password:(NSString *)password {
      NSDictionary *params = [[NSDictionary alloc] initWithObjectsAndKeys:
                              username, @"email",
                              password, @"password",
                              ARAuthClientID, @"client_id",
                              ARAuthSecret, @"client_secret",
                              @"credentials", @"grant_type",
                              nil];
      NSString *url_string = [[NSString alloc] initWithFormat:@"%@%@", AROAuthURL, [params queryString]];
      NSURL *url = [ARRouter newURLWithPath:url_string];
      [url_string release];
      [params release];
      return url;
  }
</code></pre>

<p>Yep, that's pre-ARC, pre-Dictionary Literals, memory-managed code. We took this pattern and rolled with it for the next 4 years, this article is about where we taken it.</p>

<p>Within Eigen, <code>ARRouter</code> is one of our <a href="https://github.com/artsy/eigen/blob/904e8abfc11ce6ea4b6e81f0e02684b755a280c3/Artsy/Networking/ARRouter.m">biggest classes</a>, coming in at almost 1,000 lines of code. Whereas in Energy, it sits at a <a href="https://github.com/artsy/energy/blob/e51529250ede359c781042f222d5836eb9e8a979/Classes/Util/App/ARRouter.m">more reasonable</a> 300 lines. Eidolon does not have an ARRouter, what gives?</p>

<!-- more -->


<hr />

<h2>Pattern Evolution</h2>

<p>We started out with a Router object as being something that can take a model object, and return a <code>NSURL</code> corresponding to a server side end-point.</p>

<p>This worked pretty well, we shipped a 1.0 of Energy with this pattern. However, it become obvious that we were putting a lot of extra knowledge about the type and the parameters of request into classes whose responsibility was not generating a route. For example, user account creation, and user account deletion would use the same <code>NSURL</code> but have different HTTP methods.</p>

<p>We migrated our networking stack to using AFNetworking <code>1.0</code>, and started using CocoaPods instead of manually dragging and dropping code. With this in mind, we improved on the pattern and started returning <code>NSURLRequest</code>s which better encapsulate the server end-point request we were trying to map in the Router.</p>

<p>The pattern evolved when mixed with a <a href="http://cocoadocs.org/docsets/AFNetworking/1.3.4/Classes/AFHTTPClient.html">AFHTTPClient</a> to act as the base URL resolver, allowing us to easily switch between staging and production environments, and as a central point for hosting all HTTP headers. This meant it was trivial to generate authenticated <code>NSURLRequest</code>s.</p>

<p>As it is presently, this pattern is working. We've just wrapped up a new Pod, <a href="https://github.com/artsy/Artsy_Authentication">Artsy Authentication</a>. It's a library that has an <code>ARRouter</code> that behaves <a href="https://github.com/artsy/Artsy_Authentication/blob/master/Pod/Classes/ArtsyAuthenticationRouter.h">exactly like above</a>. We continue to build new apps with the pattern.</p>

<h2>Siblings</h2>

<p>This pattern is standing the test of time, but that doesn't mean we're not actively trying to experiment within the domain. There are three interesting offshoots from our work on <code>ARRouter</code> that are worth talking about.</p>

<h4>Got the Routes like Swagger</h4>

<p>The difference between Eigen's <code>ARRouter</code> and Energy's <code>ARRouter</code> is pretty simple. Eigen's networking scope is an order of magnitude larger. This is a reflection on the varied data that Eigen is interested in, while Energy has a tight scope on specifically Artsy Parter related data.</p>

<p>During the new year of 2015, I explored the <a href="https://github.com/orta/GotTheRoutesLikeSwagger">idea of programmatically generating</a> an <code>ARRouter</code> as a CocoaPod, and then using CocoaPods' subspecs to make it easy to define what collections of end-points you were interested in. This project is based on a standard in which an API is documented, <a href="http://swagger.io">Swagger</a>. This meant as an API consumer, I can generate the types of <code>NSURLRequest</code>s I would require from the API itself. It created files that looked like:</p>

<pre><code class="objc">// Generated by Routes Like Swagger - 31/12/14

@interface ARRouter (User)

/// Retrieve a user by id.
/// @return URLRequest for /api/v1/user/{id}.{format}

- (NSURLRequest *)getUserWithID:(NSString * )slug;

/// Update an existing user.
/// @return URLRequest for /api/v1/user/{id}.{format}

- (NSURLRequest *)updateUserWithID:(NSString * )slug;

... [snip] ...

@end
</code></pre>

<p>This was a pretty nice expansion of the pattern, but overall felt a bit over-engineered and so, it was left as just an experiment.</p>

<h4>Moya</h4>

<p>When we started an entirely fresh application, we noted down all the networking-related pain points felt from Eigen and Energy. The Router pattern was pretty good, but we were finding that we were having problems with the API consuming part of the <code>NSURLRequest</code>s. Mainly, a difficulty in testing, an inconsistency in how we would perform networking and that it didn't feel declarative.</p>

<p>Moya is our attempt at fixing this. I won't go into depth on what Moya is, we've <a href="/blog/2014/09/22/transparent-prerequisite-network-requests/">written articles</a> on this already. The part that is interesting is that it obviates an ARRouter by using a collection of Swift enums - forcing developers to include all necessary metadata an an end-point.</p>

<h4>HAL, and API v2</h4>

<p>The Router pattern relies on the idea that you know all the routes ahead of time, and add support for them as you build out each part of the app. <a href="http://stateless.co/hal_specification.html">HAL, a Hypermedia Application Layer</a> - can be approximated as being a self describing API. dB has wrote about it on <a href="/blog/2014/09/12/designing-the-public-artsy-api/">this blog</a>.</p>

<p>This means that you ask the API how to get certain bits of data, and it will describe the ways in which you can access it.</p>

<p>Artsy's future APIs are using this, and the Router pattern is, more or less, totally deprecated in this world. This is what an artwork's JSON data looks like in v2:</p>

<pre><code class="json">{
  "id": "4d8b92bb4eb68a1b2c00044a",
  "created_at": "2010-11-15T16:32:38+00:00",
  "updated_at": "2015-08-16T09:26:26+00:00",
  "name": "Jeff Koons",
  "sortable_name": "Koons Jeff",
  "gender": "male",
  "birthday": "1955",
  "hometown": "York, Pennsylvania",
  "location": "New York, New York",
  "nationality": "American",
  "_links": {
    "curies": [
      {
        "name": "image",
        "href": "https://d32dm0rphc51dk.cloudfront.net/Uqad2mGhbNGhAUgb8bUvIA/{rel}",
        "templated": true
      }
  ],
  "thumbnail": {
    "href": "https://d32dm0rphc51dk.cloudfront.net/Uqad2mGhbNGhAUgb8bUvIA/four_thirds.jpg"
  },
  "image:self": {
    "href": "{?image_version}.jpg",
    "templated": true
  },
  "self": {
    "href": "https://api.artsy.net/api/artists/4d8b92bb4eb68a1b2c00044a"
  },
  "permalink": {
    "href": "http://www.artsy.net/artist/jeff-koons"
  },
  "artworks": {
    "href": "https://api.artsy.net/api/artworks?artist_id=4d8b92bb4eb68a1b2c00044a"
  },
  "published_artworks": {
    "href": "https://api.artsy.net/api/artworks?artist_id=4d8b92bb4eb68a1b2c00044a&amp;published=true"
  },
  "similar_artists": {
    "href": "https://api.artsy.net/api/artists?similar_to_artist_id=4d8b92bb4eb68a1b2c00044a"
  },
  "similar_contemporary_artists": {
    "href": "https://api.artsy.net/api/artists?similar_to_artist_id=4d8b92bb4eb68a1b2c00044a&amp;similarity_type=contemporary"
  },
  "genes": {
    "href": "https://api.artsy.net/api/genes?artist_id=4d8b92bb4eb68a1b2c00044a"
  }
  },
  "image_versions": [
    "four_thirds",
    "large",
    "square",
    "tall"
  ]
}
</code></pre>

<p>You can see that via the _links section, curies and self-referential urls, you can build network client which traverses the API without built-in implicit knowledge.</p>

<p>It's a really exciting pattern, and as client developers, we can work on improving standard API clients that work on all HAL APIs. Instead of something specific to Artsy's API. A lot of the most interesting work in the Cocoa space has been done by Kyle Fuller with <a href="https://cocoapods.org/pods/Hyperdrive">Hyperdrive</a>.</p>

<h3>Wrap Up</h3>

<p>Given that we're not writing applications against the v2 API, yet. The Router pattern is working fine for us at Artsy. It can be a really nice way to abstract out a responsibility that may currently be sitting inside a very large API client that might be worth extracting out.</p>

<p>Let us know what you think, send tweets to <a href="https://twitter.com/ArtsyOpenSource">@ArtsyOpenSource</a> on twitter. Ps. it's pronounced "rooter".</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Peer Lab]]></title>
    <link href="http://artsy.net/blog/2015/08/10/peer-lab/"/>
    <updated>2015-08-10T10:57:00-04:00</updated>
    <id>http://artsy.net/blog/2015/08/10/peer-lab</id>
    <content type="html"><![CDATA[<p>When I was living in Amsterdam, I participated in plenty of <a href="https://appsterdam.rs">Appsterdam</a> events. Things like the weekly Meeten en Drinken. I even helped lead a class in Swift. One of the events I liked the most was called Peer Lab, organized every Saturday morning by <a href="https://twitter.com/samuelgoodwin">Samuel Goodwin</a>.</p>

<p>The idea of Peer Lab is pretty simple, but also somewhat profound: developers gather in a physical space to work on things. If someone has a question, they ask the group. If you can help, you offer assistance. The goal is to foster a collaborative learning environment where everyone feels fulfilled.</p>

<!-- more -->


<p>Samuel held Peer Lab on Saturday mornings to dissuade recruiters from attending. The café where we met had wifi and good coffee, which is all you really need when you're trying to get something accomplished on a Saturday morning.</p>

<p></div></div><a href='http://photos.ashfurrow.com/autumn-in-amsterdam'><img src="/images/2015-08-10-peer-lab/amsterdam.jpg" title="Amsterdam" ></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Before I moved to New York, I talked to Orta about organizing something similar at the Artsy offices. He was very receptive and excited to see it happen. I would be there every Saturday from 10:30-12:30 to host, and Artsy would provide the space, the wifi, and some free coffee and snacks. Pretty minimal costs. Orta offered the <a href="http://www.meetup.com/CocoaPods-NYC/events/222362372/">CocoaPods NYC meetup group</a> as a place to promote the event. We've also been mentioning it to people we meet at other tech events in New York.</p>

<p>It's been about six months, and I feel that the Peer Lab has been a fantastic success. Every week, I get to meet developers – some regulars and some newcomers. We sit around, talk shop, code, and hang out until pizza arrives for lunch.</p>

<p>From my perspective, it's been great. I get to meet other developers in a really chill setting, and it gets me out of the house early on Saturday. It sets an awesome tone for the rest of the weekend.</p>

<p></div></div><a href='https://instagram.com/p/5dlU_MyORN/'><img src="/images/2015-08-10-peer-lab/coffee.jpg" title="Nothing like a cup of coffee" ></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Everyone seems to have a good time – people meet, chat, work away on their projects or open source or whatever. Attendance includes iOS experts, iOS beginners, and everyone in between. Non-iOS developers are always welcome, but the CocoaPods branding – and the network of people Orta and I know – make it somewhat iOS-centric. We're working on that.</p>

<p>We've been doing our best to create an inclusive environment, with an emphasis placed on <a href="http://cocoapods.org/legal">CocoaPods' Code of Conduct</a>. Importantly, the event creates a space where developers can meet, work, and socialize outside of the regular alcohol-soaked meetup scene. There's nothing wrong with booze at tech meetups, but it's nice to have a space where people can socialize outside that context.</p>

<p>The Peer Lab is a cost-effective way for Artsy to get respect from the NYC developer scene. This is good for <a href="http://ashfurrow.com/blog/sharing-is-selfish/">all manner of reasons</a>, and it only costs a pizza every week.</p>

<p></div></div><a href='https://instagram.com/p/31tKTiGZVC/'><img src="/images/2015-08-10-peer-lab/classroom.jpg" width="1280" title="The Classroom at Artsy" ></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>So I'm happy, the people who attend are happy, and Artsy is happy.</p>

<p>But there's a problem.</p>

<p>Not everyone can make it to Artsy's lower Manhattan office every Saturday morning. Some developers live too far away, or have family/work obligations Saturday morning.</p>

<p>...</p>

<p>I want to see more Peer Labs pop up across New York, and across the world. I want you, reader, to consider starting one. It's super easy to do, I promise!</p>

<p>You don't even need a company or sponsor to organize something like this. You'll be surprised how easy it is.</p>

<p>I have a few friends living near Toronto that get together weekly at a café to work together. They tweet about it and invite others. It's nothing formal, but it's valuable time for them.</p>

<p>A Peer Lab by any other name is still an awesome idea.</p>

<p>If you <em>are</em> a company, and you're looking for an easy way to meet talented developers, hosting or sponsoring a Peer Lab is definitely worth considering. There are a <em>tonne</em> of meetups in tech, but most revolve around evening drinks, maybe pizza, maybe a talk. A Peer Lab can help you stand out – even people who don't attend are thinking "oh, that's cool."</p>

<p>Nice job, company.</p>

<p></div></div><a href='https://instagram.com/p/yNNXtKJqrk/'><img src="/images/2015-08-10-peer-lab/couch.jpg" width="1280" title="Bart the Art Plant" ></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>How to Peer Lab in four simple steps:</p>

<ol>
<li><strong>Pick a Time</strong>. When are <em>you</em> free to do this? Do you like working in the evenings? Awesome! Do it then. Are Sunday afternoons your jam? Sweet. Whenever works for you.</li>
<li><strong>Find a Space</strong>. This is easier than it sounds, trust me. As an organizer, you need a space that's convenient <em>for you</em>. I use my workplace because I live nearby. Samuel used a café by his apartment. Anywhere that has wifi. Pick a place that works for your time – for example, if you're meeting in the morning, a place with coffee is a good idea.</li>
<li><strong>Let the World Know</strong>. Tweet it, send it to some friends, whatever works. You could ask your employer to pay for a Meetup account. Send details to popular developers in your city and ask them to help spread the word 🎉</li>
<li><strong>Show Up</strong>. Most of success is just showing up. At the very least, you've got a nice time to jam every week, and hopefully you'll meet some other people to jam with.</li>
</ol>


<p>Keep things as simple as possible so Peer Lab stays something fun that you look forward to, and doesn't become a chore. Like I said, six months in and I still love it.</p>

<hr />

<p>Peer Lab is a fun and rewarding activity. From my perspective, from attendees' perspectives, and from Artsy's perspective. It's simply awesome.</p>

<p>Whether you're a developer or a company, an expert or a beginner, I highly encourage you to start one of your own.</p>

<p></div></div><a href='https://ortastuff.s3.amazonaws.com/gifs/three-hands.gif'><img src="https://ortastuff.s3.amazonaws.com/gifs/three-hands.gif" width="1280" title="Thumbs Up" ></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Sourcing Energy]]></title>
    <link href="http://artsy.net/blog/2015/08/06/open-sourcing-energy/"/>
    <updated>2015-08-06T13:54:00-04:00</updated>
    <id>http://artsy.net/blog/2015/08/06/open-sourcing-energy</id>
    <content type="html"><![CDATA[<p>The Artsy Mobile team is pretty aggressive in our stance on <a href="http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html">Open Source by Default</a>. We've talked about it at <a href="https://www.youtube.com/watch?v=2DvDeEZ0NDw&amp;spfreload=10">conferences</a> <a href="https://www.youtube.com/watch?v=SjjvnrqDjpM">around</a> <a href="https://www.youtube.com/watch?v=zPbLYWmLPow">the</a> <a href="https://speakerdeck.com/orta/ios-at-artsy">world</a>, in <a href="http://www.objc.io/issues/22-scale/artsy">renowned magazines</a> and on <a href="http://artsy.github.io/blog/2015/04/28/how-we-open-sourced-eigen/">our blog</a>.</p>

<p>It's worth mentioning that we don't just talk externally about Open Source. Internally, the Mobile team runs talks about Open Source for the rest of the Artsy staff. As well, we discuss the tooling and business implications of having our work in public repos. Artsy strives for an open culture, in this case the development team, on the whole, is just further along in the process.</p>

<p>The Open Source app idea started with an experiment in the Summer of 2014, asking, "What does a truly Open Source App look like?" The outcome of that was our Swift Kiosk app, <a href="https://github.com/artsy/eidolon/">Eidolon</a>. Open from day one. We took the knowledge from that and applied it to our public facing app, <a href="https://github.com/artsy/eigen/">Eigen</a>. Open from day 806. That made 2/3rds of our apps Open Source.</p>

<p>I'm going to talk about our final app, <a href="https://github.com/artsy/energy">Energy</a>. Open from day 1433 and ~3500 commits.</p>

<!-- more -->


<hr />

<p><img src="/images/2015-08-01-open-sourcing-energy/ENERGY.png" alt="ENERGY" /></p>

<p>Energy is commonly known as <a href="http://folio.artsy.net">Artsy Folio</a>. It's a tool for Artsy's Partners to showcase their artworks on the go, and quickly email them. Here's a beautiful splash showing it in action.</p>

<p></div></div><a href='http://folio.artsy.net/images/cover-bbf6fdf4.jpg'><img src="http://folio.artsy.net/images/cover-bbf6fdf4.jpg" title="Folio overview" ></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>This app comes from the pre-CocoaPods, pre-ARC, pre-UICollectionView and pre-Auto Layout days. It spent 3 years with no tests, but has come up to over 50% code coverage in the last year. It's testing suite is super fast, given that we learned a lot with Eigen's tests we stuck with five main principals:</p>

<ul>
<li>No un-stubbed HTTP requests.</li>
<li>Avoid <code>will</code>s in a test as much as possible.</li>
<li>Never allow access to the main Core Data instance in tests</li>
<li>Dependency Inject anything</li>
<li>Use snapshots to test view controller states</li>
</ul>


<h3>On Opening Folio</h3>

<p>Folio is interesting in that it has competitors. To some extent the Kiosk app does too, but the cost of entry there is really high in comparison. Folio on the other hand, has a handful of competing businesses who exist to <em>only</em> build a Gallery/Museum/Collector portfolio app. In opening the code for Folio, we're not making it easy for people to copy and paste our business, it's very directly tied to Artsy's APIs and <a href="http://www.dylanfareed.com/projects/artsy-cms/">CMS</a>.</p>

<p>I commonly get questions about the process of Open Sourcing an app, so here's what happened after I decided it was time. First, I emailed my intent:</p>

<p></div></div><a href='/images/2015-08-01-open-sourcing-energy/oss-energy-email.png'><img src="/images/2015-08-01-open-sourcing-energy/oss-energy-email.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>The concepts I wanted to cover were: "This is a codebase is worthy of art", "We know what we're doing", "This doesn't make it simple for someone to create a business off our product" and "I've managed to get a lot of the source out already." I gave a month or so to ensure that I could have corridor chats with people, in order to be very certain around opinions. We had some discussions in the email thread about ways in which an open source'd Energy would impact the team, and overall the reaction was positive. This wasn't surprising, the non-technical parts of the team are regularly kept up to date on thoughts like this.</p>

<p>After the internal announcement I started looking at the codebase, what should be cleaned up. I don't believe a codebase is ever perfect ( just look at Eigen's <a href="https://raw.githubusercontent.com/artsy/eigen/3f29f61f2b96f516e9ecf407818b82911b268694/HACKS.md">HACKS.md</a> ) but one thing I learned from the launch of Eigen is that we need a lot of beginner docs to help people get started. So I went into Energy's <a href="https://github.com/artsy/energy/tree/master/docs">docs</a> directory and started comparing it to <a href="https://github.com/artsy/eigen/tree/master/docs">Eigen</a>'s.</p>

<p>With the docs ready, we anticipated the repo change as we did <a href="/blog/2015/04/28/how-we-open-sourced-eigen/">with Eigen</a>. This means making sure all loose pull requests were wrapped up. All code comments were audited. Then we used <a href="https://github.com/google/github-issue-mover">github-issue-mover</a> to migrate important issues to the new repo. Then we deleted the <code>.git</code> folder in the app, and <code>git init</code> to create a new repo.</p>

<p>Given that we have three Open source apps now, I wanted to give them a consistent branding when we talk about the apps from the context of the codebase. It's like programming, if you're writing a similar thing 3 times, definitely time to refactor.</p>

<p></div></div><a href='/images/2015-08-01-open-sourcing-energy/oss-design-sketch.png'><img src="/images/2015-08-01-open-sourcing-energy/oss-design-sketch.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Finally, I started working on the announcement blog post. Which you're reading. I'll send a <a href="https://github.com/artsy/artsy.github.com/pull/119">pull request</a> for this blog post, then when it's merged. I'll make one more final look over how everything looks, then make the new Energy repo public.</p>

<h3>On more than just Opening Source</h3>

<p>Eigen, the public facing iOS app, allows people to log in with a trial user account. We also have a known API Key + Secret for the <a href="https://github.com/artsy/eigen/blob/master/Makefile#L41-L42">OSS app</a>. With this, any developer can run a few commands and have a working application to play around in. This makes it easy to look around and see how things are done.</p>

<p>Energy, however, requires you have a Artsy partner account. So opening it up would mean that an OSS developer hits the login screen and is stuck. In developing this app, I've slowly been creating my own partner gallery account based on my paintings and photography. So now when you set up the app to be ran as an OSS app, it will pre-load a known database of artworks and metadata from my test gallery.</p>

<p></div></div><a href='/images/2015-08-01-open-sourcing-energy/ios-sim.png'><img src="/images/2015-08-01-open-sourcing-energy/ios-sim.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Its easy to imagine that Open Sourcing something is an end-point, but from our perspective it is a journey. We want to make sure that anyone can download this app, learn how and why it's structured and then run through the app with a debugger to get a deeper sense of how everything connects. Just releasing the code would have been underwhelming. Instead we're aiming high.</p>

<p>I think that there is no higher compliment to your team and your code than opening it to the public.</p>

<p>You should Open Source your app.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Write Unit Tests Like a Brood Parasite]]></title>
    <link href="http://artsy.net/blog/2015/07/06/how-to-write-unit-tests-like-a-brood-parasite/"/>
    <updated>2015-07-06T13:54:00-04:00</updated>
    <id>http://artsy.net/blog/2015/07/06/how-to-write-unit-tests-like-a-brood-parasite</id>
    <content type="html"><![CDATA[<p>To a beginner, <a href="http://ocmock.org/">OCMock</a> looks scary. The syntax is strange, the idea of stubbing seems complicated, and skirting around the need to use it at all times kind of works out for a while.</p>

<pre><code class="objc">[[[mock stub] // three brackets!!

[OCMockObject niceMockForClass:UINavigationItem.class]; // it has to be told to be nice?
</code></pre>

<p>All of this can be overwhelming for someone who just wants to write simple unit tests for a particular view controller.</p>

<p>Once you look into the specifics of OCMock, however, things get less terrifying really quickly. It is helpful to compare OCMock’s approach to stubbing to the <a href="https://vimeo.com/60553870">behaviors of certain bird species</a>. As always, the soothing voice of David Attenborough brings clarity and joy to even the most mundane puzzles of life’s journey.</p>

<!-- more -->


<hr />

<p>For those who hate birds and videos of them, the cuckoo duck is known for leaving its eggs in the nests of other birds precisely as their unsuspecting victims lay their own. The new host parents cannot differentiate their offspring from those of the duck and inadvertently raise the duck chicks to maturity.</p>

<p>In a similar fashion, OCMock can place trick objects in your <del>nest</del> test code with whichever custom configuration suits your needs. The ‘host’ subject under test can’t differentiate these mock objects from the objects they’ve been written to use, and you can decide exactly how you’d like the mock objects to behave in your testing environment. This was especially helpful for a method I created that relies on information from an asynchronous network request. We’ll call it the <code>DataSource</code> of a <code>StatusMonitor</code> class.</p>

<pre><code class="objc">- (BOOL)updatedStatus
{
    [DataSource getNewDataWithNetworkRequest];
    /// some code that relies on this new data
}
</code></pre>

<p>In my view controller, I can use a <code>StatusMonitor</code> to decide whether or not a notification should appear in my view:</p>

<pre><code class="objc">- (void)viewWillAppear
{   
    [super viewWillAppear];

/// show or hide a notification based on this status
    BOOL shouldShowNotification = [self.statusMonitor updatedStatus];
}
</code></pre>

<p>When I’m writing tests for this view controller, I don’t care about <code>DataSource</code> - I just want to make sure the view controller knows when to show or hide a notification correctly depending on the new value from its StatusMonitor. I’d really like to avoid making any network requests within these kinds of tests. This is where the bird strategy comes in.</p>

<p>In my tests, I can create a decoy <code>StatusMonitor</code> with its corresponding methods using OCMock.</p>

<pre><code class="objc">StatusMonitor *statusMonitor = [[ARCMSStatusMonitor alloc] init];
id mockMonitor = [OCMockObject partialMockForObject:statusMonitor];

[[[mockMonitor stub] andReturn:@YES] checkStatus];
</code></pre>

<hr />

<p>I can then assign mockMonitor to the <code>statusMonitor</code> property of my view controller under test. In this way, the dependency on a network connection disappears, my view controller is happy, and my test can isolate the functionality I care about. OCMock provides some excellent documentation of what they mean by ‘nice’ and some other interesting things you can do with mock objects <a href="http://ocmock.org/features/">here</a>. For those interested in David Attenborough, birds, or natural history in general, I recommend  <a href="http://www.bbc.co.uk/nature/collections/p0048522">Nature</a>.</p>

<div style="text-align:center;">
<img src = "/images/2015-07-06-how-to-write-unit-tests-like-a-brood-parasite/attenborough.gif">
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Eigenstate of Mind]]></title>
    <link href="http://artsy.net/blog/2015/06/04/an-eigenstate-of-mind/"/>
    <updated>2015-06-04T18:00:00-04:00</updated>
    <id>http://artsy.net/blog/2015/06/04/an-eigenstate-of-mind</id>
    <content type="html"><![CDATA[<p>Prior to starting at Artsy, I followed a few online tutorials on iOS development. But a simple application demonstrating how to <a href="http://www.raywenderlich.com/85578/first-core-data-app-using-swift">build a todo list</a> didn't illustrate the nuances of a production codebase. Tutorials are an important learning tool for beginners, but can't possibly prepare you for everything you would encounter within an application like Artsy's.</p>

<p>I was lucky to have a mentor at Artsy to help me get started, and I wrote this post to pass along the lessons I learned. This is meant to be a guide for iOS beginners to get to know an open source production codebase. I'll cover the Xcode project organization and where to find things.</p>

<!-- more -->


<hr />

<p>Artsy names its GitHub repositories after physics terms. iOS apps all start with the letter 'e', and this one is called <a href="https://github.com/artsy/eigen">eigen</a>. As Artsy's consumer-facing iOS app, users refer to it simply as "Artsy".</p>

<p>Eigen is divided into two projects: one that contains all eigen-specific code, and one that contains reusable libraries. We organize these two components using something called an Xcode workspace.</p>

<p>The first time I opened eigen, the project wouldn't compile because it didn't have access to the components in the other project, the one with the libraries. To make sure that all the components you need are accessible in one place, Xcode organizes these projects under one workspace.</p>

<center><img src="/images/2015-06-04-an-eigenstate-of-mind/structure.png" /></center>


<p>The Artsy project contains all the eigen-specific code. It's where you'll find all the classes, models, views, controllers, and resources like images and sounds. It's what makes eigen <em>eigen</em>.</p>

<p>The Pods project is where the open source libraries used by eigen are kept. Artsy uses something called CocoaPods to organize these libraries, but that's beyond the scope of this post. For more information about CocoaPods, check out <a href="https://cocoapods.org/about">their site</a>.</p>

<p>Xcode organizes the different files of the Artsy project into folders. Let's take a look at each one.</p>

<center><img src="/images/2015-06-04-an-eigenstate-of-mind/folders.png" /></center>


<p>The <strong>Documentation</strong> folder contains instructions for iOS developers, such as how to started with eigen, how to deploy the application, and its changelog.</p>

<p>Note that documentation isn't always part of the actual Xcode project. Sometimes it lives in the Finder folder, but Xcode doesn't know about it.</p>

<p>The next folder is the <strong>Artsy</strong> folder. This is aptly named since it contains only the code and resources specific to the Artsy iOS app. This is where you would find anything that the user would interact with: the user interface, images, and the inner workings of our app. Most work of our work is done here.</p>

<p>Our automated tests live in the <strong>Artsy Tests</strong> folder. Since we have multiple developers working on this app, automated tests ensure that when someone changes something, the app continues to function as expected.</p>

<p>I find tests reassuring. As a beginner, tests provide peace of mind by letting me know if the changes I make have repercussions elsewhere.</p>

<p>Those are the important folders, but there are a few others you may be curious about.</p>

<p>Artsy has experimented with an Apple Watch extension, but it's nothing we've shipped yet. The Artsy WatchKit folders don't contribute to the rest of the application, and can be ignored. For now.</p>

<p>You'll notice the Frameworks, Products, and Pods folders. All three of them are generated by either Xcode or CocoaPods. They support the app, but a developer doesn't often work with them or their contents.</p>

<hr />

<p>This is a nice introduction to the structure of eigen, but this is only how <em>we</em> do things. Just like how tutorials helping you get started aren't necessarily applicable in the workplace, this guide isn't a applicable to every project.</p>

<p>I hope this makes eigen less intimidating. I had a mentor to walk me through things, and I hope this guide helps you explore the codebase, too. If you have any questions about how we do things, <a href="https://github.com/artsy/eigen/issues/new">get in touch</a>!</p>
]]></content>
  </entry>
  
</feed>
