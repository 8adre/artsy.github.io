<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artsy Engineering</title>
    <description></description>
    <link>http://artsy.github.io/</link>
    <atom:link href="http://artsy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 18 Nov 2016 17:21:02 +0000</pubDate>
    <lastBuildDate>Fri, 18 Nov 2016 17:21:02 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>JavaScript Glossary for 2017</title>
        <description>&lt;p&gt;Getting to grips with the entire JavaScript ecosystem is a tough job when you&#39;re getting started. Coming from the native mobile space, there&#39;s a lot to learn. I&#39;ve spent a few months immersed in the environment now, and can try summerize a lot of topics. This should make it easier to find more information when you need it. This post is semi-opinionated, with links for further reading so you can get a different perspective too.&lt;/p&gt;

&lt;p&gt;This post focus specifically on the JavaScript tooling around React Native projects, but is applicable to all JavaScript projects.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;Lets start with the entire reason we are using JavaScript for mobile in the first place: React and React Native,&lt;/p&gt;

&lt;a name=&quot;React&quot;&gt;&lt;/a&gt;
&lt;h1&gt;React&lt;/h1&gt;

&lt;a name=&quot;React&quot;&gt;&lt;/a&gt;
&lt;h3&gt;React&lt;/h3&gt;

&lt;p&gt;React is a Facebook project which offers a uni-direction Component model that &lt;em&gt;can&lt;/em&gt; replace MVC in a front-end application. React was built out of a desire to abstract away a web page&#39;s true view hierarchy (called the DOM) so that they could make changes to all of their views and then React would handle finding the differences between view states.&lt;/p&gt;

&lt;p&gt;Its model is that you would create a set of Components to encapsulate each part for the state of the page. React makes it easy to make components that are functional in the &lt;a href=&quot;https://en.wikipedia.org/wiki/functional_reactive_programming&quot;&gt;Functional Reactive Programming&lt;/a&gt; sense. They act like a function which takes some specially declared state and it is rendered into HTML.&lt;/p&gt;

&lt;p&gt;A component optionally uses a language called &lt;a href=&quot;#jsx&quot;&gt;JSX&lt;/a&gt; to visualise how each component&#39;s child components are set up,here&#39;s an example of a React component using JSX &lt;a href=&quot;https://github.com/artsy/emission/blob/c558323e4276699925b4edb3d448812005ae6b5d/lib/components/home/search_bar.js&quot;&gt;from Emission, our React Native library&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SearchBar&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TouchableWithoutFeedback&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleTap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;../../../images/SearchButton.png&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Search&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;artists&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;artworks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/Text&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/View&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/TouchableWithoutFeedback&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;handleTap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;Switchboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;presentModalViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/search&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;By providing a well encapsulated Component model, you can aggressively reduce the amount of redundant code you need to build an application. By not initially writing to the DOM, React can decide what has changed between user actions and that means you have to juggle significantly less &lt;a href=&quot;#state&quot;&gt;state&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;React.Native&quot;&gt;&lt;/a&gt;
&lt;h3&gt;React Native&lt;/h3&gt;

&lt;p&gt;I came to this conclusion early this year that writing native apps using compiled code is a pain, and it&#39;s been amazing to be able to work in React Native in contrast.&lt;/p&gt;

&lt;p&gt;React Native is an implementation of React where instead of having it abstract a web page&#39;s DOM, it creates a native view hierarchy. In the case of iOS that is a UIView hierarchy. Note that it does not handle View Controllers. The MVC model from Apple&#39;s Cocoa framework does not directly map into React Natives. I&#39;ve wrote about how we &lt;a href=&quot;http://artsy.github.io/blog/2016/08/24/On-Emission/&quot;&gt;bridge that gap earlier&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;React Native is cross platform. You write JavaScript like above, which React Native transforms into a native view hierarchy. That view hierarchy could be on a Samsung TV, a Windows phone or Android instead.&lt;/p&gt;

&lt;p&gt;It&#39;s a smart move, most &quot;Make apps in JS&quot; try to have a native-like experience where they replicate the platform&#39;s UI in HTML. However, this technique tends to feel unnatural very easily. If I showed you our app, you could not distinguish between a view controller in React Native, Swift or Objective-C.&lt;/p&gt;

&lt;a name=&quot;App.State&quot;&gt;&lt;/a&gt;
&lt;h3&gt;App State&lt;/h3&gt;

&lt;p&gt;Think of every variable inside your application, that is your application&#39;s state. You could not make an app worth using without state. In MVC, MVVM, VIPER and other native patterns, there is no consistent way to handle changes in those variables. React uses a common state pattern though the use of specific terminology: &quot;&lt;a href=&quot;#props&quot;&gt;props&lt;/a&gt;&quot;, &quot;&lt;a href=&quot;#context&quot;&gt;context&lt;/a&gt;&quot; and &quot;&lt;a href=&quot;#state-again&quot;&gt;state&lt;/a&gt;&quot;.&lt;/p&gt;

&lt;p&gt;Yes, the &quot;state&quot; and &quot;state&quot; thing is a little confusing, we&#39;ll get to it.&lt;/p&gt;

&lt;a name=&quot;Props&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Props&lt;/h3&gt;

&lt;p&gt;Props are chunks of app state that are passed into your component from a parent component. In &lt;a href=&quot;#jsx&quot;&gt;JSX&lt;/a&gt; this is represented as an XML attribute.&lt;/p&gt;

&lt;p&gt;Let&#39;s check out &lt;a href=&quot;https://github.com/artsy/emission/blob/c558323e4276699925b4edb3d448812005ae6b5d/lib/components/artist/header.js&quot;&gt;an example&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;followButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;InvertedButton&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;following&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Following&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Follow&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                            &lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;following&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                            &lt;span class=&quot;nx&quot;&gt;onPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleFollowChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/View&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;See the &lt;code&gt;InvertedButton&lt;/code&gt; component, it has three &lt;code&gt;props&lt;/code&gt; being passed in: &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;selected&lt;/code&gt; and &lt;code&gt;onPress&lt;/code&gt;. If any of those props were to change the entire &lt;code&gt;InvertedButton&lt;/code&gt; component would be re-rendered to the native view hierarchy. These &lt;code&gt;props&lt;/code&gt; are the key to passing data downwards through your hierarchy. Note: you cannot access the parent component (without passing it in as a prop.)&lt;/p&gt;

&lt;p&gt;You should therefore consider &lt;code&gt;props&lt;/code&gt; as immutable bits of app state relevant to the component it&#39;s being passed into.&lt;/p&gt;

&lt;a name=&quot;State-again&quot;&gt;&lt;/a&gt;
&lt;h3&gt;State-again&lt;/h3&gt;

&lt;p&gt;A component also has a &lt;code&gt;state&lt;/code&gt; attribute. The key to understanding the difference between &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;state&lt;/code&gt; is: &lt;code&gt;state&lt;/code&gt; is something controlled within that component that can change - &lt;code&gt;props&lt;/code&gt; do not.&lt;/p&gt;

&lt;p&gt;The above example is a pretty good example of this, when this component is first added to the hierarchy, we send a networking request to get whether you are following something or not. The parent component (&lt;code&gt;Header&lt;/code&gt;) does not need to update when we know whether you are following or not, but the &lt;code&gt;InvertedButton&lt;/code&gt; does. So, it is &lt;code&gt;state&lt;/code&gt; for the parent, but a &lt;code&gt;prop&lt;/code&gt; for the &lt;code&gt;InvertedButton&lt;/code&gt;. This means changing the state for &lt;code&gt;following&lt;/code&gt; will only cause a re-render in the button.&lt;/p&gt;

&lt;p&gt;So state is something which changes within a component, which &lt;em&gt;could&lt;/em&gt; be used as &lt;code&gt;props&lt;/code&gt; for it&#39;s children. Examples of this are around handling animation progress, whether you&#39;re following something, selection indices and any kind of networking which we do outside of &lt;a href=&quot;#relay&quot;&gt;Relay&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you&#39;d like to read more, there is a much deeper explanation in &lt;a href=&quot;https://github.com/uberVU/react-guide/blob/master/props-vs-state.md#props-vs-state&quot;&gt;uberVU/react-guide&lt;/a&gt;&lt;/p&gt;

&lt;a name=&quot;Context&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Context&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react/docs/context.html&quot;&gt;The docs&lt;/a&gt; are pretty specific about context:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If you aren&#39;t an experienced React developer, don&#39;t use context. There is usually a better way to implement functionality just using props and state.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Seems to be something that you should only be using in really, really specific places. If you need it, you don&#39;t need this glossary.&lt;/p&gt;

&lt;a name=&quot;JSX&quot;&gt;&lt;/a&gt;
&lt;h3&gt;JSX&lt;/h3&gt;

&lt;p&gt;As we&#39;ll find out later, modern JavaScript is a collection of different ideas, and using &lt;a href=&quot;#babel&quot;&gt;Babel&lt;/a&gt; - you can add them at will into your projects. JSX is one such feature, it is a way of describing nested data using XML-like syntax. These are used inside React&#39;s render function to express a component&#39;s children and their &lt;a href=&quot;#props&quot;&gt;props&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Under the hood, JSX is quite simple, with code looking like this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;greeting&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/h1&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Turning into&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;s1&quot;&gt;&amp;#39;h1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;greeting&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Where &lt;code&gt;createElement&lt;/code&gt; comes from the React &lt;a href=&quot;#module&quot;&gt;module&lt;/a&gt;. You can find out more in &lt;a href=&quot;https://facebook.github.io/react/docs/introducing-jsx.html&quot;&gt;the React docs&lt;/a&gt;&lt;/p&gt;

&lt;a name=&quot;Libraries&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Libraries&lt;/h1&gt;

&lt;a name=&quot;GraphQL&quot;&gt;&lt;/a&gt;
&lt;h3&gt;GraphQL&lt;/h3&gt;

&lt;p&gt;TLDR: An API format for requesting only the data you want, and getting back just that.&lt;/p&gt;

&lt;p&gt;If you want the longer explanation, I wrote a &lt;a href=&quot;/blog/2016/06/19/graphql-for-mobile/&quot;&gt;blog post on it&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;Relay&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Relay&lt;/h3&gt;

&lt;p&gt;Relay is what makes working in our React Native app shine. It is a library that allows a component to describe small chunks of a networking request it would need to render. Relay would then look through your component hierarchy, take all the networking fragments, make a single GraphQL request for all the data. Once it has the data, Relay passes in the response as &lt;a href=&quot;#props&quot;&gt;props&lt;/a&gt; to all of the components in the tree.&lt;/p&gt;

&lt;p&gt;This means you can throw away a significant amount of glue code.&lt;/p&gt;

&lt;a name=&quot;Redux&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Redux&lt;/h3&gt;

&lt;p&gt;Redux is a state management pattern, it builds on top of React&#39;s &quot;state is only passed down&quot; concept, and creates a single way to handle triggering changes to your state. I&#39;m afraid I don&#39;t have any experience with it, so I can&#39;t provide much context. I feel like &lt;a href=&quot;http://www.youhavetolearncomputers.com/blog/2015/9/15/a-conceptual-overview-of-redux-or-how-i-fell-in-love-with-a-javascript-state-container&quot;&gt;this post&lt;/a&gt; covers it well though.&lt;/p&gt;

&lt;a name=&quot;Tooling&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Tooling&lt;/h1&gt;

&lt;a name=&quot;Node&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Node&lt;/h3&gt;

&lt;p&gt;Node is the JavaScript implementation from Google&#39;s Chrome (called v8) with an expanded API for doing useful systems tooling. It is a pretty recent creation, so it started off with an entirely asynchronous API for any potentially blocking code.&lt;/p&gt;

&lt;p&gt;For web developers this was a big boon, you could share code between the browser and the server. The non-blocking API meant it was much easier to write faster servers, and there are lots of big companies putting a lot of time and money into improving the speed of JavaScript every day.&lt;/p&gt;

&lt;p&gt;Node has an interesting history of ownership, I won&#39;t cover it here, but &lt;a href=&quot;http://anandmanisankar.com/posts/nodejs-iojs-why-the-fork/&quot;&gt;this link&lt;/a&gt; provides some context.&lt;/p&gt;

&lt;a name=&quot;NPM&quot;&gt;&lt;/a&gt;
&lt;h3&gt;NPM&lt;/h3&gt;

&lt;p&gt;NPM is the Node Package Manager. It is shipped with node, but it is a completely different project and team. NPM the project is ran by a private company.&lt;/p&gt;

&lt;p&gt;NPM is one of the first dependency managers to offer the ability to install multiple versions of the same library inside your app. This contributes considerably to the issue of the number of dependencies inside any app&#39;s ecosystem.&lt;/p&gt;

&lt;p&gt;JavaScript people will always complain about NPM, but people will always complain about their build tools. Dependency Manager&#39;s especially. From an outsider&#39;s view, it nearly always does what you expect, has a great team behind it and has more available dependencies than any other.&lt;/p&gt;

&lt;p&gt;NPM works with a &lt;code&gt;Package.json&lt;/code&gt; file as the key file to represent all the different dependencies, version, authors and misc project metadata.&lt;/p&gt;

&lt;a name=&quot;Yarn&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Yarn&lt;/h3&gt;

&lt;p&gt;Yarn is a NPM replacement (ish) by Facebook. It&#39;s very new. It solves three problems, which were particularly annoying to me personally.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It flattens dependencies - this means that you&#39;re less likely to have multiple versions of the same library in your app.&lt;/li&gt;
&lt;li&gt;It uses a lockfile by default - this means that everyone on your team gets the same build, instead of maybe getting it.&lt;/li&gt;
&lt;li&gt;It is significantly faster.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It uses the NPM infrastructure for downloading &lt;a href=&quot;#modules&quot;&gt;modules&lt;/a&gt;, and works with the exact same &lt;code&gt;Package.json&lt;/code&gt;. I moved most of our projects to it.&lt;/p&gt;

&lt;a name=&quot;Babel&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Babel&lt;/h3&gt;

&lt;p&gt;I mentioned JSX a few times above. JSX is not a part of JavaScript, it is transpiled from your source code (as XML-like code) into real JavaScript. The tool that does this is Babel.&lt;/p&gt;

&lt;p&gt;Babel is a generic JavaScript transpilation engine. It does not provide any translation by default, but instead offers a plugin system for others to hook in their own transpilation steps. This becomes important because a lot of JavaScript features have staggered releases between browsers and you can&#39;t always guarantee each JavaScript runtime will have the features you want to use.&lt;/p&gt;

&lt;p&gt;Babel&#39;s plugins can be configured inside your &lt;code&gt;Package.json&lt;/code&gt;. To ship your code to the world, you then create a script of some sort to convert your source code into &quot;olde world&quot; JavaScript via Babel.&lt;/p&gt;

&lt;p&gt;In the case of a react-native project, Babel is happening behind the scenes.&lt;/p&gt;

&lt;a name=&quot;Webpack&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Webpack&lt;/h3&gt;

&lt;p&gt;A JavaScript source code &amp;amp; resource package manager. It can be easy to confuse Babel + Webpack, so in simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Babel will directly transform your source code file by file&lt;/li&gt;
&lt;li&gt;Webpack will take source code and merge it all into one file&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;They work at different scopes. Webpack is mainly a web front-end tool, and isn&#39;t used in React Native. However, you&#39;ll come across it, and it&#39;s better to know the scope of it&#39;s domain.&lt;/p&gt;

&lt;a name=&quot;ESLint&quot;&gt;&lt;/a&gt;
&lt;h3&gt;ESLint&lt;/h3&gt;

&lt;p&gt;How can you be sure your syntax is correct? JavaScript has a really powerful and extensible linter called ESLint. It parses your JavaScript and offers warnings and errors around your syntax. You can use this to provide a consistent codebase, or in my case, to be lazy with your formatting. Fixing a lot of issues is one command away. I have &lt;a href=&quot;https://artsy.github.io/blog/2016/08/15/vscode/&quot;&gt;my editor&lt;/a&gt; auto indent using ESLint every time I press save.&lt;/p&gt;

&lt;a name=&quot;Development&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Development&lt;/h1&gt;

&lt;a name=&quot;Live.Reload&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Live Reload&lt;/h3&gt;

&lt;p&gt;This is a common feature in JavaScript tooling. If you press save in a source file then some action is taken. Live Reloading tends to be a more blunt action, for example reloading the current view from scratch, or running all of the tests related to the file.&lt;/p&gt;

&lt;a name=&quot;Hot-Reloading&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Hot-Reloading&lt;/h3&gt;

&lt;p&gt;Hot Reloading is more rare, because it&#39;s significantly harder. Hot Reloading for React projects is injecting new functions into the running application, and keeping it in the same state.&lt;/p&gt;

&lt;p&gt;For example if you had a filled-in form on your screen, you could make styling changes inside your source file and the text inside the form would not change. Hot reloading is amazing.&lt;/p&gt;

&lt;a name=&quot;Haste.Map&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Haste Map&lt;/h3&gt;

&lt;p&gt;Part of what makes React Native support Hot Reloading, and allows &lt;a href=&quot;#jest&quot;&gt;Jest&lt;/a&gt; to understand changes for testing is by using a Haste Map. A Haste Map is a dependency resolver for JavaScript, looking through every function to know how it connects to every other function within the JavaScript project.&lt;/p&gt;

&lt;p&gt;With the dependencies mapped, it becomes possible to know what functions would need replacing or testing when you press save after writing some changes. This is why it takes a bit of time to start up a React Native project.&lt;/p&gt;

&lt;p&gt;The public API is deprecated, you shouldn&#39;t use it in your projects, but the &lt;a href=&quot;https://github.com/facebookarchive/node-haste/tree/master#node-haste-&quot;&gt;old README is still around&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;Testing&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Testing&lt;/h1&gt;

&lt;a name=&quot;Jest&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Jest&lt;/h3&gt;

&lt;p&gt;Facebook have their own test runner called Jest. It builds on &lt;a href=&quot;https://jasmine.github.io&quot;&gt;Jasmine&lt;/a&gt;, and offers a few features that kick ass for me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Re-runs failing tests first&lt;/li&gt;
&lt;li&gt;Assumes all tests unrelated to changes are green and doesn&#39;t run them&lt;/li&gt;
&lt;li&gt;Watch mode that works reliably&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I miss these features when I&#39;m not in a Jest project.&lt;/p&gt;

&lt;a name=&quot;Jest.Snapshots&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Jest Snapshots&lt;/h3&gt;

&lt;p&gt;Jest has a feature called Jest Snapshots, that allows you to take &quot;snapshots&quot; of JavaScript objects, and then verify they are they are the same as they were last time. In iOS we &lt;a href=&quot;https://www.objc.io/issues/15-testing/snapshot-testing/&quot;&gt;used visual snapshot&lt;/a&gt; testing a lot.&lt;/p&gt;

&lt;a name=&quot;VSCode-Jest&quot;&gt;&lt;/a&gt;
&lt;h3&gt;VSCode-Jest&lt;/h3&gt;

&lt;p&gt;I created a project to auto-run Jest inside projects that use it as a test runner when using Visual Studio Code: &lt;a href=&quot;https://github.com/orta/vscode-jest&quot;&gt;vscode-jest&lt;/a&gt;. I&#39;ve wrote about our usage of VS Code &lt;a href=&quot;https://artsy.github.io/blog/2016/08/15/vscode/&quot;&gt;on this blog series&lt;/a&gt; also.&lt;/p&gt;

&lt;a name=&quot;JavaScript.the.Language&quot;&gt;&lt;/a&gt;
&lt;h1&gt;JavaScript the Language&lt;/h1&gt;

&lt;p&gt;I&#39;m always told that JavaScript was created in 10 days, which is a cute anecdote, but JavaScript has evolved for the next 21 years. The JavaScript you wrote 10 years ago would still run, however modern JavaScript is an amazing and expressive programming language once you start using modern features.&lt;/p&gt;

&lt;p&gt;Sometimes these features aren&#39;t available in &lt;a href=&quot;#node&quot;&gt;node&lt;/a&gt;, or your browser&#39;s JavaScript engine, you can work around this by using a transpiler, which takes your source code and backports the features you are using to an older version of JavaScript.&lt;/p&gt;

&lt;a name=&quot;ES6&quot;&gt;&lt;/a&gt;
&lt;h3&gt;ES6&lt;/h3&gt;

&lt;p&gt;JavaScript is run by a committee. Around the time that people were starting to talk about HTML5 and CSS3, work was started on a new specification for JavaScript called ECMAScript 6.&lt;/p&gt;

&lt;p&gt;ES6 represents the first point at which JavaScript really started to take a lot of the best features from transpile to JavaScript languages like CoffeeScript. Making it feasible for larger systems programming to be possible in vanilla JavaScript.&lt;/p&gt;

&lt;a name=&quot;ES2016&quot;&gt;&lt;/a&gt;
&lt;h3&gt;ES2016&lt;/h3&gt;

&lt;p&gt;It took forever for &lt;a href=&quot;#es6&quot;&gt;ES6&lt;/a&gt; to come out, and every time they created / amended a specification there were multiple implementations of the specification available for transpiling via &lt;a href=&quot;#babel&quot;&gt;babel&lt;/a&gt;. This I can imagine was frustrating for developers wanting to use new features, and specification authors trying to put out documentation for discussion as a work in progress. This happened a lot &lt;a href=&quot;#promises&quot;&gt;with the Promises&lt;/a&gt; API.&lt;/p&gt;

&lt;p&gt;To fix this they opted to discuss specification features on a year basis. So that specifications could be smaller and more focused, instead of major multi-year projects. Quite a SemVer jump from 6 to 2016.&lt;/p&gt;

&lt;a name=&quot;Stages&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Stages&lt;/h3&gt;

&lt;p&gt;Turns out that didn&#39;t work out too well, so the terminology changed again. The change is mainly to set expectations between the Specification authors and developers transpiling those specifications into their apps.&lt;/p&gt;

&lt;p&gt;Now an ECMAScript language improvement specification moves through a series of stages, depending on their maturity. I believe starting at 4, and working down to 1. So a ECMAScript Stage 4 feature is going to be really new, if you&#39;re using it via a transpiler then you should expect a lot of potential API changes and code churn. The lower the number, the longer the spec has been discussed, and the more likely for the code you&#39;re transpiling to be the vanilla JavaScript code in time.&lt;/p&gt;

&lt;a name=&quot;Modules...Imports&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Modules / Imports&lt;/h3&gt;

&lt;p&gt;A modules is the terminology for a group of JavaScript code. Terminology can get confusing, as the import structure for a library is very similar to importing a local file.&lt;/p&gt;

&lt;p&gt;You can import a module using syntax like &lt;code&gt;import { thin, other } from &quot;thingy&quot;&lt;/code&gt;. Here&#39;s some examples &lt;a href=&quot;https://github.com/artsy/emission/blob/master/lib/components/artist/shows/show.js#L4-L9&quot;&gt;from our project&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Import modules&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Relay&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;react-relay&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Import two items from the react-native module &lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TouchableWithoutFeedback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;react-native&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Import the default class from a local file&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ImageView&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;../../opaque_image_view&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SwitchBoard&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;../../../native_modules/switch_board&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;An import can either have &lt;a href=&quot;https://github.com/danger/danger-js/blob/61557ac7b6de37ef9a7e4a1aa0c0cbe0bd00977d/source/ci_source/Fake.js#L6&quot;&gt;a default export&lt;/a&gt;, or a set of &lt;a href=&quot;https://github.com/artsy/Mitosis/blob/0c1d73055122bd61559df3b1a2913cf4e272b4ed/source/bot/artsy-api.js#L31-L94&quot;&gt;exportable function/objects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You might see an import like &lt;code&gt;const _ = require(&quot;underscore&quot;)&lt;/code&gt; around the internet, this is an older format for packaging JavaScript called &lt;a href=&quot;https://www.wikiwand.com/en/CommonJS&quot;&gt;CommonJS&lt;/a&gt;. It was replaced by the &lt;code&gt;import&lt;/code&gt; statements above because you can make guarantees about the individual items exported between module boundries. This is interesting because of &lt;a href=&quot;#tree-shaking&quot;&gt;tree-shaking&lt;/a&gt;, which we&#39;ll get to later.&lt;/p&gt;

&lt;a name=&quot;Classes&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Classes&lt;/h3&gt;

&lt;p&gt;Modern JavaScript has classes introduced in &lt;a href=&quot;#es6&quot;&gt;es6&lt;/a&gt;, this means that instead of writing something like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;danger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;danger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Instead you could write:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;danger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;danger&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;danger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Classes provide the option of doing object-oriented programming, which is still a solid way to write code. Classes provide a simple tool for making interfaces, which is really useful when you&#39;re working to the &lt;a href=&quot;http://www.amazon.com/gp/product/0201633612?ie=UTF8&amp;amp;camp=213733&amp;amp;creative=393185&amp;amp;creativeASIN=0201633612&amp;amp;linkCode=shr&amp;amp;tag=eejs-20&amp;amp;linkId=5S2XB3C32NLP7IVQ&quot;&gt;Gang of Four&lt;/a&gt; principals:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“Program to an interface, not an implementation,” and “favor object composition over class inheritance.”&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;Prototypical&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Prototypical&lt;/h3&gt;

&lt;p&gt;So, classes - it took 20ish years before they happened? Before that JavaScript was basically only a prototype-based language. This meant you created &quot;objects&quot; but that they were just effectively just key-value stores, and you used functions to do everything else.&lt;/p&gt;

&lt;p&gt;The language is a great fit for functional programming, I ended up building &lt;a href=&quot;https://github.com/artsy/Mitosis/&quot;&gt;an Artsy chat bot&lt;/a&gt; using only functions by accident. Really, a few days into it when I started looking for an example class to show in this post I realised I didn&#39;t have one. Whereas in Danger I do almost exclusive OOP in JavaScript, sometimes the project fits the paradigm too.&lt;/p&gt;

&lt;p&gt;A really good, and highly opinionated post on the values of prototypical/functional programming in JavaScript is &lt;a href=&quot;https://medium.com/javascript-scene/the-two-pillars-of-javascript-ee6f3281e7f3#.knm7xb7zr&quot;&gt;The Two Pillars of JavaScript&lt;/a&gt; - I agree with a lot of it.&lt;/p&gt;

&lt;a name=&quot;Mutablilty&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Mutablilty&lt;/h3&gt;

&lt;p&gt;JavaScript has had a keyword &lt;code&gt;var&lt;/code&gt; to indicate a variable forever. You should basically never use this. I&#39;ve never written one this year, except by accident. It&#39;s a keyword that has a really confusing scope, leading to odd bugs. &lt;a href=&quot;#es6&quot;&gt;ES6&lt;/a&gt; brought two replacements, both of which will give you a little bit of cognitive dissonance if you have a lot of Swift experience.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let&lt;/code&gt; - the replacement for &lt;code&gt;var&lt;/code&gt;, this is a &lt;em&gt;mutable&lt;/em&gt; variable, you can replace the value of a &lt;code&gt;let&lt;/code&gt;. The scope of a &lt;code&gt;let&lt;/code&gt; is exactly what you think from every other programming language.
&lt;code&gt;const&lt;/code&gt; - this is a &lt;code&gt;let&lt;/code&gt; that won&#39;t allow you to change the &lt;em&gt;value&lt;/em&gt;. So it creates a mutable object (all JS objects are mutable) but you cannot replace the object from the initial assignment.&lt;/p&gt;

&lt;a name=&quot;This&quot;&gt;&lt;/a&gt;
&lt;h3&gt;This&lt;/h3&gt;

&lt;p&gt;The keyword &lt;code&gt;this&lt;/code&gt; is a tricky one. It is confusing because &lt;code&gt;this&lt;/code&gt; gets assigned to the object that invokes the function where you use &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It&#39;s confusing because you may have a function inside a class, and would expect &lt;code&gt;this&lt;/code&gt; to be the instance to which the function is attached to, but it very easily could not be. For &lt;a href=&quot;https://github.com/artsy/emission/blob/c558323e4276699925b4edb3d448812005ae6b5d/lib/components/artist/articles/article.js#L11-L22&quot;&gt;example&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;handleTap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;SwitchBoard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;presentNavigationViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TouchableWithoutFeedback&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleTap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;In the above example &lt;code&gt;this&lt;/code&gt; inside &lt;code&gt;handleTap&lt;/code&gt; does not refer to the instance of Article. Tricky right?&lt;/p&gt;

&lt;p&gt;There are two &quot;easy&quot; fixes, &lt;a href=&quot;http://exploringjs.com/es6/ch_arrow-functions.html&quot;&gt;using arrow functions&lt;/a&gt; instead if normal functions:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;handleTap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;SwitchBoard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;presentNavigationViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Or you can use the &lt;code&gt;bind&lt;/code&gt; function to ensure that &lt;code&gt;this&lt;/code&gt; inside the function is what you want it to be.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TouchableWithoutFeedback&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleTap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This is a great in-depth explanation of the way it works: &lt;a href=&quot;https://toddmotto.com/understanding-the-this-keyword-in-javascript/&quot;&gt;Understanding the “this” keyword in JavaScript&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;Strict.Mode&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Strict Mode&lt;/h3&gt;

&lt;p&gt;Introduced in ECMAScript 5.1, it provides a way to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;opt-in to more errors&lt;/a&gt; inside the JavaScript runtime. As you&#39;re likely to be using both a linter and a transpiler to keep your source clean, I&#39;m less worried about including it on every page.&lt;/p&gt;

&lt;a name=&quot;Destructuring&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Destructuring&lt;/h3&gt;

&lt;p&gt;Object destructuring is one of those things that saves a little bit of code all the time. It&#39;s especially useful given the amount of time you spend passing around plain old JavaScript objects. This is something that CoffeeScript took from Ruby:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;danger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;danger&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;orta&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;or for an Object&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Danger&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This makes it really easy to pull out subsets of existing objects and set them as variables.&lt;/p&gt;

&lt;a name=&quot;Arrow.Functions&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Arrow Functions&lt;/h3&gt;

&lt;p&gt;In JavaScript a function has always looked like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This gets frustrating when you&#39;re doing functional-style programming, where you use closures for mapping, filtering and others. So instead &lt;a href=&quot;#es6&quot;&gt;ES6&lt;/a&gt; introduced terser ways of doing this. So I&#39;m going to write the same function multiple times:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// The way it&amp;#39;s always been&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// An arrow function version&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// An implicit return, and no braced one-liner arrow function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;a name=&quot;Promises&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Promises&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;#node&quot;&gt;Node&lt;/a&gt; is renowned for having a non-blocking API from day one. The way they worked around this is by using callbacks everywhere. This can work out pretty well, but eventually maintaining and controlling your callbacks turns into it&#39;s own problem. This can be extra tricky around handing errors.&lt;/p&gt;

&lt;p&gt;One way to fix this is to have a Promise API, Promises offer consistent ways to handle errors wand callback chaining.&lt;/p&gt;

&lt;p&gt;JavaScript now has a built-in a Promise API, this means every library can work to one API when handling any kind of asynchronous task. I&#39;m not sure what ECMA Specification brought it in. This makes it really easy to make consistent code between libraries. However, more importantly, it makes it possible to have async/await.&lt;/p&gt;

&lt;a name=&quot;Async.Await&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Async/Await&lt;/h3&gt;

&lt;p&gt;Once Promises were in, then a language construct could be created for using them elegantly. They work by declaring the entire function to be an &lt;code&gt;async&lt;/code&gt; function. An async function is a function which pretends to be synchronous, but behind the scenes is waiting for specific promises to resolve asynchronously.&lt;/p&gt;

&lt;p&gt;There are a few rules for an &lt;code&gt;async&lt;/code&gt; function:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You cannot use &lt;code&gt;await&lt;/code&gt; inside a function that has not been declared &lt;code&gt;async&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Anything you do return will be implicitly wrapped in a Promise&lt;/li&gt;
&lt;li&gt;Non-async functions can just handle the promise an &lt;code&gt;async&lt;/code&gt; function returns&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So, a typical &lt;code&gt;async&lt;/code&gt; function&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getReviewInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// this function will do async&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;details&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getPullRequestInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// wait for the promise in getPullRequestInfo to resolve &lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                       &lt;span class=&quot;c1&quot;&gt;// wait for the promise in json to resolve&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                   &lt;span class=&quot;c1&quot;&gt;// return the json&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;You aren&#39;t always given a promise to work with as not all APIs support promises and callbacks, wrapping a callback function is pretty simple:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                       &lt;span class=&quot;c1&quot;&gt;// returns a promise with a string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// create a new promise, with 2 callbacks&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;utf8&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// do the work&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;// did it fail? reject the promise&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                             &lt;span class=&quot;c1&quot;&gt;// did it pass? resolve the promise&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;await&lt;/code&gt; part of an &lt;code&gt;async&lt;/code&gt; function using &lt;code&gt;await readFile&lt;/code&gt; will now wait on the synchronous execution until the promise has resolved. This makes complicated code look very simple.&lt;/p&gt;

&lt;a name=&quot;Tree.Shaking&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Tree Shaking&lt;/h3&gt;

&lt;p&gt;All development ecosystems have trade-offs which shape their culture. For web developers reducing the amount of JavaScript they send to a client is an easy, and vital part of their day job. This started with minifying their source code, e.g. reducing the number of characters but having the same behavior.&lt;/p&gt;

&lt;p&gt;The current state of the art is tree-shaking, wherein you can know what functions are unused and remove those from the source code before shipping the code to a client. A [haste-map][#haste-map] is one way to handle these dependencies, but it&#39;s not the only one. &lt;a href=&quot;http://rollupjs.org/&quot;&gt;Rollup&lt;/a&gt; is considered the de-facto ruler of the space, but it is in &lt;a href=&quot;#babel&quot;&gt;babel&lt;/a&gt; and &lt;a href=&quot;#babel&quot;&gt;webpack&lt;/a&gt; also.&lt;/p&gt;

&lt;p&gt;Does this affect you if you&#39;re using React Native? Not really, but it&#39;s an interesting part of the ecosystem you should be aware of.&lt;/p&gt;

&lt;a name=&quot;Types&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Types&lt;/h1&gt;

&lt;p&gt;Types can provide an amazing developer experience, as an editor can understand the shape of all the object&#39;s inside your project. This can make it possible to build rich refactoring, static analysis or auto-complete experiences without relying on a runtime.&lt;/p&gt;

&lt;p&gt;For JavaScript there are two main ways to use types. &lt;a href=&quot;#flow&quot;&gt;Flow&lt;/a&gt; and &lt;a href=&quot;#typescript&quot;&gt;TypeScript&lt;/a&gt;. Both are amazing choices for building non-trivial applications. IMO, these two projects are what makes JavaScript a real systems language.&lt;/p&gt;

&lt;p&gt;Both take the approach of providing an optional typing system. This means you can choose to add types to existing applications bit by bit. By doing that you can easily add either to an existing project and progressively add types to unstructured data.&lt;/p&gt;

&lt;a name=&quot;Interfaces&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Interfaces&lt;/h3&gt;

&lt;p&gt;As both &lt;a href=&quot;#flow&quot;&gt;Flow&lt;/a&gt; and &lt;a href=&quot;#typescript&quot;&gt;TypeScript&lt;/a&gt; interact with JavaScript, the mindset for applying types is through Interfaces. This is very similar to protocol oriented programming, where you only care about the responsibilities  of an object - not the specific type. Here is a Flow interface from DangerJS:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;cm&quot;&gt;/** An API representation for a Code Review site */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;cm&quot;&gt;/** Mainly for logging and error reporting */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;cm&quot;&gt;/** Used internally for getting PR/Repo metadata */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;ciSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CISource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;cm&quot;&gt;/** Pulls in the Code Review Metadata for inspection */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;getReviewInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;cm&quot;&gt;/** Pulls in the Code Review Diff, and offers a succinct user-API for it */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;getReviewDiff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GitDSL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;cm&quot;&gt;/** Creates a comment on the PR */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;createComment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Comment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This interface defines the shape of an object, e.g. what functions/properties it will it have. Using interfaces means that you can expose the least amount of about an object, but you can be certain that if someone refactors the object and changes any interface properties - it provide errors.&lt;/p&gt;

&lt;a name=&quot;Flow&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Flow&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://flowtype.org&quot;&gt;Flow&lt;/a&gt; is a fascinating tool that infers types through-out your codebase. Our React Native uses a lot of Flow, we have a lot of &lt;a href=&quot;#eslint&quot;&gt;linter rules&lt;/a&gt; for it too, so instead of writing a function like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getPlatformForEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;We would write it like this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getPlatformForEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CISource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Wherein we now have interfaces for our arguments and the return value of the function. This means better error message from Flow, and better auto-complete in your editor.&lt;/p&gt;

&lt;a name=&quot;TypeScript&quot;&gt;&lt;/a&gt;
&lt;h3&gt;TypeScript&lt;/h3&gt;

&lt;p&gt;TypeScript is a typed language that compiles JavaScript by Microsoft. It&#39;s awesome, it has all of the advantages that I talked about with Flow and a lot more. With TypeScript you can get a much more consistent build environment (you are not picking and choosing different features of ES6) as Microsoft implement all of it into TypeScript.&lt;/p&gt;

&lt;p&gt;We opted to go for JS + Flow for Artsy&#39;s React Native mainly because we could incrementally add types, and you can find a lot more examples of JavaScript on the internet. It also is the way in which React Native is built, so you get the ecosystem advantage.&lt;/p&gt;

&lt;p&gt;That said, if we start a new React Native from scratch project, I would pitch that we should use TypeScript after my experiences with &lt;a href=&quot;https://github.com/Microsoft/vscode/pull/12628&quot;&gt;making PRs&lt;/a&gt; to VS Code. TypeScript feels more comprehensive, I got better error messages and VS Code is very well optimised for working in TypeScript projects.&lt;/p&gt;

&lt;a name=&quot;Typings.Flow-Typed&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Typings/Flow-Typed&lt;/h3&gt;

&lt;p&gt;Shockingly, not all JavaScript &lt;a href=&quot;#modules&quot;&gt;modules&lt;/a&gt; ship with a typed interface for others. This makes it a pain to work with any code outside your perfectly crafted/typed codebase. This isn&#39;t optimal, especially in JavaScript where you rely on so many external libraries.&lt;/p&gt;

&lt;p&gt;Meaning that you can either look up the function definitions in their individual docs, or you can read through the source. This breaks your programming flow.&lt;/p&gt;

&lt;p&gt;Both TypeScript and Flow offer a tool to provide external definitions for their libraries. For typescript that is &lt;a href=&quot;https://github.com/typings/typings&quot;&gt;typings&lt;/a&gt; and for Flow, &lt;a href=&quot;https://github.com/flowtype/flow-typed/&quot;&gt;flow-typed&lt;/a&gt;. These tools pull into your project definition files that tell TypeScript/Flow what each module&#39;s input/outputs are shaped like, and provides inline documentation for them.&lt;/p&gt;

&lt;p&gt;Flow-Typed is new, so it&#39;s not really got many definitions at all. Typings on the other hand has quite a lot, so in our React Native we use typings to get auto-complete for our libraries.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So that&#39;s my glossary, there&#39;s a lot of interesting projects out in the JS world.&lt;/p&gt;

&lt;p&gt;They have a term &quot;&lt;a href=&quot;http://www.confluentforms.com/2016/01/javascript-churn-technology-investment-effect.html&quot;&gt;JavaScript fatigue&lt;/a&gt;&quot; which represents the concept of the churn in choosing and learning from so many projects. This is very real, which is something we&#39;re taking into account. Given the amount of flexibility in the ecosystem, it&#39;s really easy to create anything you want. If I wanted to implement a simplified version of Swift&#39;s guard function for our JavaScript, I could probably do it in about 2 days using a Babel plugin, then we can opt-in on any project we want.&lt;/p&gt;

&lt;p&gt;This can make it easy to freeze and flip the table, but it also makes JavaScript a weird, kind of ideal, primordial soup where some &lt;em&gt;extremely&lt;/em&gt; interesting ideas come out. It&#39;s your job to use your smarts to decide which are the ideas which will evolve further, then help them stablize and mature.&lt;/p&gt;

&lt;script&gt;
// Ain&#39;t optimal, but it does it for now, need to figure a better way in the future.
$(&quot;a[name]&quot;).each(function(i, el){
  var $el = $(el)
  $el.attr(&quot;name&quot;, $el.attr(&quot;name&quot;).toLowerCase().replace(&quot;.&quot;, &quot;-&quot;))
})
&lt;/script&gt;



</description>
        <pubDate>Mon, 14 Nov 2016 12:17:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/11/14/JS-Glossary/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/11/14/JS-Glossary/</guid>
        
        
        <category>danger</category>
        
        <category>emission</category>
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>JSON Web Tokens: Artsy&#39;s Journey</title>
        <description>&lt;p&gt;At Artsy we currently have thousands of client applications hitting our API and requesting authentication. When a user successfully authenticates through one of these clients, we want to embed basic user and application data in the resulting token rather than have to look up a session ID in the database on each request. For that we want to use JWT.&lt;/p&gt;

&lt;p&gt;JWT (JSON Web Token) is a self-contained, secure and standard way of transmitting data between applications and clients as JSON objects. Using JWTs lets us use a standardized technology to cut our authentication workflow down by one round-trip.&lt;/p&gt;

&lt;p&gt;We&#39;ve recently switched our authentication flow to use &lt;a href=&quot;https://jwt.io&quot;&gt;JWT&lt;/a&gt;, and I&#39;m going to cover what they are, how we&#39;ve used them and how we&#39;re handling the transition.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;JWT has three separate sections which are separated by &lt;code&gt;.&lt;/code&gt;: header, payload and signature.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;header&amp;gt;.&amp;lt;payload&amp;gt;.&amp;lt;signature&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once decoded:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The header section contains JSON defining the type of token and how to treat its contents.&lt;/li&gt;
&lt;li&gt;The payload section includes &lt;em&gt;claims&lt;/em&gt; and data provided by the token issuer about the user and application (things like token expiration time, user id, etc.)&lt;/li&gt;
&lt;li&gt;The signature section is used to verify the sender of the JWT and make sure token wasn&#39;t modified along the way.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img src=&quot;/images/2016-10-26-jwt-artsy-journey/jwt-example.png&quot; alt=&quot;JWT example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jwt.io/introduction/&quot; target=&quot;_blank&quot;&gt;JWT&lt;/a&gt; and &lt;a href=&quot;https://tools.ietf.org/html/rfc7519&quot; target=&quot;_blank&quot;&gt;RFC 7519&lt;/a&gt; provide more details about each section of JWT and how encoding, decoding and verification work.&lt;/p&gt;

&lt;a name=&quot;Where.we.were&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Where we were&lt;/h1&gt;

&lt;p&gt;After a successful login, our API would generate a custom JSON object including some basic information about the user and application, then encrypt it using a single server-side secret.&lt;/p&gt;

&lt;p&gt;For every authenticated request we would have to decrypt the token, make sure the user and application were valid and the application still had access to our API. We were already &lt;em&gt;stateless&lt;/em&gt; since we didn&#39;t store tokens in our database. However, client applications had to make an API call to get any information about the authenticated user.&lt;/p&gt;

&lt;a name=&quot;Where.we.are.going&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Where we are going&lt;/h1&gt;

&lt;p&gt;We want to keep our current auth flow which is already stateless (tokens are not stored in database) and mainly replace our in-house generated access token with a more standard JWT. This let&#39;s us:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allow client applications to decode and use basic information from our token. This wasn&#39;t possible with our custom encrypted token. With JWT, each app can decode the token and get basic data out of it, check if the token is expired or not, etc. If the client wants to make sure a token is still valid, it can still call the API, like before, to re-validate and get more data about it.&lt;/li&gt;
&lt;li&gt;Possibly include different data in JWT payload for different applications. Some clients may request user roles with respect to galleries and others with respect to auction houses.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Follow a well-defined standard and use existing libraries for creating and reading the token. JWT has a decent set of reserved &lt;em&gt;claims&lt;/em&gt; which can be used to describe the token in a unified language. A few examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exp&lt;/code&gt;: Expiration time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iat&lt;/code&gt;: Time the token was issued.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iss&lt;/code&gt;: Issuer of the token (ex. our main API)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aud&lt;/code&gt;: Audience of the token (ex. our mobile application)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jti&lt;/code&gt;: A unique identifier for the token&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Most JWT libraries honor these claims and can automatically validate them so we don&#39;t have to handle things like expiration ourselves.&lt;/p&gt;

&lt;p&gt;In our new approach, every client application has its own secret key. When we get a new login for a specific application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We find the application in our database to make sure it is still valid and has access to our API.&lt;/li&gt;
&lt;li&gt;We use the application&#39;s secret key and generate a JWT&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When we get an authenticated request:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We decode the JWT without verifying the signature.&lt;/li&gt;
&lt;li&gt;From the JWT payload we get the &lt;code&gt;aud&lt;/code&gt; (audience) attribute defining for which application this token was generated.&lt;/li&gt;
&lt;li&gt;We fetch the client application corresponding to the &lt;code&gt;aud&lt;/code&gt; and verify the JWT&#39;s signature using that application&#39;s secret key.&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Transition&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Transition&lt;/h1&gt;

&lt;p&gt;Changing authentication tokens can be tricky when we already have many clients using our old access token format. It turns out that since we aren&#39;t changing the authentication flow, it&#39;s easier than we might expect. We simply have to continue decoding the legacy token format until they&#39;ve all expired or been replaced by JWTs.&lt;/p&gt;

&lt;p&gt;Once we go live with this change:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Any new successful authentication will use the JWT format.&lt;/li&gt;
&lt;li&gt;When validating existing tokens, we&#39;ll simply test if the token appears to be in the JWT format. If so, we&#39;ll decode it and validate the signature. If not, we&#39;ll attempt to decrypt it as a legacy token.&lt;/li&gt;
&lt;li&gt;Every time we get a legacy token, we increment a &lt;code&gt;legacy.token&lt;/code&gt; metric via &lt;a href=&quot;https://github.com/etsy/statsd&quot;&gt;Statsd&lt;/a&gt;. This way we can monitor the rate of legacy tokens we receive and decide when we can safely remove support for the legacy format. As you can see, legacy tokens are being replaced by the new format over time:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img src=&quot;/images/2016-10-26-jwt-artsy-journey/graphite-legacy-tokens.png&quot; alt=&quot;Tracking legacy tokens&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Oct 2016 11:03:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/10/26/jwt-artsy-journey/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/10/26/jwt-artsy-journey/</guid>
        
        
        <category>api</category>
        
        <category>authentication</category>
        
        <category>jwt</category>
        
      </item>
    
      <item>
        <title>Accessing the app&#39;s Source Code from your Simulator</title>
        <description>&lt;p&gt;In the last few months twice I&#39;ve wanted to access the source code of our application. The first time I did it I came up with a pretty neat hack, but it wouldn&#39;t really work in many places. The second time however, I &lt;a href=&quot;https://twitter.com/orta/status/786470282093625344&quot;&gt;asked the internet&lt;/a&gt;, and the &lt;a href=&quot;https://twitter.com/saniul/status/786470857635827712&quot;&gt;internet&lt;/a&gt; &lt;a href=&quot;https://twitter.com/0xced/status/786619335116750848&quot;&gt;replied&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;TLDR: You can use your &lt;a href=&quot;https://github.com/artsy/emission/pull/350/commits/2a39c743bcaaf2e3b848ad60621198f40365fdd2&quot;&gt;project&#39;s scheme&lt;/a&gt; to expose derived Xcode environment variables to your source code.&lt;/p&gt;

&lt;p&gt;The rest of the blog post is a little bit about &lt;em&gt;why&lt;/em&gt; I wanted to do that and what I did with it.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;Both times I&#39;ve wanted to access the source code of our apps is because I&#39;ve wanted to make better admin tools. It should come as no surprise to people who know me that I care about tooling, but I also care a lot about making it possible for our admins to do their own thing. As such, our &lt;a href=&quot;https://github.com/artsy/eigen/blob/master/Artsy/View_Controllers/Admin/ARAdminSettingsViewController.m&quot;&gt;admin settings panel&lt;/a&gt; in Eigen is extensive.&lt;/p&gt;

&lt;a name=&quot;Root.React.Components&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Root React Components&lt;/h3&gt;

&lt;p&gt;The first time came when I started to think about what admin options I&#39;d like to see for people using our React Native side. These are the options I came up with:&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;/images/source-code-sim/react-admin-eigen.png&quot; alt=&quot;/images/source-code-sim/react-admin-eigen.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are two interesting things about it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We support running any master commit of our React Native code inside Eigen, for Admins, &lt;a href=&quot;https://apphub.io&quot;&gt;via AppHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We allow loading arbitrary React components as an admin.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; It&#39;s this last bit that&#39;s interesting, right now I&#39;m working on a new root Gene component (read: new view controller) in Emission, our React Native implementation. As this work has not moved upstream into Eigen, I can access it through a commit on AppHub, and then open it using our custom module loader:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/source-code-sim/react-module-eigen.png&quot; alt=&quot;/images/source-code-sim/react-module-eigen.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order to show the available root components (Artist/Home/Gene), we use GitHub&#39;s raw URLs to download the source code of our Open Source apps. Hah, a nice hack right? I &lt;a href=&quot;https://github.com/artsy/eigen/blob/master/Artsy/View_Controllers/Admin/ARAdminNetworkModel.m&quot;&gt;created&lt;/a&gt; a &lt;code&gt;ARAdminNetworkModel&lt;/code&gt; with an API like this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ARAdminNetworkModel&lt;/span&gt; : &lt;span class=&quot;bp&quot;&gt;NSObject&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getEmissionJSON:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;completion:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getEmissionFile:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;completion:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Which simply uses &lt;code&gt;NSURLSession&lt;/code&gt; under the hood:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getEmissionData:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;completion:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;bp&quot;&gt;NSURLSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;https://raw.githubusercontent.com/artsy/emission/master/%@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;stringWithFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;bp&quot;&gt;NSURLRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLRequest&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;requestWithURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;URLWithString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;bp&quot;&gt;NSURLSessionDataTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;dataTaskWithRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSURLResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Nothing special, but it required a cognitive jump to get there.&lt;/p&gt;

&lt;a name=&quot;Submodule.Introspection&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Submodule Introspection&lt;/h3&gt;

&lt;p&gt;The second time I wanted this is inside &lt;a href=&quot;https://github.com/artsy/emission/tree/master/Example&quot;&gt;the example app&lt;/a&gt; for Emission. This is a typical example application for a library made by &lt;code&gt;pod lib create&lt;/code&gt;. This example app is basically just the admin settings panel from Eigen, shown above.&lt;/p&gt;

&lt;p&gt;When I &lt;a href=&quot;https://github.com/artsy/emission/pull/347&quot;&gt;switched the&lt;/a&gt; example app to use a similar theme and menu DSL as Eigen, I also took the chance to expand on the buttons we had available. Previously there was the ability to load the view controller for one specific artist, but I knew we had a &lt;a href=&quot;https://github.com/artsy/metaphysics/blob/master/schema/artist/maps/artist_title_slugs.js&quot;&gt;giant list of artist slugs&lt;/a&gt; inside one of our optional sub-modules. What I wanted to do, was offer a random Artist from that if the submodule was &lt;code&gt;init&lt;/code&gt;&#39;d.&lt;/p&gt;

&lt;p&gt;This required introspecting the source, which I could have also done via the GitHub API, but it was also feasible to do by accessing the filesystem outside of the simulator. This is totally possible ( and is &lt;a href=&quot;https://www.objc.io/issues/15-testing/snapshot-testing/&quot;&gt;how FBSnapshots works&lt;/a&gt; ) but I needed to access the project root, then I could build relative links. Thus, &lt;a href=&quot;https://twitter.com/orta/status/786470282093625344&quot;&gt;I asked the internet&lt;/a&gt;. I knew these variables existed, but that they were a part of the build process - and not exposed to the app runtime.&lt;/p&gt;

&lt;p&gt;There are two ways to do it, both make sense for different contexts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/emission/blob/74d0bc6cc45da906436f8bbc33710ea030657ee8/Example/Emission/Info.plist#L5-L6&quot;&gt;Baking the value into your Info.plist&lt;/a&gt; - which makes it available for all consumers at runtime, e.g. you could deploy this value, but it&#39;s not too useful for my problem.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/emission/pull/350/commits/2a39c743bcaaf2e3b848ad60621198f40365fdd2&quot;&gt;Exposing it as an environment variable via your scheme&lt;/a&gt; - perfect for this case, the variable won&#39;t be exported when you deploy.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Now our scheme looks like this:&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/source-code-sim/scheme-settings-emission.png&#39;&gt;&lt;img src=&quot;/images/source-code-sim/scheme-settings-emission.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;I can then use the value of &lt;code&gt;SRCROOT&lt;/code&gt; as the start of an absolute path to get to any of the source code in our project. Making the &lt;a href=&quot;https://github.com/artsy/emission/blob/dda57636e424ab7d4517de57f3e8bd917fcb3c6f/Example/Emission/ARRootViewController.m#L85-L108&quot;&gt;final code&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;obj-c&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARCellData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;jumpToRandomArtist&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourceRoot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSProcessInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;SRCROOT&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artistListFromExample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;../externals/metaphysics/schema/artist/maps/artist_title_slugs.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slugsPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourceRoot&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;stringByAppendingPathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artistListFromExample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;bp&quot;&gt;NSFileManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSFileManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;c1&quot;&gt;// Don&amp;#39;t have the submodule? bail, it&amp;#39;s no biggie&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;fileExistsAtPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slugsPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;c1&quot;&gt;// Otherwise lets support jumping to a random Artist&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;tappableCellDataWithTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;Artist (random from metaphysics)&amp;quot;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;selection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;stringWithContentsOfFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slugsPath&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSUTF8StringEncoding&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;a name=&quot;Tooling&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Tooling&lt;/h3&gt;

&lt;p&gt;Paying attention to your admin tools, and improving your development experience for the whole team is a great way to win friends and influence people. Introspecting your source code may help that.&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Oct 2016 12:17:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/10/14/Accessing-the-Source-Code-from-your-Simulator/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/10/14/Accessing-the-Source-Code-from-your-Simulator/</guid>
        
        
        <category>eigen</category>
        
        <category>emission</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
      </item>
    
      <item>
        <title>The Eidolon Deploy Process</title>
        <description>&lt;p&gt;Since we &lt;a href=&quot;http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&quot;&gt;originally built&lt;/a&gt; Eidolon – an auction bidding kiosk app – the project has largely remained in maintenance mode. Eidolon was one of the first projects that we used automated deploys for, and the deploy process has remained largely unchanged. I believe this stability of the deploy process is a testament to how well the automated deploys have gone.&lt;/p&gt;

&lt;p&gt;This post is going to detail the mechanics of automated deploys for an enterprise-distributed iOS application, discuss lessons we learned and applied to other projects&#39; deploy processes, and describe some of the changes we&#39;d like to make. Our project is entirely open source, so you can check out any part of the code on your own or &lt;a href=&quot;https://github.com/artsy/eidolon/issues/new&quot;&gt;open an issue&lt;/a&gt; with questions.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Deploying.Eidolon&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Deploying Eidolon&lt;/h2&gt;

&lt;p&gt;It&#39;s one command on the terminal to deploy Eidolon:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;fast lane deploy version:X.Y.Z
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This command does a lot of things. It uses &lt;a href=&quot;https://fastlane.tools&quot;&gt;Fastlane&lt;/a&gt;, and you can &lt;a href=&quot;https://github.com/artsy/eidolon/blob/a0aad31bccfe2b4abf648fc64892cc165be400b4/fastlane/Fastfile#L40-L131&quot;&gt;read the entire script here&lt;/a&gt;. We&#39;re going to go over each part line-by-line. A few notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We run this command locally on a development machine that has the keys installed to sign a deploy.&lt;/li&gt;
&lt;li&gt;Our changelog is formatted in &lt;a href=&quot;https://en.wikipedia.org/wiki/YAML&quot;&gt;yaml&lt;/a&gt;, our script uses this strategically.&lt;/li&gt;
&lt;li&gt;Our deploy script modifies the project&#39;s Info.plist version and build number, as well as the changelog.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Let&#39;s dive in!&lt;/p&gt;

&lt;a name=&quot;The.Script&quot;&gt;&lt;/a&gt;
&lt;h2&gt;The Script&lt;/h2&gt;

&lt;p&gt;The first thing we do is verify that the version number we&#39;ve been given is in the proper &lt;a href=&quot;http://semver.org&quot;&gt;SemVer&lt;/a&gt; format.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;rb&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;You must specify a version in A.B.X format to deploy.&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\d+\.\d+\.\d+/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;We deploy using Hockey, so make sure that an environment variable with the Hockey API key is set.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;rb&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;hockey_api_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;HOCKEY_API_TOKEN&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;You must specify a HOCKEY_API_TOKEN environment variable to deploy.&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hockey_api_token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil?&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;We also want to verify that we have valid API keys for analytics, the Artsy API, and a few other services the app uses. This validation only makes sure the keys have been set to non-empty values. And we don&#39;t want to accidentally deploy uncommited changes, so we check the git status first.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;rb&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;verify_pod_keys&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;ensure_git_status_clean&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Next we need to set the build number. These need to be unique, and we use the current date. This could be a problem if we need to deploy more than once in a day. It hasn&#39;t been a problem yet, though, since we rarely deploy.&lt;/p&gt;

&lt;p&gt;We also want to set the Info.plist&#39;s version to the one specified when we run the &lt;code&gt;fastlane&lt;/code&gt; command.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;rb&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;build_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;%Y.%m.%d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;increment_build_number&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;build_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build_number&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;increment_version_number&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;version_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Okay, now it&#39;s time to generate markdown release notes from the changelog. Our changelog is in the following format:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;yaml&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;upcoming&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Upcoming version bug fix.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;releases&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;X.Y.Z&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Month Day Year&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Previous version bug fix.&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;We want to grab the &lt;code&gt;upcoming&lt;/code&gt; notes for the changelog, and then move them to the &lt;code&gt;releases&lt;/code&gt; section. Let&#39;s generate the notes first:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;rb&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;changelog_filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;../CHANGELOG.yml&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;changelog_yaml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YAML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changelog_filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;release_notes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changelog_yaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;upcoming&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prepend&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;- &amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Updating the changelog is a little messy. I tried parsing the changelog as yaml, modifying it, and then writing it back as yaml, but kept running into trouble. Instead, I treat it as plain text. We open the changelog, split on &lt;code&gt;releases:&lt;/code&gt;, prepend the existing releases with a the generated release notes, and write the changelog.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;rb&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;changelog_contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changelog_filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;existing_releases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changelog_contents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;releases:&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;this_release&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changelog_yaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;upcoming&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prepend&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;  &amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;changelog_contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;sh&quot;&gt;upcoming:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;sh&quot;&gt;releases:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;sh&quot;&gt;- version: #{version}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;sh&quot;&gt;  date: #{Time.new.strftime(&amp;quot;%B %d %Y&amp;quot;)}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;sh&quot;&gt;  notes:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;sh&quot;&gt;#{this_release}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;sh&quot;&gt;#{existing_releases}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changelog_filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changelog_contents&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;At this point, we&#39;re ready to start the actual deploy process. First we need to download the provisioning profiles, which is only one step with Fastlane:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;rb&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;sigh&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Next we build our app using &lt;code&gt;gym&lt;/code&gt;. We need to use the legacy build API, I can&#39;t remember why.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;rb&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;gym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;ss&quot;&gt;scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Kiosk&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;ss&quot;&gt;export_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;enterprise&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;ss&quot;&gt;use_legacy_build_api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;With our build finished, we upload to Hockey.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;rb&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;hockey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;ss&quot;&gt;api_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hockey_api_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;ss&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;release_notes&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Okay, our build is deployed. Time to let the team know there&#39;s a new version available:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;rb&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;slack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;ss&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;There is a new version of the Kiosk app available. Download it at http://artsy.net/kioskbeta&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;ss&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# optional, defaults to true&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;ss&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# optional, lets you specify any number of your own Slack attachments&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Version&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;s1&quot;&gt;&amp;#39;What\&amp;#39;s new&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;release_notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;ss&quot;&gt;default_payloads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;default_payloads&lt;/code&gt; needs to be empty I think, I can&#39;t remember why. Seems like &quot;I can&#39;t remember why&quot; is a common theme here...&lt;/p&gt;

&lt;p&gt;Before committing the changes we&#39;ve made to the changelog and Info.plist files, we need to clean any build artefacts. This includes the actual binary that was compiled, unit test coverage reports, and downloaded provisioning profiles.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;rb&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;clean_build_artifacts&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Finally, we commit, tag the build, and push to GitHub. Fastlane&#39;s built-in commands to commit to git reject any changes except to Info.plist files, and we&#39;ve modified the changelog, so I used &lt;code&gt;sh&lt;/code&gt; and used git directly.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;rb&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;git add .. ; git commit -m &amp;#39;Deploying version &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&amp;#39;&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;add_git_tag&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;push_to_git_remote&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;And that&#39;s it! With one terminal command, we&#39;ve done all the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Verified version number format.&lt;/li&gt;
&lt;li&gt;Verified the local environment is set up to deploy.&lt;/li&gt;
&lt;li&gt;Verified API keys used by the app aren&#39;t empty.&lt;/li&gt;
&lt;li&gt;Incremented the build number and version.&lt;/li&gt;
&lt;li&gt;Updated the changelog.&lt;/li&gt;
&lt;li&gt;Built and signed the app.&lt;/li&gt;
&lt;li&gt;Uploaded the build to Hockey.&lt;/li&gt;
&lt;li&gt;Posted a notification to Slack.&lt;/li&gt;
&lt;li&gt;Tagged the release and pushed to GitHub.&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Lessons.Learned&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Lessons Learned&lt;/h2&gt;

&lt;p&gt;Automating Eidolon deploys was one of the first automated deploys we built on Artsy&#39;s iOS team. Now, based on Eidolon&#39;s successful deploy process, all our iOS deploys are automated.&lt;/p&gt;

&lt;p&gt;We&#39;ve learned a few lessons.&lt;/p&gt;

&lt;p&gt;First, running deploys locally is &lt;em&gt;so 2015&lt;/em&gt;. Our more modern deploy processes run on continuous integration servers like Circle CI. This poses some problems around securing certificates necessary to deploy, maybe we&#39;ll cover that in a future blog post.&lt;/p&gt;

&lt;p&gt;We deploy on CI based on pushes to a specific branch, and we run our deploy script only if the unit tests pass. This is a huge incentive to keep CI green.&lt;/p&gt;

&lt;p&gt;On other iOS projects, we sometimes deploy more than once a day, so we use &lt;code&gt;Year.Month.Day.Hour&lt;/code&gt; as the build number format, which is unique enough to do one deploy per hour. This is good enough for now.&lt;/p&gt;

&lt;p&gt;One thing I really wish I&#39;d done when I set up automated deploys is to document things a little better. To be honest, that&#39;s part of the motivation to write this blog post (better late than never!).&lt;/p&gt;

&lt;a name=&quot;Conclusion&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Overall, automating deploys for Eidolon has been a huge win. The other night, we had an emergency at an auction: the Eidolon app was no longer working and we needed a new deploy.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Guess who’s got two thumbs and forgot that their enterprise distribution certificates expire in September.&lt;br&gt;&lt;br&gt;👍this guy👍&lt;/p&gt;&amp;mdash; Ash vs NSThread (@ashfurrow) &lt;a href=&quot;https://twitter.com/ashfurrow/status/784548214527627266&quot;&gt;October 8, 2016&lt;/a&gt;&lt;/blockquote&gt;


&lt;p&gt; &lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;From the time the team let me know about the problem to the time they had a fresh deploy with a new certificate, less than twenty minutes had passed. I issued one command and watched it do all the work for me. If I had to manually follow a set of arcane steps I hadn&#39;t done in a long time, our team might not have had the new build in time.&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Oct 2016 12:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/10/08/eidolon-deploy-process/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/10/08/eidolon-deploy-process/</guid>
        
        
        <category>eidolon</category>
        
        <category>mobile</category>
        
      </item>
    
      <item>
        <title>Professional Development at Artsy Engineering</title>
        <description>&lt;p&gt;In considering an offer to join us at Artsy, one of our newest incoming engineers asked me a great question: &lt;em&gt;How does the tech team do professional development?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As I thought about it, I began to realize that the answer is “a lot”! Most of our efforts evolved organically. Someone had an idea, and people rallied around it. I thought it would be useful to share, in case others are inspired by what&#39;s caught on here. Here are some of the things we do.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Practices&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Practices&lt;/h1&gt;

&lt;p&gt;Our engineering team used to be organized along &lt;em&gt;practice&lt;/em&gt; lines: web, mobile native, and platform. Following our recent &lt;a href=&quot;http://artsy.github.io/blog/2016/03/28/artsy-engineering-organization-stack/&quot;&gt;product reorganization&lt;/a&gt;, we’re primarily organized in product teams, which are more deeply integrated and aligned with our business units. But practices are here to stay. They serve as horizontal channels for developers working in similar technologies to collaborate and share best practices. They each have a lively Slack channel and do standups once or twice a week.&lt;/p&gt;

&lt;a name=&quot;Product.teams&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Product teams&lt;/h1&gt;

&lt;p&gt;Within product teams, engineers take on work across the stack. Most engineers have one or more zone of expertise, but it&#39;s important for us to branch out as well. In my role as a product engineering lead, I&#39;m responsible for helping to support this, to ensure that my team members are broadening in their skills.&lt;/p&gt;

&lt;a name=&quot;Collaboration&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Collaboration&lt;/h1&gt;

&lt;p&gt;In day-to-day work, we do a lot of pair programming and whiteboard architecture on an ad hoc basis. This happens between teams as much as within them. It&#39;s common for developers to request code reviews from members of other teams, and equally common for them to provide friendly pointers on PRs they chance upon.&lt;/p&gt;

&lt;a name=&quot;Lunch....n....Learn&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Lunch ’n’ Learn&lt;/h1&gt;

&lt;p&gt;Every Thursday, we do a Lunch-and-Learn session. Historically, we mostly showed off tech we use internally. But over about a year, most of our tech stack has been presented this way, so we also bring in engineers we know at other companies to share what they’re working on.&lt;/p&gt;

&lt;a name=&quot;Conferences&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Conferences&lt;/h1&gt;

&lt;p&gt;Devs are encouraged to attend conferences. The engineering budget covers expenses for 1 per year as an attendee, and unlimited as a presenter. Many of our engineers are experienced presenters -- and I know &lt;a href=&quot;http://orta.io/&quot;&gt;Orta&lt;/a&gt; has even been a conference organizer. So there’s plenty of support for first-time presenters. Lunch ’n’ Learn sessions have served as a place to do a dry run for a presentation.&lt;/p&gt;

&lt;a name=&quot;Community.engagement&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Community engagement&lt;/h1&gt;

&lt;p&gt;Professional development isn’t just about absorbing new information, it’s also about teaching and sharing. That’s one of the best ways to truly master a topic. We encourage folks to participate in OSS, blogging (obviously), speaking, and other types of community engagement, and we’ve got really experienced people on all those fronts to support for helping make this happen. We&#39;ve got team members who help maintain highly utilized community projects, but there are more low-key ways to be involved in OSS. One nice thing about being &lt;a href=&quot;http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html&quot;&gt;open source by default&lt;/a&gt; is that it gives us ways to contribute to OSS in the course of doing regular product development.&lt;/p&gt;

&lt;a name=&quot;Slack.discussions&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Slack discussions&lt;/h1&gt;

&lt;p&gt;We’ve got an active #tech-learning Slack channel, which people use to share and discuss articles. We also have a number of language-specific Slack channels, such as #elixir, #swift, and #scala (my personal fave).&lt;/p&gt;

&lt;a name=&quot;Mentorship&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Mentorship&lt;/h1&gt;

&lt;p&gt;Newer devs are paired with a mentor, who serves as the point person the newer dev can always talk to. Making this connection official means that it counts as a job responsibility for the mentor. For obvious reasons, mentoring benefits the mentee, but it&#39;s good to remember that it also helps mentors develop. After all, teaching someone is the best way to learn.&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Sep 2016 16:37:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/09/22/professional-development-at-artsy-engineering/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/09/22/professional-development-at-artsy-engineering/</guid>
        
        
        <category>development</category>
        
        <category>education</category>
        
        <category>engineering</category>
        
        <category>organization</category>
        
        <category>professional</category>
        
      </item>
    
      <item>
        <title>Dev Interviews: Maxim Cramer</title>
        <description>&lt;p&gt;I&#39;m happy to introduce the next in the &lt;a href=&quot;http://artsy.github.io/series/dev-interviews/&quot;&gt;Dev Interviews&lt;/a&gt; series - &lt;a href=&quot;http://www.mennenia.com/&quot;&gt;Maxim Cramer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Maxim has been at Artsy for 6 month, working on our mobile app Eigen. Our interview covers how being a remote developer, advice for people at a HQ working with remotes, her work with React Native and what the future holds for the Artsy mobile team.&lt;/p&gt;

&lt;p&gt;Jump &lt;a href=&quot;https://www.youtube.com/watch?v=ftsBR_KqHcE&quot;&gt;to YouTube&lt;/a&gt; for the video, or click more for a inline video.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;iframe width=&#39;100%&#39; height=&#39;600&#39; src=&#39;https://www.youtube.com/embed/ftsBR_KqHcE &#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Sep 2016 12:11:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/09/16/Dev-Interview-Maxim-Cramer/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/09/16/Dev-Interview-Maxim-Cramer/</guid>
        
        
        <category>culture</category>
        
        <category>interview</category>
        
        <category>video</category>
        
      </item>
    
      <item>
        <title>Help! I&#39;m becoming Post-Junior</title>
        <description>&lt;p&gt;I’ve lived in NYC for 2 years now. I’ve been around long enough that some of the people I helped when they started learning have begun to feel like they’re not “Juniors” anymore.&lt;/p&gt;

&lt;p&gt;They have begun feeling confident in their code, their responsibilities at the company and wanting to improve both. It&#39;s a feeling that maybe, just maybe, &lt;a href=&quot;https://ashfurrow.com/blog/normalizing-struggle/&quot;&gt;you&#39;re not struggling to stay afloat anymore&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post aims to be technology-agnostic, and if you sit somewhere at 1.5 - 3 years of programming experience then you’ll probably get something out of it. On top of that,  I’ll give some pragmatic JS and iOS specific tips at the end.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;This post is easy to start. At Artsy we have an &lt;a href=&quot;/blog/2015/04/03/artsy-engineering-compensation-framework/&quot;&gt;engineering ladder system&lt;/a&gt; - which I’ll paraphrase below. It’s worth the full read though.&lt;/p&gt;

&lt;p&gt;Key point:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Performance evaluation at Artsy is composed of the what, &lt;em&gt;i.e. what you achieve that contributes to your team’s goals and ultimately Artsy goals&lt;/em&gt;, and the how, &lt;em&gt;i.e. how you act and how those actions contribute to Artsy’s culture and values&lt;/em&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We measure your career stage by your &lt;strong&gt;impact&lt;/strong&gt; at Artsy, this is initially on the products you’re working on, but eventually moves out to the culture and the business:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Engineer 1&lt;/strong&gt; - Can ship a well defined product feature.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Engineer 2&lt;/strong&gt; - Can independently own a product features and can handle the communication with others around it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Engineer 3&lt;/strong&gt; - Can handle a suite of features, and broadly contribute within a domain. Can improve company culture.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Engineer 4&lt;/strong&gt; - Can improve and be a multiplier on other people’s work, can anticipate larger trends and affect culture to avoid or steer in that direction.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Engineer 5&lt;/strong&gt; - Defines technical culture, works on impacting all parts of our businesses and creates new opportunities for the company.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What we’re talking about here is the transition from Engineer 1, to Engineer 2. Here’s our full unabridged description of an Engineer 2.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;▪   Consistently writes and delivers correct and clean quality code with guidance.&lt;/p&gt;

&lt;p&gt;▪   Self-sufficient and makes steady progress on tasks.&lt;/p&gt;

&lt;p&gt;▪   Knows when to ask for help and how to get unblocked.&lt;/p&gt;

&lt;p&gt;▪   Makes steady, well-paced progress without the need for constant significant feedback from more senior engineers.&lt;/p&gt;

&lt;p&gt;▪   Owns a small-to-medium feature from technical design through completion.&lt;/p&gt;

&lt;p&gt;▪   Provides help and support outside of area under their responsibility.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What can we gleam from this, so we start thinking of ways to improve ourselves as individual contributors?&lt;/p&gt;

&lt;a name=&quot;Increasing.your.Responsibility.with.Cross.Team.Interactions&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Increasing your Responsibility with Cross Team Interactions&lt;/h2&gt;

&lt;p&gt;It’s very unlikely that you are making all of the calls in a product. What is hopefully happening is that your team figures out a plan to ship something in a reasonable timeframe and as a team you assign each other smaller tasks that make that work.&lt;/p&gt;

&lt;p&gt;It’s very likely that as a junior, you will be given the most well-defined small tasks. In OSS we call these the “&lt;a href=&quot;https://github.com/danger/danger/issues?q=is:issue+is:open+label:%22You+Can+Do+This%22&quot;&gt;easy first steps&lt;/a&gt;.” Tasks that can be done atomically, without requiring more interaction with designers or members of the product team. Initially this is a feature (in that you get easy tasks), that eventually turns into a bug (you want to contribute at a higher level).&lt;/p&gt;

&lt;p&gt;When it’s time to divvy up responsibilities, you should consider speaking up about taking tasks that are blocking people, but require further investigation outside of your dev team.&lt;/p&gt;

&lt;p&gt;These responsibilities could be checking up on the status of an API with a platform team, or communicating with different parts of the business to get confirmation on specific details. It is the vagueness that makes the task harder, work your way towards making the task clear - then you have a well defined project.&lt;/p&gt;

&lt;a name=&quot;Learn.From.Your.Project.s.History&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Learn From Your Project&#39;s History&lt;/h2&gt;

&lt;p&gt;When you work, you’re probably working inside an application that other people have built. They have laid the frameworks down, established the team norms and architectural choices that could have existed for years before you arrived.&lt;/p&gt;

&lt;p&gt;Part of what gives you that feeling of confidence in your code is you’re comfortable within the architectural ecosystem you’re used to: e.g. React + Relay, iOS MVVM, Backbone + Express, Rails + CoffeeScript. You’re probably getting good at using them, and that’s awesome.&lt;/p&gt;

&lt;p&gt;To evolve from just that you need to really understand why these choices were made, what their trade-offs are and what was the reasoning for that platform to even exist in the first place.&lt;/p&gt;

&lt;p&gt;By understanding the history of the choices that you have been living with, you can make better decisions in the future.&lt;/p&gt;

&lt;a name=&quot;The.Bigger.Picture&quot;&gt;&lt;/a&gt;
&lt;h2&gt;The Bigger Picture&lt;/h2&gt;

&lt;p&gt;There is no “One True Solution” for anything in programming. You should be wary of anyone that tries to tell you all similar sounding things should be done one way. The things you work on are likely a combination of different patterns that work together to become “an app.”&lt;/p&gt;

&lt;p&gt;Understanding your patterns well, and knowing when to apply them will get you far. If you want to go further still, you need to be able to step back from your patterns and try to see larger pictures. A feature that you write this week  &lt;em&gt;with a little bit more abstraction today&lt;/em&gt; could make it much easier to write something next week. Writing better abstractions makes it easier for you to become a multiplier for other peoples work.&lt;/p&gt;

&lt;p&gt;The hard bit is trying to see what that is. Realistically, this is about understanding where the product is, and what it’s roadmap is for the next few iterations as well as trying to think about abstractions that may not be available inside your project.&lt;/p&gt;

&lt;a name=&quot;Studying.Outside.Your.Daily.Craft&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Studying Outside Your Daily Craft&lt;/h2&gt;

&lt;p&gt;Some problems can be handled particularly well by different architectural patterns.  Without knowing they exist, how can you think that they are something you can use?&lt;/p&gt;

&lt;p&gt;This leads to an interesting problem, how do you learn new architectural pattens?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Process&lt;/strong&gt;: You’re probably using some form of &lt;a href=&quot;http://agilemanifesto.org&quot;&gt;agile development&lt;/a&gt;, understand what that &lt;a href=&quot;https://en.wikipedia.org/wiki/Agile_software_development&quot;&gt;really means&lt;/a&gt; and how it compares to others. Try reading &lt;a href=&quot;https://www.amazon.co.uk/Getting-Things-Done-Stress-free-Productivity-ebook/dp/B00SHL3V8M/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1473567686&amp;amp;sr=1-1&amp;amp;keywords=gtd&quot;&gt;Getting Things Done&lt;/a&gt; and I’ve heard good things about &lt;a href=&quot;https://www.amazon.co.uk/Personal-Kanban-Mapping-Work-Navigating-ebook/dp/B004R1Q642/ref=sr_1_6?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1473567686&amp;amp;sr=1-6&amp;amp;keywords=gtd&quot;&gt;Personal Kanban&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Code Architecture&lt;/strong&gt;: Here are some book recommendations, &lt;a href=&quot;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot;&gt;Clean Code&lt;/a&gt;, &lt;a href=&quot;https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X/ref=pd_bxgy_14_img_3?ie=UTF8&amp;amp;psc=1&amp;amp;refRID=BX7MTECP16Z2VR3N3T25&quot;&gt;The Pragmatic Programmer&lt;/a&gt;, &lt;a href=&quot;https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612&quot;&gt;Elements of Reusable Object-Oriented Software&lt;/a&gt; and &lt;a href=&quot;https://www.amazon.co.uk/gp/product/B005OYHF0A/&quot;&gt;Working Effectively with Legacy Code&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tooling&lt;/strong&gt;: There is never one way to do something, so try something else. Switch text editor for a month, or explore alternative methods of doing the same thing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;You can use this knowledge to start offering useful advice that can start to influence your team, for example could be in the form of trying few new idea and offering feedback on their tradeoffs.&lt;/p&gt;

&lt;p&gt;As this is useful to both you and your employer, you should consider talking to your manager about booking time in your work calendar for doing 30 minutes of career development once a week studying topics like these.&lt;/p&gt;

&lt;a name=&quot;Helping.others&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Helping others&lt;/h2&gt;

&lt;p&gt;You can help your team out by using some of the skills from above.  You can then start thinking of expanding your influence within the company. By being a programmer you already have skills that a lot of people would like to learn or have a better working knowledge of it.&lt;/p&gt;

&lt;p&gt;If you’ve got this far in the article, it’s very likely you’ve got enough skills to &lt;a href=&quot;http://artsy.github.io/blog/2016/01/26/swift-at-artsy/&quot;&gt;lead&lt;/a&gt; &lt;a href=&quot;http://artsy.github.io/blog/2016/08/31/Keyboard-Shortcuts-workshop/&quot;&gt;workshops&lt;/a&gt; internally, and write blog posts about &lt;a href=&quot;http://artsy.github.io/blog/2015/07/06/how-to-write-unit-tests-like-a-brood-parasite/&quot;&gt;your experiences&lt;/a&gt; to &lt;a href=&quot;http://artsy.github.io/blog/2015/06/04/an-eigenstate-of-mind/&quot;&gt;help other developers&lt;/a&gt; at your level. For example, this month I’ve ran a workshop on keyboard shortcuts and on learning to program in Swift. Both of them required maybe 2 hours of preparation, and an email or two announcing that it’s happening.&lt;/p&gt;

&lt;p&gt;Other options are to give &lt;a href=&quot;http://artsy.github.io/blog/2016/03/09/public-speaking-part1-is-it-for-me/&quot;&gt;technical talks&lt;/a&gt; within your company on specific topics, for example &lt;a href=&quot;/blog/2015/12/10/License-and-You/&quot;&gt;Licensing for OSS code&lt;/a&gt; is a talk I gave internally to Artsy. We now have a weekly team “Lunch &amp;amp; Learn” where we give anyone the chance to talk, or request a talk on a topic.&lt;/p&gt;

&lt;p&gt;This gives a lot of space for personal growth too, as these are really easy to transition into blog posts and meetup talks.&lt;/p&gt;

&lt;p&gt;Finally, try to pair with programmers outside of your direct team, it could be on whatever they’re working on - you’ll learn a bit more about other systems and they’ll get to &lt;a href=&quot;https://en.wikipedia.org/wiki/Rubber_duck_debugging&quot;&gt;rubber duck&lt;/a&gt; their problems.&lt;/p&gt;

&lt;a name=&quot;Side.Projects&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Side Projects&lt;/h2&gt;

&lt;p&gt;I’ve tried to focus this post specifically on things you can do on work time. Not everyone has the ability to go home and spend a few hours on this and that. However, programming at the early stage can generally be a “you get out what you put in” kind of deal with time.&lt;/p&gt;

&lt;p&gt;Side projects give you the chance to test out new ideas in an isolated environment that is totally under your control. They are great places for exploring what makes a system tick. Some side-projects are built to be &lt;a href=&quot;https://github.com/orta/you-can-do-it&quot;&gt;thrown away&lt;/a&gt; others can &lt;a href=&quot;https://cocoapods.org&quot;&gt;to last&lt;/a&gt; &lt;a href=&quot;http://danger.systems&quot;&gt;for years&lt;/a&gt;. Both are valuable spaces for experimentation.&lt;/p&gt;

&lt;a name=&quot;Contributing.to.Open.Source&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Contributing to Open Source&lt;/h2&gt;

&lt;p&gt;A lot of people’s work relies on Open Source code and as you are starting to branch out into having a larger impact - perhaps making smaller improvements to the projects you rely on every day could help. This is &lt;a href=&quot;https://speakerdeck.com/orta/the-cocoapods-spec-repo-and-cocoadocs&quot;&gt;how I got started&lt;/a&gt; working with larger projects in the Open Source world.&lt;/p&gt;

&lt;p&gt;Interacting in these projects exposes you to whole new teams of people with, hopefully, very different perspectives. It will change you, you will change them.&lt;/p&gt;

&lt;a name=&quot;Moving.On&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Moving On&lt;/h2&gt;

&lt;p&gt;This is a &lt;a href=&quot;https://github.com/artsy/artsy.github.io/pull/275#issuecomment-246227904&quot;&gt;complicated topic&lt;/a&gt;, perhaps worth of it’s own post.&lt;/p&gt;

&lt;p&gt;When you first start looking for a job in technology, you likely didn’t have too many choices and was pleased to have any offer. By this point, I’m hoping you’re at a point where you understand your value to a company.&lt;/p&gt;

&lt;p&gt;Perhaps it’s worth thinking about what kind of space the company has for you to grow in. Since I started my career, Artsy is the only job I’ve been in for longer than 2 years. For some, I felt like I had outgrown my original role but could not find a space to grow into.&lt;/p&gt;

&lt;p&gt;It’s worth re-evaluating. I do it every year in anticipation of my &lt;a href=&quot;http://orta.io/on/being/29&quot;&gt;annual write-ups&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;Wrap-up&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Wrap-up&lt;/h2&gt;

&lt;p&gt;This is no simple “one-step to consider yourself post-Junior&quot; article. Only a collection of ideas that you can apply until you feel confident as you find you own ways to help out. As you grow, you grow in many different directions at once - and all of them are valid.&lt;/p&gt;

&lt;p&gt;You can grow by research, practice, doing things outside of work, doing small projects with others in work, experimentation with technology, interacting with more and more people and re-thinking existing approaches. Once you&#39;re outside of small feature work - there are so many ways you can contribute.&lt;/p&gt;

&lt;p&gt;We use the idea of an engineering ladder as a yardstick to ensure we treat developers fairly at Artsy. Different companies will have different ways of scoping how you measure up as a programmer. Your company&#39;s ladder can help offer direction for what they would love to see.&lt;/p&gt;

&lt;p&gt;At the end of the day you’ve got your foundations now, and its time to start thinking about building yourself into a unique programmer and creating your own opinions. There’s never been a better time to start.&lt;/p&gt;

&lt;a name=&quot;Further.Reading&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.alexnaraghi.com/what-i-didnt-understand-as-a-junior-programmer&quot;&gt;What I Didn&#39;t Understand as a Junior Programmer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dbgrandi.github.io/growing_beyond_junior/&quot;&gt;Growing Beyond Junior&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;iOS.Specific&quot;&gt;&lt;/a&gt;
&lt;h2&gt;iOS Specific&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Study &lt;a href=&quot;/blog/2016/06/19/graphql-for-mobile/&quot;&gt;GraphQL&lt;/a&gt;, study my entire series on &lt;a href=&quot;/series/cocoa-architecture/&quot;&gt;Cocoa Architecture&lt;/a&gt; and our &lt;a href=&quot;/series/ios-code-review/&quot;&gt;app code reviews&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Study MVC, MVVM, RxSwift, VIPER, Testing, BDD, CocoaPods &amp;amp; Swift Package Manager with an hour on each minimum.&lt;/li&gt;
&lt;li&gt;Read &lt;a href=&quot;https://www.objc.io&quot;&gt;objc.io&lt;/a&gt;, watch their videos too.&lt;/li&gt;
&lt;li&gt;Study other languages, and toolsets - it’s very easy to become silo’d in just Objective-C and Swift.&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;JS.Specific&quot;&gt;&lt;/a&gt;
&lt;h2&gt;JS Specific&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Study ES6, GraphQL, React, Relay, Redux, Angular 2, Flow, TypeScript, Carte Blanche, Webpack &amp;amp; Babel.&lt;/li&gt;
&lt;li&gt;Get a company account on &lt;a href=&quot;https://egghead.io&quot;&gt;Egghead&lt;/a&gt; - give yourself a timetable on work time to spend 30+ minutes once a week watching videos from it.&lt;/li&gt;
&lt;li&gt;Explore VS Code, Safari Web Inspector and Web Storm as different ways of doing the same thing, but with more tooling.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 10 Sep 2016 12:17:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/09/10/Help!-I'm-becoming-Post-Junior/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/09/10/Help!-I'm-becoming-Post-Junior/</guid>
        
        
        <category>culture</category>
        
        <category>juniors</category>
        
      </item>
    
      <item>
        <title>Helping the Web Towards OSS by Default</title>
        <description>&lt;p&gt;The main Artsy.net website for the desktop, &lt;a href=&quot;https://github.com/artsy/force&quot;&gt;Force&lt;/a&gt;, was our first Artsy application to open its source code, &lt;a href=&quot;http://artsy.github.io/author/craig&quot;&gt;Craig&lt;/a&gt; and &lt;a href=&quot;http://artsy.github.io/author/brennan&quot;&gt;Brennan&lt;/a&gt; did it &lt;a href=&quot;/blog/2014/09/05/we-open-sourced-our-isomorphic-javascript-website/&quot;&gt;back in 2014&lt;/a&gt;. Force&#39;s public offering laid the groundwork for the iOS OSS projects to come afterwards: &lt;a href=&quot;/blog/2014/11/13/eidolon-retrospective/&quot;&gt;Eidolon&lt;/a&gt;, &lt;a href=&quot;/blog/2015/04/28/how-we-open-sourced-eigen/&quot;&gt;Eigen&lt;/a&gt;, &lt;a href=&quot;/blog/2015/08/06/open-sourcing-energy/&quot;&gt;Energy&lt;/a&gt; and &lt;a href=&quot;/blog/2015/11/05/Emergence-Code-Review/&quot;&gt;Emergence&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Though Force wasn&#39;t quite Open Source by Default, it represented a &lt;em&gt;really&lt;/em&gt; important step for  Artsy&#39;s OSS perspective but was not the end goal. We were opening our source, but not opening our process.&lt;/p&gt;

&lt;p&gt;This month both &lt;a href=&quot;https://github.com/artsy/force&quot;&gt;Force&lt;/a&gt;, the desktop version of &lt;a href=&quot;https://www.artsy.net/&quot;&gt;Artsy.net&lt;/a&gt; and &lt;a href=&quot;https://github.com/artsy/microgravity&quot;&gt;Microgravity&lt;/a&gt;, the mobile version - moved to being built entirely in the open. Read on to find out how.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Force&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Force&lt;/h2&gt;

&lt;p&gt;Over the course of the last month, I&#39;ve sat on and off with Charles &quot;&lt;a href=&quot;http://charlesbroskoski.com/_/&quot;&gt;Cab&lt;/a&gt;&quot; Broskoski, and figured out what it would take to migrate Force to work in the public. Previous to this, work happened on a private repo, and we would push that code to the public.&lt;/p&gt;

&lt;p&gt;We scoped out what it would require, creating an issue that summarized the work. Then we waited for 2 weeks, to give people the chance to discuss the idea and to offer examples for why we should delay or not move. Not all projects &lt;em&gt;should&lt;/em&gt; be OSS, and everyone should have a say when it affects them - giving some time let the team speak their mind. Especially during summer, when people were less active at work.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/oss-milestone/force-oss.png&#39;&gt;&lt;img src=&quot;/images/oss-milestone/force-oss.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;It had been 9 months since the last commit to the public repo, and so auditing the commits was a matter of investigating into configuration files, and seeing what&#39;s changed since the last public commit.&lt;/p&gt;

&lt;p&gt;Next up, we renamed the current &lt;code&gt;force&lt;/code&gt; repo to &lt;code&gt;force-private&lt;/code&gt;. This was to keep the old issues and PRs around after we moved to working in the public. With &lt;code&gt;force&lt;/code&gt; now available we re-named the already public project.&lt;/p&gt;

&lt;p&gt;We then ensured all outstanding PRs were merged or closed, and pushed the commits from &lt;code&gt;force-private&lt;/code&gt; to the now OSS &lt;code&gt;force&lt;/code&gt;.&lt;/p&gt;

&lt;a name=&quot;CI&quot;&gt;&lt;/a&gt;
&lt;h3&gt;CI&lt;/h3&gt;

&lt;p&gt;To get back up to speed we needed to set up CI, figuring this out took time.&lt;/p&gt;

&lt;p&gt;We got testing up and running in no time. However, Force is deployed via &lt;a href=&quot;https://semaphoreci.com/&quot;&gt;Semaphore CI&lt;/a&gt;, and to deploy we needed to push compiled assets to S3. To pull that off, we needed access to an S3 key, and token.&lt;/p&gt;

&lt;p&gt;In our iOS projects, &lt;a href=&quot;https://github.com/artsy/eidolon/pull/607&quot;&gt;we do not expose environment variables&lt;/a&gt; to PRs from forks, so we don&#39;t expect them to pass from external contributors. This is fine, because we have &lt;a href=&quot;http://artsy.github.io/blog/2016/01/13/OSS-Expectations/&quot;&gt;different expectations&lt;/a&gt; for OSS apps vs libraries. We do this to ensure that we don&#39;t receive a PR that adds &lt;code&gt;printenv&lt;/code&gt; to the CI scripts, exposing our secret keys.&lt;/p&gt;

&lt;p&gt;As we couldn&#39;t add the keys to our testing environment, we added them to our heroku environment then took them from that. Semaphore sets up our heroku environment only during deployment, so in the deployment phase, we can use a line like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FORCE_S3_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;heroku config:get FORCE_S3_KEY --app force-production&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This sets up the environment like we used to have it when force was private.&lt;/p&gt;

&lt;a name=&quot;Team&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Team&lt;/h3&gt;

&lt;p&gt;We needed to move all the team members to using the OSS version of our apps. This is a little bit complicated as &lt;a href=&quot;/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy/&quot;&gt;we work from forks&lt;/a&gt;. &lt;a href=&quot;http://www.anandarooproy.com/portfolio&quot;&gt;Roop&lt;/a&gt;, an engineer on the web team, created a &quot;Force OSS Dance Script&quot; ( sidenote: &lt;a href=&quot;http://www.anandarooproy.com/portfolio&quot;&gt;his site&lt;/a&gt; is worth a visit, there&#39;s 15 years of interesting maps. )&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;31&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;32&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;33&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;## RENAME THE OLD REPO&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# on GitHub&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# - Go to my fork https://github.com/&amp;lt;username&amp;gt;/force&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# - Go to Settings tab&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# - Rename repo to &amp;quot;force-private&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# on my local machine&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;mv force force-private
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;force-private
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;git remote &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;-url upstream git@github.com:artsy/force-private.git
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;git remote &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;-url origin git@github.com:&amp;lt;username&amp;gt;/force-private.git
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;## FORK AND CLONE THE NEW REPO&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# back to GitHub&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# - Go to the new Force repo https://github.com/artsy/force&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# - Fork it to my account&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# back to my local machine&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;git clone git@github.com:&amp;lt;username&amp;gt;/force.git
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;force
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;git remote add upstream git@github.com:artsy/force.git
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;cp ../force-private/.env ./
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;cp ../force-private/node_modules ./ &lt;span class=&quot;c&quot;&gt;# or just &amp;#39;npm install&amp;#39; again&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# all good now - both repos on local machine with correct remotes, envs, deps&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;For Force, all the same commits existed in both repos, so it would be difficult to push secrets to the open repo by accident. However, individuals did to sync up a new version of their forks.&lt;/p&gt;

&lt;p&gt;And that, is how we moved force into OSS by Default. :+1: - We&#39;ll cover the issues migration later.&lt;/p&gt;

&lt;a name=&quot;Microgravity&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Microgravity&lt;/h2&gt;

&lt;p&gt;I have a lot of love for Microgravity. It&#39;s the web project that made &lt;a href=&quot;/blog/2015/04/28/how-we-open-sourced-eigen/&quot;&gt;Eigen&lt;/a&gt; possible. Once Force had moved, I started spending time with Craig trying to understand what it would take to open up Microgravity.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/oss-milestone/micrograv-oss.png&#39;&gt;&lt;img src=&quot;/images/oss-milestone/micrograv-oss.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;It is no surprise to find a lot of overlap, both projects are based on the same foundations: &lt;a href=&quot;http://ezeljs.com&quot;&gt;Ezel.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We didn&#39;t trust the commit history for microgravity, so we nuked it. Same as our native OSS apps.&lt;/p&gt;

&lt;p&gt;We came up with a pattern to make it easier for people to migrate issues, we created a &lt;code&gt;migrate&lt;/code&gt; GitHub label that anyone can apply to an issue in a private repo. Then we use &lt;a href=&quot;https://github-issue-mover.appspot.com&quot;&gt;Issue Mover for GitHub&lt;/a&gt; with some inline JavaScript to loop through all our issues to migrate. As it&#39;s applying a label we can ask product owners and designers to choose ones that are important to them too.&lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;p&gt;I love that I got to help make these changes, the web team started the process of opening our apps at Artsy, then the mobile team took the next big step. Now the teams are both in lock-step, and if you work on the front-end at Artsy - OSS by Default is the way we all work now.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Sep 2016 12:17:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/09/06/Milestone-on-OSS-by-Default/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/09/06/Milestone-on-OSS-by-Default/</guid>
        
        
        <category>force</category>
        
        <category>javascript</category>
        
        <category>js</category>
        
        <category>microgravity</category>
        
        <category>node</category>
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>macOS Keyboard Shortcuts workshop video</title>
        <description>&lt;p&gt;Hey all, I was asked to talk internally about ways in which anyone can improve their day-to-day computer usage. For me, using keyboard shortcuts shows a greater level of control of your machine - and more importantly can be considerably faster.&lt;/p&gt;

&lt;p&gt;I have all of my notes, annotated with images inside a personal GitHub repo: &lt;a href=&quot;https://github.com/orta/keyboard_shortcuts&quot;&gt;orta/keyboard_shortcuts&lt;/a&gt;. We covered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pressing menu items via keyboard&lt;/li&gt;
&lt;li&gt;Window Management&lt;/li&gt;
&lt;li&gt;Text Management, e.g. jumping between words etc.&lt;/li&gt;
&lt;li&gt;Searching for text&lt;/li&gt;
&lt;li&gt;Taking Screenshots&lt;/li&gt;
&lt;li&gt;Slack and Chrome&lt;/li&gt;
&lt;li&gt;Using a Window Manager and Clipboard History Manager&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Jump &lt;a href=&quot;https://www.youtube.com/watch?v=1mIRCL_lGbg&quot;&gt;to YouTube&lt;/a&gt; for the video, or click more for a smaller inline preview.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;iframe width=&#39;100%&#39; height=&#39;600&#39; src=&#39;https://www.youtube.com/embed/1mIRCL_lGbg &#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Aug 2016 12:09:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/08/31/Keyboard-Shortcuts-workshop/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/08/31/Keyboard-Shortcuts-workshop/</guid>
        
        
        <category>video</category>
        
        <category>workshop</category>
        
      </item>
    
      <item>
        <title>Learn Swift at Artsy, Beginners Lesson Three</title>
        <description>&lt;p&gt;And we&#39;re back! With lesson three of the beginners&#39; Swift-at-Artsy course. To recap, Orta and I &lt;a href=&quot;http://artsy.github.io/blog/2016/01/26/swift-at-artsy/&quot;&gt;led a course at Artsy&lt;/a&gt; to teach our colleagues Swift &lt;em&gt;last&lt;/em&gt; August, and we&#39;re doing it again. I&#39;m leading the stream for people who&#39;ve never programmed before.&lt;/p&gt;

&lt;p&gt;Yesterday was lesson three and I have a &lt;a href=&quot;https://youtu.be/e2ErzD8ibG8&quot;&gt;screen recording&lt;/a&gt; of my walkthrough of &lt;a href=&quot;https://github.com/artsy/Swift-at-Artsy/tree/master/Beginners/Lesson%20Three&quot;&gt;the material&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;iframe width=&#39;100%&#39; height=&#39;600&#39; src=&#39;https://www.youtube.com/embed/e2ErzD8ibG8 &#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Aug 2016 09:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/08/30/swift-at-artsy-beginners-lesson-three/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/08/30/swift-at-artsy-beginners-lesson-three/</guid>
        
        
        <category>code</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>oss</category>
        
        <category>swift</category>
        
        <category>teaching</category>
        
        <category>video</category>
        
      </item>
    
  </channel>
</rss>
