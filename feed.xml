<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artsy Engineering</title>
    <description></description>
    <link>http://artsy.github.io/</link>
    <atom:link href="http://artsy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 03 May 2019 20:50:56 +0000</pubDate>
    <lastBuildDate>Fri, 03 May 2019 20:50:56 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Orta&#39;s best of</title>
        <description>&lt;p&gt;Today is my last day at Artsy, it&#39;s been 7.5 years and I figured a nice way to book-end my time here is to make a
post that tries to talk over &lt;a href=&quot;https://artsy.github.io/author/orta/&quot;&gt;the last ~90 blog posts I&#39;ve shipped&lt;/a&gt;. My posts
tell the story of a junior-ish engineering solving problems on successive larger scales, until their decisions
impact whole industries.&lt;/p&gt;

&lt;p&gt;These posts cover so many topics that the right way to give them justice is to try group them in terms of general
themes and provide a larger context about why they were written.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;I used to occasionally write before I came to Artsy, but inside the environment of Artsy&#39;s Engineering team I could
consider it &lt;em&gt;&quot;work work&quot;&lt;/em&gt; and not just &lt;em&gt;&quot;things I should do, but in my own spare time.&quot;&lt;/em&gt; Writing for Artsy on the
blog is &lt;a href=&quot;https://artsy.github.io/blog/2019/01/30/why-we-run-our-blog/&quot;&gt;very similar to writing code in our repos&lt;/a&gt;, you assign an editor (thanks &lt;a href=&quot;https://github.com/artsy/artsy.github.io/pulls?utf8=%E2%9C%93&amp;amp;q=is%3Aclosed+is%3Apr+author%3Aorta+&quot;&gt;Ash&lt;/a&gt; for
taking the lion&#39;s share!) and request reviews. This lowered the barriers considerably.&lt;/p&gt;

&lt;a name=&quot;Career.Growth&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Career Growth&lt;/h1&gt;

&lt;p&gt;I started working at Artsy with about 2-3 years of professional programming experience at the end of 2011. When
people ask about how career progression tends to work I TLDR it as:
&lt;/br&gt;&lt;code&gt;Feature -&amp;gt; Section of Codebase -&amp;gt; Codebase -&amp;gt; Codebases -&amp;gt; Systems -&amp;gt; Businesses -&amp;gt; Industry&lt;/code&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;This echoes how Artsy used to handle &lt;a href=&quot;https://artsy.github.io/blog/2016/09/10/Help!-I&#39;m-becoming-Post-Junior/&quot;&gt;an IC career ladder&lt;/a&gt; (&lt;a href=&quot;https://github.com/artsy/README/blob/master/careers/ladder.md&quot;&gt;current&lt;/a&gt;). At that
point I joined, I sat somewhere around &lt;code&gt;Section of Codebase&lt;/code&gt;. Each progression is more responsibility, and can
sometimes be about making decisions and not necessarily being the person to put the work in.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2012 - Building Features&lt;/strong&gt; - &lt;br/&gt;&lt;a href=&quot;https://artsy.github.io/blog/2012/09/13/on-grid-thumbnails/&quot;&gt;On Grid Thumbnails&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2012/05/11/on-making-it-personal--in-iOS-with-searchbars/&quot;&gt;On Making It Personal in iOS with
Searchbars&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2013 - Creating Libraries&lt;/strong&gt; - &lt;br/&gt;&lt;a href=&quot;https://artsy.github.io/blog/2013/04/10/aranalytics/&quot;&gt;ARAnalytics - Analytics for iOS Apps&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2013/03/29/musical-chairs/&quot;&gt;Musical Chairs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2014 - Supporting Team Infra&lt;/strong&gt; - &lt;br/&gt;&lt;a href=&quot;https://artsy.github.io/blog/2014/08/08/CocoaPods-Caching/&quot;&gt;Using CocoaPods Caching with Travis CI&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2014/06/17/building-the-xcode-plugin-snapshots/&quot;&gt;Building the Xcode
Plugin Snapshots&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2014/06/11/testing-core-data-migrations/&quot;&gt;Testing Core Data Migrations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2015 - Long term iOS Software Architecture and OSS&lt;/strong&gt; - &lt;br/&gt;&lt;a href=&quot;https://artsy.github.io/blog/2015/09/18/Cocoa-Architecture-Dependencies/&quot;&gt;Dependencies&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/09/01/Cocoa-Architecture-Dropped-Design-Patterns/&quot;&gt;Dropped Design Patterns&lt;/a&gt;,
&lt;a href=&quot;https://artsy.github.io/blog/2015/08/24/Cocoa-Architecture-Hybrid-Apps/&quot;&gt;Hybrid Apps&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/08/19/Cocoa-Architecture-Switchboard-Pattern/&quot;&gt;ARSwitchboard&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/08/15/Cocoa-Architecture-Router-Pattern/&quot;&gt;ARRouter&lt;/a&gt; and &lt;a href=&quot;https://artsy.github.io/blog/2015/08/06/open-sourcing-energy/&quot;&gt;Open Sourcing Energy&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/04/28/how-we-open-sourced-eigen/&quot;&gt;How we Open
Source&#39;d Eigen&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2015/12/10/License-and-You/&quot;&gt;Licenses for OSS Code&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2016 - Consolidating web + iOS&lt;/strong&gt; - &lt;br/&gt;&lt;a href=&quot;https://artsy.github.io/blog/2016/08/24/On-Emission/&quot;&gt;On our implementation of React Native&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/06/19/graphql-for-mobile/&quot;&gt;GraphQL for iOS
Developers&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/08/15/vscode/&quot;&gt;Using VS Code for JavaScript&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2016/11/14/JS-Glossary/&quot;&gt;JavaScript Glossary for
2017&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2017 - Process at Scale (OSS/All of Artsy)&lt;/strong&gt; - &lt;br/&gt;&lt;a href=&quot;https://artsy.github.io/blog/2017/10/10/C4Q-QandA/&quot;&gt;C4Q&amp;amp;A&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2017/09/04/Introducing-Peril/&quot;&gt;Introducing Peril to the Artsy Org&lt;/a&gt;,
&lt;a href=&quot;https://artsy.github.io/blog/2017/06/30/danger-one-oh-again/&quot;&gt;Danger&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2017/04/14/artsy-technology-stack-2017/&quot;&gt;Artsy&#39;s Technology Stack, 2017&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2018 - Cementing Artsy Culture&lt;/strong&gt; - &lt;br/&gt;JavaScriptures (&lt;a href=&quot;https://artsy.github.io/blog/2018/05/01/JavaScriptures-1-React/&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/05/02/JavaScriptures-2-TypeScript/&quot;&gt;TypeScript&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/06/15/JavaScriptures-4.2-Local-State/&quot;&gt;Tooling&lt;/a&gt;,
&lt;a href=&quot;https://artsy.github.io/blog/2018/06/13/JavaScriptures-4.1-Relay/&quot;&gt;Relay&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/06/15/JavaScriptures-4.2-Local-State/&quot;&gt;Local State&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/05/04/JavaScriptures-3-Styled-Components/&quot;&gt;Styled Components&lt;/a&gt;), &lt;a href=&quot;https://artsy.github.io/blog/2018/10/18/long-term-highlights/&quot;&gt;Engineering Highlights&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2018/06/03/Announcing-Artsy-x-React-Native/&quot;&gt;Announcing:
Artsy x React Native&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2019 - Archivist&lt;/strong&gt; - &lt;br/&gt;&lt;a href=&quot;https://artsy.github.io/blog/2019/04/11/on-an-rfcs-process/&quot;&gt;Why we added an RFC process to Artsy&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2019/04/10/omakase-relay/&quot;&gt;Why does Artsy use Relay?&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2019/01/30/why-we-run-our-blog/&quot;&gt;Why
We Run Our Own Blog&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2019/04/04/peril-architecture-deep-dive/&quot;&gt;Peril Architecture Deep Dive&lt;/a&gt; &amp;amp; this post.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;iOS&quot;&gt;&lt;/a&gt;
&lt;h1&gt;iOS&lt;/h1&gt;

&lt;p&gt;While I was originally expecting to be working on Ruby apps at Artsy, I very quickly ended up working on our iOS
app &lt;a href=&quot;https://folio.artsy.net&quot;&gt;Artsy Folio&lt;/a&gt; and eventually owned it post-1.0. This makes sense because I had a few years of macOS
native experience and I knew the project lead (&lt;a href=&quot;https://twitter.com/benjaminjackson&quot;&gt;Ben Jackson&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Over time, I grew to own the iOS team at Artsy. In doing so I became a manager with 3-4 reports and tried to really
make a name for Artsy&#39;s iOS team in the industry. We built more apps, and started to need to think through our
larger I found our &lt;a href=&quot;https://www.artsy.net/article/artsy-jobs-mobile-engineer&quot;&gt;old job posting&lt;/a&gt; from just before we consolidated with web. It echoes a lot of the
idea on how I framed our team&#39;s responsibilities being in that we should build Artsy in a way that improves the
industry for everyone too.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2015/09/18/Cocoa-Architecture-Dependencies/&quot;&gt;Dependencies&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/09/01/Cocoa-Architecture-Dropped-Design-Patterns/&quot;&gt;Dropped Design Patterns&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/08/24/Cocoa-Architecture-Hybrid-Apps/&quot;&gt;Hybrid Apps&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/08/19/Cocoa-Architecture-Switchboard-Pattern/&quot;&gt;ARSwitchboard&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2015/08/15/Cocoa-Architecture-Router-Pattern/&quot;&gt;ARRouter&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think the pinnacle of my writing in this phase comes from a collaboration with the entire iOS team the magazine
&lt;a href=&quot;https://www.objc.io/&quot;&gt;obcj.io&lt;/a&gt; - &lt;a href=&quot;https://www.objc.io/issues/22-scale/artsy/&quot;&gt;iOS at Scale: Artsy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As we hired, it became important to find ways to teach each other how our native codebases work. So, we have a set
of open codebase walk-throughs which explain the high level architecture and occasionally deep-dive on specific
features.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Code Review: &lt;a href=&quot;https://artsy.github.io/blog/2015/11/05/Emergence-Code-Review/&quot;&gt;Emergence&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/02/11/Code-Review-Energy/&quot;&gt;Energy&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/02/12/Code-Review-Energy-Sync/&quot;&gt;Energy Sync&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As we started to adopt React Native at Artsy, we really needed a different structure for our entire team and
technology stack. We had to re-think how we build apps, interact with the open community and what we were as
engineers.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2016/08/24/On-Emission/&quot;&gt;On our implementation of React Native&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2017/02/05/Retrospective-Swift-at-Artsy/&quot;&gt;Retrospective: Swift at Artsy&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2017/07/06/React-Native-for-iOS-devs/&quot;&gt;Intro to React
Native for an iOS Developer&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/03/17/two-years-of-react-native/&quot;&gt;React Native, 2 years later&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/04/17/making-a-components-pod/&quot;&gt;Making a React Native Components
Pod&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2019/03/17/three-years-of-react-native/&quot;&gt;React Native at Artsy, 3 years later&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Re-defining ourselves as native engineers who support JavaScript via our iOS silos was tricky, I think both
&lt;a href=&quot;https://ashfurrow.com/blog/learning-from-other-programming-communities/&quot;&gt;Ash&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://www.youtube.com/watch?v=zqnJBksguVI&quot;&gt;Maxim&lt;/a&gt; have great write-ups on the topic. For me, the move to the
JavaScript came at a perfect time: the iOS community was fragmenting because of competing dependency managers and
the introduction of Swift which made infrastructure work less valuable.&lt;/p&gt;

&lt;p&gt;We still needed to be up-to-date with the latest tools and ideas from the native world, but mainly from &quot;iOS as
Platform&quot; instead of features development (though my non-technical &lt;a href=&quot;https://artsy.github.io/blog/2018/03/18/ar/&quot;&gt;ARKit post&lt;/a&gt; is a great read).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2017/07/31/fastlane-travis-weekly-deploys/&quot;&gt;Deploying your app on a weekly basis via fastlane + Travis CI&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2017/04/05/what-is-fastlane-match/&quot;&gt;What is fastlane match?&lt;/a&gt;,
&lt;a href=&quot;https://artsy.github.io/blog/2019/01/05/its-time-to-use-spm/&quot;&gt;It&#39;s time to use Swift Package Manager&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/10/14/Accessing-the-Source-Code-from-your-Simulator/&quot;&gt;Accessing the app&#39;s Source Code from your Simulator&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/05/03/podspec-checksums/&quot;&gt;Why
does my team&#39;s Podfile.lock Podspec checksums change?&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/03/05/iOS-Code-Injection/&quot;&gt;Code Injection for Xcode&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2014/06/20/artsys-first-closed-source-pod/&quot;&gt;Artsy&#39;s
first closed source Pod&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/01/21/cocoapods-keys-and-CI/&quot;&gt;CocoaPods-Keys and CI&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;JavaScript&quot;&gt;&lt;/a&gt;
&lt;h1&gt;JavaScript&lt;/h1&gt;

&lt;p&gt;To get experience in JavaScript, I took one of my large open source projects and &lt;a href=&quot;https://artsy.github.io/blog/2017/06/30/danger-one-oh-again/&quot;&gt;re-create it from
scratch&lt;/a&gt;. Which eventually turned into &lt;a href=&quot;https://artsy.github.io/blog/2017/09/04/Introducing-Peril/&quot;&gt;Peril&lt;/a&gt;, which solves &lt;a href=&quot;https://artsy.github.io/blog/2018/06/18/On-Obsessive-Statelessness/&quot;&gt;some interesting
problems&lt;/a&gt; at Artsy and in the rest of my OSS work.&lt;/p&gt;

&lt;p&gt;For Artsy, we needed to consider: What is the right tech to build for both React Native and React on web? We had a
good guess &lt;a href=&quot;https://artsy.github.io/blog/2017/02/05/Front-end-JavaScript-at-Artsy-2017/&quot;&gt;back in 2016&lt;/a&gt; and that slowly evolved over the course of a few years into what we now call
the &lt;a href=&quot;https://www.youtube.com/watch?v=1Z3loALSVQM&quot;&gt;Artsy Omakase&lt;/a&gt;. Making sure that the rest of the team agreed, and that new people could go see our
reasoning was important when making foundations which could last 5-10 years.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2017/02/05/Front-end-JavaScript-at-Artsy-2017/&quot;&gt;Exploration: Front-end JavaScript at Artsy in 2017&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/08/15/vscode/&quot;&gt;Using VS Code for JavaScript&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/06/19/graphql-for-mobile/&quot;&gt;GraphQL
for iOS Developers&lt;/a&gt;, JavaScriptures (&lt;a href=&quot;https://artsy.github.io/blog/2018/05/01/JavaScriptures-1-React/&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/05/02/JavaScriptures-2-TypeScript/&quot;&gt;TypeScript&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/06/15/JavaScriptures-4.2-Local-State/&quot;&gt;Tooling&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/06/13/JavaScriptures-4.1-Relay/&quot;&gt;Relay&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/06/15/JavaScriptures-4.2-Local-State/&quot;&gt;Local
State&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/05/04/JavaScriptures-3-Styled-Components/&quot;&gt;Styled Components&lt;/a&gt;), &lt;a href=&quot;https://artsy.github.io/blog/2019/04/10/omakase-relay/&quot;&gt;Why does Artsy use Relay?&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;Open.Source&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Open Source&lt;/h1&gt;

&lt;p&gt;Artsy had a rich relationship with Open Source before I arrived, and I devoted a lot of time and effort to making
this world-class. There is an entire blog post on how Artsy became &lt;a href=&quot;https://artsy.github.io/blog/2019/04/29/how-did-artsy-become-oss-by-default/&quot;&gt;Open Source by Default&lt;/a&gt;, but I made sure
to make it easy for people interested in following Artsy&#39;s footsteps. I believe the world will be a lot richer as
more people work in the open.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2016/01/13/OSS-Expectations/&quot;&gt;Open Expectations&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2017/01/04/OSS-FAQ/&quot;&gt;Open Source FAQ for Engineers&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/12/10/License-and-You/&quot;&gt;Licenses for OSS Code&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/08/06/open-sourcing-energy/&quot;&gt;Open
Sourcing Energy&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/04/28/how-we-open-sourced-eigen/&quot;&gt;How we Open Source&#39;d Eigen&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/09/06/Milestone-on-OSS-by-Default/&quot;&gt;Helping the Web Towards OSS by
Default&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/08/21/OSS-by-Default-Docs/&quot;&gt;Open Source by Default: Docs&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;Teaching&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Teaching&lt;/h1&gt;

&lt;p&gt;To quote myself:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Open Source is important to me because I grew up outside of an urban center in Britain where I had very little in
the way of community mentorship. Open Source gave me the ability to see how difficult things were built. I moved
from being a beginner to an intermediate programmer by reading the source code that others had opened up.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://open.nytimes.com/five-questions-with-orta-therox-d5bb9659c50b&quot;&gt;5 Questions with Orta Therox&lt;/a&gt; &lt;em&gt;(open.nytimes.com)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I use Open Source, and Artsy&#39;s leverage, to help make sure that the next generation of programmers feel like they
have so much more insight into how we build hard things. I know it&#39;s not easy getting started, so I&#39;ve tried to
take common questions and wrap them up into larger sets of documentation on how I went through those phases.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2016/01/30/iOS-Junior-Interviews/&quot;&gt;Interviewing, applying and getting your first job in iOS&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/09/10/Help!-I&#39;m-becoming-Post-Junior/&quot;&gt;Help! I&#39;m becoming
Post-Junior&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/11/14/JS-Glossary/&quot;&gt;JavaScript Glossary for 2017&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2017/10/10/C4Q-QandA/&quot;&gt;C4Q&amp;amp;A&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2018/01/10/C4Q-QandA-two/&quot;&gt;C4Q&amp;amp;A 2&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;So..What.Next.&quot;&gt;&lt;/a&gt;
&lt;h1&gt;So, What Next?&lt;/h1&gt;

&lt;p&gt;If you want to keep on top of what I&#39;m up-to, I&#39;m starting &lt;a href=&quot;https://buttondown.email/orta&quot;&gt;a personal mailing list&lt;/a&gt;. You should join, it&#39;ll
be roughly monthly - so pretty low key.&lt;/p&gt;

&lt;p&gt;Well, I built a system for doing guest posts in this blog, so maybe I&#39;ll appear again on this blog now that I can&#39;t
write &quot;we&quot; when talking about Artsy. In the mean time there&#39;s a lot of engineers at Artsy writing really cool
things!&lt;/p&gt;

&lt;p align=&quot;right&quot;&gt;&lt;code&gt;./orta&lt;/code&gt;&lt;/br&gt;&lt;code&gt;x&lt;/code&gt;&lt;/p&gt;



</description>
        <pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/05/03/ortas-best-of/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/05/03/ortas-best-of/</guid>
        
        
        <category>everything</category>
        
      </item>
    
      <item>
        <title>How did Artsy become OSS by Default?</title>
        <description>&lt;p&gt;One of the defining cultural features of the Artsy Engineering team is that we strive to be Open Source by Default.
This didn&#39;t happen over-night and was a multi-year effort from many people to push Artsy&#39;s engineering culture to
the point where it was acceptable and living up to the ideals still requires on-going effort today.&lt;/p&gt;

&lt;p&gt;I think to understand this, we need to dive into the archives of some of member&#39;s older posts to grok their
intentions and ideas. Yes, this is a re-cap episode. Let&#39;s go.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;What.is..Open.Source.by.Default..&quot;&gt;&lt;/a&gt;
&lt;h1&gt;What is &quot;Open Source by Default&quot;?&lt;/h1&gt;

&lt;p&gt;In short, it&#39;s the idea that working in the open should be your starting position for a new project and when
creating a new project you need to argue the value of closing the project instead. This turns into an axiom which
powers quite a lot of the &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#engineering-principles&quot;&gt;Engineering Principles&lt;/a&gt; which Artsy holds dear.&lt;/p&gt;

&lt;p&gt;In 2015, as we were nearing working entirely in the open - our CTO at the time, &lt;a href=&quot;https://code.dblock.org&quot;&gt;dB.&lt;/a&gt; wrote what became our
Open Source by Default north-star:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;When starting a new service, library or application I am going to default to open. I am going to weigh whether
there’s any advantage of keeping a project closed-source, knowing and presuming that there’re numerous
disadvantages.&lt;/p&gt;

&lt;p&gt;Team heads, including myself, are making open-source their foundation. This means building non-core intellectual
property components as open source. That’s easily 2/3 of the code you write and we all want to focus on our core
competencies. Hence open-source is a better way to develop software, it’s like working for a company of the size
of Microsoft, without the centralized bureaucracy and true competition.&lt;/p&gt;

&lt;p&gt;By default, I contribute to other people’s generic open-source solutions to save time and money by not
reinventing the wheel. Taking this further, I spend significant amount of time extracting non-domain-specific
code into new or existing open-source libraries, reducing the footprint of the proprietary applications I work
on.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://code.dblock.org/2015/02/09/becoming-open-source-by-default.html&quot;&gt;Becoming Open Source by Default&lt;/a&gt;&lt;/p&gt;

&lt;a name=&quot;How.Did.We.Get.There.&quot;&gt;&lt;/a&gt;
&lt;h1&gt;How Did We Get There?&lt;/h1&gt;

&lt;p&gt;In 2011 Artsy hired &lt;a href=&quot;https://code.dblock.org&quot;&gt;dB.&lt;/a&gt; to be our Head of Engineering, You can get a sense of his frustration in trying to do
Open Source work in prior companies via a post from 2010 on opensource.com.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Armed with a healthy dose of idealism, I went to executive management and proposed we open source the tool. I was
hoping for a no-brainer and a quick decision at the division level. To my surprise, it took two years, a vast
amount of bureaucracy, and far more effort than I ever anticipated.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://opensource.com/life/10/12/corporate-change-contributing-open-source&quot;&gt;Corporate change: Contributing to open source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In contrast today, in the culture he set up for Artsy Engineering - you actually have a (&lt;a href=&quot;https://github.com/artsy/README/issues/131&quot;&gt;tiny!&lt;/a&gt;) bit more
bureaucracy if you wanted to create a new &lt;em&gt;closed&lt;/em&gt; source project than an open source one.&lt;/p&gt;

&lt;a name=&quot;L2011.-.First.steps&quot;&gt;&lt;/a&gt;
&lt;h2&gt;2011 - First steps&lt;/h2&gt;

&lt;p&gt;Towards the end of 2011, Artsy&#39;s first step into contributing to open source was via a project called &lt;a href=&quot;https://github.com/sarcilav/heroku-bartender&quot;&gt;Heroku
Bartender&lt;/a&gt; (dB. has a &lt;a href=&quot;https://code.dblock.org/2011/03/20/continuous-deployment-with-heroku-bartender.html&quot;&gt;write up on it&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Artsy is lucky because both of our co-founders have a technical background (&lt;a href=&quot;https://www.forbes.com/special-report/2014/30-under-30/art-and-style.html&quot;&gt;computer science at
Princeton&lt;/a&gt;, and &lt;a href=&quot;https://www.technyc.org/leadership-council/sebastian-cwilich&quot;&gt;AT&amp;amp;T Labs&lt;/a&gt;) because our CEO then sent a team email which really hammered the internal
value of writing OSS and letting people know it exists:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;Team, The Engineering team just open sourced an awesome tool called Heroku-Bartender. It was mentioned on Hacker
News with a link to its GitHub repository. It made it into the top posts. I want everyone to check it out and
read through the comments. Open source is a great way for us to establish engineering credibility while
contributing to the community-at-large. -Thank you and congratulations to Engineering.&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;dB. reflects on how different the mentality for open source is different in a modern startup in contrast to
existing large corporations.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;My CEO has made giving back to the community and building karma part of our company culture. Investors look for
this because it attracts those top engineers who will ultimately execute the company’s vision. Open source is no
longer the way of the future—it is the way the new CEOs are wired.&lt;/p&gt;

&lt;p&gt;The companies that don’t embrace these open movements will simply fail, because the culture of secrecy and fear
is a thing of the past.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://opensource.com/business/11/5/thinking-open-source-how-startups-destroy-culture-fear&quot;&gt;Thinking open source: How startups destroy a culture of fear&lt;/a&gt;&lt;/p&gt;

&lt;a name=&quot;L2012.-.Open.Communications&quot;&gt;&lt;/a&gt;
&lt;h2&gt;2012 - Open Communications&lt;/h2&gt;

&lt;p&gt;While Artsy started to ship a lot more libraries in 2012, probably the most important step we took during this
first year was creating this blog, and publishing 33 (&lt;a href=&quot;/blog/archives/&quot;&gt;!&lt;/a&gt;) blog posts by 8 authors (close to the entire
team!).&lt;/p&gt;

&lt;p&gt;This really helped established a baseline that external communications could be a foundation of openness, it might
not yet be code, but blog posts are an awesome start. I know my first blog during this time was specifically built
because I had solved a hard problem which I expected others would have. My answer wasn&#39;t generic enough to warrant
making a library but it was big enough to write a &lt;a href=&quot;/blog/2012/05/11/on-making-it-personal--in-iOS-with-searchbars/&quot;&gt;blog post sharing the code&lt;/a&gt; and providing context.&lt;/p&gt;

&lt;p&gt;We structured write-ups as being an important part of our work, and dB. as Head of Engineering started leading by
example by shipping about 2/3rds of our posts. Writing this many blog posts in our first year of creating a blog is
a pretty solid achievement in my opinion, and the blog has always represented Artsy&#39;s Engineering team in one way
or another:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I consider our blog, and the rest of the site, to be the canonical representation of the Artsy Engineering team
online. We&#39;ve carefully grown an Artsy Engineering aesthetic around it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;/blog/2019/01/30/why-we-run-our-blog/&quot;&gt;Why We Run Our Own Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Getting people into a space where they feel like contributions to this blog are not &lt;em&gt;big deals&lt;/em&gt; but are &lt;em&gt;iterative
improvements&lt;/em&gt; was step one towards OSS by Default.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;A commit says the what, a pull request the how and a blog post gives the why. Writing about our code allows us to
provide documentation for future employees with the context around how decisions were made. Nobody &lt;em&gt;wants&lt;/em&gt; to
ship messy code, but a lot of the time you choose to in order to provide something positive.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;TODO&quot;&gt;OSS Expectations&lt;/a&gt;&lt;/p&gt;

&lt;!--
require &#39;yaml&#39;
a = YAML.load_file(&quot;config.yml&quot;)
a[&quot;oss_projects&quot;].select { |o| o[&quot;created&quot;].include? &quot;2012&quot; }.map { |o| &#39;[&#39; + o[&quot;title&quot;] + &#39;](&#39; + o[&quot;repository&quot;] + &#39;)&#39;  }.join(&quot;, &quot;)
--&gt;


&lt;p&gt;That said, the team wasn&#39;t sitting on our hands in terms of making shared infrastructure, we built libraries within
the Ruby and iOS communities: &lt;a href=&quot;https://github.com/orta/ARAnalytics&quot;&gt;ARAnalytics&lt;/a&gt;,
&lt;a href=&quot;https://github.com/aaw/resque-heroku-scaling-canary&quot;&gt;resque-heroku-scaling-canary&lt;/a&gt;,
&lt;a href=&quot;https://github.com/dblock/heroku-forward&quot;&gt;heroku-forward&lt;/a&gt;, &lt;a href=&quot;http://github.com/artsy/garner&quot;&gt;Garner&lt;/a&gt;,
&lt;a href=&quot;https://github.com/joeyAghion/spidey&quot;&gt;spidey&lt;/a&gt;, &lt;a href=&quot;https://github.com/dblock/guard-rack&quot;&gt;guard-rack&lt;/a&gt;,
&lt;a href=&quot;https://github.com/dblock/rspec-rerun&quot;&gt;rspec-rerun&lt;/a&gt;,
&lt;a href=&quot;https://github.com/aaw/hyperloglog-redis&quot;&gt;hyperloglog-redis&lt;/a&gt;,
&lt;a href=&quot;https://github.com/aaw/cartesian-product&quot;&gt;cartesian-product&lt;/a&gt;,
&lt;a href=&quot;https://github.com/aaw/space-saver-redis&quot;&gt;space-saver-redis&lt;/a&gt; &amp;amp;
&lt;a href=&quot;https://github.com/dblock/mongoid-cached-json&quot;&gt;mongoid-cached-json&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some of which we still use today.&lt;/p&gt;

&lt;a name=&quot;L2013.-.Tools..amp..Libraries&quot;&gt;&lt;/a&gt;
&lt;h2&gt;2013 - Tools &amp;amp; Libraries&lt;/h2&gt;

&lt;p&gt;In 2013 Artsy took its first steps towards separating our front-ends from our back-ends. From a perspective of OSS
by Default this lowers the barriers a lot. We have been conservative with opening the source code for back-end
services, as they tended to contain more valuable business infrastructure.&lt;/p&gt;

&lt;p&gt;As the web team explored building websites in Node, we took opportunities to use marketing websites like
&lt;a href=&quot;https://iphone.artsy.net&quot;&gt;iphone.artsy.net&lt;/a&gt; (&lt;a href=&quot;https://github.com/artsy/flare&quot;&gt;flare&lt;/a&gt;) and &lt;a href=&quot;https://2013.artsy.net&quot;&gt;2013.artsy.net&lt;/a&gt;
(&lt;a href=&quot;https://github.com/artsy/artsy-2013&quot;&gt;artsy-2013&lt;/a&gt;) to explore building a website in the open. These projects were
small, self contained and well scoped. I wasn&#39;t involved in the decision to make them open, but I&#39;m pretty sure it
went something like &lt;em&gt;&quot;Should this be private? Nah. Ok.&quot;&lt;/em&gt; A single page web-app wasn&#39;t a risk.&lt;/p&gt;

&lt;p&gt;The team also started exploring working on some more fundamental OSS infrastructure, we built out a framework for
building Node apps called &lt;a href=&quot;/blog/2013/11/30/rendering-on-the-server-and-client-in-node-dot-js/&quot;&gt;Ezel&lt;/a&gt; (which we still use today &lt;a href=&quot;/blog/2017/09/05/Modernizing-Force/&quot;&gt;in Force&lt;/a&gt;) and started work to
co-maintain CocoaPods and CocoaDocs.&lt;/p&gt;

&lt;a name=&quot;L2014.-.New.Apps&quot;&gt;&lt;/a&gt;
&lt;h2&gt;2014 - New Apps&lt;/h2&gt;

&lt;a name=&quot;artsy.net&quot;&gt;&lt;/a&gt;
&lt;h3&gt;artsy.net&lt;/h3&gt;

&lt;p&gt;In 2014 we &lt;a href=&quot;/blog/2014/09/05/we-open-sourced-our-isomorphic-javascript-website/&quot;&gt;open-sourced the Artsy website&lt;/a&gt;. This was a major step forward in OSS by Default, we played
it safe by having the open source aspect as being a public fork that engineers would push changes to. This meant
that GitHub issues and Pull Request discussion could happen in private. It was a good, safe, incremental step. We
took an application which was very dear to us, and found a way to reduce the risk in moving to be open.&lt;/p&gt;

&lt;p&gt;We could move our main website to be open source because we had successfully shipped prior art. The problems were
more or less the same, just at a larger scale. We had to worry about leaking secrets in code and commits, but those
best practices we had baked into the website from its inception 10 months prior.&lt;/p&gt;

&lt;a name=&quot;Editorial.CMS..amp..Bidding.Kiosk&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Editorial CMS &amp;amp; Bidding Kiosk&lt;/h3&gt;

&lt;p&gt;We scoped out building a &lt;a href=&quot;https://github.com/artsy/positron&quot;&gt;new CMS&lt;/a&gt; for our editorial team, this new app started as open source from day one.&lt;/p&gt;

&lt;p&gt;This step inspired the iOS team who were also exploring trying to move to be more open in their work. By this point
we had two large private iOS apps, but had the need for a new iOS app for covering bidding at auctions on-site.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Orta and I met some friends over a weekend in Austria and, during our drive across the country, discussed the
possibility of developing this new iOS app as a completely open source project. We were both excited about the
prospect and had the support from dB. to make it open.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&quot;&gt;Developing a Bidding Kiosk for iOS in Swift&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We built out some necessary community infrastructure for iOS apps to be built in the open, and worked exclusively
in the open on this project. Working in the open on the bidding kiosk proved to be very useful when communicating
with others about hard problems we were seeing with new tooling, as well as providing reference implementations for
community ideas.&lt;/p&gt;

&lt;a name=&quot;L2015.-.Backtracking.to.move.iOS.to.OSS.by.Default&quot;&gt;&lt;/a&gt;
&lt;h2&gt;2015 - Backtracking to move iOS to OSS by Default&lt;/h2&gt;

&lt;p&gt;We were really starting to see what OSS by Default looks like by 2015. You can feel it in dB&#39;s and the mobile
team&#39;s writing:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;First, I recognize that becoming open-source by default is emotionally, organizationally and, sometimes,
technically hard. As such, this post is not a manifesto, it’s a step in the right direction that will guide my
career and technology choices in the future.&lt;/p&gt;

&lt;p&gt;When starting a new service, library or application I am going to default to open. I am going to weigh whether
there’s any advantage of keeping a project closed-source, knowing and presuming that there’re numerous
disadvantage&lt;/p&gt;

&lt;p&gt;I am going to default to the MIT License for all new projects, because it’s short and clear and protects everyone
[...]&lt;/p&gt;

&lt;p&gt;Despite overwhelming evidence, many non-technical people are worried about risks surrounding open-source. I am
convinced that any business success depends a lot more on your ability to serve customers and partners, the brand
and culture and the commitment to hiring the best of the best in all fields, than on the hypothetical risks that
a competitor might gain by taking advantage of your open-source software.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://code.dblock.org/2015/02/09/becoming-open-source-by-default.html&quot;&gt;Becoming Open Source by Default&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The Artsy mobile team is small, especially in contrast to the other teams in this issue of objc.io. Despite this,
we’re notable for our impact on the community. Members of our iOS development team are — and have been — involved
in almost all major open-source projects in the Cocoa community.&lt;/p&gt;

&lt;p&gt;At the start of 2015, we finished open sourcing the Artsy iOS app, eigen. This is a process that took many
months; we needed to take considered, incremental steps both to prove that there was business value in open
sourcing our consumer-facing app, and to disprove any concerns around letting others see how the sausage is made.&lt;/p&gt;

&lt;p&gt;Earlier, we said that being open source by default means that everything stays open unless there is a good reason
to keep it secret. The code we do share isn’t what makes Artsy unique or valuable. There is code at Artsy that
will necessarily stay closed forever.&lt;/p&gt;

&lt;p&gt;Working in the open isn’t so different from typical software development. We open issues, submit pull requests,
and communicate over GitHub. When we see an opportunity to create a new library, the developer responsible for
that library creates it under his or her own GitHub account, not Artsy’s.&lt;/p&gt;

&lt;p&gt;People often ask why we operate in the open as we do. We’ve already discussed our technical motivations, as well
as the sense of purpose it gives individual team members, but honestly, working in the open is just smart
business.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://www.objc.io/issues/22-scale/artsy/&quot;&gt;iOS at Scale: Artsy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2015 was the year where the mobile team went back and open-sourced our previous iOS apps. We had two of them, we
started with the app the team worked on daily: Artsy for iOS (Eigen). We opened the repo in january, and had a
write-up on the process and changes needed to make it work a few months later once the dust has settled.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Credit where credit is due, when we were working on Eidolon [the Bidding Kiosk], our CTO dB. just casually tossed
the idea that, really, Eigen should be open source too.&lt;/p&gt;

&lt;p&gt;We devoted time at the end of 2014 to understand what the constraints were for getting the app opened. [...] We
opted to go for a total repo switch, removing all history. There were a lot of places where keys could have been
hiding within the app.&lt;/p&gt;

&lt;p&gt;One of the things that we found a bit sad about the transition to a new repo, is that it&#39;s hard to give past
contributors recognition for their work.&lt;/p&gt;

&lt;p&gt;It&#39;s one thing to think that it&#39;s possible, it&#39;s another to do it. I&#39;m glad that I am in a position where I can
enact change. I felt no resistance in the process. I kept offering potential avenues for someone to stop me, too.
I emailed the entire team as I started the process 2 weeks before it happened, I talked to anyone who might write
issues or contribute from the design team. As I got further along the process and sent another email out that it
was going to happen tomorrow. All I got were 👍 and 🎉s in GIF form.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://artsy.github.io/blog/2015/04/28/how-we-open-sourced-eigen/&quot;&gt;How we Open Source&#39;d Eigen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Going through the process, and being certain in the trade-offs meant for the project gave the mobile team the
confidence to take the time to open source their oldest iOS project - a gallery portfolio tool, Folio.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It&#39;s worth mentioning that we don&#39;t just talk externally about open source. Internally, the Mobile team runs
talks about open source for the rest of the Artsy staff. As well, we discuss the tooling and business
implications of having our work in public repos. Artsy strives for an open culture, in this case the development
team, on the whole, is just further along in the process.&lt;/p&gt;

&lt;p&gt;The open Source app idea started with an experiment in the Summer of 2014, asking, &quot;What does a truly open source
App look like?&quot; The outcome of that was our Swift Kiosk app, Eidolon. Open from day one. We took the knowledge
from that and applied it to our public facing app, Eigen. Open from day 806. That made 2/3rds of our apps Open
Source. I&#39;m going to talk about our final app, Energy. Open from day 1433 and ~3500 commits.&lt;/p&gt;

&lt;p&gt;Folio is interesting in that it has competitors. To some extent the Kiosk app does too, but the cost of entry
there is really high in comparison. Folio on the other hand, has a handful of competing businesses who exist to
only build a Gallery/Museum/Collector portfolio app.&lt;/p&gt;

&lt;p&gt;Energy, however, requires you have a Artsy partner account. So opening it up would mean that an OSS developer
hits the login screen and is stuck. In developing this app, I&#39;ve slowly been creating my own partner gallery
account based on my paintings and photography. So now when you set up the app to be ran as an OSS app, it will
pre-load a known database of artworks and metadata from my test gallery.&lt;/p&gt;

&lt;p&gt;Its easy to imagine that open sourcing something is an end-point, but from our perspective it is a journey. We
want to make sure that anyone can download this app, learn how and why it&#39;s structured and then run through the
app with a debugger to get a deeper sense of how everything connects. Just releasing the code would have been
underwhelming. Instead we&#39;re aiming high.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://artsy.github.io/blog/2015/08/06/open-sourcing-energy/&quot;&gt;Open Sourcing Energy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one is a good read, but extra worth the click because it includes an email I wrote to the entire of Artsy with
the intent of priming the company about opening the source code.&lt;/p&gt;

&lt;p&gt;dB. and myself spent quite a lot of time talking to the rest of the company about the OSS ideals, our company&#39;s
values and open source fit. Here&#39;s &lt;a href=&quot;https://vimeo.com/136554627&quot;&gt;a 5m video&lt;/a&gt; which is a great example of how we presented open source
internally:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;Are there any advantages in keeping something closed? If there are no advantages, default to open.&quot;&lt;/p&gt;

&lt;p&gt;&quot;Instead of asking for permission, just communicate what you are doing and let other people suggest better ways
of doing it. Maybe sometimes a better way is closed.&quot;&lt;/p&gt;

&lt;p&gt;&quot;Artsy will stand behind your open source contributions as a team.&quot;&lt;/p&gt;

&lt;p&gt;&quot;Open Source will create more value, and it will positively impact our culture.&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;L2016.-.Web.OSS.by.Default&quot;&gt;&lt;/a&gt;
&lt;h2&gt;2016 - Web OSS by Default&lt;/h2&gt;

&lt;p&gt;In 2016 we had really started to understand the differences in how we interact with the open source community:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;...and in over a year these expectations have been met. Some of our libraries have become big, and our apps have
received small feature PRs. We&#39;re pleasantly surprised when it happens, but we don&#39;t expect it.&lt;/p&gt;

&lt;p&gt;I didn&#39;t expect to be told face to face how many people have read, and learned from our codebases. We get around
120 unique clones of our iOS apps every week. People tell us that it&#39;s where they found a certain technique, or
that they could see how the trade-offs were made for certain decisions.&lt;/p&gt;

&lt;p&gt;I also under-estimated how useful open code is in encouraging a culture of writing.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://artsy.github.io/blog/2016/01/13/OSS-Expectations/&quot;&gt;Open Source Expectations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we had proved that we could safely port our large, private iOS codebases to be public. That we could safely
work in the open on mobile project, we &lt;a href=&quot;https://artsy.github.io/blog/2016/09/06/Milestone-on-OSS-by-Default/&quot;&gt;brought that back to web&lt;/a&gt;. We went back to take artsy.net from
being an open fork to working in the open:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Though Force wasn&#39;t quite Open Source by Default, it represented a really important step for Artsy&#39;s OSS
perspective but was not the end goal. We were opening our source, but not opening our process.&lt;/p&gt;

&lt;p&gt;... the web team started the process of opening our apps at Artsy, then the mobile team took the next big step.
Now the teams are both in lock-step, and if you work on the front-end at Artsy - OSS by Default is the way we all
work now.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://artsy.github.io/blog/2016/09/06/Milestone-on-OSS-by-Default/&quot;&gt;Helping the Web Towards OSS by Default&lt;/a&gt;&lt;/p&gt;

&lt;a name=&quot;L2017-2019.Moving.the.Platform.forward&quot;&gt;&lt;/a&gt;
&lt;h2&gt;2017-2019 Moving the Platform forward&lt;/h2&gt;

&lt;p&gt;As a gross simplification, Artsy is split between back-end and front-end engineers. With most all of the
front-end as open (well, maybe 90%, which is &lt;em&gt;good enough&lt;/em&gt;™️) then the only space for improvement towards Open
Source by Default was within the back-end. We call the collection of engineers with the skill-sets for building
APIs and shared infrastructure the Platform team.&lt;/p&gt;

&lt;p&gt;Our platform teams have always had a weaker stance towards opening their codebases. Most of our APIs are almost
100% business logic, and there&#39;s a good reason for a lot of our APIs to be closed source. Though in the the last
two years though there&#39;s been movement towards writing new services in the open:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2017&lt;/strong&gt; - &lt;a href=&quot;https://github.com/artsy/bearden&quot;&gt;artsy/bearden&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/artsy/rsvp&quot;&gt;artsy/rsvp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2018&lt;/strong&gt; - &lt;a href=&quot;https://github.com/artsy/APR&quot;&gt;artsy/APR&lt;/a&gt;, &lt;a href=&quot;https://github.com/artsy/exchange/&quot;&gt;artsy/exchange&lt;/a&gt; &amp;amp;
&lt;a href=&quot;https://github.com/artsy/kaws/&quot;&gt;artsy/kaws&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2019&lt;/strong&gt; - &lt;a href=&quot;https://github.com/artsy/volley&quot;&gt;artsy/volley&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which over the course of the last two years seems to be about half of the new systems we&#39;ve built. This is great!
Examples of private tools are analytics parsers, GDPR infrastructure and machine learning services. These had good
reasons to be closed and &lt;a href=&quot;https://github.com/artsy/README/issues/131&quot;&gt;have documented rationales for being closed&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;L2019.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;2019+&lt;/h2&gt;

&lt;p&gt;However, asking where do we go from here is a pretty tricky question. Most of the code that would be opened is now
open, and the projects which could move into the public be are very reasonably contentious.&lt;/p&gt;

&lt;a name=&quot;Does.that.mean.we..strong.are..strong..Open.Source.by.Default.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Does that mean we &lt;strong&gt;are&lt;/strong&gt; Open Source by Default?&lt;/h2&gt;

&lt;p&gt;For people that joined post-2016, it certainly feels like it. People who apply to Artsy cite Open Source by Default
as being a strong factor in their decisions.&lt;/p&gt;

&lt;p&gt;I&#39;m not too sure personally though, maybe only in the axiomatic sense. Artsy operate by the rule of open by
default, but it takes time and effort to do the extra work which is derived from that idea: e.g. improving our
community engagement.&lt;/p&gt;

&lt;p&gt;That&#39;s Artsy&#39;s biggest space for cultural growth now.&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/04/29/how-did-artsy-become-oss-by-default/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/04/29/how-did-artsy-become-oss-by-default/</guid>
        
        
        <category>community</category>
        
        <category>culture</category>
        
        <category>oss</category>
        
      </item>
    
      <item>
        <title>What I Learned Having a Coffee with Every Engineer</title>
        <description>&lt;p&gt;In early 2018, I was set to begin my fifth year working at Artsy. Something about my imminent Artsyversary had me
thinking about my role within the Engineering team. Not my role as an engineer &lt;em&gt;per se&lt;/em&gt;, but my role as a
&lt;em&gt;colleague&lt;/em&gt;. This is the longest I&#39;ve ever worked for one company, and as Artsy started growing the team last year,
I wanted to &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#leverage-your-impact&quot;&gt;leverage my impact&lt;/a&gt; as a longtime colleague to help scale its culture.&lt;/p&gt;

&lt;p&gt;Artsy collects quarterly, anonymous, company-wide surveys through &lt;a href=&quot;https://www.cultureamp.com&quot;&gt;Culture Amp&lt;/a&gt; to determine how everyone is
doing. These are great for answering quantitative questions about the team, like &quot;how engaged are we on average?&quot;,
and I always check out the breakdown of answers in the Engineering team. But there&#39;s something unsatisfying about
these reports – they&#39;re super-valuable, but they feel impersonal to me.&lt;/p&gt;

&lt;p&gt;If I wanted to leverage my impact, I needed to play to my strengths and interests. I&#39;m keenly interested in people
– as individuals – so I decided that the best way for me to contribute to the team was to get to know everyone as
individuals. To become someone the team could talk to. Someone outside the typical manager/employee structure, who
could use their history at Artsy to answer questions (or at least point them in the right direction).&lt;/p&gt;

&lt;p&gt;So, I set off on a project to meet with every member of Artsy&#39;s Engineering team for a one-on-one. With no explicit
goals or expectations, but in line with Artsy&#39;s &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#people-are-paramount&quot;&gt;People are Paramount&lt;/a&gt; value, I got to know my colleagues
better.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;I didn&#39;t want this project to interfere with my product work, so I decided to take things slow. I started with a
list of every Artsy engineer and then removed anyone I already had a close working relationship with. Next, I
prioritized the team leads and randomized the rest of the list. I set up a recurring task (yay OmniFocus) to
schedule a coffee with an engineer every week. When we met, I&#39;d cross them off my list.&lt;/p&gt;

&lt;p&gt;That was over a year ago, so what did I learn? Well, a lot, actually! But to get a sense of the impact my project
had, you&#39;ll need some context.&lt;/p&gt;

&lt;p&gt;2018 was a complex year for Artsy, where we both gained and lost more engineers than usual. The increase in
engineering turnover was generally attributable to what I&#39;ll call &quot;cultural churn.&quot; Scaling a team comes with new
challenges, and our team leadership tried to meet those challenges with changes to the team&#39;s structure. Some of
these changes turned out to be tougher than we&#39;d hoped. Our team is in a great spot &lt;em&gt;now&lt;/em&gt;, but we didn&#39;t get from
there to here via a straight line.&lt;/p&gt;

&lt;p&gt;In the midst of this cultural churn, I was trying to have a one-on-one with every engineer. I was asking
people &quot;hey, how are you doing? Want to grab a coffee?&quot; And that actually had a pretty big impact: if I met someone
and they told me &quot;this situation is stressing me out&quot; or &quot;this feels bad&quot;, it was really validating for them to
hear me respond &quot;yeah, I&#39;m feeling this too. It&#39;s not just you.&quot; This dovetailed with my contemporaneous research
into &lt;a href=&quot;https://ashfurrow.com/blog/building-better-software-by-building-better-teams/&quot;&gt;building compassionate teams&lt;/a&gt;, which I leveraged throughout this project.&lt;/p&gt;

&lt;p&gt;Turns out: people feel better when they know the problems they have are shared by others. &lt;em&gt;Sharing&lt;/em&gt; suffering is
actually one way to &lt;em&gt;minimize&lt;/em&gt; suffering, and minimizing suffering is at the core of my beliefs on compassionate
teams.&lt;/p&gt;

&lt;p&gt;Once I knew something was wrong with our team culture, I went to my manager to discuss the broad-strokes themes of
what I was hearing from my peers. I would never betray the confidence of a colleague, but being able to say &quot;lots
of people are all feeling X&quot; provided an important data point. While leadership already knew that &lt;em&gt;something&lt;/em&gt; was
not quite right, this data point was a strong indicator that leadership had to intervene quickly. I&#39;ll skip the
details of how we ultimately addressed our cultural churn (tl;dr it involved our leaders asking IC&#39;s questions, and
then listening to what they had say). I&#39;m quite happy to say that things are a lot better now!&lt;/p&gt;

&lt;p&gt;While my &quot;have a one-on-one with everyone&quot; project obviously didn&#39;t &quot;fix&quot; the situation, it put me in a position to
&lt;em&gt;help&lt;/em&gt; fix it. In addition to getting to know everyone as individuals, I got to help identify and help address our
cultural churn.&lt;/p&gt;

&lt;p&gt;So what next? Well, a lot, actually! Even more engineers have since joined Artsy, and I admittedly haven&#39;t had a
one-on-one with all of them. But through this project, I realized that I&#39;m very keen to do more of this kind of
people-work. When my manager recently brought up the possibility of becoming a tech lead, &lt;a href=&quot;https://ashfurrow.com/blog/reflecting-on-5-years-at-artsy/&quot;&gt;I jumped on the
opportunity&lt;/a&gt;. I started last week.&lt;/p&gt;

&lt;p&gt;My initial goal, to have a coffee with everyone, remains unfulfilled. It probably won&#39;t ever be, considering that I
now have even less free time in my new role. I&#39;m not an IC anymore – my one-on-ones have to now be focused on &lt;em&gt;my&lt;/em&gt;
team. While the goal of meeting everyone for a one-on-one will never be accomplished, the journey turned out to be
more important.&lt;/p&gt;

&lt;p&gt;Important both to me – getting to know my colleagues (and myself!) better – but also important for the team. I got
to help our team&#39;s culture scale up, and through that experience, I found and expanded the perimeter of my sphere
of influence as an IC.&lt;/p&gt;

&lt;p&gt;I can&#39;t thank Artsy enough for giving me the freedom, as an IC, to research team dynamics, to pursue this project,
and for taking all my feedback seriously. If you&#39;re a senior engineer wondering what&#39;s next, try turning your
attention to your team. I would bet that you&#39;ll learning something worthwhile.&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/04/19/having-a-coffee-with-every-engineer/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/04/19/having-a-coffee-with-every-engineer/</guid>
        
        
        <category>culture</category>
        
        <category>people</category>
        
        <category>process</category>
        
      </item>
    
      <item>
        <title>Why we added an RFC process to Artsy</title>
        <description>&lt;p&gt;Growth is tricky. Whether in terms of raw headcount or people&#39;s evolving career stages. As a team you want to
provide ways in which members can experiment with new ideas, and provide tools to help them offer new perspectives.
One of our greatest tools for instituting change at Artsy is our RFC process.&lt;/p&gt;

&lt;p&gt;An RFC is a Request For Comments, and it is a structured document (in the form of GitHub issue normally) which
offers a change to something. The format is used in large open source projects like: React
(&lt;a href=&quot;https://github.com/reactjs/rfcs/blob/master/README.md&quot;&gt;Overview&lt;/a&gt;,
&lt;a href=&quot;https://github.com/reactjs/rfcs/blob/master/0000-template.md&quot;&gt;Template&lt;/a&gt;), Swift
(&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/process.md#how-to-propose-a-change&quot;&gt;Overview&lt;/a&gt;,
&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/0000-template.md&quot;&gt;Template&lt;/a&gt;) and Rust
(&lt;a href=&quot;https://github.com/rust-lang/rfcs#rust-rfcs&quot;&gt;Overview&lt;/a&gt;,
&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/0000-template.md&quot;&gt;Template&lt;/a&gt;). To give core &amp;amp; non-core contributors a
chance to propose an idea to everyone before implementing a change.&lt;/p&gt;

&lt;p&gt;We &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#own-your-dependencies&quot;&gt;took&lt;/a&gt; this idea and applied to the process of making any cultural change in the company. Read on to find out
why we needed it, how we refined it, some of the tooling we built around it, and what other options are available.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Why.did.we.create.an.RFC.process.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Why did we create an RFC process?&lt;/h2&gt;

&lt;p&gt;We created the RFC process in parallel with &lt;a href=&quot;https://github.com/danger/peril&quot;&gt;Peril&lt;/a&gt; being &lt;a href=&quot;/blog/2017/09/04/Introducing-Peril/&quot;&gt;introduced at Artsy&lt;/a&gt;. Prior to
Peril, most changes to culture were localised in different teams. However, once Peril gave us the ability to create
cultural rules across all engineering repos in GitHub we also needed a way to let people know and provide feedback
about these changes.&lt;/p&gt;

&lt;p&gt;We started with the &lt;a href=&quot;https://github.com/artsy/peril-settings/pull/4&quot;&gt;smallest possible implementation&lt;/a&gt; of an RFC and a &lt;a href=&quot;https://artsy.slack.com/archives/C02BC3HEJ/p1503690782000372&quot;&gt;notification service&lt;/a&gt;🔒. You
would write an issue with this template:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;&#39;&gt;&lt;span class=&#39;line&#39;&gt;Title: &quot;RFC: Add an emoji for when a node package is version bumped&quot;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;Proposal: If the repo has a `package.json`, we should look to see if its version has
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          changed and then submit a tada emoji.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;Reasoning: A release is important, we should cherish them.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;Exceptions: None&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This RFC came with a Peril rule that would post a notification into slack about an RFC being created:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intro-rfcs/first-rfc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Which meant everyone had the chance to know in-advance that a change was being discussed because it crossed team
communication boundaries. Here&#39;s &lt;a href=&quot;https://github.com/artsy/artsy-danger/issues/5&quot;&gt;the first RFC&lt;/a&gt; used at Artsy.&lt;/p&gt;

&lt;p&gt;This was specifically built to be the minimum possible to get an idea of what we actually wanted from an RFC
process for cultural changes.&lt;/p&gt;

&lt;a name=&quot;How.did.it.evolve.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;How did it evolve?&lt;/h2&gt;

&lt;p&gt;Version 2 of our RFC process is what we&#39;ve stuck with for the last 2 years. The second version expanded the scope
from just making Peril changes to being comprehensive enough to cover most cultural changes we wanted.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;&#39;&gt;&lt;span class=&#39;line&#39;&gt;Title: &quot;RFC: Add a Markdown Spell Checker to all Markdown docs in PR&quot;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;## Proposal:
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;Apply a spell checker to every markdown document that appears in a PR.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;## Reasoning
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;We want to have polished documents, both internally and externally. Having a spellcheck
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;happening without any effort on a developers part means that we&#39;ll get a second look at
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;any documentation improvements on any repo.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;## Exceptions:
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;This won&#39;t be perfect, but it is better to get something working than to not have it at all.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;I added the ability to ignore files: so CHANGELOGs which tend to be really jargon heavy will
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;be avoided in every repo.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;Other than that, we can continue to build up a global list of words to ignore.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;## Additional Context:
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;You can see our discussion [in slack here](/link/to/slack.com)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This version also came with a recommendation on how to resolve the RFC, after a week you would add a comment and
close the issue:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;&#39;&gt;&lt;span class=&#39;line&#39;&gt;## Resolution
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;We decided to do it.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;## Level of Support
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;3: Majority acceptance, with conflicting feedback.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;#### Additional Context:
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;Some people were in favor of it, but some people said they didn&#39;t want to do it for project X.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;## Next Steps
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;We will implement it.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;#### Exceptions
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;We will not implement it on project X. We will revisit the decision in 1 year.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;We&#39;ve evolved the closing an RFC process since then:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To &lt;a href=&quot;https://github.com/artsy/README/issues/162&quot;&gt;be more specific on how/when to close an RFC&lt;/a&gt;. Which introduces a stalled state. Turns out some
discussions take longer to resolve than a week&lt;/li&gt;
&lt;li&gt;Peril would post &lt;a href=&quot;https://github.com/artsy/peril-settings/pull/46&quot;&gt;multiple notifications&lt;/a&gt; over the course of a week to make sure people don&#39;t miss the
chance to contribute&lt;/li&gt;
&lt;li&gt;We added a weekly summary of open RFCs into Slack for our &lt;a href=&quot;https://github.com/artsy/README/blob/master/events/open-standup.md#during-standup&quot;&gt;team standup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img src=&quot;/images/intro-rfcs/summary.png&quot; alt=&quot;/images/intro-rfcs/summary.png&quot; /&gt;&lt;/p&gt;

&lt;a name=&quot;What.are.the.alternatives.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What are the alternatives?&lt;/h2&gt;

&lt;p&gt;This RFC process is not without it&#39;s trade-offs.&lt;/p&gt;

&lt;p&gt;An RFC is built with an action in mind, and it explicitly defaults towards this. This process purposely bakes in
silence as positive indifference from observers. When being used as a consensus device, an RFC process really isn&#39;t
that great. It&#39;s an asynchronous, flat conversation, which makes it hard to discuss all avenues with many
simultaneous voices and can sometimes feel like whoever posts the most often kinda wins.&lt;/p&gt;

&lt;p&gt;For consensus tools you really are better off with a meeting. There are all sorts of structured meetings which do a
great job of finding agreement across many opinions.&lt;/p&gt;

&lt;p&gt;For example, we wanted to try and get consensus on how to build APIs at Artsy. The RFC for that would probably have
been something like &quot;Move to use GraphQL in all new APIs&quot;, which is a nuanced technical mandate that would require
buy in from many people. While it does have an direct action, trying to feel like everyone agrees and will work
this way in the future would have probably not worked out in a single-threaded long-form issue. Instead, we opted
to use a &lt;a href=&quot;https://en.wikipedia.org/wiki/Town_hall_meeting&quot;&gt;town-hall style&lt;/a&gt; meeting, where people who had strong opinions would have time to present them - then
at the end all developers would have the chance for feedback.&lt;/p&gt;

&lt;a name=&quot;Where.does.it.work.best.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Where does it work best?&lt;/h2&gt;

&lt;p&gt;This RFC process is good for &quot;I would like to improve this, does that make sense?&quot; - and it&#39;s a really great case
of &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#minimal-viable-process&quot;&gt;Minimum Viable Process&lt;/a&gt; where one issue can spark a great team discussion. Here&#39;s some of my favourite
ones from Artsy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/171&quot;&gt;Provide explicit recommendations when PDDE should take time off &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/131&quot;&gt;Document the rationale for why Artsy&#39;s various closed source repositories aren&#39;t open&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/86&quot;&gt;Relaunch the Platform practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/76&quot;&gt;New Hire Buddies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/31&quot;&gt;All GraphQL API servers have a root &lt;code&gt;_schema.graphql&lt;/code&gt; file &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/117&quot;&gt;New dependencies to Emission/Reaction go through the RFC process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/108&quot;&gt;Creating a public facing status page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/130&quot;&gt;Updates to On-Call Process: Jira Ops + Status Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/10&quot;&gt;Rename the Artsy Omakase to [Something]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We sometimes have RFCs which we don&#39;t want to discuss in public, for those we use our private version of README
called potential. That said, our notification system works on any repo, so if it makes sense to have an RFC on a
repo specifically, that&#39;s no problem too.&lt;/p&gt;

&lt;p&gt;You can see all of our &lt;a href=&quot;https://github.com/search?q=org%3Aartsy+is%3Aissue+label%3ARFC+is%3Aopen&quot;&gt;current open RFCs on the Artsy org here&lt;/a&gt;, and I&#39;ve opened comments for folks
to talk below about whether they&#39;ve enacted something similar - would love to see how this can be improved.&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/04/11/on-an-rfcs-process/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/04/11/on-an-rfcs-process/</guid>
        
        
        <category>culture</category>
        
        <category>mvp</category>
        
        <category>process</category>
        
      </item>
    
      <item>
        <title>Why does Artsy use Relay?</title>
        <description>&lt;p&gt;When the mobile team at Artsy considered &lt;a href=&quot;/blog/2016/08/15/React-Native-at-Artsy/&quot;&gt;moving to React Native&lt;/a&gt; back in 2016, one of the most compelling
cases for making that jump was Relay. This, it seems, is a dependency that is rarely used in the JS community and
we often find ourselves re-explaining this decision to new engineers during onboarding, and to the public at large.&lt;/p&gt;

&lt;p&gt;Which makes this a perfect blog post topic, so let&#39;s have a deep dive into what makes Relay compelling for Artsy&#39;s
engineering team.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;What.problem.does.Relay.solve.&quot;&gt;&lt;/a&gt;
&lt;h1&gt;What problem does Relay solve?&lt;/h1&gt;

&lt;p&gt;Relay is an API client for GraphQL, it comes in two parts: a compiler and a set of front-end components. Relay aims
to provide a really tight binding between your GraphQL API and your view hierarchy. When you build data-driven
apps, Relay removes a whole suite of non-business logic from your application.&lt;/p&gt;

&lt;p&gt;Relay handles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data binding (API → props)&lt;/li&gt;
&lt;li&gt;Cache management (invalidation, re-render live components with data updates, etc)&lt;/li&gt;
&lt;li&gt;Consistent abstractions for bi-directional pagination&lt;/li&gt;
&lt;li&gt;Multiple query consolidation (e.g. consolidate all API requests to one request)&lt;/li&gt;
&lt;li&gt;UI best practices baked in (e.g. optimistic response rendering)&lt;/li&gt;
&lt;li&gt;Declarative data mutation (describe how data should change, instead of doing it)&lt;/li&gt;
&lt;li&gt;Compile-time query generation (removing runtime overhead and allowing you to persist queries)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;By taking the responsibilities of the grunt work for most complex apps and moving it into Relay you get
Facebook-scale best-practices and can build on top of that.&lt;/p&gt;

&lt;a name=&quot;How.does.it.work.&quot;&gt;&lt;/a&gt;
&lt;h1&gt;How does it work?&lt;/h1&gt;

&lt;p&gt;You write a set of Relay components, you always start with a &lt;a href=&quot;https://facebook.github.io/relay/docs/en/query-renderer.html&quot;&gt;&lt;code&gt;QueryRenderer&lt;/code&gt;&lt;/a&gt; and a tree of either
&lt;a href=&quot;https://facebook.github.io/relay/docs/en/fragment-container.html&quot;&gt;&lt;code&gt;FragmentContainer&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://facebook.github.io/relay/docs/en/refetch-container.html&quot;&gt;&lt;code&gt;RefetchContainer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://facebook.github.io/relay/docs/en/pagination-container.html&quot;&gt;&lt;code&gt;PaginationContainer&lt;/code&gt;&lt;/a&gt;s. You mostly use
&lt;code&gt;FragmentContainer&lt;/code&gt;s, so I&#39;ll focus on that here.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;FragmentContainer&lt;/code&gt; is based on a &lt;a href=&quot;https://graphql.org/learn/queries/#fragments&quot;&gt;GraphQL fragment&lt;/a&gt;. If you&#39;ve never used a fragment, they are an
abstraction that lets you declare shared field-selections on a specific GraphQL type to reduce duplication in your
queries. For example:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;&#39;&gt;&lt;span class=&#39;line&#39;&gt;query GetPopularArtistAndFeaturedArtist {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  featuredArtist {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    id
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    name
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    bio
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  }
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  popularArtist {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    id
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    name
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    bio
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  }
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;To move this query to use fragments:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;&#39;&gt;&lt;span class=&#39;line&#39;&gt;query GetPopularArtistAndFeaturedArtist {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  featuredArtist {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    ...ArtistMetadata
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  }
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  popularArtist {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    ...ArtistMetadata
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  }
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;}
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;fragment ArtistMetadata on Artist {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  id
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  name
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  bio
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;It&#39;s a tiny bit longer, but you have a guarantee that the data is consistent across both artists. Now that you have
a rough idea of what a GraphQL fragment is, let&#39;s look at what a &lt;code&gt;FragmentContainer&lt;/code&gt; looks like. Here&#39;s a
simplified &lt;a href=&quot;https://github.com/artsy/emission/blob/892af2621eef455388e074701cca747330de3b3f/src/lib/Scenes/Settings/MyProfile.tsx#L95&quot;&gt;profile page&lt;/a&gt; from the Artsy iOS app:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;31&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;32&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;33&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;34&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;35&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;36&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;37&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;38&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;39&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;40&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;41&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ts&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;react&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createFragmentContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graphql&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;react-relay&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyProfile_me&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;__generated__/MyProfile_me.graphql&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Props&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ViewProperties&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;MyProfile_me&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyProfile&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;render() {&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProfilePhoto&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Subheading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/Subheading&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/Header&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ButtonSection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProfileButton&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Selling&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Sell works from your collection&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;onPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startSubmission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProfileButton&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Account Details&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Email, password reset, profile&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;onPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;goToUserSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/ButtonSection&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/View&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createFragmentContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyProfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;graphql&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;fragment&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyProfile_me&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Me&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;initials&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;There are three moving parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The TypeScript interface &lt;code&gt;MyProfile_me&lt;/code&gt;, generated by the compiler, which ensures we can only use fields that
were selected in the fragment&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;MyProfile&lt;/code&gt; component, which is a vanilla React component&lt;/li&gt;
&lt;li&gt;The exported &lt;code&gt;createFragmentContainer&lt;/code&gt; which returns a higher-order component that wraps &lt;code&gt;MyProfile&lt;/code&gt; and ties it
to a fragment on a &lt;code&gt;Me&lt;/code&gt; type in GraphQL&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Isolation&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Isolation&lt;/h2&gt;

&lt;p&gt;The React component &lt;code&gt;MyProfile&lt;/code&gt; will be passed in props that directly tie to the fragment that was requested. In
Relay terms, this is called &lt;a href=&quot;https://facebook.github.io/relay/docs/en/thinking-in-relay.html#data-masking&quot;&gt;data masking&lt;/a&gt; and it is one of the first hurdles for someone new to Relay to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Grok&quot;&gt;grok&lt;/a&gt;. In REST clients, and GraphQL API clients like Apollo Client, you make a request and that request is
passed through the React tree. E.g.&lt;/p&gt;

&lt;p&gt;&lt;/article&gt;
&lt;a href=&#39;/images/omakase-relay/tree.png&#39; style=&quot;&quot;&gt;
  &lt;img src=&quot;/images/omakase-relay/tree.png&quot; alt=&quot;REST inspired props&quot; style=&quot;width:100%;&quot;&gt;
&lt;/a&gt;
&lt;article class=&quot;post&quot;&gt;&lt;/p&gt;

&lt;p&gt;This means most components know more about the request than it probably needs, as it may be needed to pass on to
the component&#39;s children. This can lead to over-fetching, or even worse, not knowing if you can delete or refactor
a component.&lt;/p&gt;

&lt;p&gt;Data masking solves this by hiding data that the component didn&#39;t request. I&#39;ve still yet to find the right visual
abstraction, but I feel this just about pays for itself.&lt;/p&gt;

&lt;p&gt;&lt;/article&gt;
&lt;a href=&#39;/images/omakase-relay/isolation.png&#39; style=&quot;&quot;&gt;
  &lt;img src=&quot;/images/omakase-relay/isolation.png&quot; alt=&quot;Relay isolation tree&quot; style=&quot;width:100%;&quot;&gt;
&lt;/a&gt;
&lt;article class=&quot;post&quot;&gt;&lt;/p&gt;

&lt;p&gt;You let Relay be responsible for consolidating all your fragments into a query via the &lt;code&gt;QueryRenderer&lt;/code&gt;, causing the
network request, and your response data to be passed your through your component hierarchy. This means Relay
powered components can be safely changed and drastically reduces the chance for unintended consequences elsewhere.&lt;/p&gt;

&lt;p&gt;This isolation gives Artsy engineers the safety to work on projects with tens of contributors which regularly
change over time. Providing a guarantee that you can safely work in isolated parts of the codebase without accruing
technical debt.&lt;/p&gt;

&lt;p&gt;Relay&#39;s container components mean that the components we create are nearly all focused only on the data-driven
aspects of rendering a subset of that GraphQL response into views. It&#39;s very powerful.&lt;/p&gt;

&lt;a name=&quot;Co-location&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Co-location&lt;/h2&gt;

&lt;p&gt;Relay helped us move to one file representing everything a component needed. Effectively a single file now handles
the styles, the actual view content hierarchy, and the exact parts of the API it needs to render itself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/omakase-relay/co-location.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;In roughly that proportion too, though our most modern code uses the Artsy design system &lt;a href=&quot;https://github.com/artsy/palette&quot;&gt;Palette&lt;/a&gt; which
drastically reduces the need for style in our components.&lt;/p&gt;

&lt;p&gt;Co-location&#39;s biggest selling point is reducing &lt;a href=&quot;https://en.wikipedia.org/wiki/Cognitive_load&quot;&gt;cognitive load&lt;/a&gt;,
having everything you need in one place makes it easier to understand how a component works. This makes code review
simpler, and lowers the barrier to understanding the entire systems at scale.&lt;/p&gt;

&lt;a name=&quot;Community&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Community&lt;/h2&gt;

&lt;p&gt;When we adopted Relay, there was no competition - we&#39;d have just used the &lt;code&gt;fetch&lt;/code&gt; API. Over time, &lt;a href=&quot;https://www.apollographql.com&quot;&gt;the Apollo
team&lt;/a&gt; came up and really put a considerable amount of effort into lowering the barriers to entry, and
making it feasible to build complex apps easily.&lt;/p&gt;

&lt;p&gt;As we hired a set of new engineers, the &quot;Apollo vs Relay&quot; debate came up. Interested in whether we would still
start with Relay today, we ran an audit last year of what it would take to re-create a lot of the infrastructure we
love in Relay atop of the (much more popular) Apollo GraphQL eco-system and saw it was reasonably feasible but
would require a considerable amount of work across many different plugins and tools. With Relay that&#39;s all packaged
into one tool, works consistently and has been proven with Facebook having tens of thousands of Relay components in
production.&lt;/p&gt;

&lt;p&gt;It&#39;s worth highlighting the core difference in community engagement for Apollo vs Relay. Engineers working on
Apollo have great incentives to do user support, and improve the tools for the community - that&#39;s their businesses
value. Relay on the other hand is used in many places at Facebook, and the engineers on the team support internal
issues first. IMO, this is reasonable: Relay is an opinionated batteries-included framework for building user
interfaces, and ensuring it works with the baffling amount of JavaScript at Facebook is more or less all the team
has time for.&lt;/p&gt;

&lt;p&gt;That leaves space for the OSS community to own their own problems. Notably there&#39;s been quite a lot of work going
on in the community-managed &lt;a href=&quot;https://github.com/relay-tools&quot;&gt;relay-tools&lt;/a&gt; GitHub organization.&lt;/p&gt;

&lt;a name=&quot;Scale.Safety&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Scale Safety&lt;/h2&gt;

&lt;p&gt;Relay puts a lot of emphasis on ahead-of-time safety. The Relay compiler validates your queries against your
GraphQL schema, it emits Flow types for your fragment’s field selections–which we’ve extended to emit TypeScript
types instead, and there are strict naming systems enforced by the compiler. All of these help guide engineers to
build scalable codebases.&lt;/p&gt;

&lt;p&gt;How this works in practice is that whenever you need to change the data a component requires, you edit the
fragment, the Relay compiler verifies your query, if successful then your TypeScript types are updated and you can
use the new property in your React component above. See below for a &lt;a href=&quot;/images/omakase-relay/relay-process-720.mov&quot;&gt;quick video&lt;/a&gt; showing the Relay compiler
in action:&lt;/p&gt;

&lt;p&gt;&lt;/article&gt;&lt;/p&gt;

&lt;div&gt;
&lt;video controls style=&quot;margin: auto 20px; width:100%;&quot;&gt;
  &lt;source src=&quot;/images/omakase-relay/relay-process-720.mov&quot; type=&quot;video/mp4&quot;&gt;
  Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;


&lt;p&gt;&lt;article class=&quot;post&quot;&gt;&lt;/p&gt;

&lt;p&gt;Moving all of these checks to be during dev-time means we can feel more confident in our deploys. This is
especially an issue in an iOS native codebase, when any deploy requires a review from Apple and roll-backs are
impossible.&lt;/p&gt;

&lt;a name=&quot;Cultural.Fit&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Cultural Fit&lt;/h2&gt;

&lt;p&gt;Relay fit well into our team because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We had engineers who were interested in contributing back and extending Relay to work for our cases&lt;/li&gt;
&lt;li&gt;We had engineers that were used to the benefits of ahead-of-time error validation tools that compilers offer&lt;/li&gt;
&lt;li&gt;We saw a lot of value in a tightly coupling our view structure to our user interface&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Relay is not without its shortcomings to users outside of Facebook, but Relay has definitely paid for its initial
and occasional complexity for the tightness of our codebases many years down the line.&lt;/p&gt;

&lt;!-- prettier-ignore-start --&gt;


&lt;!-- prettier-ignore-end --&gt;



</description>
        <pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/04/10/omakase-relay/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/04/10/omakase-relay/</guid>
        
        
        <category>community</category>
        
        <category>omakase</category>
        
        <category>relay</category>
        
      </item>
    
      <item>
        <title>What is TypeScript?</title>
        <description>&lt;p&gt;TypeScript is a language from Microsoft which builds on JavaScript. This post is a non-technical overview of what
JavaScript is, how TypeScript extends JavaScript and why we choose to adopt TypeScript at Artsy.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;What.is.JavaScript.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What is JavaScript?&lt;/h2&gt;

&lt;p&gt;First up, you can&#39;t describe TypeScript without talking about JavaScript. To create a website (and a bunch of other
types of things) you work in three languages: HTML, CSS and JavaScript (JS). Broadly speaking: HTML defines the
content that will appear on the page, CSS defines the visual style of the page, and JS defines the interactive
behaviours of the page.&lt;/p&gt;

&lt;p&gt;We describe having these sets of skills as being a &quot;front-end&quot; developer. You have to understand those three
languages to present anything inside a web browser like Safari, Firefox or Chrome. So, given how popular the web
is, there is a massive demand for people who are good at using these three languages.&lt;/p&gt;

&lt;p&gt;There is also the set of skills for the &quot;back-end&quot; developers, which are to create computer services that
communicate either to a web browser (by passing it HTML/CSS/JS) or to another service (by sending a raw data.) You
don&#39;t need to use HTML, CSS or JS to write this type of code, but it&#39;s usually an end-product of your work. We
mostly build our back-ends in Ruby or JavaScript at Artsy.&lt;/p&gt;

&lt;a name=&quot;What.do.Programming.Languages.do.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;What do Programming Languages do?&lt;/h3&gt;

&lt;p&gt;Programming languages are an interesting problem to solve. People read code many, many multiples of times more than
they write it - so developers create languages which are good at solving particular problems with a small amount of
code. Here&#39;s an example using JavaScript:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;The first line makes a variable (a kind of box you can keep things in) and then the second line outputs text to the
console (think DOS, or the terminal) &lt;code&gt;&quot;Hello, Danger&quot;&lt;/code&gt;. JavaScript is designed to work as a scripting language,
which means the code starts at the top of the file and then goes through line by line. To provide some contrast,
here is the &lt;a href=&quot;https://repl.it/repls/VioletredGlisteningInfo&quot;&gt;same behavior&lt;/a&gt; in Java, which is built with different
language constraints:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;java&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;blockquote&gt;&lt;p&gt;Note: if you find the naming of Java and JavaScript confusing, it is (they are two completely separate
programming languages, no link at all.) JavaScript was &lt;a href=&quot;https://medium.com/@benastontweet/lesson-1a-the-history-of-javascript-8c1ce3bffb17&quot;&gt;named that way&lt;/a&gt; because Java was looking to be
really the next hot language (it did turn out that way for a decade or two, but now JavaScript is usually the
first language people have heard of.)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Aside from having a lot more lines, the Java version comes with a lot of words that aren&#39;t necessarily about
telling the computer exactly what to do, e.g. &lt;code&gt;class Main {&lt;/code&gt;, &lt;code&gt;public static void main(String[] args) {&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt; and
&lt;code&gt;}&lt;/code&gt; again. It also has semi-colons at the end of some lines. Java is aimed at building different things from
JavaScript, and these extra bits of code make sense within the constraints of building a Java app.&lt;/p&gt;

&lt;p&gt;To get to my main point though, there is one standout line I&#39;d like us to compare:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;java&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// JavaScript&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Java&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Both of these lines declare variables called &lt;code&gt;name&lt;/code&gt; which contain the value &lt;code&gt;&quot;Danger&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In JavaScript you use the abbreviation &lt;code&gt;var&lt;/code&gt; to declare a variable. Meanwhile, in Java you need to say &lt;em&gt;what kind
of data&lt;/em&gt; the variable contains. In this case the variable contains a &lt;code&gt;String&lt;/code&gt;. (A string is a programming term for
a collection of characters. They &lt;code&gt;&quot;look like this&quot;&lt;/code&gt;. This &lt;a href=&quot;https://www.youtube.com/watch?v=czTWbdwbt7E&quot;&gt;5m video&lt;/a&gt;
is a good primer if you want to learn more.)&lt;/p&gt;

&lt;p&gt;Both of these variables contain a string, but the difference is that in Java the variable can &lt;em&gt;only&lt;/em&gt; ever contain a
&lt;em&gt;string&lt;/em&gt;, because that&#39;s what we said when we created the variable. In JS the variable can change to be &lt;em&gt;anything&lt;/em&gt;,
like a number, or a list of dates.&lt;/p&gt;

&lt;p&gt;To illustrate:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Before in JS&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Also OK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;2018-02-03&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2019-01-12&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Before in Java&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Not OK, the code wouldn&amp;#39;t be accepted by Java&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;2018-02-03&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2019-01-12&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;These trade-offs make sense in the context for which these languages were built back in 1995. JavaScript was
originally designed to be a small programming language which handled simple interactions on websites. Java on the
other hand was built specifically to make big apps which could run on any computer. Their needs had different
scales, so the language required programmers write different types of code.&lt;/p&gt;

&lt;p&gt;Java required programmers to be more explicit with the values of their variables because the programs they expected
people to build were more complex. While JavaScript opted for ease of reading, and aimed to do less.&lt;/p&gt;

&lt;a name=&quot;What.is.TypeScript.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;What is TypeScript?&lt;/h3&gt;

&lt;p&gt;TypeScript is a programming language - it contains all of JavaScript, and then a bit more. Using our example above,
let&#39;s compare the scripts for &quot;Hello, Danger&quot; in JavaScript vs TypeScript:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// JavaScript&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// TypeScript&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Yep, you&amp;#39;re not missing something, there&amp;#39;s no difference&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Due to TypeScript&#39;s aim to only &lt;em&gt;extend&lt;/em&gt; JavaScript, your normal JavaScript code should work fine with TypeScript.
The things TypeScript adds to JavaScript are intended to help you be more explicit about what kinds of data are
used in your code, a bit like Java.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;diff&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gd&quot;&gt;- var name = &amp;quot;Danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ var name: string = &amp;quot;Danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;console.log(&amp;quot;Hello, &amp;quot; + danger)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This extra &lt;code&gt;: string&lt;/code&gt; allow the reader to be certain that &lt;code&gt;name&lt;/code&gt; will only be a string. Annotating your variables
also gives TypeScript the chance to verify this for you. This is &lt;em&gt;very&lt;/em&gt; useful because keeping track of changes
like the type of value in a variable seems easy when it&#39;s one or two, but once it starts hitting the hundreds,
that&#39;s a lot to keep track of. Types help programmers be more confident about their code because types catch
mistakes.&lt;/p&gt;

&lt;p&gt;Simply speaking, we call these annotations &quot;Types&quot;. Hence the name &lt;i&gt;Type&lt;/i&gt;Script. The tag-line for TypeScript
is &quot;JavaScript which scales&quot; which is a statement that these extra type annotations allows you to work on bigger
projects. This is because you can verify up-front how correct your code is. This means you have less need to
understand how every change affects the rest of the program.&lt;/p&gt;

&lt;p&gt;In the 90s, and maybe until a 5-10 years ago the trade-off for not having types in your JavaScript application was
fine because the size and complexities of the programs being built were constrained to just the front-end of
websites. Today though, JavaScript is being used everywhere:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apps like Slack, or Spotify for your computer are built in mostly JavaScript&lt;/li&gt;
&lt;li&gt;Some iOS apps, including Artsy&#39;s are mostly JavaScript&lt;/li&gt;
&lt;li&gt;The back-end and front-end of Artsy.net are JavaScript&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These are all considerably more complicated to build and understand, adding types drastically reduces the
complexity of making improvements to those programs.&lt;/p&gt;

&lt;a name=&quot;Why.does.Artsy.use.TypeScript.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Why does Artsy use TypeScript?&lt;/h3&gt;

&lt;p&gt;Artsy definitely isn&#39;t the size of Microsoft! Artsy is about 30 engineers, and Microsoft are about 60,000. However,
some of our problems are the same. Developers at Artsy build apps which are made up of thousands of files. A change
to one individual file can affect the behaviour of any number of other files, like throwing a pebble into a pond
and causing ripples to spread out to the bank.&lt;/p&gt;

&lt;p&gt;Typically, the need to ensure there are no bugs is less of a problem for people building websites. Websites are
easy to make changes to, because if you change the site - everyone gets the update instantly. We also build our iOS
app with JavaScript, but a change to our app requires Apple to review the changes and for users to download the new
version from the App Store.&lt;/p&gt;

&lt;p&gt;This means that the iOS team needs to have more checks that everything is OK before shipping the app to the world.
Using TypeScript gives our team the ability to feel good that the changes we have made are only the changes we
want.&lt;/p&gt;

&lt;p&gt;TypeScript isn&#39;t the only programming language to tackle the problem of making JavaScript code safer, but it&#39;s the
one with the biggest community, allows people to re-use their JavaScript knowledge, can be added in small steps,
and has really good tools to help developers work faster.&lt;/p&gt;

&lt;p&gt;These qualities made it worth adding an extra tool to our developers&#39; toolbelt, and we&#39;re not the only ones because
TypeScript is growing to be &lt;a href=&quot;https://www.wired.com/story/typescript-microsoft-javascript-alternative-most-popular&quot;&gt;one of the most popular programming languages in the world&lt;/a&gt; with almost 6
million downloads a week.&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/04/05/omakase-typescript/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/04/05/omakase-typescript/</guid>
        
        
        <category>community</category>
        
        <category>javascript</category>
        
        <category>roads and bridges</category>
        
        <category>typescript</category>
        
      </item>
    
      <item>
        <title>Peril Architecture Deep Dive</title>
        <description>&lt;p&gt;For the &lt;a href=&quot;/blog/2017/09/04/Introducing-Peril/&quot;&gt;last two years&lt;/a&gt;, we&#39;ve used &lt;a href=&quot;https://github.com/danger/peril&quot;&gt;Peril&lt;/a&gt; to automate quite a lot of process at Artsy. You can see
a full overview of what &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/peril.md&quot;&gt;we automate in &lt;code&gt;artsy/README&lt;/code&gt;&lt;/a&gt;. As a service, Peril is a bit of an iceberg
of complexity, most tooling-y developers at Artsy have &lt;a href=&quot;https://github.com/artsy/peril-settings/graphs/contributors&quot;&gt;contributed&lt;/a&gt; to our user-land Dangerfiles
but very few have touched the server itself.&lt;/p&gt;

&lt;p&gt;To lower that barrier, I gave our Engineering team a run through of how the server works and how a lot of the
pieces come together. Jump &lt;a href=&quot;https://www.youtube.com/watch?v=3HNmiNHCvdA&quot;&gt;to YouTube&lt;/a&gt; for the video, or click more
for a smaller inline preview.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;iframe width=&#39;100%&#39; height=&#39;600&#39; src=&#39;https://www.youtube.com/embed/3HNmiNHCvdA &#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/04/04/peril-architecture-deep-dive/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/04/04/peril-architecture-deep-dive/</guid>
        
        
        <category>community</category>
        
        <category>ios</category>
        
        <category>reactnative</category>
        
        <category>roads and bridges</category>
        
      </item>
    
      <item>
        <title>React Native at Artsy, 3 years later</title>
        <description>&lt;p&gt;On Valentine&#39;s day in 2014, @alloy made our first commit moving the Artsy Mobile team to JavaScript, and paving the
way to the &lt;a href=&quot;https://www.youtube.com/watch?v=1Z3loALSVQM&quot;&gt;shared Omakase JavaScript stack across web + iOS&lt;/a&gt;. We&#39;ve done a write-up at &lt;a href=&quot;/blog/2016/08/15/React-Native-at-Artsy/&quot;&gt;6 months&lt;/a&gt;, &lt;a href=&quot;/blog/2017/02/05/Retrospective-Swift-at-Artsy/&quot;&gt;1 year&lt;/a&gt;,
&lt;a href=&quot;/blog/2018/03/17/two-years-of-react-native/&quot;&gt;2 years&lt;/a&gt; and at 2.5 years we collaborated on a React Native conference with Facebook which features a &lt;a href=&quot;http://artsy.net/x-react-native&quot;&gt;very long
Q&amp;amp;A&lt;/a&gt; session with the people who worked on, and with our React Native stack.&lt;/p&gt;

&lt;p&gt;Our experience has been really positive building a single platform data-driven app. We&#39;ve been able to drastically
increase the number of contributors to the codebase and with minimal guidance, web-developers are able to be
productive and ship features to our iOS apps.&lt;/p&gt;

&lt;p&gt;That said, for this 3 year anniversary, I want to dive deeper into some of the less positive aspects of our
transition. We think these trade-offs are worth it, and that this may be what a successful cultural transition
eventually looks like for some companies.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;De-nativification&quot;&gt;&lt;/a&gt;
&lt;h2&gt;De-nativification&lt;/h2&gt;

&lt;p&gt;When adopting React Native, we de-emphasized iOS as a unique platform for Artsy.&lt;/p&gt;

&lt;p&gt;From an engineering team&#39;s perspective, we think of it as skill &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#de-silo-engineers&quot;&gt;de-siloing&lt;/a&gt;. Prior to the move, if you
were on the mobile team you only worked on the iOS apps. This meant you had a limited scope to make change at
Artsy. This comes from two factors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Skills in Obj-C and Swift are only useful in the context of Apple&#39;s platforms.&lt;/li&gt;
&lt;li&gt;Internally and externally, Artsy is considered a website first.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Within 2 years we had de-siloed mobile engineering completely. We started with a team of 5 experienced native iOS
developers and by the end everyone had very solid skills across the board in JavaScript, React, GraphQL and the
build tools we&#39;d need to make it all come together. These engineers kept their native skills, but they became
frozen in time.&lt;/p&gt;

&lt;p&gt;With time, we redistributed the native engineers across many teams, with the native Engineers effectively acting as
a conduit for ensuring that we keep quality high and providing guidance to the rest of that team on how to make it
feel right. A simple way to think of it, is that the native engineer&#39;s job was to make sure we still conformed to
the &lt;a href=&quot;https://developer.apple.com/design/human-interface-guidelines/&quot;&gt;Apple Human Interface Guidelines&lt;/a&gt; to ensure
the user experience is consistent with the platform and the user’s expectations.&lt;/p&gt;

&lt;p&gt;We&#39;re reasonably lucky here too, the mobile team at Artsy has pre-dominantly hired folks interested in improving
behind-the-scenes (&lt;a href=&quot;https://www.fordfoundation.org/about/library/reports-and-studies/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure/&quot;&gt;Roads and Bridges&lt;/a&gt; style) infrastructure. Once we had wrapped up the move, we effectively
took all of our native product developers and moved them into JavaScript platform infrastructure roles.&lt;/p&gt;

&lt;p&gt;This was one of the major blocking points for AirBnB&#39;s adoption of React Native, specifically their native teams
felt uncomfortable at the introduction of JavaScript and a whole new toolchain inside their apps. There are people
who really love being a product developer in a native codebase, and React Native as a technology will de-value that
as more work would happen in JavaScript.&lt;/p&gt;

&lt;p&gt;(Note: this is a gross simplification, and me reading between the lines, you should read from the horse’s mouth and
check out &lt;a href=&quot;https://medium.com/airbnb-engineering/react-native-at-airbnb-f95aa460be1c&quot;&gt;Airbnb’s posts&lt;/a&gt; (and &lt;a href=&quot;https://ashfurrow.com/blog/airbnb-and-react-native-expectations/&quot;&gt;Ash&#39;s continuation&lt;/a&gt; on the subject ))&lt;/p&gt;

&lt;p&gt;After a year of adopting React Native, the ex-mobile team used to joke that no-one enjoyed working in the native
codebase anymore. They still did. Three years down the line, with most screens now in React Native, that&#39;s not a
joke anymore.&lt;/p&gt;

&lt;p&gt;This has consequences.&lt;/p&gt;

&lt;a name=&quot;Platform.Concerns&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Platform Concerns&lt;/h2&gt;

&lt;p&gt;De-siloing our mobile team obviously wasn&#39;t without its risk. In expanding the scope of our mobile engineering
team, and opening up the iOS app for contributions to the rest of the company we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Moved the engineers with a native focus to act more like platform engineers vs product engineers.&lt;/li&gt;
&lt;li&gt;Had iOS native platform engineers with the skills to now also work on the web&#39;s platform.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is what started to make our third year tricky. In Artsy, web is the &lt;a href=&quot;https://en.wikipedia.org/wiki/The_squeaky_wheel_gets_the_grease&quot;&gt;squeaky wheel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After figuring out the JavaScript infrastructure for React Native on iOS, we replicated that infrastructure on the
web to consolidate tooling and ideas across all of Artsy. We call that infrastructure for both &lt;a href=&quot;https://www.youtube.com/watch?v=1Z3loALSVQM&quot;&gt;the Artsy
Omakase&lt;/a&gt;. Maintaining, and keeping the infrastructure up-to-date on the web side is a much bigger task and
requires a lot more engineering time.&lt;/p&gt;

&lt;p&gt;The web-aspect of the Omakase has more client consumers (1 iOS app vs 3 large websites), and its corresponding repo
has more than double the number of commits per day on average. The web team has its own people running and
improving infrastructure, which affects the iOS side too.&lt;/p&gt;

&lt;p&gt;We explicitly worked towards shared common infrastructure across all front-end at Artsy. It wasn&#39;t surprising when
the aspect with the most company focus became much larger and more complex. What creates tricky constraints are
that the few people with the interest and skills to work on our React Native infrastructure also happen to have the
skills to work on the web problems too.&lt;/p&gt;

&lt;p&gt;Those web problems tend to be a lot more valuable to the business.&lt;/p&gt;

&lt;p&gt;There&#39;s some work that can be done to benefit both, but in the last year it has been hard to prioritise
iOS-specific platform work. For example, it took almost a year to get around to upgrading our version of React
Native. This is a pretty risky place to be for a platform which we care about.&lt;/p&gt;

&lt;p&gt;At the end of 2018, we came to the conclusion that this was something we wanted to work to improve. So, we
specifically brought back an explicit iOS-specific culture to Artsy - when we split our front-end practice into web
and &lt;a href=&quot;https://github.com/artsy/README/commit/95c9b93ab966ed269b5ebd9f0bdec8d2434bab52#diff-342d3433f36fbedadc5a8f167985fdf3&quot;&gt;iOS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Maybe this is a small admission of failure to the idea of a purely de-silo&#39;d team, but realistically while product
work across the two front-ends teams is consistent - the platform concerns just aren&#39;t.&lt;/p&gt;

&lt;a name=&quot;Keeping.up.with.the.Jobs.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Keeping up with the Jobs&#39;&lt;/h2&gt;

&lt;p&gt;As individual developers, it&#39;s much less important for us to keep up to date with the latest Apple developer news.
WWDCs and iOS releases just kinda happen, and we keep moving independently. We still write native code to make use
of any iOS API available when we need to, but right now we don’t go out of our way to try to make use of all the
shiny new things when they are released.&lt;/p&gt;

&lt;p&gt;This is a side-effect to the openness of the JavaScript toolchain, and our ability to contribute and fix a lot of
our own problems at JavaScript level instead of needing to dive deeper into the native side to work on problems. We
still support iOS 9, and have very little incentive to bump it - new APIs from Apple just aren&#39;t that interesting
anymore.&lt;/p&gt;

&lt;p&gt;Without a focused iOS team, it&#39;s not easy to pitch for iOS specific projects. This means that features like moving
to Apple&#39;s new app store review API or using iOS features which don&#39;t exist on web get spoken about in meetings,
but never started. This lack of a focused team makes it really hard to implement fixes to e.g. bad App Store
reviews.&lt;/p&gt;

&lt;p&gt;That said, in the last year we did manage to ship a pretty hefty &lt;a href=&quot;/blog/2018/03/18/ar/&quot;&gt;ARKit feature&lt;/a&gt; - which is a positive
example of an iOS-specific feature which is both forward-thinking tech and a super great fit for Artsy&#39;s product.
React Native basically played no part in that.&lt;/p&gt;

&lt;a name=&quot;Community.Disconnection&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Community Disconnection&lt;/h2&gt;

&lt;p&gt;There are maybe four communities at play if you&#39;re doing React Native:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript (Babel/TypeScript/Storybooks/VSCode)&lt;/li&gt;
&lt;li&gt;React (Relay/Styled Components)&lt;/li&gt;
&lt;li&gt;React Native (Mostly people creating cross-platform tools)&lt;/li&gt;
&lt;li&gt;Native (Obj-C/Swift/CocoaPods/fastlane etc)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It&#39;s hard to keep on-top of any one community, and it&#39;s very hard to keep on track of four. Realistically, if you
want to be writing apps at the level of quality we want to - you need to, though.&lt;/p&gt;

&lt;p&gt;Artsy&#39;s principle of &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#own-your-dependencies&quot;&gt;owning our dependencies&lt;/a&gt; means involved in all of these communities, however it&#39;s
hard to engage in the native community with too much excitement anymore. Most of their problems aren&#39;t the same as
ours anymore, and the dependencies we want to improve live in the JavaScript realms.
4&lt;/p&gt;

&lt;a name=&quot;Universal.Issues.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Universal Issues?&lt;/h2&gt;

&lt;p&gt;Are these the kind of problems most teams would have? It depends, with React Native at Artsy our focus on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Offering a consistent way to write code across web and iOS, which doesn’t water down either platform.&lt;/li&gt;
&lt;li&gt;Ensuring we are able to meaningfully own our dependencies across the stacks.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Means that we took on some technical and cultural debt, specifically around the platform aspect of our native
codebase. There are a few levers we can use to fix some of these issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let iOS be a bit more webby, by using more JavaScript instead of enforcing stricter platform standards.&lt;/li&gt;
&lt;li&gt;Use more of the React Native community’s infra-structure, we generally don&#39;t use React Native JavaScript
dependencies. These dependencies usually are cross-platform on Android and iOS which tends to mean making
compromises per-platform. Often we are forcing ourselves into extra work to ensure platform consistency.&lt;/li&gt;
&lt;li&gt;Find a way to ensure clearer engineering and product ownership for iOS at Artsy.&lt;/li&gt;
&lt;li&gt;Hire more iOS infrastructure engineers to allow for a better mix of native infra vs JavaScript product engineers.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;How and if we&#39;ll tweak these levers will make for an interesting retrospective. Till then, I&#39;d like to finish with
a showcase of some of the React Native work we shipped over the course of the last 4 months:&lt;/p&gt;

&lt;p&gt;&lt;/article&gt;
&lt;a href=&#39;/images/react-native-3/rn_3_1.jpg&#39; style=&quot;&quot;&gt;
  &lt;img src=&quot;/images/react-native-3/rn_3_1.jpg&quot; alt=&quot;&quot; style=&quot;width:100%;&quot;&gt;
&lt;/a&gt;
&lt;article class=&quot;post&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/article&gt;
&lt;a href=&#39;/images/react-native-3/rn_3_2.jpg&#39; style=&quot;&quot;&gt;
  &lt;img src=&quot;/images/react-native-3/rn_3_2.jpg&quot; alt=&quot;&quot; style=&quot;width:100%;&quot;&gt;
&lt;/a&gt;
&lt;article class=&quot;post&quot;&gt;&lt;/p&gt;

&lt;p&gt;We wouldn&#39;t have been able to ship this without React Native.&lt;/p&gt;

&lt;!-- prettier-ignore-start --&gt;


&lt;!-- prettier-ignore-end --&gt;

</description>
        <pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/03/17/three-years-of-react-native/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/03/17/three-years-of-react-native/</guid>
        
        
        <category>community</category>
        
        <category>ios</category>
        
        <category>reactnative</category>
        
        <category>roads and bridges</category>
        
      </item>
    
      <item>
        <title>So You Want to Be an Engineer</title>
        <description>&lt;p&gt;First of all, that&#39;s very exciting! Software engineering is pretty darn cool—you get to learn lots of new things,
understand the technology you use every day better, and contribute to the mysterious maw known as &quot;the internet&quot;.&lt;/p&gt;

&lt;p&gt;Last February, I also decided that I wanted to pursue computer engineering. I&#39;d been at Artsy for a bit less than
two years at that point, first as a marketing intern working on SEO and then as a coordinator on the CRM (read:
email) team. I&#39;d consistently been working on small technical projects; first doing
&lt;a href=&quot;https://github.com/artsy/positron/commit/3176282a3ea94c626e9d851b7c0dd27a1bb0fcb4&quot;&gt;some work&lt;/a&gt; on a tool for SEO
optimization for our Editorial team, then building
&lt;a href=&quot;http://artsy.github.io/blog/2018/11/19/mjml/&quot;&gt;emails with MJML&lt;/a&gt;, and a few other bits and bobs. But I didn&#39;t think
of it as a serious pursuit.&lt;/p&gt;

&lt;p&gt;Mostly, that was due to my experience programming in the past—I did about half a CS major in undergrad. At the
time, I felt that programming wasn&#39;t right for me, and I dropped the major during my third year.&lt;/p&gt;

&lt;p&gt;It was Artsy&#39;s Engineering team that convinced me that programming was something that I both wanted to and could
do. Our engineers have always welcomed learners and been happy to answer questions and empower other teams to do
technical work. I eventually realized that the parts of my work where I was coding were the parts I enjoyed the
most, and that I would likely feel more fulfilled if I made programming my full-time occupation.&lt;/p&gt;

&lt;p&gt;Here&#39;s what that journey looked like. Hopefully my experience proves helpful to you as you begin (or finish) yours!&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Step.One:.Tell.People.What.You.Want&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Step One: Tell People What You Want&lt;/h1&gt;

&lt;p&gt;This might&#39;ve been the single biggest learning I took away from this experience: &lt;em&gt;if you tell people you want
something, you might just get it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That may sound super obvious. It wasn&#39;t for me. I&#39;ve usually been very passive in my career decisions, taking the
path of least resistance and considering myself lucky when I was able to keep progressing. In this case, I was
making a substantial departure from that idea by being proactive about what it was I wanted.
&lt;a href=&quot;https://engineering.gusto.com/i-didnt-want-to-be-a-manager-anymore-and-the-world-didnt-end/&quot;&gt;This post&lt;/a&gt; by
&lt;a href=&quot;https://twitter.com/NoaElad&quot;&gt;Noa Elad&lt;/a&gt; does a great job with this topic and is certainly worth a read.&lt;/p&gt;

&lt;p&gt;The first person I told at Artsy was &lt;a href=&quot;https://twitter.com/orta&quot;&gt;Orta&lt;/a&gt;. He&#39;d often encouraged me to develop my
technical skills, and since he knows Artsy&#39;s engineering team and stack better than just about anyone, I figured
he&#39;d be able to point me in the right direction when it came to learning resources and navigating company politics
to get to my eventual goal.&lt;/p&gt;

&lt;p&gt;The second person I told was my manager on the CRM team. I fortunately had a very good relationship with my manager
and was confident that she would help me if she could. And by telling her early, I was giving her more opportunity
to advocate for me and making it easier for her to replace me in the event that I was able to switch teams.&lt;/p&gt;

&lt;p&gt;The third person I told was Artsy&#39;s CTO, &lt;a href=&quot;https://www.dblock.org/&quot;&gt;dB&lt;/a&gt;. This was Orta&#39;s recommendation—dB would be
able to tell me if and when a move might be possible, and he could suggest things I should do to improve my chances
of making the switch.&lt;/p&gt;

&lt;p&gt;I also didn&#39;t keep it a secret from the rest of my team or the company. I didn&#39;t show up wearing a shirt that said
&quot;ENGINEER&quot; on it, but I told people, &quot;I&#39;m working on becoming an engineer. I&#39;m really hoping to stay at Artsy, but
if there&#39;s not a role open for me, that&#39;s fine—I&#39;ll search elsewhere.&quot;&lt;/p&gt;

&lt;p&gt;The net outcome of these conversations was that there wasn&#39;t a role open right then (and that I still had lot to
learn before I&#39;d be ready when one became available), but I also left with a better idea of what I should learn and
what I could expect from the coming months.&lt;/p&gt;

&lt;a name=&quot;Step.Two:.Figure.Out.What.You.Want.to.Learn&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Step Two: Figure Out What You Want to Learn&lt;/h1&gt;

&lt;p&gt;The answer to that question really depends on who you are, where you work, and where you &lt;em&gt;want&lt;/em&gt; to work.&lt;/p&gt;

&lt;p&gt;I wanted to work at Artsy, and I felt that I was most interested in front-end work. So I asked a few of our
engineers to help me understand our stack and to recommend frameworks/languages I should learn.&lt;/p&gt;

&lt;p&gt;If you&#39;re interested in changing companies as well as careers, it&#39;s worth seeing if your target company or
companies have open source code you can check out. See if you can find them on &lt;a href=&quot;https://www.github.com&quot;&gt;GitHub&lt;/a&gt; and
look at some of their recently updated repos. If you already have some coding experience, see if you can contribute
a little bit—even fixing small bugs or typos is a good place to start, since you&#39;re both contributing to their
codebase (which will help you if you land an interview) and learning more about their stack. dB recommended that I
do this with Artsy&#39;s code.&lt;/p&gt;

&lt;p&gt;As with most companies that have been around for more than a year or two, Artsy is home to projects with many
different stacks. However, most of our newer front-end stuff—things that are recently updated or currently in
development—is built on React using TypeScript. So my first question was &quot;what do I need to know in order to write
TypeScript code in a React framework?&quot;&lt;/p&gt;

&lt;p&gt;Fortunately, a lot of other people have the same question.&lt;/p&gt;

&lt;a name=&quot;Step.Three:.Decide.How.You.Want.to.Learn.It&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Step Three: Decide How You Want to Learn It&lt;/h1&gt;

&lt;p&gt;First: &lt;strong&gt;there is no wrong way to go about learning to code&lt;/strong&gt;. Whether it takes you 6 months or 6 years, whether
you learn one language or a dozen, whether you ask for a lot of help or do it all yourself, &lt;strong&gt;you are learning and
that is valuable&lt;/strong&gt;. Learning to code is not a magical skill. Like just about everything, it&#39;s a matter of putting
in time. Just keep trying, even small things, and you &lt;em&gt;will&lt;/em&gt; make progress.&lt;/p&gt;

&lt;p&gt;Lots of people who want to become engineers go to coding bootcamps like &lt;a href=&quot;https://flatironschool.com/&quot;&gt;Flatiron&lt;/a&gt; or
&lt;a href=&quot;https://generalassemb.ly/&quot;&gt;General Assembly&lt;/a&gt;. That&#39;s a very reasonable thing to do! I had a decent grounding in CS
fundamentals thanks to my experience in undergrad, and as a result, I initially decided I wouldn&#39;t do a coding
bootcamp—I felt I had enough experience to benefit from the multitude of online courses and open source projects
out there.&lt;/p&gt;

&lt;p&gt;However, there are definitely real and significant benefits do doing a bootcamp. Here are three that I can think
of:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clear curriculum. At times, I was overwhelmed by the possible ways to proceed and stopped making progress as a
result. Bootcamps take the guesswork out.&lt;/li&gt;
&lt;li&gt;Timeline. Because I didn&#39;t have a hard date set for a transition or interview, it was up to me to determine how
fast/slow I worked on things, and I stagnated at times as a result.&lt;/li&gt;
&lt;li&gt;Community. While the open source community is very much a real thing, and you can find lovely people on the
internet who want to help learners like yourself, it&#39;s not the same as having multiple people learning the same
thing at the same time in the same physical space.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The downsides, of course, are that coding bootcamps are expensive and time-consuming. Most of us don&#39;t have the
luxury to leave a job, pay $10K – $15K in fees, and spend a couple months at a full-time bootcamp with no income.
There are other models, such as online-only bootcamps or after-hours classes, but those come with challenges of
their own.&lt;/p&gt;

&lt;p&gt;I&#39;d say that If you can afford a bootcamp and have the time, it&#39;s a great way to jumpstart a coding career, but you
don&#39;t have to attend one to become a good engineer.&lt;/p&gt;

&lt;p&gt;If you decide to go the non-bootcamp route, you also have a lot of good options. I did courses through
&lt;a href=&quot;https://www.udemy.com&quot;&gt;Udemy&lt;/a&gt;, which has a lot of courses that are literally always on sale for $10 - $20. There
are many other similar services out there as well, like &lt;a href=&quot;https://www.udacity.com&quot;&gt;Udacity&lt;/a&gt;,
&lt;a href=&quot;https://www.codecademy.com/&quot;&gt;Codecademy&lt;/a&gt;, and &lt;a href=&quot;https://teamtreehouse.com/&quot;&gt;Treehouse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also highly recommend attending IRL meetups, because that&#39;s where you can make connections and learn from others
most easily. I&#39;m a semi-regular attendee at the &lt;a href=&quot;https://www.meetup.com/CocoaPods-NYC/&quot;&gt;CocoaPods meetup&lt;/a&gt; hosted by
&lt;a href=&quot;https://twitter.com/ashfurrow&quot;&gt;Ash&lt;/a&gt; and Orta at Artsy HQ, and &lt;a href=&quot;https://www.meetup.com/find/tech/&quot;&gt;meetup.com&lt;/a&gt; and
&lt;a href=&quot;https://peerlab.community/&quot;&gt;peerlab.community&lt;/a&gt; are great places to find other events.&lt;/p&gt;

&lt;a name=&quot;Step.Four:.Get.Comfortable.Not.Knowing.Things&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Step Four: Get Comfortable Not Knowing Things&lt;/h1&gt;

&lt;p&gt;When learning engineering concepts (and practicalities), there&#39;s a lot you&#39;re not going to know.&lt;/p&gt;

&lt;p&gt;This piece of advice is important both when learning and once you actually land an engineering job (it&#39;s been one
of the hardest parts of my first ~3 months on Artsy engineering).&lt;/p&gt;

&lt;p&gt;Part of what makes engineering so cool is that you are always challenged to learn new things and solve new
problems. But especially at first, the mental toolbox you have is pretty limited. When you don&#39;t know a language or
framework, it&#39;s very hard to solve problems using it—your first problems are likely to be syntax errors and
misunderstandings.&lt;/p&gt;

&lt;p&gt;One of the best things you can do is learn how to ask good questions and then ask them. You might be asking them on
a forum, in GitHub issues, in meetings, or in conversation with your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Rubber_duck_debugging&quot;&gt;favorite rubber duck&lt;/a&gt;. Regardless, just asking them will
help, and asking lots of questions is one of the best way to learn things fast—but it takes humility and
self-awareness. &lt;a href=&quot;https://twitter.com/b0rk&quot;&gt;Julia Evans&lt;/a&gt; has a &lt;a href=&quot;https://jvns.ca/wizard-zine.pdf&quot;&gt;great zine&lt;/a&gt; that
has good advice on asking questions, among many other things. For a few more fun and helpful resources, see
&lt;a href=&quot;https://github.com/artsy/README/blob/master/resources/tech-learning.md&quot;&gt;Artsy&#39;s README&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;Step.Five:.Recognize.What.You.Bring.to.the.Table&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Step Five: Recognize What You Bring to the Table&lt;/h1&gt;

&lt;p&gt;Ok, so you&#39;re reconciled to the fact that you have a lot to learn—but what about all the things you already know?
Those are important too!&lt;/p&gt;

&lt;p&gt;Even if your past work and/or life experience has nothing to do with computers or programming, it can still have
value as you work towards engineering (and after you become an engineer). That value can take a lot of different
forms, and since everyone&#39;s experiences are different, I can&#39;t say for sure what impact your prior knowledge will
have.&lt;/p&gt;

&lt;p&gt;For me, there are a few experiences I brought to engineering that were particularly helpful. Because I was
transitioning from one team at Artsy to another (Marketing → Engineering), I brought with me a broad understanding
of Artsy&#39;s goals and needs, which helps with day-to-day prioritization. And when I&#39;m in a sprint planning meeting
or a product review and someone has a question about email or marketing, I can often answer—or at least I know who
to talk to to get to the bottom of the issue quickly. Plus if at some point my team needs to code emails, my
&lt;a href=&quot;http://artsy.github.io/blog/2018/11/19/mjml/&quot;&gt;past experience&lt;/a&gt; will come in very handy.&lt;/p&gt;

&lt;p&gt;There are also life experiences that serve me well on the Engineering team. My work as a server and bartender made
me good at clear communication with stakeholders. Cooking for big groups of friends has made me better at
estimating how long I&#39;ll need for tasks. Don&#39;t underestimate the power of &quot;soft skills&quot;—even companies like Google
&lt;a href=&quot;https://www.washingtonpost.com/news/answer-sheet/wp/2017/12/20/the-surprising-thing-google-learned-about-its-employees-and-what-it-means-for-todays-students&quot;&gt;have come to recognize&lt;/a&gt;
that it&#39;s often the non-technical skills that separate good engineers from great ones.&lt;/p&gt;

&lt;p&gt;————&lt;/p&gt;

&lt;p&gt;Moving to engineering has been a tricky process, but one I&#39;m very grateful to have experienced. I&#39;m lucky to work
at an organization where moving from email marketing to engineering is possible, and I&#39;m even luckier to have had
the support of engineers, friends, and engineer-friends in making the move. If you end up pursuing this course as
well, I wish you the best of luck!&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/03/12/so-you-want-to-be-an-engineer/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/03/12/so-you-want-to-be-an-engineer/</guid>
        
        
        <category>artsy</category>
        
        <category>beginners</category>
        
        <category>culture</category>
        
        <category>engineering</category>
        
        <category>people</category>
        
        <category>team</category>
        
      </item>
    
      <item>
        <title>The Anatomy of an Editorial Feature</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://files.artsy.net/images/2018-visual-culture-screengrab.gif&quot; title=&quot;The Year in Visual Culture 2018&quot; alt=&quot;The Year in Visual Culture 2018&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On select occasions since 2015, Artsy Editorial has created a number of custom, one-off articles featuring unique layouts, styles and experiences. After trying a number of implementations, the &lt;a href=&quot;https://github.com/artsy/reaction/tree/master/src/Components/Publishing/EditorialFeature&quot;&gt;&lt;code&gt;EditorialFeature&lt;/code&gt;&lt;/a&gt; component was introduced to the process during Artsy’s 2018 year-in-review projects.&lt;/p&gt;

&lt;p&gt;By moving the implementation of custom articles to Artsy’s component library, we were able to remove some of the friction and time investment necessary for engineers to spin up these articles, and enable bespoke layouts to be housed in Artsy.net’s Article domain rather than a custom Express app. Acting essentially as a wrapper to accept article data, any component can be rendered as a child of the &lt;code&gt;EditorialFeature&lt;/code&gt; component, allowing for flexible combinations of new and existing features, and for minimal or maximal interventions.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;For a light-weight customization, a developer might add props for unique text or background colors. Medium-touch could involve wrapping an existing layout in a styled-component declaring further css interventions to font-size, borders, margins or other layout properties. The space is an open canvas, so the option is available to build every element from scratch, introduce JS interactivity, and to interact with any data saved to the article model in a completely new way. The scale of a project can vary widely, but determined by weighing priorities of editorial intent, proposed designs, engineering capabilities/availability, and budget.&lt;/p&gt;

&lt;p&gt;Some examples of articles created with the &lt;code&gt;EditorialFeature&lt;/code&gt; component include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Most Influential Artists of 2018 - &lt;a href=&quot;https://github.com/artsy/reaction/tree/master/src/Components/Publishing/EditorialFeature/Components/Eoy2018Artists&quot;&gt;Components&lt;/a&gt; | &lt;a href=&quot;https://www.artsy.net/article/artsy-editorial-influential-artists-2018&quot;&gt;Article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The Year in Visual Culture 2018 - &lt;a href=&quot;https://github.com/artsy/reaction/blob/master/src/Components/Publishing/EditorialFeature/Components/Eoy2018Culture.tsx&quot;&gt;Components&lt;/a&gt; | &lt;a href=&quot;https://www.artsy.net/article/artsy-editorial-people-defined-visual-culture-2018&quot;&gt;Article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Custom.articles.by.domain:&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Custom articles by domain:&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;a href=&quot;https://github.com/artsy/force&quot;&gt;In Force (Artsy.net)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Whether an article requires a custom layout is determined in Force’s &lt;a href=&quot;https://github.com/artsy/force/blob/master/src/desktop/apps/article/routes.ts&quot;&gt;article routing&lt;/a&gt;. This is achieved by passing the prop &lt;code&gt;customEditorial&lt;/code&gt;-- a string shorthand for a specific article-- to Reaction’s top-level &lt;code&gt;Article&lt;/code&gt; component. The &lt;code&gt;customEditorial&lt;/code&gt; prop is pulled from Force’s editorial feature &quot;&lt;a href=&quot;https://github.com/artsy/force/blob/master/src/desktop/apps/article/editorial_features.ts&quot;&gt;master list&lt;/a&gt;&quot;, which ties an &lt;code&gt;article._id&lt;/code&gt; to a communicative string that will be received by Reaction. In addition to data saved to an article model, the component will also receive all data displayed in the footer including related articles and display ads. Custom articles are rendered as a standalone page, meaning they are excluded from infinite scroll and do not render the main site header.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;2. &lt;a href=&quot;https://github.com/artsy/reaction&quot;&gt;In Reaction (Artsy’s component library)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In Reaction’s top-level &lt;a href=&quot;https://github.com/artsy/reaction/blob/master/src/Components/Publishing/Article.tsx&quot;&gt;&lt;code&gt;Article&lt;/code&gt;&lt;/a&gt; component, the presence of a &lt;code&gt;customEditoral&lt;/code&gt; prop routes an article to the &lt;a href=&quot;https://github.com/artsy/reaction/blob/master/src/Components/Publishing/Layouts/ArticleWithFullScreen.tsx&quot;&gt;&lt;code&gt;ArticleWithFullScreen&lt;/code&gt;&lt;/a&gt; component. From here, the article is given context for image slideshows and tooltip helpers, and the  &lt;code&gt;EditorialFeature&lt;/code&gt; component is rendered rather than the component designated by the article’s specified layout. A &lt;code&gt;FeatureLayout&lt;/code&gt; is displayed by default, but any article can be converted into a custom feature, regardless of the &lt;code&gt;article.layout&lt;/code&gt; value. Inside the &lt;code&gt;EditorialFeature&lt;/code&gt; component, a switch statement is used to associate the string variable for the feature with its affiliated top-level component.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;3. &lt;a href=&quot;https://github.com/artsy/positron&quot;&gt;In Writer/Positron (CMS &amp;amp; API for articles)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Because &lt;code&gt;EditorialFeature&lt;/code&gt; accepts an article data-model, it can be edited using the Writer CMS. However it is important to note that a custom layout is rendered by Force only. While editing, what users see is dicated by the &lt;code&gt;article.layout&lt;/code&gt; property. Writer&#39;s features are exposed based on this property, so a particular custom article’s layout should be determined by the features most suited to the content and design.  For example, if you need a header-image or video, a feature article would be a logical choice because that content can easily be created and edited in Writer. If the article relies heavily on content from related articles, you might choose to customize a series article instead.&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Creating.a.custom.feature&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Creating a custom feature&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://files.artsy.net/images/2018-influentual-artists-screengrab.gif&quot; title=&quot;The Most Influential Artists of 2018&quot; alt=&quot;The Most Influential Artists of 2018&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A custom layout is enabled via three steps:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a new object to the &lt;code&gt;customEditorialArticles&lt;/code&gt; &lt;a href=&quot;https://github.com/artsy/force/blob/master/src/desktop/apps/article/editorial_features.ts&quot;&gt;master list&lt;/a&gt;, indicating the &lt;code&gt;article._id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;. Names are usually a shorthand for the content, and used because they are descriptive (unlike an &lt;code&gt;_id&lt;/code&gt;), and will not change over time like a title or slug has potential to do.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;MY_CUSTOM_FEATURE&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;12345&amp;quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// mongo _id&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Create your custom component in the &lt;code&gt;EditorialFeature/Components&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;Add your &lt;code&gt;customEditorial&lt;/code&gt; string to &lt;code&gt;EditorialFeature&lt;/code&gt;’s switch statement to enable rendering custom component&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;MY_CUSTOM_FEATURE&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyCustomFeature&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Although these features historically receive high traffic via search and other channels, they usually have little internal visibility a few months after they are published. For this reason it is recommended that, in addition to any unit tests, developers create a snapshot of the custom article so that unexpected regressions are flagged in a test failure.&lt;/p&gt;

&lt;a name=&quot;History..amp..Context&quot;&gt;&lt;/a&gt;
&lt;h1&gt;History &amp;amp; Context&lt;/h1&gt;

&lt;p&gt;Previously we have used multiple strategies to implement these features, using two sometimes overlapping concepts: Curations and SuperArticles.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://files.artsy.net/images/2017-gender-equality-screengrab.gif&quot; title=&quot;Artists for Gender Equality&quot; alt=&quot;Artists for Gender Equality&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Curations:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://github.com/artsy/positron/tree/master/src/api/apps/curations&quot;&gt;Curation&lt;/a&gt; is a model in Positron’s API that has no schema-- meaning it accepts any data shape. This can be a handy solution for content that does not conform to the existing article model. However, this strategy comes with significant overhead and a few quirks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href=&quot;https://github.com/artsy/positron/tree/master/src/client/apps/settings/client/curations&quot;&gt;custom edit UI must be created&lt;/a&gt; and maintained indefinitely&lt;/li&gt;
&lt;li&gt;A custom Express app is required by Force to render the content&lt;/li&gt;
&lt;li&gt;Because data is in a unique shape, components often must be fully custom&lt;/li&gt;
&lt;li&gt;It is difficult to track visual changes over time&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Despite these pitfalls, Curations remain useful for special cases, especially those which involve interactive navigation through content.&lt;/p&gt;

&lt;p&gt;Published examples of custom articles that use curations are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/gender-equality&quot;&gt;Artists for Gender Equality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/venice-biennale&quot;&gt;Inside the Biennale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/2016-year-in-art&quot;&gt;The Year in Art 2016&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;em&gt;See &lt;a href=&quot;http://artsy.github.io/blog/2017/02/01/year-in-art/&quot;&gt;previous blog post&lt;/a&gt; on creating The Year in Art 2016.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SuperArticles:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An article where the &lt;code&gt;is_super_article&lt;/code&gt; field is set to true includes the ability to attach related articles and sponsor-related fields to an article. It also exempts an article from the infinite scroll feed, and renders a custom header (in place of the main site navigation) and footer. The SuperArticle &lt;a href=&quot;https://github.com/artsy/force/blob/master/src/desktop/components/article/templates/super_article_sticky_header.jade&quot;&gt;header&lt;/a&gt; and &lt;a href=&quot;https://github.com/artsy/force/blob/master/src/desktop/components/article/templates/super_article_footer.jade&quot;&gt;footer&lt;/a&gt; both include navigation options to view and visit related, aka sub-article, content.&lt;/p&gt;

&lt;p&gt;The first SuperArticle was also the &lt;a href=&quot;https://www.artsy.net/2015-year-in-art&quot;&gt;first custom feature&lt;/a&gt;, and its attributes were made available to all articles when launched. However, its weakness lies in a conflation of a series and a sponsor as a single concept. In practice we have seen that they are not mutually exclusive. Additionally, support for this feature was built in Backbone, and hasn’t always behaved as expected when inserted into our React-heavy ecosystem. Since the SuperArticle was created, we have extended the ability for any article to accept either or both sponsor and related article data, and we are currently in the process of deprecating this concept.&lt;/p&gt;

&lt;p&gt;Existing SuperArticles include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/2016-year-in-art&quot;&gt;The Year in Art 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/2015-year-in-art&quot;&gt;The Year In Art 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/article/artsy-editorial-the-100-most-expensive-artists&quot;&gt;The 100 Most Expensive Artists at Auction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Takeaways.for.developers&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Takeaways for developers&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;We try to work with our editorial and design teams to ensure new editorial content maps as closely to our existing article data-model and CMS features as possible. That way, we can have an upfront conversation about the constraints our systems might impose on designs.&lt;/li&gt;
&lt;li&gt;Relying heavily on existing article and system components ensures that system-wide changes (for example, changes to breakpoints) will be inherited&lt;/li&gt;
&lt;li&gt;Always create snapshot tests to monitor how an article changes over time&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/03/05/custom-editorial-features/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/03/05/custom-editorial-features/</guid>
        
        
        <category>javascript</category>
        
        <category>publishing</category>
        
        <category>reaction</category>
        
      </item>
    
  </channel>
</rss>
