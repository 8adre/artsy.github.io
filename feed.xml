<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artsy Engineering</title>
    <description></description>
    <link>http://artsy.github.io/</link>
    <atom:link href="http://artsy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 23 Aug 2018 15:35:41 +0000</pubDate>
    <lastBuildDate>Thu, 23 Aug 2018 15:35:41 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Defining Our Engineering Guiding Principles</title>
        <description>&lt;p&gt;The Artsy Engineering team recently underwent the process of defining our guiding principles; you can read through the pull request &lt;a href=&quot;https://github.com/artsy/meta/pull/41&quot;&gt;here&lt;/a&gt; and the finished principles &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md&quot;&gt;here&lt;/a&gt;. In this blog post, I&#39;d like to use our experience of defining these to answer the following questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why define engineering guiding principles?&lt;/li&gt;
&lt;li&gt;What makes principles different from company values?&lt;/li&gt;
&lt;li&gt;How to define guiding principles?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Let&#39;s dive in.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Why.Define.Engineering.Principles.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Why Define Engineering Principles?&lt;/h2&gt;

&lt;p&gt;Artsy&#39;s CEO has a &lt;a href=&quot;https://www.artsy.net/article/carter-cleveland-why-define-company-values&quot;&gt;blog post&lt;/a&gt; that discusses why you should define company values and, unsurprisingly, a lot of the same rationale applies to an engineering team&#39;s guiding principles. In summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Undefined principles lead to cultural debt (similar to technical debt, but in terms of a team&#39;s culture).&lt;/li&gt;
&lt;li&gt;Defined values lead to greater empowerment (engineers feel safe making decisions on their own, based on the principles).&lt;/li&gt;
&lt;li&gt;Defined values reduce the risk of unconscious bias (we help our decisions get made consistently).&lt;/li&gt;
&lt;li&gt;Values are your brand (this is true for Artsy Engineering, but our &lt;a href=&quot;https://github.com/artsy&quot;&gt;contributions&lt;/a&gt; to the software industry are also a significant part of brand).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think each of these reasons applies to defining guiding principles as well. Over the past four years, I&#39;ve seen the Artsy Engineering team encounter situations related to the reasons outlined above and, while the company values have helped us navigate disagreement, they haven&#39;t been entirely satisfactory.&lt;/p&gt;

&lt;p&gt;The two biggest shortcomings of the values have been an &lt;strong&gt;inconsistent practice&lt;/strong&gt; and a &lt;strong&gt;difficulty making team-based decisions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Artsy Engineering supports the business primarily through product teams, which each have their own responsibilities and KPIs. Over time, different teams have developed their own subculture. In earnest, I think this is really cool, but it &lt;em&gt;has&lt;/em&gt; eventually led to two teams taking radically different approaches to similar problems, or even repeating work that another team is already working on.&lt;/p&gt;

&lt;p&gt;That missing consistency also led to difficulties making team-based decisions: how can teams make decisions &lt;em&gt;as a team&lt;/em&gt; without having a clear set of guidelines with which to evaluate a decision? As I&#39;ll explain in the next section, the Artsy company values often left us without a clear answer.&lt;/p&gt;

&lt;a name=&quot;What.Makes.Guiding.Principles.Different.from.Company.Values.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What Makes Guiding Principles Different from Company Values?&lt;/h2&gt;

&lt;p&gt;Artsy&#39;s &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#artsy-values&quot;&gt;five core values&lt;/a&gt; are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Art meets Science&lt;/li&gt;
&lt;li&gt;People are Paramount&lt;/li&gt;
&lt;li&gt;Quality Worthy of Art&lt;/li&gt;
&lt;li&gt;Positive Energy&lt;/li&gt;
&lt;li&gt;Openness&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Those have been an incredibly useful framework for guiding Artsy&#39;s growth, for three years now. They&#39;re good values. But they are &lt;em&gt;very&lt;/em&gt; general, designed specifically to be inclusive of every member of, and every team in, our company.&lt;/p&gt;

&lt;p&gt;That can lead to challenges when applying the values to specific teams, including engineering. In our day-to-day work, the values can help guide our general actions (being positive in pull request reviews, for example), but lack the specifics necessary to drive decision-making on a team level. The values also sometimes conflict with one another, and navigating those conflicts is difficult without a set of down-to-Earth guiding principles.&lt;/p&gt;

&lt;p&gt;Let&#39;s take a look at an example. &quot;Quality Worthy of Art&quot; is a really great value – personally, it motivates me to build software that would be worthy of hanging in a studio or gallery. However, the process of &lt;em&gt;getting&lt;/em&gt; to that quality is often very messy; we might try one approach, switch to another, ship with &lt;code&gt;TODO&lt;/code&gt; comments left in, etc. Real artists ship, after all. When &lt;a href=&quot;http://artsy.github.io/series/open-source-by-default/&quot;&gt;developing software in the open&lt;/a&gt;, which value wins? The openness value, or the quality value?&lt;/p&gt;

&lt;p&gt;Our CEO has encouraged the company to lean into these tensions and use them to grow and learn together, which was a motivating factor in defining our guiding principles.&lt;/p&gt;

&lt;a name=&quot;How.to.Define.Guiding.Principles.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;How to Define Guiding Principles?&lt;/h2&gt;

&lt;p&gt;This is a very tricky question, since so much of the answer for Artsy Engineering is specific to us at Artsy (your process will necessarily be different) and specific to our team &lt;em&gt;within&lt;/em&gt; Artsy (engineers make up less than 15% of Artsy&#39;s employee headcount). Orta helped define the values by looking at &lt;a href=&quot;https://www.objc.io/issues/22-scale/artsy/&quot;&gt;artefact&#39;s of our mobile team&#39;s culture&lt;/a&gt; (since our mobile team &lt;em&gt;did&lt;/em&gt; have a strong culture) and by talking to engineers privately to ask them for input. That was only half the work, though.&lt;/p&gt;

&lt;p&gt;Orta opened &lt;a href=&quot;https://github.com/artsy/meta/pull/41&quot;&gt;the pull request&lt;/a&gt; with the guiding principles that he had synthesized from past documentation and from conversations with engineers, but explicitly marked the PR as a work-in-progress. The values he had were a good starting point, but we iterated extensively on them. We also added many more that had been missed by Orta&#39;s starting work (we had to start somewhere, after all). The whole process took about two weeks, and I learned a lot about how other engineers work at Artsy.&lt;/p&gt;

&lt;p&gt;Most of my experience at Artsy has been engineering front-end systems, and through the process of defining these principles, I learned a lot about how our back-end engineers work. We don&#39;t always work in the same way (remember, tensions?) but I value those differences; we have so much to learn from each other! Now with the guidelines, I&#39;ll be able to appreciate the back-end perspective.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So with all that said, what are the Artsy Engineering Guiding Principles? You can read the &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md&quot;&gt;current principles here&lt;/a&gt; (they are a living set of guidelines), but the principles we decided on are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open Source by Default&lt;/li&gt;
&lt;li&gt;Own Your Dependencies&lt;/li&gt;
&lt;li&gt;Incremental Revolution&lt;/li&gt;
&lt;li&gt;Being Nice is Nice&lt;/li&gt;
&lt;li&gt;Minimum Viable Process&lt;/li&gt;
&lt;li&gt;Leverage Your Impact&lt;/li&gt;
&lt;li&gt;De-silo Engineers&lt;/li&gt;
&lt;li&gt;Build for 10x&lt;/li&gt;
&lt;li&gt;Done Means Done&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I encourage you to read the document for explanations of what each of these mean.&lt;/p&gt;

&lt;p&gt;Day-to-day, I don&#39;t expect &lt;em&gt;that&lt;/em&gt; much to change now that we have these defined. But the differences they make will be key to the longevity and growth of our engineering team&#39;s culture.&lt;/p&gt;

&lt;p&gt;Remember that earlier example of openness-vs-quality? That is answered explicitly by the principles. The principles are &lt;em&gt;actionable&lt;/em&gt;, they are &lt;em&gt;specific&lt;/em&gt;, and they are &lt;em&gt;ours&lt;/em&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Aug 2018 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2018/08/22/engineering-guiding-principles/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2018/08/22/engineering-guiding-principles/</guid>
        
        
        <category>concepts</category>
        
        <category>culture</category>
        
        <category>engineering</category>
        
        <category>meta</category>
        
        <category>teams</category>
        
      </item>
    
      <item>
        <title>Open Source by Default: Docs</title>
        <description>&lt;p&gt;Artsy is growing up. We have thousands of subscriber galleries paying 3 to 4 figure monthly fees. As we&#39;re starting
to see a real market-fit, and have started to mature our organization. For example, this year we introduced product
managers into our 8 year old company to help us figure out how to build the right things. We actually started having
open headcount on Engineering again, for the first time &lt;em&gt;in years&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As a part of maturing, our team has really had to start considering how to make parts of our culture explicit
instead of implicit. We have new, awesome folks wanting to understand why things are the way they are as well as
folk who are raising up to new responsibilities only to find them completely un-documented.&lt;/p&gt;

&lt;p&gt;In-part, having a consistent team for so long hasn&#39;t made it worth the time to document things everyone knows, but
growth is very happy to disrupt that balance. Now we&#39;re shipping documentation updates weekly, to all sorts of
places. In trying to write an awesome document, which I&#39;ll cover later, I looked at how we had consolidated our
documentation over the last few years, and saw that we had fragmented due the tensions around wanting to write
publicly.&lt;/p&gt;

&lt;p&gt;This post covers that tension, and how we came about to the new docs setup.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Fragmentation&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Fragmentation&lt;/h2&gt;

&lt;p&gt;Prior to today, we had 4 main repos for documentation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🔒 &lt;code&gt;artsy/potential&lt;/code&gt; (2015) - Our onboarding repo, and general docs hub&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/mobile&quot;&gt;&lt;code&gt;artsy/mobile&lt;/code&gt;&lt;/a&gt; (2015) - The mobile team&#39;s repo&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/guides&quot;&gt;&lt;code&gt;artsy/guides&lt;/code&gt;&lt;/a&gt; (2016) - A place for standards and guides&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/meta&quot;&gt;&lt;code&gt;artsy/meta&lt;/code&gt;&lt;/a&gt; (2017) - Externally-facing docs for non-Artsy folk&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Now we have two:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🔒 &lt;code&gt;artsy/potential&lt;/code&gt; - Support docs, and private documentation&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README&quot;&gt;&lt;code&gt;artsy/README&lt;/code&gt;&lt;/a&gt; - Documentation Hub, split into sections&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When we created potential, it started as an open repo with the focus of on-boarding information. Over time it&#39;s
scope grew to cover more general team, repo and setup documentation. We ended up debating whether it should be a
private repo instead though.&lt;/p&gt;

&lt;p&gt;The key arguments for closing it were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are sensitive things we want to document&lt;/li&gt;
&lt;li&gt;We can to write about info which lives in other private repos with full context&lt;/li&gt;
&lt;li&gt;By making potential private we could have one, authoritative source of truth for Artsy engineering newcomers&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These are all great, reasonable arguments and so we made the repo private - but with hindsight, closing the repo
split contributors to our documentation. For example, the mobile team split moved their documentation into separate
repo the week potential was made private. The web team used the blog, or kept notes in a per-project basis.
Culturally, potential was considered the domain of our platform team. The platform team had the most cross-cutting
concerns, and were also the team with the strongest need for documenting private information like domain models,
outages, system failures, server access details and contact details.&lt;/p&gt;

&lt;p&gt;By 2016, we had successfully &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#de-silo-engineers&quot;&gt;de-silo&#39;d&lt;/a&gt; mobile engineering at Artsy via React Native, so the mobile team
wasn&#39;t a centralized team with resources anymore. This meant that new docs shouldn&#39;t really live inside the
artsy/mobile repo. The front-end teams had been using the blog posts and public gists to keep track of
documentation, which isn&#39;t really a good pattern. GitHub gists get lost, and blog posts aren&#39;t living documents.&lt;/p&gt;

&lt;p&gt;This eventually caused enough dissonance that the front-end folk called it quits and started a new docs repo. Our
discussion on what we want a GraphQL schema to look like definitely didn&#39;t fit in the &lt;a href=&quot;https://github.com/artsy/mobile&quot;&gt;&lt;code&gt;artsy/mobile&lt;/code&gt;&lt;/a&gt; repo and
we wanted to share it with the other GraphQL folk we were talking to, so having it in a private repo didn&#39;t make
sense. We couldn&#39;t do editorial review against a gist, and we eventually just started a new documentation repo:
&lt;a href=&quot;https://github.com/artsy/guides&quot;&gt;&lt;code&gt;artsy/guides&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once we had a space, then new docs started coming. We documented the RFC process, and how to run retrospectives in
the guides repo. As a guide on &lt;em&gt;how-to-do-x&lt;/em&gt; - these all made sense. What didn&#39;t make sense was that we were
regularly repeating ourselves when talking about Artsy Engineering to the public.&lt;/p&gt;

&lt;p&gt;There wasn&#39;t a good space for that in mobile nor guides, and so a new repo was created: &lt;a href=&quot;https://github.com/artsy/meta&quot;&gt;&lt;code&gt;artsy/meta&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Soon, this became the home of docs from anyone that preferred writing in the public. &lt;a href=&quot;https://github.com/artsy/meta&quot;&gt;&lt;code&gt;artsy/meta&lt;/code&gt;&#39;s&lt;/a&gt; domain
was vague enough that anyone could document any internal processes as being something externally facing. For example
documentation on how to run &lt;a href=&quot;https://github.com/artsy/README/blob/master/playbooks/running-lunch-and-learn.md#running-a-lunch--learn&quot;&gt;our Lunch &amp;amp; Learn&lt;/a&gt;, or &lt;a href=&quot;https://github.com/artsy/README/blob/master/events/open-standup.md#dev-team-standup-at-artsy&quot;&gt;Open Stand-up&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;Open.Docs.by.Default&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Open Docs by Default&lt;/h2&gt;

&lt;p&gt;This came to an inflection point when I joined the platform team, and felt the need to write cross-team
documentation that really didn&#39;t fit with of our existing domains for documentation. I believe in &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#leverage-your-impact&quot;&gt;leveraging my
impact&lt;/a&gt;, so any time writing docs should be industry grade-stuff, not only available to those lucky enough to
be in &lt;a href=&quot;https://www.artsy.net/jobs#engineering&quot;&gt;our GitHub org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So I spent some time debating the merits of our current infrastructure for docs:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;diff&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ New folk know to start at artsy/potential&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ The platform team have a private space for writing any private details about architecture and security&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ The wiki is well used as a source for all information on our engineering support process&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gd&quot;&gt;- By having our primary source of docs being private, we fragmented into many sources&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gd&quot;&gt;- New people have to figure out what team may have wrote docs to guess where docs might be&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gd&quot;&gt;- The number of contributors is low to artsy/potential&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;I wanted to imagine what a world looked like where the docs were &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#open-source-by-default&quot;&gt;open by default&lt;/a&gt;. So, I consulted our
friends in openness: &lt;a href=&quot;https://buffer.com&quot;&gt;Buffer&lt;/a&gt;. I found that they had &lt;a href=&quot;https://github.com/bufferapp/README&quot;&gt;&lt;code&gt;bufferapp/README&lt;/code&gt;&lt;/a&gt; - which looked an awful lot
like what I was thinking.&lt;/p&gt;

&lt;p&gt;I wondered about if we moved Artsy to have an open space for the initial docs, and treated potential as it&#39;s private
sidekick:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;diff&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ New folk know to start at artsy/README&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ We can migrate all sources of docs into one place&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ artsy/potential can still be used as a place for writing private details&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ Our methodology for docs aligns with our methodology for source code&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ By consolidating, we can improve working via scripts/tooling to make it feel good&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gd&quot;&gt;- It gives up on the idea that you can have a single source of documentation&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gd&quot;&gt;- You have to be a bit more cautious about what you write in docs&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gd&quot;&gt;- It&amp;#39;s a bunch of work, and you have to deprecate a lot of docs and handle re-directs for URLs&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;I opted to use our &lt;a href=&quot;https://github.com/artsy/README/blob/master/playbooks/rfcs.md&quot;&gt;RFC process&lt;/a&gt; to discuss the idea of splitting, yet consolidating, documentation. We talked
about it for two weeks with some great points for and against. Mostly summed up above, but we also discussed the
idea of moving private docs into &lt;a href=&quot;https://www.notion.so/&quot;&gt;notion.so&lt;/a&gt;. We&#39;re still figuring out what the scope of notion is in&lt;/p&gt;

&lt;p&gt;The RFC passed and I started work on a new docs hub last weekend. It was a nice shallow task I could do to keep my
mind busy. It&#39;d been a hard week.&lt;/p&gt;

&lt;p&gt;I wasn&#39;t aiming to rock the boat, so I created a new private repo on GitHub ( turns out we were at our GitHub limit
for private repos, so I &lt;a href=&quot;https://github.com/artsy/node-artsy-licenses/&quot;&gt;open sourced another&lt;/a&gt; to give us a free private slot - hah ) and &lt;a href=&quot;https://github.com/artsy/README/pull/1&quot;&gt;made a PR&lt;/a&gt;.
This &lt;a href=&quot;https://github.com/artsy/README/pull/1&quot;&gt;artsy/README#1&lt;/a&gt; outlined my thoughts on how the merge can work, and gave a chance for others to say &quot;this
doc shouldn&#39;t be public.&quot;&lt;/p&gt;

&lt;p&gt;I focused on making minimal changes, but on making sure that all docs were back up to date with whatever they were
covering. However, I set up tooling like &lt;a href=&quot;https://prettier.io&quot;&gt;prettier&lt;/a&gt;, &lt;a href=&quot;https://github.com/typicode/husky#husky---&quot;&gt;commit-hooks&lt;/a&gt; for tables of contents and &lt;a href=&quot;https://danger.systems&quot;&gt;danger&lt;/a&gt; to
make life easier for anyone wanting to make larger changes, see the &lt;a href=&quot;https://github.com/artsy/README/blob/master/CONTRIBUTING.md&quot;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once the opening PR was merged, I converted the repo to be public, sent off PRs closing &lt;a href=&quot;https://github.com/artsy/meta/pull/45&quot;&gt;meta&lt;/a&gt;, &lt;a href=&quot;https://github.com/artsy/guides/pull/8&quot;&gt;guide&lt;/a&gt;
and &lt;a href=&quot;https://github.com/artsy/mobile/pull/106&quot;&gt;mobile&lt;/a&gt;, then marked them as archived, and started debating how to announce that this happened. What
better form than a blog post? So I started writing:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Artsy is growing up. We have
thou&lt;img src=&quot;/images/ossdocs/small_blinking_text_cursor_by_neripixu-d6lwqe9.gif&quot; height=28 width=4 style=&quot;width:4px; margin:0; top:5px; margin-left:2px;&quot;&gt;&lt;/p&gt;&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 21 Aug 2018 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2018/08/21/OSS-by-Default-Docs/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2018/08/21/OSS-by-Default-Docs/</guid>
        
        
        <category>artsy</category>
        
        <category>culture</category>
        
        <category>docs</category>
        
        <category>potential</category>
        
      </item>
    
      <item>
        <title>Context Switching</title>
        <description>&lt;p&gt;Programming generally requires getting into a good &lt;a href=&quot;https://en.wikipedia.org/wiki/Flow_(psychology)&quot;&gt;flow state&lt;/a&gt; and working on a tricky problem for some time.
In the last 2 years, most of my work at Artsy (and in the OSS world) has been less about longer-term building of
hard things, but working on many smaller tasks across a lot of different areas.&lt;/p&gt;

&lt;p&gt;Somehow, during this period I managed to end up in the top of &quot;most active&quot; &lt;a href=&quot;https://gist.github.com/paulmillr/2657075&quot;&gt;GitHub members&lt;/a&gt;, I feel like a
lot of this is due to doing &lt;a href=&quot;http://artsy.github.io/series/open-source-by-default/&quot;&gt;Open Source by Default&lt;/a&gt; at Artsy and second to being good at context switching. I
want to try and talk though some of my techniques for handling context switching, as well as a bit of philosophy
around adopting and owning your tools.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Shallow.and.Wide.Work&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Shallow and Wide Work&lt;/h2&gt;

&lt;p&gt;I want to encourage as many people as possible to work on fun, deep-flow projects at Artsy. One of the most
successful ways of achieving this, that I&#39;ve found, is to spend most of my time working on shallower tasks. An
example from my last few weeks is hiring. The communication aspects require dozens of emails and internal updates
that can&#39;t be scheduled into safe blocks. &lt;em&gt;(&lt;a href=&quot;https://www.artsy.net/jobs#engineering&quot;&gt;Totally related BTW, we&#39;re hiring&lt;/a&gt;.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For programming work I have a few techniques for trying to accomplish a lot of shallow tasks across many repos.&lt;/p&gt;

&lt;p&gt;Start off by making yourself accountable to someone. For my OSS, this tends to either be &lt;a href=&quot;https://github.com/orta/cocoapods-fix-react-native#contributing-back&quot;&gt;setting expectations&lt;/a&gt;
in README or using &lt;a href=&quot;https://github.com/danger/danger-js/blob/master/VISION.md#danger-for-js&quot;&gt;a VISION&lt;/a&gt; file. For Artsy work we have product managers and engineers who own the
projects I&#39;m contributing to. For this blog post, it&#39;s my &lt;a href=&quot;http://artsy.github.io/author/chris/&quot;&gt;buddy Chris&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I would then strive to get &lt;em&gt;anything&lt;/em&gt; out, this could be a work-in-progress PR or via declaratively via
&lt;a href=&quot;https://tom.preston-werner.com/2010/08/23/readme-driven-development.html&quot;&gt;README-driven-development&lt;/a&gt;. Part of this is because you might end up being dragged off into something else,
and another is that you&#39;re less likely to grok the domain better than your reviewers. Whilst not every change is an
improvement, every improvement adds up - even in small increments.&lt;/p&gt;

&lt;p&gt;One way to instantly get rich domain knowledge is by pairing with someone who is more involved. This is a perfect
way to understand how decisions were made and provides great insight into how someone works on a project. While
pairing, you might also find additional ways to improve the daily workflow for someone else too!&lt;/p&gt;

&lt;p&gt;Trying to have a shallow and wide understanding of many systems means accepting that you can&#39;t know the finer
details about how everything works. You want to know when really big interesting things are happening, but most work
should be iterative and less relevant to external folk like you.&lt;/p&gt;

&lt;p&gt;With this in mind you can change your perspective to aim for having overviews on many things, but not get bogged
down in the useful discussion.&lt;/p&gt;

&lt;p&gt;Techniques for this are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Making a custom stream of updates and not being too concerned about reading every single one of them. For Artsy,
with many contributors and contexts - I create slack channels like: &lt;code&gt;#front-end-ios-notifs&lt;/code&gt;,
&lt;code&gt;#front-end-web-notifs&lt;/code&gt;, &lt;code&gt;#orta-misc-notifs&lt;/code&gt; and business specific ones like &lt;code&gt;#consignments-notifs&lt;/code&gt; that contain
PR or Issue information creation from GitHub but nothing with more details. I do the same but smaller for Danger
and CocoaPods.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I set &lt;a href=&quot;https://get.slack.help/hc/en-us/articles/201398467-Set-up-keyword-notifications&quot;&gt;Slack keywords&lt;/a&gt; to key GitHub repo names, or internal facing app names that I care about. This
means I don&#39;t have to monitor every channel.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I don&#39;t read my email. All 13,489 of them right now. I read the subjects and decide if it&#39;s worth reading. Every
few months I declare inbox zero so others are less distracted by the number.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The tricky thing with this sort of work is trying not to be a blocker for someone else. A lot of this is about being
cautious about what you strive to help with, and about finding ways to boost others asynchronously. Am I good at
this? Sometimes. It&#39;s easier in OSS thanks to the the limited liability clauses, but in work-work that can be hard.&lt;/p&gt;

&lt;p&gt;When my contributions are larger and I know the domain well, for example in a front-end JavaScript project, I am
willing to take longer than I&#39;d like to ensure that it is reference level quality. A recent example came up in a
retrospective last month when an engineering team at Artsy said that one of &lt;a href=&quot;https://github.com/artsy/emission/tree/master/src/lib/Components/Consignments&quot;&gt;my projects&lt;/a&gt; was a key
reference for testing and React Native form handling for them. Pulling off this can definitely take longer than
expected, but if you&#39;re not going to be the one maintaining it then holding yourself to a higher standard is worth
it.&lt;/p&gt;

&lt;a name=&quot;Deep.Automation&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Deep Automation&lt;/h2&gt;

&lt;p&gt;Remove as much ambiguity as possible for discussion. Project tools like &lt;a href=&quot;https://prettier.io&quot;&gt;prettier&lt;/a&gt; really help focus code review
away from the petty formatting issues. Linters like &lt;a href=&quot;https://github.com/palantir/tslint&quot;&gt;tslint&lt;/a&gt;, &lt;a href=&quot;https://eslint.org&quot;&gt;eslint&lt;/a&gt; and &lt;a href=&quot;https://www.github.com/bbatsov/rubocop&quot;&gt;rubocop&lt;/a&gt; remove another series of
discussion points. When you find yourself surprised by a cultural rule for a codebase, add &lt;a href=&quot;https://danger.systems&quot;&gt;a danger&lt;/a&gt; rule
so you and others have it codified. Use tools like &lt;a href=&quot;https://github.com/typicode/husky&quot;&gt;husky&lt;/a&gt; and &lt;a href=&quot;https://github.com/okonet/lint-staged&quot;&gt;lint-staged&lt;/a&gt; to get that feedback when you&#39;re
still in a development context. Danger can even run as a &lt;a href=&quot;http://danger.systems/js/tutorials/fast-feedback.html&quot;&gt;git-hook/husky task&lt;/a&gt; too, so that feedback
can be &lt;em&gt;blazing&lt;/em&gt; too.&lt;/p&gt;

&lt;p&gt;You can automate via tools, sure, but you can also encourage independent work via documentation.(TO DO: saves your
time, but isn&#39;t &quot;automation&quot;) If something is confusing enough that, as an outsider, you don&#39;t get it without
asking, you should start adding documentation. I can&#39;t tell you what that looks like because it&#39;s different
per-project, but at least try to make it so the next person doesn&#39;t need to ask.&lt;/p&gt;

&lt;p&gt;I strive to use my time on a project to encourage more consolidation, in the case of front-end that&#39;s moving closer
to &lt;a href=&quot;https://www.youtube.com/watch?v=1Z3loALSVQM&quot;&gt;the Artsy omakase&lt;/a&gt;. In the case of servers that could be encouraging new APIs to use GraphQL, or to adopt
some of our newer ideas about schema management.&lt;/p&gt;

&lt;a name=&quot;Impact.per.Keystroke&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Impact per Keystroke&lt;/h2&gt;

&lt;p&gt;I&#39;m a firm believer in customising your environment. Does that suck for pair programming? Yes. Can we deal with it?
Yes. I&#39;m gong to assume you&#39;re on a Mac. An out of the box Mac comes with some solid developer tools, and Apple are
good at &lt;a href=&quot;http://artsy.github.io/blog/2017/02/05/Retrospective-Swift-at-Artsy/#Developer.Experience&quot;&gt;taking&lt;/a&gt; some of the communities good ideas and giving it to everyone.&lt;/p&gt;

&lt;p&gt;However, there&#39;s definitely space for independent apps. Here&#39;s a list of apps broken into genres. You should be
running at least one from each genre, and have it&#39;s features deeply committed to memory. The ones in bold are what I
use.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Window Management: &lt;a href=&quot;https://manytricks.com/moom/&quot;&gt;&lt;strong&gt;Moom&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;http://magnet.crowdcafe.com&quot;&gt;Magnet&lt;/a&gt;,
&lt;a href=&quot;https://www.spectacleapp.com&quot;&gt;Spectacles&lt;/a&gt;, &lt;a href=&quot;http://mizage.com/divvy/&quot;&gt;Divvy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Effective Keyboard Shortcuts: &lt;a href=&quot;https://shortcatapp.com&quot;&gt;&lt;strong&gt;Shortcat&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://keytty.com&quot;&gt;Keytty&lt;/a&gt;,
&lt;a href=&quot;https://vimium.github.io&quot;&gt;Vimium&lt;/a&gt;/&lt;a href=&quot;https://github.com/guyht/vimari&quot;&gt;&lt;strong&gt;Vimari&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clipboard Manager: &lt;a href=&quot;https://www.alfredapp.com&quot;&gt;&lt;strong&gt;Alfred&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://tapbots.com/pastebot/&quot;&gt;Pastebot&lt;/a&gt;,
&lt;a href=&quot;http://www.keyboardmaestro.com/main/&quot;&gt;Keyboard Meastro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Recently changed files: &lt;a href=&quot;http://www.ironicsoftware.com/fresh/&quot;&gt;&lt;strong&gt;Fresh&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&quot;http://www.ironicsoftware.com/fresh/&quot;&gt;&lt;strong&gt;Alfred&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Text Snippets: &lt;a href=&quot;https://www.alfredapp.com&quot;&gt;&lt;strong&gt;Alfred&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://textexpander.com/&quot;&gt;TextExpander&lt;/a&gt;, macOS System
Settings&lt;/li&gt;
&lt;li&gt;Terminal: &lt;a href=&quot;https://iterm2.com&quot;&gt;&lt;strong&gt;iTerm 2&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://hyper.is&quot;&gt;Hyper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Learning Keyboard Shortcuts: &lt;a href=&quot;https://www.mediaatelier.com/CheatSheet/&quot;&gt;&lt;strong&gt;CheatSheet&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Shell: &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;Oh my ZSH&lt;/a&gt;, &lt;strong&gt;&lt;a href=&quot;http://fishshell.com&quot;&gt;Fish&lt;/a&gt; +
&lt;a href=&quot;https://fisherman.github.io&quot;&gt;Fisherman&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Simple&lt;/em&gt; Note Taking: &lt;a href=&quot;http://brettterpstra.com/projects/nvalt/&quot;&gt;&lt;strong&gt;nvalt&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&quot;https://culturedcode.com/things/&quot;&gt;&lt;strong&gt;Things&lt;/strong&gt;&lt;/a&gt;, Notes.app, &lt;a href=&quot;https://evernote.com&quot;&gt;Evernote&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Use native apps by default, they are better for your time. Native apps will usually conform to the &lt;a href=&quot;https://developer.apple.com/design/human-interface-guidelines/macos/overview/themes/&quot;&gt;Human Interface
Guidelines&lt;/a&gt;, which means logical shortcuts and great accessibility support. This is good because tools like
&lt;a href=&quot;https://shortcatapp.com&quot;&gt;Shortcat&lt;/a&gt; rely on that.&lt;/p&gt;

&lt;p&gt;Electron-y apps made the most sense when there is a big
&lt;a href=&quot;https://unix.stackexchange.com/questions/137820/whats-the-difference-of-the-userland-vs-the-kernel&quot;&gt;user-land&lt;/a&gt;
customization scene. So, basically if there&#39;s a community around extending the app (&lt;a href=&quot;https://hyper.is&quot;&gt;Hyper&lt;/a&gt; is a
reasonable example, &lt;a href=&quot;https://code.visualstudio.com&quot;&gt;Visual Studio Code&lt;/a&gt; and &lt;a href=&quot;https://atom.io&quot;&gt;Atom&lt;/a&gt; are the best
example) then Electron apps make sense.&lt;/p&gt;

&lt;p&gt;Some highlights for non-native apps are &lt;a href=&quot;https://mailplaneapp.com&quot;&gt;Mailplane&lt;/a&gt; and
&lt;a href=&quot;https://code.visualstudio.com&quot;&gt;Visual Studio Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Every second you&#39;re at a computer you should be feeling like it&#39;s 1-2-3 hotkeys away from whatever you want to do
next. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your terminal should be a &lt;a href=&quot;https://www.youtube.com/watch?v=ETskRNFeuGM&quot;&gt;single keypress away&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/orta/keyboard_shortcuts#using-a-mac&quot;&gt;Learn the keys for OS X&lt;/a&gt; so you can jump/delete words&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=4CRbJwOctMo&quot;&gt;Resize/move windows with modal commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.neat.io/bee/&quot;&gt;Making a new Jira ticket with a hotkey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/images/context-switching/sketch.mov&quot;&gt;Open any recent file per-app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://krausefx.com/blog/use-custom-shortcuts-for-every-application&quot;&gt;Use a shortcut for every Mac app you use regularly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;App-wise there&#39;s always more all of us can do, but constant improvement is key to getting there.&lt;/p&gt;

&lt;p&gt;I think it&#39;s worth stressing here that I believe in paying for my tools. I want to support independent devs, and my
time is worth orders of magnitude more than the cost of entry for this software. There may be similar versions of
what I noted above for free, they could be open source too - but I&#39;d rather have more people working on our tools
full-time than people doing it in their spare-time.&lt;/p&gt;

&lt;a name=&quot;Terminal.Context.Switching&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Terminal Context Switching&lt;/h2&gt;

&lt;p&gt;macOS&#39;s UNIX underpinnings mean that a lot of common GUI activities have a CLI counter-part. To handle regular
context switching in the terminal you&#39;ll need to customise the shell to give you information as you arrive in a new
context. Things that I find useful in a shell are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What folder am I in?&lt;/li&gt;
&lt;li&gt;Is it a git repo?&lt;/li&gt;
&lt;li&gt;What branch am I on, or are there existing changes?&lt;/li&gt;
&lt;li&gt;Did the last command fail?&lt;/li&gt;
&lt;li&gt;Sometimes, what version of node/ruby is setup for this project?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think it&#39;s also really useful to be able to jump between many development folders, you can use
&lt;a href=&quot;https://github.com/rupa/z&quot;&gt;&lt;strong&gt;z&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/wting/autojump&quot;&gt;j&lt;/a&gt; or
&lt;a href=&quot;https://github.com/iridakos/goto&quot;&gt;goto&lt;/a&gt; for this. Or set up some custom
&lt;a href=&quot;https://shapeshed.com/unix-alias/&quot;&gt;aliases&lt;/a&gt; for the most common folders.&lt;/p&gt;

&lt;p&gt;As you&#39;ll be spending a good chunk of time, it&#39;s worth feeling comfortable that you know a few of the flags for
&lt;code&gt;cd&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;rm&lt;/code&gt;, &lt;code&gt;cat&lt;/code&gt;, &lt;code&gt;touch&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt;. Ideally, you have tab completion set up, and
&lt;a href=&quot;https://stackoverflow.com/questions/6205157/iterm-2-how-to-set-keyboard-shortcuts-to-jump-to-beginning-end-of-line#10485061&quot;&gt;natural keybindings&lt;/a&gt;
set up in your terminal input.&lt;/p&gt;

&lt;a name=&quot;Regular.Re-tooling&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Regular Re-tooling&lt;/h2&gt;

&lt;p&gt;Take the time every few years to re-think your previous decisions, I try to start from scratch every 2-3 years, I&#39;m
writing this on a MacBook that&#39;s a week old and I&#39;ve still not installed something from all of the above categories.
It&#39;s a good time to re-evaluate your software priorities as your personal/professional aims/responsibilities change.&lt;/p&gt;

&lt;p&gt;A pattern I aim to strive for with tools is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start with overkill to learn what you need.&lt;/li&gt;
&lt;li&gt;Migrate to smaller and simpler once you know what you want.&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Small.and.Often&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Small and Often&lt;/h2&gt;

&lt;p&gt;It&#39;s not a very traditional way to work as a programmer, but it fits my personality type and can really rack up the
commits and contributions across the board. Being able to quickly jump contexts makes a lot more sense in the node
ecosystem - where the boundaries between projects can be as small as per-function.&lt;/p&gt;

&lt;p&gt;Working this way can make it really hard to monitor what you&#39;ve done on a regular basis, a technique I&#39;ve used to
stay on top of is &lt;a href=&quot;https://github.com/kamranahmedse/git-standup&quot;&gt;git-standup&lt;/a&gt; and a dev folder structure that corresponds to &lt;a href=&quot;https://twitter.com/orta/status/1028764128310185984&quot;&gt;areas of work&lt;/a&gt;. For
example, here&#39;s what a week roughly looks like on a slow week for Danger/Peril for me:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;~/dev/projects/danger
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;❯ git standup -m &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt; -d 7
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;/Users/orta/dev/projects/danger/hazmat/peril
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;c1d6893 - Update danger &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; days ago&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;Orta Therox&amp;gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;/Users/orta/dev/projects/danger/danger-js
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;a90d74c - Version bump, and peril fix &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; days ago&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;Orta Therox&amp;gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;f4836a1 - Version bump &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; days ago&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;Orta Therox&amp;gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;fbbcc1c - Adds a create/update label &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; to the github utils func &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; days ago&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;Orta Therox&amp;gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;702e51d - More dep updates &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt; days ago&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;Orta Therox&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Working this way requires trust from others that you&#39;re doing things that are valuable, which can be tricky when
your responses to &quot;what did you get up to yesterday&quot; end up being a bit ephemeral. Tools like &lt;code&gt;git-standup&lt;/code&gt; help on
the code front, and &lt;a href=&quot;https://www.rescuetime.com&quot;&gt;RescueTime&lt;/a&gt; can help you understand how much time you&#39;ve spent in greenhouse.&lt;/p&gt;

&lt;p&gt;It&#39;s your time, you should use it fastly.&lt;/p&gt;

&lt;p&gt;Do you have any useful ideas for speeding up context switching? I&#39;m open to improvements.&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2018/08/10/On-Context-Switching/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2018/08/10/On-Context-Switching/</guid>
        
        
        <category>concepts</category>
        
        <category>danger</category>
        
        <category>shortcuts</category>
        
        <category>tooling</category>
        
      </item>
    
      <item>
        <title>The Relay Network Deep Dive</title>
        <description>&lt;blockquote&gt;&lt;p&gt;Hey all, we have another guest post, this one comes from &lt;a href=&quot;https://github.com/sibelius&quot;&gt;Sibelius Seraphini&lt;/a&gt; - a very active contributor to
Relay and it&#39;s eco-system. When we spotted he had wrote an amazing article on how the networking aspects of Relay
comes together, we wanted to expand his reach and inform more people on how Relay comes together.&lt;/p&gt;

&lt;p&gt;-- Orta&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Data fetching is a hard problem for apps. You need to ask yourself a lot of questions: How do you ask for data from
a server? How do you handle authentication? When is the right time to request data? How can you ensure you have all
the necessary data to render your views? How can you make sure you&#39;re not over-fetching? Can you do lazy loading?
When should you trigger lazy loading of data? What about to pre-fetching data?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/relay/&quot;&gt;Relay&lt;/a&gt; is a framework for building data-driven applications which handles data fetching for you. For an
introduction to Relay, read &lt;a href=&quot;https://facebook.github.io/relay/&quot;&gt;their docs&lt;/a&gt;, and also check out my Relay talk at &lt;a href=&quot;https://speakerdeck.com/sibelius/reactconfbr-is-relay-modern-the-future&quot;&gt;React Conf BR&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;You don’t deep dive if you don’t know how to swim&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;TL.DR.Relay.Modern.Network&quot;&gt;&lt;/a&gt;
&lt;h2&gt;TL;DR Relay Modern Network&lt;/h2&gt;

&lt;p&gt;Relay will aggregate the data requirements (fragments) for your components, then create a request to fulfill it. The
API to do this is via the &lt;a href=&quot;https://facebook.github.io/relay/docs/en/relay-environment.html&quot;&gt;Relay Environment&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The Relay &quot;Environment&quot; bundles together the configuration, cache storage, and network-handling that Relay needs
in order to operate.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This post focuses on the &quot;network-handling&quot; part, the &lt;a href=&quot;https://facebook.github.io/relay/docs/en/network-layer.html&quot;&gt;Network Layer&lt;/a&gt;. The network layer&#39;s responsibility
is to make a request to a server (or a local graphql) and return the response data to Relay. Your implementation
should conform to either &lt;a href=&quot;https://github.com/facebook/relay/blob/v1.6.0/packages/relay-runtime/network/RelayNetworkTypes.js#L79-L90&quot;&gt;FetchFunction&lt;/a&gt; for a Promise-like API, or &lt;a href=&quot;https://github.com/facebook/relay/blob/v1.6.0/packages/relay-runtime/network/RelayNetworkTypes.js#L92-L107&quot;&gt;SubscribeFunction&lt;/a&gt; for an
Observable-like API.&lt;/p&gt;

&lt;p&gt;This article will provide 5 implementations of a Relay Network Interface, each of one providing more capabilities
than the other one, eventually enabling GraphQL Live Queries and Deferrable Queries.&lt;/p&gt;

&lt;p&gt;You can see the code for these 5 network layers on GitHub here, open source under MIT license:
&lt;a href=&quot;https://github.com/sibelius/relay-modern-network-deep-dive&quot;&gt;https://github.com/sibelius/relay-modern-network-deep-dive&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Simplest.Network.Layer&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Simplest Network Layer&lt;/h3&gt;

&lt;p&gt;The simplest network layer would; get the request, send it to a GraphQL server to resolve and return the data to
Relay environment.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;31&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;32&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;33&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;34&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;35&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;36&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;37&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;38&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;39&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RequestNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;cacheConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CacheConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;uploadables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UploadableMap&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;c1&quot;&gt;// Most GraphQL APIs expect a POST with a JSON&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;c1&quot;&gt;// string containing the query and associated variables&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// GraphQL text from input&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;Content-type&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;authorization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchWithRetries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GRAPHQL_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;fetchTimeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;retryDelays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;c1&quot;&gt;// Mutations should throw when they have errors, making it easier&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;c1&quot;&gt;// for client code to react&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isMutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;c1&quot;&gt;// We return the GraphQL response to update the Relay Environment&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;c1&quot;&gt;// which updates internal store where relay keeps its data&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;a name=&quot;Network.that.Handle.Uploadables&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Network that Handle Uploadables&lt;/h3&gt;

&lt;p&gt;The GraphQL spec does not handle form data, and so if you need to send along files to upload to your server with a
mutation, you&#39;ll want to use the uploadables API in Relay when you commit the mutation.&lt;/p&gt;

&lt;p&gt;Adding uploadables in a mutation will inevitably get passed to your network interface, where you&#39;ll need to change
your request body to use FormData instead of the JSON string above:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getRequestBodyWithUploadables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uploadables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FormData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;variables&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uploadables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uploadables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uploadables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;a name=&quot;Network.that.Caches.Requests&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Network that Caches Requests&lt;/h3&gt;

&lt;p&gt;This builds on top of the other 2 implementations, we use
&lt;a href=&quot;https://github.com/facebook/relay/blob/v1.6.0/packages/relay-runtime/network/RelayQueryResponseCache.js#L24-L29&quot;&gt;RelayQueryResponseCache&lt;/a&gt;
to query GraphQL requests based on query and variables.&lt;/p&gt;

&lt;p&gt;Every time a mutation happens, we should invalidate our cache as we are not sure how a change can affect all cached
query responses.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;31&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;32&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Create our own in-memory cache&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;relayResponseCache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RelayQueryResponseCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oneMinute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cacheHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RequestNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;cacheConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CacheConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;uploadables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UploadableMap&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queryID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;c1&quot;&gt;// If it&amp;#39;s a mutation, clear all cache, then call the implementation above&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isMutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;relayResponseCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cacheConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uploadables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;c1&quot;&gt;// Try grab the request from the cache first&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fromCache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;relayResponseCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queryID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;c1&quot;&gt;// Did it hit? Or did we suppress the cache for this request&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fromCache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forceFetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cacheConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fromCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;c1&quot;&gt;// Make the request, and cache it if we get a response&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fromServer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cacheConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uploadables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;relayResponseCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queryID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fromServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fromServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;a name=&quot;Network.using.Observable&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Network using Observable&lt;/h3&gt;

&lt;p&gt;Relay provides a limited implementation of the upcoming &lt;a href=&quot;https://github.com/tc39/proposal-observable&quot;&gt;ESObservables&lt;/a&gt; spec. I recommend reading &lt;a href=&quot;https://kriskowal.gitbooks.io/gtor/content/&quot;&gt;A General
Theory of Reactivity&lt;/a&gt; to understand why Observables are a great solution instead of promises in some
situations. Notably; a promise is one value in a time space, an observable is a stream of values in a time space.&lt;/p&gt;

&lt;!-- [TODO: Why Sink and not the Relay Observable? Observable is exported but has one more function (complete)] --&gt;


&lt;p&gt;To work with this API, we&#39;re going to use a private interface for the observable object called Sink:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;cm&quot;&gt; * A Sink is an object of methods provided by Observable during construction.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;cm&quot;&gt; * The methods are to be called to trigger each event. It also contains a closed&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;cm&quot;&gt; * field to see if the resulting subscription has closed.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isUncaughtThrownError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Which is the shape of the Observable object we pass back to Relay:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;31&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;32&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;33&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;34&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;35&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;36&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;37&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;38&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;39&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;40&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;41&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;42&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;43&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;44&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;45&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;46&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;47&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;48&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RequestNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;cacheConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CacheConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;uploadables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UploadableMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;sink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getRequestBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uploadables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uploadables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;authorization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchWithRetries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GRAPHQL_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;fetchTimeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;retryDelays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isMutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;sink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;sink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;sink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;sink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Instead of returning a Promise that will resolve a single GraphQL response.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// We return an Observable that could fulfill many responses before it finishes.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;executeFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RequestNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;cacheConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CacheConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;uploadables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UploadableMap&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sink&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;fetchFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cacheConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uploadables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This is an implementation you would need when working with &lt;a href=&quot;https://github.com/facebook/relay/issues/2174&quot;&gt;GraphQL Live Queries&lt;/a&gt; (based on polling), as you
are going to resolve the same query more than once.&lt;/p&gt;

&lt;a name=&quot;Deferrable.Queries.Network&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Deferrable Queries Network&lt;/h3&gt;

&lt;p&gt;A common case for deferrable queries is to lazy load fragments. This lets you get request content above the page
fold first, and then request additional data after. A good example is loading a Post&#39;s content first and then
subsequently loading all comments of this post after the post has finished.&lt;/p&gt;

&lt;p&gt;Without deferrable queries you could simulate this using the &lt;a href=&quot;https://facebook.github.io/relay/docs/en/graphql-in-relay.html#directives&quot;&gt;@include&lt;/a&gt; directive in your Relay fragment
and a &lt;a href=&quot;https://facebook.github.io/relay/docs/en/refetch-container.html&quot;&gt;refetch container&lt;/a&gt;. When the component mounts the refetch container changes the variable used on the
&lt;code&gt;@include&lt;/code&gt; to true and it will request the rest of the data.&lt;/p&gt;

&lt;p&gt;The problem with above approach is that you need to wait for the component to mount before you can start the next
request. This becomes a bigger problem as React does more work asynchronously.&lt;/p&gt;

&lt;!-- TODO: There are no docs for relay deferrable --&gt;


&lt;p&gt;An ideal deferrable query will start as soon as the previous query has finished, rather than depending on your React
components render cycles. Relay provides a &lt;a href=&quot;https://github.com/facebook/relay/issues/2194#issuecomment-383466255&quot;&gt;directive&lt;/a&gt; for this: &lt;code&gt;@relay(deferrable: true)&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PostFragment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createFragmentContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graphql&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;fragment&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post_post&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;commentsCount&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CommentsList_post&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;relay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deferrable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;In the fragment above, Relay will first get the &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;commentsCount&lt;/code&gt; from the Post, then afterwards Relay
will get the data for &lt;code&gt;CommentsList_post&lt;/code&gt; fragment. Sending both through the observable.&lt;/p&gt;

&lt;p&gt;Here is the implementation of an execute function to handle a batched request:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;executeFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RequestNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;cacheConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CacheConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;uploadables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UploadableMap&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sink&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Request&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;cacheHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cacheConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uploadables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;BatchRequest&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;batchRequestQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cacheConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uploadables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This execute function now can handle 2 types of requests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a single GraphQL query &lt;code&gt;Request&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;or a &lt;code&gt;BatchRequest&lt;/code&gt; that could have be many queries with inter-related data&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So, what does the &lt;code&gt;batchRequestQuery&lt;/code&gt; function look like?&lt;/p&gt;

&lt;!-- TODO: Annotate ths code, I&#39;m not 100% what it&#39;s doing myself --&gt;




&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;31&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;32&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;33&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;34&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;35&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;36&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;37&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;38&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;39&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;40&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;41&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;42&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;43&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;44&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;45&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Get variables from the results that have already been sent&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getDeferrableVariables&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argumentDependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argumentDependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argumentDependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromRequestName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromRequestPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;c1&quot;&gt;// TODO - handle ifList, ifNull&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;c1&quot;&gt;// See: https://github.com/facebook/relay/issues/2194&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variable&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Execute each of the requests, and call `sink.next()` as soon as it has the GraphQL&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;/// server response data.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// It will only close the Observable stream when all requests has been fulfilled.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;batchRequestQuery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RequestNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;cacheConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CacheConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;uploadables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UploadableMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;sink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ExecutePayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getDeferrableVariables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cacheHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cacheConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uploadables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;sink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;a name=&quot;Relay.Modern.is.very.flexible&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Relay Modern is very flexible&lt;/h2&gt;

&lt;p&gt;Depending on your application needs, you can scale from a simpler Promise-based API for your custom network layer to
one that uses Observables to always resolves from cache data first and then resolves from the server.&lt;/p&gt;

&lt;p&gt;Here are some production examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/artsy/emission/blob/master/src/lib/relay/fetchQuery.ts&quot;&gt;Artsy Emission&lt;/a&gt;: Uses the Promise API, caches the results locally, and shares logic with native code in an
iOS app so that queries can be pre-cached before the JavaScript runtime has started.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/relay-tools/react-relay-network-modern&quot;&gt;ReactRelayNetworkModern&lt;/a&gt;: A network layer that uses the middleware pattern to separate responsibilities like
retrying, logging, caching and auth.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/relay/issues/2174#issuecomment-375274003&quot;&gt;timobetina&#39;s example&lt;/a&gt;: The simplest Observable network layer you can start with.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;!-- TODO: More, @sibelius do you have some good examples? --&gt;


&lt;a name=&quot;More.Resources&quot;&gt;&lt;/a&gt;
&lt;h2&gt;More Resources&lt;/h2&gt;

&lt;p&gt;If you want to expand your understanding of GraphQL and Relay Modern, I have two great related resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A boilerplate that uses dataloader to batch and cache requests to your database in a GraphQL API:
&lt;a href=&quot;https://github.com/entria/graphql-dataloader-boilerplate&quot;&gt;https://github.com/entria/graphql-dataloader-boilerplate&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A simple boilerplate for working with Relay Modern and React Navigation:
&lt;a href=&quot;https://github.com/entria/ReactNavigationRelayModern&quot;&gt;https://github.com/entria/ReactNavigationRelayModern&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you have questions about this or anything send me a DM on twitter &lt;a href=&quot;https://twitter.com/sseraphini&quot;&gt;https://twitter.com/sseraphini&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2018/07/25/Relay-Networking-Deep-Dive/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2018/07/25/Relay-Networking-Deep-Dive/</guid>
        
        
        <category>graphql</category>
        
        <category>guest</category>
        
        <category>javascript</category>
        
        <category>relay</category>
        
      </item>
    
      <item>
        <title>On the obsessive statelessness of Peril</title>
        <description>&lt;p&gt;We&#39;re at 9 months of serious usage &lt;a href=&quot;/blog/2017/09/04/Introducing-Peril/&quot;&gt;of Peril in Artsy&lt;/a&gt;. However, I&#39;ve been worried.&lt;/p&gt;

&lt;p&gt;To get you up to speed on Peril, Peril is a tool that takes GitHub webhooks, and makes it easy to build one-off
actions. It does this by having a per-account settings JSON, that connects JavaScript files to events from webhooks.
So, for example, you can write a rule which runs when closing an issue in GitHub that looks for associated Jira
tickets and resolves them. Peril provides no implicit actions like that, it instead offers a JavaScript runtime
environment optimised to this domain so you can make actions to fit your needs. Like a collection of single-file
&lt;a href=&quot;https://probot.github.io&quot;&gt;probots&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Three months ago I started building out a &quot;true&quot; staging environment for Peril, one that allows any user or org on
GitHub to click a button and have Peril running on their account. Pulling this off has two real interesting
problems. Problem number one, security. Problem number two, my wallet.&lt;/p&gt;

&lt;p&gt;Both of these issues stem from one simple problem: I need to run other people&#39;s code on my machines and I think they
should be able to store data. Which to be quite frank, is horrifying for a side-project. So, this post explores one
of main aspects which I&#39;ve architected Peril to make this problem tractable. Avoiding storing state in the form of
data.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Evaluation.Context&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Evaluation Context&lt;/h2&gt;

&lt;p&gt;Let&#39;s start with grounding how Peril works. The GitHub term for when someone adds Peril to their account is that it
creates an &quot;Installation&quot; of the
&lt;a href=&quot;https://blog.github.com/2016-09-14-a-whole-new-github-universe-announcing-new-tools-forums-and-features/#integrate-seamlessly-with-github&quot;&gt;GitHub App&lt;/a&gt;.
When a webhook from GitHub is sent to Peril, Peril grabs the installation metadata (env vars, settings repo
addresses, cached config etc) out of a mongo database (yeah, I know, &lt;a href=&quot;https://www.infoworld.com/article/2990184/database/nosql-simply-isnt-hip-anymore.html&quot;&gt;how early-2010s&lt;/a&gt;) and pulls out a
set of rules. These rules are a map of Webhook events and actions to files. For example:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;json&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;rules&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;issues.opened&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;artsy/peril-settings@danger/new-rfc.ts&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;issue_comment&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;artsy/peril-settings@org/markAsMergeOnGreen.ts&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;pull_request.closed&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;artsy/peril-settings@org/closed-prs.ts&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This &lt;a href=&quot;https://github.com/danger/peril/blob/93439da3a088e9a7824192e24d33295ced017239/docs/settings_repo_info.md&quot;&gt;custom JSON DSL&lt;/a&gt; maps opening an &lt;code&gt;issue&lt;/code&gt; on GitHub to the evaluation of
&lt;a href=&quot;https://github.com/artsy/peril-settings/blob/6ec744e552df0828b3de2c5bc72e97accc6f562f/danger/new-rfc.ts&quot;&gt;&lt;code&gt;artsy/peril-settings@danger/new-rfc.ts&lt;/code&gt;&lt;/a&gt;. Peril runs the code which is declared as the &lt;code&gt;default export&lt;/code&gt; with
the JSON contents of the webhook. Then the file can execute with the DSL provided in both &lt;a href=&quot;http://danger.systems/js/&quot;&gt;danger-js&lt;/a&gt; and
&lt;a href=&quot;http://danger.systems/js/reference.html#PerilDSL&quot;&gt;peril&lt;/a&gt;&#39;s extensions. Peril&#39;s runtime is a reasonably normal nodejs environment, so it supports working with
&lt;code&gt;node_modules&lt;/code&gt; to get stuff done. Here&#39;s what &lt;a href=&quot;https://github.com/artsy/peril-settings/blob/6ec744e552df0828b3de2c5bc72e97accc6f562f/danger/new-rfc.ts&quot;&gt;&lt;code&gt;artsy/peril-settings@danger/new-rfc.ts&lt;/code&gt;&lt;/a&gt; looks like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;danger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;peril&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Issues&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;github-webhook-event-types&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;issues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Issues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;issue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;issues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;issue&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;slackify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;unfurl_links&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;attachments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;pretext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;good&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;issue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;title_link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;issue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;author_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;issue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;author_icon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;issue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;avatar_url&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;issue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;RFC:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;issue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;[RFC]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Triggering slack notifications&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;peril&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;runTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;slack-dev-channel&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;in 5 minutes&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;slackify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;🎉: A new RFC has been published.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;peril&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;runTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;slack-dev-channel&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;in 3 days&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;slackify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;🕰: A new RFC was published 3 days ago.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;peril&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;runTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;slack-dev-channel&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;in 7 days&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;slackify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;🕰: A new RFC is ready to be resolved.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Triggered slack notifications&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Implementation-wise, there is a single Peril API which recieves webhooks from GitHub. This triggers a &quot;Runner&quot; which
is a hosted docker container (think, like, serverless) which hosts the runtime. The runner will then run the
Dangerfile, triggering things like comments on PRs or any other interesting side-effect.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/peril-state/peril-stack.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;This is where things get tricky, I first explored running code inside a tightened &lt;a href=&quot;https://github.com/patriksimek/vm2&quot;&gt;virtual machine for node&lt;/a&gt;
but eventually found enough holes that it was definitely not going to work against malicious user-code in the same
process as Peril. I lucked out to a potential answer to this when building out documentation for &lt;a href=&quot;http://danger.systems/js/&quot;&gt;danger-js&lt;/a&gt;,
which could &lt;a href=&quot;https://celebrateurbanbirds.org/learn/gardening/providing-water-for-birds/&quot;&gt;feed many birds with one bowl&lt;/a&gt;. I could separate out the execution context (think: the runtime
DSL, the webhook JSON, and a bunch of installation specific config) as JSON and then pass that servers/processes
then turn that back into a useful runtime again in a separate client which runs the Dangerfile (the name for a
&lt;code&gt;js&lt;/code&gt;/&lt;code&gt;ts&lt;/code&gt; file running in the Peril JavaScript Environment. )&lt;/p&gt;

&lt;p&gt;This idea was so compelling that I first used it to create a version of Danger that runs
&lt;a href=&quot;https://github.com/danger/danger-swift&quot;&gt;native to swift&lt;/a&gt; to figure out the kinks of what actually needs to be
transmitted. For Peril, this meant I could explore having the evaluation of user-code inside a completely different
server. I initially explored &lt;a href=&quot;https://github.com/danger/peril/issues/159&quot;&gt;using AWS Lambda&lt;/a&gt; to run user-code, it&#39;s cheap, fast and mature. However, it&#39;s
possible for lambda instances to communicate with each other, as each run is not &lt;a href=&quot;https://aws.amazon.com/blogs/compute/container-reuse-in-lambda/&quot;&gt;a fresh process&lt;/a&gt;.
Making it not a secure platform for un-trusted code.&lt;/p&gt;

&lt;p&gt;Not deterred, I explored the world of docker hosting as a service - first exploring running my own cluster &lt;a href=&quot;https://aws.amazon.com/ecs/&quot;&gt;on AWS
ECS&lt;/a&gt; and then settling &lt;a href=&quot;https://hyper.sh&quot;&gt;on Hyper&lt;/a&gt; which offered sandboxed runs that booted in a few seconds. This is
where my first real dive into obsessive statelessness comes in. The docker container, and the hyper environment
contains no config by default. There is no Peril information available inside that runtime environment.&lt;/p&gt;

&lt;p&gt;The information about a Peril run comes exclusively from Peril. In my head, I call this dependency injection for the
runtime environment. You can get a sense for what the full JSON looks like in this
&lt;a href=&quot;https://github.com/danger/peril/blob/master/source/github/events/handlers/_tests/fixtures/PerilRunnerEventBootStrapExample.json&quot;&gt;fixtured file generated by tests&lt;/a&gt;.
It contains everything from (temporary) GitHub access tokens (only for your installation), to environment variables
for your run and the webhook JSON. The runtime environment only knows that information for the duration of the
process then all access tokens expires after 30 seconds of it starting regardless.&lt;/p&gt;

&lt;a name=&quot;User.Sessions.are.ephemeral&quot;&gt;&lt;/a&gt;
&lt;h2&gt;User Sessions are ephemeral&lt;/h2&gt;

&lt;p&gt;With the runtime security figured out, and reasonably stable, I could start thinking about how people can understand
what&#39;s happening on their installations inside peril.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/peril-state/peril-dashboard.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;I know, a beauty right? Taking ideas from Ashkan&#39;s &lt;a href=&quot;https://artsy.github.io/blog/2016/10/26/jwt-artsy-journey/&quot;&gt;post on JWT&#39;s&lt;/a&gt; I explored using JWTs to fix a few user-y,
database-y related problems.&lt;/p&gt;

&lt;p&gt;A JWT is a string made of three components, a header which says how it is signed, a base64 chunk of JSON data and a
signature verifying the data. You can always read the data inside a JWT, but you need to know the public key used to
sign the token to verify that it&#39;s not been tampered with or created from another source.&lt;/p&gt;

&lt;p&gt;This brings us to my first problem when building out multi-account Peril: User accounts. For Peril the root element
of the domain model is a GitHub Installation. A first-glance perspective on building a web service like this would
have me creating a user model which can keep track of permission to installations and unique user settings. With
&lt;a href=&quot;https://www.wired.co.uk/article/what-is-gdpr-uk-eu-legislation-compliance-summary-fines-2018&quot;&gt;GDPR so freshly baked&lt;/a&gt; I really didn&#39;t see any actual value in keeping this kind of data. Instead I added
enough metadata to a JWT to replace a user model completely.&lt;/p&gt;

&lt;p&gt;I opted to rely on GitHub&#39;s Oauth API to verify what orgs a user has access to. This means GitHub hosts both the
user model, and the permission relationships. This is always set up outside of Peril, and so there&#39;s no need for
duplication of the objects and connections inside this service.&lt;/p&gt;

&lt;a name=&quot;Here.s.an.example.JWT&quot;&gt;&lt;/a&gt;
&lt;h4&gt;Here&#39;s an example JWT&lt;/h4&gt;

&lt;script src=&quot;https://gist.github.com/orta/0265c143e2c4f473d4dff5cc6980d1a4.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;You could throw it into &lt;a href=&quot;https://jwt.io&quot;&gt;jwt.io&lt;/a&gt; to look at what&#39;s inside it, but I&#39;ll do that for you:&lt;/p&gt;

&lt;a name=&quot;When.decrypted&quot;&gt;&lt;/a&gt;
&lt;h4&gt;When decrypted&lt;/h4&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;json&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;iat&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1529198097&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;iss&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;321&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Orta&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;avatar_url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://avatars2.githubusercontent.com/u/49038?v=4&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;exp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1529201697&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;So far, I think that&#39;s enough information for the dashboard. You can let people know what account they&#39;re logged
into, and a show an avatar in a UI. The JWT is generated when you log in to Peril via GitHub OAuth, and Peril looks
up what installations you have access to via the GitHub API. The connected installations IDs are stamped into the
JWT in the &lt;code&gt;iss&lt;/code&gt; section. This JWT is stored in the user&#39;s browser via cookies, and the server never stores it.&lt;/p&gt;

&lt;p&gt;In every API call from the front-end, the server validates that the JWT was signed by Peril, and has not expired. If
it&#39;s OK - the server trusts the data inside the JWT and you have access to administrate the installations. No stored
sessions, no stored users.&lt;/p&gt;

&lt;p&gt;There&#39;s downsides to using a JWT like this. For example, what happens if the user is removed from the org? Until
that JWT has expired (1 month), the user will continue have access to the installation. This is a trade-off which
I&#39;m OK to take right now. I think &lt;a href=&quot;http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/&quot;&gt;this post&lt;/a&gt; covers a lot of the downsides of this stateless JWT
technique well. In the future, as Peril has access to org members being added or removed, I can build a way to
expire the token at runtime.&lt;/p&gt;

&lt;a name=&quot;Temporary.Tokens&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Temporary Tokens&lt;/h2&gt;

&lt;p&gt;The user/authentication JWT is not the only JWT in play in Peril.&lt;/p&gt;

&lt;p&gt;I needed the ability for the JavaScript Runtime to send messages back to the Peril server. Peril re-uses JWTs for
creating a short-lived (2 min) token. This token only has access to a single installation and is given a
list of mutations it has whitelisted access to in the GraphQL API. This token is a part of the data injected in at
the start of the process. The Peril JavaScript DSL uses this token under the hood when you run particular functions.
This approach, the above post argues, is a perfect use-case for JWTs.&lt;/p&gt;

&lt;a name=&quot;Temporary.Webhooks&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Temporary Webhooks&lt;/h2&gt;

&lt;p&gt;With an admin user interface set up, you can now get a good overview of what your installation looks like in
Peril.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/peril-state/admin.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;This is a good start, but it&#39;s a static representation of a live system. In order to do any development of your
Dangerfiles in Peril, you would need to keep triggering the same event inside the GitHub and seeing how Peril
evaluates your code. Even with the rich type definitions, you&#39;re unlikely to get it right first time.&lt;/p&gt;

&lt;p&gt;And here&#39;s where I made a compromise or two, in favour of a good abstraction. Ash recommended that perhaps storing
webhooks from GitHub and making it feasible to re-send them in Peril would make a great development environment. I
couldn&#39;t think of a way to do that statelessly, so I opted to time-box them. Now you can trigger a 5 minute window
on an installation where any event sent to Peril will be stored in mongo for a week. After that they&#39;re gone.&lt;/p&gt;

&lt;p&gt;This is a great trade-off on data storage vs value of a feature. It&#39;s been the best idea so far on how to handle
building a development mode into Peril, so I wouldn&#39;t want to compromise the feature in favour of something that
won&#39;t store any data.&lt;/p&gt;

&lt;a name=&quot;Real-time.logging&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Real-time logging&lt;/h2&gt;

&lt;p&gt;On the flip side, I spent a long time thinking about how I can get logs from a Peril run to a user without having to
store those.&lt;/p&gt;

&lt;p&gt;I came up with what feels like such an obvious answer in retrospect. When you open up the admin dashboard, it
connects to Peril via a websocket. This websocket is used to send real-time updates about when an event is
triggering a Dangerfile evaluation and its changing status. When the evaluation is finished, then the logs are
collected and sent through the websocket to any users connected to the associated installation. The feature is
particularly elegant because storing the logs for every Dangerfile run on something like S3 will not scale with my
wallet. Plus, I don&#39;t want to have access to your logs ideally.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/peril-state/websocket.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;Again, an interesting trade-off. You can only get logs when you&#39;re looking for them, as opposed to when a problem
may actually have occurred. There&#39;s things I can do to work around this if and when it becomes a pressing need, for
example keeping an installation&#39;s logs around for a day in Peril. Alternatives to this could be that Peril allows
installations to define a webhook to receive the logs, or for Peril to pass them directly to a installation&#39;s
&lt;a href=&quot;https://papertrailapp.com&quot;&gt;Papertrail&lt;/a&gt; (or other hosted log services).&lt;/p&gt;

&lt;p&gt;A lot of the obsession comes from a reasonable enough desire to ship something that people can trust, that could
start off small and hard enough that it doesn&#39;t consume all my spare time with support and fixing fires. With a lot
of these ideas in tow, I&#39;ve been able to feel pretty confident in letting others access staging environments and use
my hosted version of Peril. Which means I can move on to the next items in my TODO list, making the dashboard make
sense and to start thinking about what the public facing product pages look like for Peril.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2018/06/18/On-Obsessive-Statelessness/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2018/06/18/On-Obsessive-Statelessness/</guid>
        
        
        <category>danger</category>
        
        <category>peril</category>
        
        <category>state</category>
        
      </item>
    
      <item>
        <title>Managing Secrets in a React Native App</title>
        <description>&lt;!--
Iɴᴛʀᴏᴅᴜᴄᴛɪᴏɴ
--&gt;


&lt;p&gt;Hi! I&#39;m Erik, a software engineer on the Purchase team. One of the most visible payoffs from Artsy&#39;s investments in React Native &lt;a href=&quot;https://artsy.github.io/search/?q=react+native&quot;&gt;over the past two years&lt;/a&gt; has been the opening up of our mobile codebase to contributors like myself coming primarily from web stacks. It&#39;s nice to be able to build mobile interfaces with the same declarative API used by so many of our web projects, but sometimes we still need to bridge the divide to our Objective-C and Swift ecosystem. One such case: replacing the app secrets typically loaded from a deploy environment or web developer&#39;s &lt;a href=&quot;https://www.npmjs.com/package/dotenv&quot;&gt;dotenv&lt;/a&gt; file.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;!--
Mᴀɪɴ Bᴏᴅʏ
--&gt;


&lt;p&gt;&lt;a href=&quot;https://github.com/artsy/emission&quot;&gt;Emission&lt;/a&gt; is Artsy&#39;s React Native component library. It contains its own native app in the &lt;code&gt;/Example&lt;/code&gt; folder, which uses &lt;a href=&quot;https://artsy.github.io/blog/2015/01/21/cocoapods-keys-and-CI/&quot;&gt;cocoapods-keys&lt;/a&gt; to store secrets while still letting us code in the open. In order to expose these keys to our React Native components, however, we must do a fair bit of setup. Here&#39;s a straightforward how-to that also makes a quick tour through the iOS ecosystem for web developers looking at the React Native JavaScript runtime today.&lt;/p&gt;

&lt;p&gt;Links to examples below come from &lt;a href=&quot;https://github.com/artsy/emission/pull/1086/commits/4a2a3e9260e97d791536cf38376a06b0ad0946a8&quot;&gt;this commit&lt;/a&gt; which adds a key for the Stripe API to Emission. When we are finished, a client app (&lt;code&gt;/Example&lt;/code&gt;, &lt;a href=&quot;https://github.com/artsy/eigen&quot;&gt;Eigen&lt;/a&gt;, etc.) will be able to initialize Emission with this secret, which will in turn make it available to React Native components.&lt;/p&gt;

&lt;a name=&quot;Steps&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Steps&lt;/h2&gt;

&lt;a name=&quot;L1..Add.the.key.to.the.app.s.Podfile.&quot;&gt;&lt;/a&gt;
&lt;h4&gt;1. Add the key to the app&#39;s Podfile.&lt;/h4&gt;

&lt;p&gt;This is the extent of &lt;code&gt;cocoapods-keys&lt;/code&gt; official &lt;a href=&quot;https://github.com/orta/cocoapods-keys#usage&quot;&gt;setup&lt;/a&gt;, and after this you &lt;strong&gt;could&lt;/strong&gt; set the key via &lt;code&gt;pod keys set &amp;lt;NAME&amp;gt;&lt;/code&gt; or &lt;code&gt;pod install&lt;/code&gt;... but we have more to do.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/artsy/emission/blob/4a2a3e9260e97d791536cf38376a06b0ad0946a8/Example/Podfile#L63&quot;&gt;/Example/Podfile&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;diff&#39;&gt;&lt;span class=&#39;line&#39;&gt;plugin &amp;#39;cocoapods-keys&amp;#39;, {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  :target =&amp;gt; &amp;#39;Emission&amp;#39;,
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  :keys =&amp;gt; [
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &amp;#39;ArtsyAPIClientSecret&amp;#39;,
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &amp;#39;ArtsyAPIClientKey&amp;#39;,
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+    &amp;#39;StripePublishableKey&amp;#39;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  ]
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;hr /&gt;

&lt;a name=&quot;L2..Configure.the.library.to.consume.our.new.key&quot;&gt;&lt;/a&gt;
&lt;h4&gt;2. Configure the library to consume our new key&lt;/h4&gt;

&lt;p&gt;We&#39;ll need to update the &lt;code&gt;initWithUserId...&lt;/code&gt; function — one &lt;strong&gt;fun&lt;/strong&gt; part of adjusting to Objective-C is that rather than named functions, we just refer to them by their entire signatures — to expose the new key as a property and add it to &lt;code&gt;constantsToExport&lt;/code&gt; (&lt;a href=&quot;https://facebook.github.io/react-native/docs/native-modules-ios.html#exporting-constants&quot;&gt;docs&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Note that this is happening in our &lt;em&gt;Emission Pod&lt;/em&gt;; The pod now expects that key to be available in our &lt;em&gt;consuming&lt;/em&gt; Example app as defined above.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/artsy/emission/blob/4a2a3e9260e97d791536cf38376a06b0ad0946a8/Pod/Classes/Core/AREmission.h#L17-L34&quot;&gt;/Pod/Classes/Core/AREmission.h&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;diff&#39;&gt;&lt;span class=&#39;line&#39;&gt;// ENV Variables
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt; #import &amp;lt;React/RCTBridgeModule.h&amp;gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt; @interface AREmissionConfiguration : NSObject &amp;lt;RCTBridgeModule&amp;gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ @property (nonatomic, copy, readonly, nullable) NSString *stripePublishableKey;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt; - (instancetype)initWithUserID:(NSString *)userID
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;           authenticationToken:(NSString *)token
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                     sentryDSN:(nullable NSString *)sentryDSN
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+         stripePublishableKey:(NSString *)stripePublishableKey&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;              googleMapsAPIKey:(nullable NSString *)googleAPIKey
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                    gravityURL:(NSString *)gravity
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                metaphysicsURL:(NSString *)metaphysics
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                     userAgent:(NSString *)userAgent;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;AREmission&lt;/code&gt;&#39;s implementation (.m) needs to be configured to take this new key- It will be exported to our React Native components as &lt;code&gt;Emission&lt;/code&gt;. We make our initializer match the signature defined in the header (.h) file, and add an instance &lt;code&gt;_stripePublishableKey&lt;/code&gt; to match the &lt;code&gt;@property&lt;/code&gt; declaration.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/artsy/emission/blob/4a2a3e9260e97d791536cf38376a06b0ad0946a8/Pod/Classes/Core/AREmission.m#L24-L60&quot;&gt;/Pod/Classes/Core/AREmission.m&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;diff&#39;&gt;&lt;span class=&#39;line&#39;&gt; @implementation AREmissionConfiguration
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt; RCT_EXPORT_MODULE(Emission);
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt; # ...
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt; - (NSDictionary *)constantsToExport
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt; {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;   return @{
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+    @&amp;quot;stripePublishableKey&amp;quot;: self.stripePublishableKey ?: @&amp;quot;&amp;quot;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;     # ...lots more
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;   };
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt; }
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt; - (instancetype)initWithUserID:(NSString *)userID
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            authenticationToken:(NSString *)token
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                      sentryDSN:(NSString *)sentryDSN
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+          stripePublishableKey:(NSString *)stripePublishableKey&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;               googleMapsAPIKey:(NSString *)googleAPIKey
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                     gravityURL:(NSString *)gravity
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                 metaphysicsURL:(NSString *)metaphysics
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                      userAgent:(nonnull NSString *)userAgent
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt; {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;     self = [super init];
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;     _userID = [userID copy];
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+    _stripePublishableKey = [stripePublishableKey copy];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;     # ... More copies...
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;     return self;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt; }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Why is &lt;code&gt;copy&lt;/code&gt; needed at all? See &lt;a href=&quot;https://stackoverflow.com/questions/387959/nsstring-property-copy-or-retain/388002#388002&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;a name=&quot;L3..Configure.the.example.app.to.expose.the.new.key.to.our.library&quot;&gt;&lt;/a&gt;
&lt;h4&gt;3. Configure the example app to expose the new key to our library&lt;/h4&gt;

&lt;p&gt;After making sure we have imported the keys from &lt;code&gt;cocoapods-keys&lt;/code&gt; we update Emission&#39;s setup to use the new initializer signature we defined above.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/artsy/emission/blob/4a2a3e9260e97d791536cf38376a06b0ad0946a8/Example/Emission/AppDelegate.m#L109&quot;&gt;Example/Emission/AppDelegate.m&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;diff&#39;&gt;&lt;span class=&#39;line&#39;&gt;#import &amp;lt;Keys/EmissionKeys.h&amp;gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  - (void)setupEmissionWithUserID:(NSString *)userID accessToken:(NSString *)accessToken keychainService:(NSString *)service;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    # ...
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;     AREmissionConfiguration *config = [[AREmissionConfiguration alloc]
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      initWithUserID:userID
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      authenticationToken:accessToken
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      sentryDSN:nil
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+     stripePublishableKey:keys.stripePublishableKey&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      googleMapsAPIKey:nil
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      gravityURL:setup.gravityURL
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      metaphysicsURL:setup.metaphysicsURL
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      userAgent:@&amp;quot;Emission Example&amp;quot;];
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    # ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;hr /&gt;

&lt;a name=&quot;L4..Use.that.configured.key.in.a.React.Native.component.&quot;&gt;&lt;/a&gt;
&lt;h4&gt;4. Use that configured key in a React Native component.&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Emission&lt;/code&gt; is now exposed along with its configured keys via React Native&#39;s &lt;a href=&quot;https://facebook.github.io/react-native/docs/native-modules-ios.html&quot;&gt;NativeModules&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/artsy/emission/blob/4a2a3e9260e97d791536cf38376a06b0ad0946a8/src/lib/components/bidding/screens/confirmfirsttimebid.tsx#l31&quot;&gt;src/lib/Components/Bidding/Screens/ConfirmFirstTimeBid.tsx&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NativeModules&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;react-native&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Emission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NativeModules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Emission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;stripe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;publishableKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Emission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stripePublishableKey&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;




&lt;!--
Cᴏɴᴄʟᴜsɪᴏɴ
--&gt;


&lt;p&gt;That&#39;s it! Compared to a familiar dotenv file, &lt;strong&gt;it&lt;/strong&gt; certainly means a bit more ceremony here, but we are working through React Native code, its containing Pod &lt;em&gt;and&lt;/em&gt; a consuming app. The process is more complicated, but it&#39;s also a nice overview of some fundamentals of Objective-C, iOS development and bridging the gap between react and mobile native code.&lt;/p&gt;
</description>
        <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2018/06/15/cocoapods-keys-react-native/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2018/06/15/cocoapods-keys-react-native/</guid>
        
        
        <category>emission</category>
        
        <category>ios</category>
        
        <category>javascript</category>
        
        <category>react</category>
        
        <category>reactnative</category>
        
        <category>technology</category>
        
      </item>
    
      <item>
        <title>JavaScriptures 5 - Tooling</title>
        <description>&lt;p&gt;The sixth, and last in our JavaScriptures series on the Artsy &lt;a href=&quot;http://artsy.github.io/blog/2017/02/05/Front-end-JavaScript-at-Artsy-2017/&quot;&gt;omakase&lt;/a&gt;. This talk covers a lot of the
tooling basics for setting up a web JavaScript project. In this talk &lt;a href=&quot;https://github.com/damassi&quot;&gt;Chris&lt;/a&gt; covers the how to use Webpack
and Babel in a fresh application.&lt;/p&gt;

&lt;!-- more --&gt;




&lt;center&gt;
&lt;iframe width=&#39;100%&#39; height=&#39;400&#39; src=&#39;https://www.youtube.com/embed/NhYot0NC6q8&#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;




&lt;p style=&#39;text-align:right;&#39;&gt;&lt;a href=&quot;https://speakerdeck.com/artsyopensource/javascriptures-5-babel-and-webpack?slide=1&quot;&gt;
Slides on Speakerdeck
&lt;/a&gt;&lt;/p&gt;



</description>
        <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2018/06/15/JavaScriptures-5-Babel-Webpack/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2018/06/15/JavaScriptures-5-Babel-Webpack/</guid>
        
        
        <category>event</category>
        
        <category>react</category>
        
        <category>relay</category>
        
      </item>
    
      <item>
        <title>JavaScriptures 4.2 - Local State</title>
        <description>&lt;p&gt;The fifth in our JavaScriptures series on the Artsy &lt;a href=&quot;http://artsy.github.io/blog/2017/02/05/Front-end-JavaScript-at-Artsy-2017/&quot;&gt;omakase&lt;/a&gt;. This talk is the second part on state
management inside JavaScript projects. In this talk &lt;a href=&quot;https://github.com/damassi&quot;&gt;Chris&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/seevexes&quot;&gt;Eve&lt;/a&gt; cover the basics of how we handle
interacting with local state in our different applications.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/damassi&quot;&gt;Chris&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/seevexes&quot;&gt;Eve&lt;/a&gt; &lt;a href=&quot;https://github.com/artsy/javascriptures/tree/master/5_intro-to-state&quot;&gt;create three demos&lt;/a&gt; which cover using Reacts &lt;code&gt;setState&lt;/code&gt;, &lt;a href=&quot;https://github.com/artsy/javascriptures/blob/master/5_intro-to-state/2-redux&quot;&gt;Redux&lt;/a&gt; and
&lt;a href=&quot;https://github.com/jamiebuilds/unstated&quot;&gt;Unstated&lt;/a&gt; to make complex applications.&lt;/p&gt;

&lt;!-- more --&gt;




&lt;center&gt;
&lt;iframe width=&#39;100%&#39; height=&#39;400&#39; src=&#39;https://www.youtube.com/embed/uLeZnpvVpxA&#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;




&lt;p style=&#39;text-align:right;&#39;&gt;&lt;a href=&quot;https://speakerdeck.com/artsyopensource/javascriptures-4-dot-2-local-state?slide=1&quot;&gt;
Slides on Speakerdeck
&lt;/a&gt;&lt;/p&gt;



</description>
        <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2018/06/15/JavaScriptures-4.2-Local-State/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2018/06/15/JavaScriptures-4.2-Local-State/</guid>
        
        
        <category>babel</category>
        
        <category>event</category>
        
        <category>react</category>
        
        <category>webpack</category>
        
      </item>
    
      <item>
        <title>JavaScriptures 4.1 - Relay</title>
        <description>&lt;p&gt;The fourth in our JavaScriptures series on the Artsy &lt;a href=&quot;http://artsy.github.io/blog/2017/02/05/Front-end-JavaScript-at-Artsy-2017/&quot;&gt;omakase&lt;/a&gt;. This talk is the first part on state
management inside JavaScript projects. In this talk &lt;a href=&quot;https://twitter.com/alloy&quot;&gt;Alloy&lt;/a&gt; covers the basics of how we handle interacting with
external state with our GraphQL API &lt;a href=&quot;https://github.com/artsy/metaphysics/&quot;&gt;metaphysics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/alloy&quot;&gt;Alloy&lt;/a&gt; takes our &lt;a href=&quot;https://github.com/artsy/javascriptures/tree/master/4_intro-to-relay&quot;&gt;existing demo application&lt;/a&gt; from the previous JavaScriptures and converts it to use Relay
with all of the Artsy tooling.&lt;/p&gt;

&lt;!-- more --&gt;




&lt;center&gt;
&lt;iframe width=&#39;100%&#39; height=&#39;400&#39; src=&#39;https://www.youtube.com/embed/-Ax46yDG7oc&#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;




&lt;p style=&#39;text-align:right;&#39;&gt;&lt;a href=&quot;https://speakerdeck.com/artsyopensource/javascriptures-4-dot-1-relay?&quot;&gt;
Slides on Speakerdeck
&lt;/a&gt;&lt;/p&gt;



</description>
        <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2018/06/13/JavaScriptures-4.1-Relay/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2018/06/13/JavaScriptures-4.1-Relay/</guid>
        
        
        <category>event</category>
        
        <category>react</category>
        
        <category>relay</category>
        
      </item>
    
      <item>
        <title>Announcing: Artsy x React Native</title>
        <description>&lt;p&gt;React Native has a lot of buzz around it. It is some serious and cool tech, yet can feel like a big departure from
your native iOS codebase. At Artsy, we like it. It has been the right choice for us. We&#39;ve &lt;a href=&quot;http://artsy.github.io/search/?q=react+native&quot;&gt;documented&lt;/a&gt; &lt;a href=&quot;http://artsy.github.io/series/react-native-at-artsy/&quot;&gt;our&lt;/a&gt;
&lt;a href=&quot;http://artsy.github.io/blog/2016/08/15/React-Native-at-Artsy/&quot;&gt;journey&lt;/a&gt; and &lt;a href=&quot;http://artsy.github.io/blog/2018/03/17/two-years-of-react-native/&quot;&gt;reasoning&lt;/a&gt; quite extensively, but naturally, developers around the world are still wondering
whether the trade-offs make sense to &lt;em&gt;their&lt;/em&gt; team, and &lt;em&gt;their&lt;/em&gt; situation.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&quot;https://www.artsy.net/x-react-native&quot;&gt;Artsy x React-Native&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Who better to partner with than Facebook? We&#39;re bringing a day full of hands-on informative insight and practical
play. With the focus on what building world class applications with RN can be like.&lt;/p&gt;

&lt;p&gt;We&#39;ll demo, through talks and workshops, how to add React Native bit by bit to an existing codebase, set your
tooling up for success, and create solid animations.&lt;/p&gt;

&lt;p&gt;We want &lt;a href=&quot;https://www.artsy.net/x-react-native&quot;&gt;Artsy x React-Native&lt;/a&gt; to be about getting you up to speed with the framework, so you can make your
own decisions going forward.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jun 2018 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2018/06/03/Announcing-Artsy-x-React-Native/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2018/06/03/Announcing-Artsy-x-React-Native/</guid>
        
        
        <category>event</category>
        
        <category>javascript</category>
        
        <category>typescript</category>
        
      </item>
    
  </channel>
</rss>
