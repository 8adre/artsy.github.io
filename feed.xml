<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artsy Engineering</title>
    <description></description>
    <link>http://artsy.github.io/</link>
    <atom:link href="http://artsy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 16 Nov 2015 18:13:01 +0000</pubDate>
    <lastBuildDate>Mon, 16 Nov 2015 18:13:01 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Using OCR To Fix a Hilarious Big</title>
        <description>&lt;p&gt;For a little while, we would get very strange bug reports. People would complain that artist thumbnails (viewed in several different contexts across the web and our iOS apps) would not be an image of the artist&#39;s work, but rather text, which had inexplicably become an actual JPG. This wasn&#39;t just text appearing in a &lt;code&gt;div&lt;/code&gt; that should contain an &lt;code&gt;img&lt;/code&gt; or something like that, these were actual JPG&#39;s that were pictures of text.&lt;/p&gt;

&lt;p&gt;We would fix these as they came up, chalking the strangeness up to some relic of an old image processing pipeline, data being migrated, etc.&lt;/p&gt;

&lt;p&gt;However, the reports kept coming in. This blog post is about how we diagnosed this actual bug, and how we used a simple Ruby script and OCR to help us detect and fix the existing images.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;Here&#39;s an example of a bug report where the thumbnail for &lt;a href=&quot;https://www.artsy.net/artist/marina-abramovic-1&quot;&gt;Marina Abramović&lt;/a&gt; became the text of her bio.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-11-12-hilarious-bug/search.png&quot; alt=&quot;Bad Search&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here&#39;s one from our &lt;a href=&quot;https://github.com/artsy/eigen&quot;&gt;iOS app&lt;/a&gt; showing that thumbnails for related artists are set to their bios as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-11-12-hilarious-bug/eigen.png&quot; alt=&quot;Bad Related Artists&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Weird right? We eventually tracked down what was going on, and it&#39;s actually perfectly summarized in &lt;a href=&quot;https://github.com/blueimp/jQuery-File-Upload/pull/3356&quot;&gt;this issue&lt;/a&gt;. When someone copies text from Excel, it also generates an image of that cell or cells, and puts it into the clipboard. We immediately suspected something with &lt;code&gt;pasteZone&lt;/code&gt;, and the bug was easy to reproduce - have an image in your clipboard and paste anywhere on the page.&lt;/p&gt;

&lt;p&gt;We have an admin panel that allows some metadata about an artist to be edited. This includes their bio, as well as a place to upload a representative image as their &#39;cover thumbnail&#39;.&lt;/p&gt;

&lt;p&gt;As the issue describes, we had some text input fields, as well as a file upload form using &lt;a href=&quot;https://github.com/blueimp/jQuery-File-Upload&quot;&gt;Blueimp&#39;s jQuery File Upload&lt;/a&gt;. When you don&#39;t specify a &lt;code&gt;pasteZone&lt;/code&gt; it defaults to the entire document. This means that a paste event anywhere on the page will trigger that event.&lt;/p&gt;

&lt;p&gt;Our editorial team was using Microsoft Excel and Word to organize some data about the artist, including bios. When ready, a team member would copy and paste the bio into the bio input text field. This would also immediately fire the event for the image upload, which now automagically became an actual picture of the text of the bio. Our API and image processing pipeline would happily accept that, leading to the incredibly bizarre bug reports.&lt;/p&gt;

&lt;p&gt;My immediate fix was to specify and scope &lt;code&gt;pasteZone&lt;/code&gt; (and similarly, &lt;code&gt;dropZone&lt;/code&gt;) to the element the file upload widget was bound to. That would prevent the problem from happening again. Taking a quick look art some random samples of artists, it looked like potentially thousands of records might have been affected and I became interested in a programmatic way to detect these images. A manual approach would have been very cumbersome.&lt;/p&gt;

&lt;p&gt;Since the images were that of text, I decided to use OCR to remove artist thumbnails that it determined had &#39;too much text&#39;. This may have unset valid covers from artists that use lots of text in their work, such as &lt;a href=&quot;https://www.artsy.net/artist/joseph-kosuth&quot;&gt;Joseph Kosuth&lt;/a&gt;. However, this was safe to do since we have some custom logic to fall back to an image of an iconic artwork by the artist in the case of a missing thumbnail.&lt;/p&gt;

&lt;p&gt;To get OCR functionality in Ruby, I decided to use &lt;a href=&quot;https://github.com/tesseract-ocr/tesseract&quot;&gt;Tesseract&lt;/a&gt;, a great OSS library. Once I had it installed, I used a &lt;a href=&quot;https://github.com/meh/ruby-tesseract-ocr&quot;&gt;ruby wrapper&lt;/a&gt; to make using it easier.&lt;/p&gt;

&lt;p&gt;The script eventually turned into something like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;# initialize and configure Tesseract&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Tesseract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;language&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:eng&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blacklist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;# iterate over artists and pull their thumbnails&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;# given the URL to a publicly accessible image at img&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/[^a-z ]/i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Found problematic artist &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artist_doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;last&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;So all we do is find all the text in an image, and then remove any garbage characters or artifacts from the OCR analysis, and then use 30 as an arbitrary cutoff to determine if an image was problematic. If the image had more than 30 characters as detected by the OCR library, we wound up unsetting it from the artist.&lt;/p&gt;

&lt;p&gt;The additional logic to set artist covers from their iconic artworks was already in place, and I ran this script in production, identifying and unsetting over 1000 problematic thumbnails. And we haven&#39;t gotten any new reports of this bug since then :)&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Nov 2015 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/11/05/Using-OCR-To-Fix-A-Hilarious-Bug/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/11/05/Using-OCR-To-Fix-A-Hilarious-Bug/</guid>
        
        
        <category>debugging</category>
        
        <category>open source</category>
        
        <category>oss</category>
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Emergence: Code Review</title>
        <description>&lt;p&gt;We released the fourth app from the mobile team, &lt;a href=&quot;https://github.com/artsy/Emergence/&quot;&gt;Emergence&lt;/a&gt;, on day one for the new Apple TV and are currently getting around 2k downloads a day. The codebase was created by a single developer, and we didn&#39;t want to keep that knowledge siloed. So, I ran an hour long code review session last night where I talked through the codebase, explained why some decisions were made and about the differences between tvOS and UIKit.&lt;/p&gt;

&lt;p&gt;Given that I had been asked to write a blog post about tvOS in general, I felt that making the code review public for anyone to watch would be a nice alternative to the usual long-form writing on this blog.&lt;/p&gt;

&lt;p&gt;Jump &lt;a href=&quot;https://www.youtube.com/watch?v=NErVWhEzIBM&quot;&gt;to YouTube&lt;/a&gt; for the video, or click more for a smaller inline preview.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;iframe width=&#39;100%&#39; height=&#39;600&#39; src=&#39;https://www.youtube.com/embed/NErVWhEzIBM &#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Nov 2015 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/11/05/Emergence-Code-Review/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/11/05/Emergence-Code-Review/</guid>
        
        
        <category>code</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>oss</category>
        
        <category>review</category>
        
        <category>swift</category>
        
        <category>video</category>
        
      </item>
    
      <item>
        <title>Work Offline More</title>
        <description>&lt;p&gt;Want to know what I love writing in a pull request? &lt;em&gt;Sorry this is such a big PR, but I was working offline…&lt;/em&gt; It is one of &lt;a href=&quot;https://github.com/artsy/Emergence/pull/23&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;https://github.com/artsy/Emergence/pull/39&quot;&gt;key&lt;/a&gt; &lt;a href=&quot;https://github.com/artsy/Emergence/pull/45&quot;&gt;reasons&lt;/a&gt; I managed to get our &lt;a href=&quot;https://github.com/artsy/emergence&quot;&gt;Artsy Shows TV&lt;/a&gt; app released ahead of schedule with a looming unknown App Store &lt;a href=&quot;https://github.com/artsy/Emergence/issues?q=milestone%3A%221.0+Ship+to+Apple%22&quot;&gt;deadline&lt;/a&gt;. Offering more time for polish like thumbnail image &lt;a href=&quot;https://github.com/artsy/Emergence/compare/84855a310d47e071419b52b78978d14d751ec4e0...40966752111a309a20b4878e00a1c8e27cb53261&quot;&gt;pre-caching&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;During the last week before shipping I was scheduled to get a H1B VISA stamp for my passport, which means a trip to London. London is basically a &lt;strong&gt;million&lt;/strong&gt; miles away from where I occasionally live in Huddersfield. So I opted for a coach. On the 5 and a half hours of travel, I had gone from behind schedule to feature complete prototype. On the way back, I had started to remove the word prototype from what we were looking at.&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;always&lt;/em&gt; optimise to work offline on every iOS project. Here&#39;s some tips on how we do it in all our apps.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;h3&gt;Easiest way&lt;/h3&gt;

&lt;p&gt;Eigen, our biggest app, has a complicated relationship with our API. There are too many networking calls to effectively stub for development in the app, this I know because I wrote &lt;a href=&quot;https://github.com/artsy/eigen/pull/575&quot;&gt;the PR&lt;/a&gt; forcing us to stub all networking in tests.&lt;/p&gt;

&lt;p&gt;I found a great workaround though, there is a tool for storing an entire networking session, so that you can use it again and get determinate results called &lt;a href=&quot;http://cocoapods.org/pods/VCRURLConnection&quot;&gt;VCRURLConnection&lt;/a&gt;. This is normally done in tests but it can easily be used in your app code instead.&lt;/p&gt;

&lt;p&gt;We already had an admin panel within our app. So I added the ability to start &lt;a href=&quot;https://github.com/artsy/eigen/blob/06aeb6f7ce4b95155729aa37c36fddc54767931f/Artsy/View_Controllers/Admin/ARAdminSettingsViewController.m#L171-L206&quot;&gt;saving the networking session&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-09-30-offline/eigen-admin.png&quot; alt=&quot;Eigen Admin Panel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you hit save, every networking request is saved into memory, and then once you hit save, this is stored in a JSON file that the app will use that for all networking data on the next few runs.&lt;/p&gt;

&lt;h3&gt;The &quot;requires some work, but is worth it&quot; way&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Moya/Moya&quot;&gt;Moya&lt;/a&gt; is a networking client we created where stubbed data is a first-class citizen. This means converting your apps networking from &quot;uses the API&quot; to &quot;uses the &lt;a href=&quot;https://github.com/artsy/eidolon/blob/master/Kiosk/App/StubResponses.m&quot;&gt;locally stored stubbed examples&lt;/a&gt;.&quot; Is a quick change in your apps code.&lt;/p&gt;

&lt;h3&gt;The &quot;let&#39;s just get it done&quot; way&lt;/h3&gt;

&lt;p&gt;When I was working offline on the coach, I took a technique we use for testing and applied it to our application code. We use an abstraction called network models that separate what you want vs the API to get it. In the case of Emergence I created &lt;a href=&quot;https://github.com/artsy/Emergence/blob/18e501a4d6925ea5fb0f35174a6c0c3c96f70533/Emergence/Contexts/Presenting%20a%20Show/ShowNetworkingModel.swift&quot;&gt;requests&lt;/a&gt; that would pass along stubbed models instead of doing the real work.&lt;/p&gt;

&lt;p&gt;It&#39;s nothing fancy, but I didn&#39;t need too much to work with at this point. It&#39;s enough to start building, which is what counts, you can go and test properly once you&#39;re online.&lt;/p&gt;

&lt;h3&gt;Motivation&lt;/h3&gt;

&lt;p&gt;I don&#39;t use 3G on my phone, I rely entirely on Wi-Fi for internet access, and don&#39;t particularly have a problem with the lack of connection. The outside world is distracting enough. Being able to work offline means I can shut the world out for a while and just focus on getting something done.&lt;/p&gt;

&lt;p&gt;It&#39;s possible to not just have less distractions, but to be able to work faster. &lt;code&gt;VCRURLConnection&lt;/code&gt; and using stubs are faster than normal networking, so you can iterate faster on your app too.&lt;/p&gt;

&lt;p&gt;True to my word, I&#39;m writing this blog post offline, I have 7 hours and 23 more minutes before the plane lands in JFK.&lt;/p&gt;

&lt;p&gt;I&#39;m going to use the rest of this time to try ship something hard.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;edit&amp;gt;&lt;/code&gt;I built this: &lt;a href=&quot;https://github.com/artsy/energy/pull/86&quot;&gt;artsy/energy/pull/86&lt;/a&gt;. &lt;code&gt;&amp;lt;/edit&amp;gt;&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/09/30/Work-Offline-More/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/09/30/Work-Offline-More/</guid>
        
        
        <category>flow</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>process</category>
        
      </item>
    
      <item>
        <title>Splitting up a large test suite</title>
        <description>&lt;p&gt;A while back, we wrote about &lt;a href=&quot;/blog/2012/10/09/how-to-run-rspec-test-suites-in-parallel-with-jenkins-ci-build-flow/&quot;&gt;How to Run RSpec Test Suites in Parallel with Jenkins CI Build Flow&lt;/a&gt;. A version of that still handles our largest test suite, but over time the initial division of specs became unbalanced. We ended up with some tasks that took twice as long as others. Even worse, in an attempt to rebalance task times, we ended up with awkward file patterns like &lt;code&gt;&#39;spec/api/**/[a-m]*_spec.rb&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To keep our parallel spec tasks approximately equal in size and to support arbitrary concurrency, we&#39;ve added a new &lt;code&gt;spec:sliced&lt;/code&gt; task:&lt;/p&gt;

&lt;!-- more --&gt;




&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:spec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:set_up_spec_files&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;spec_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;spec/**/*_spec.rb&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;vi&quot;&gt;@spec_file_digests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spec_files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Zlib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crc32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RakeTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sliced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:concurrency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:set_up_spec_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;concurrency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:concurrency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@spec_file_digests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;concurrency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;As you can see, the &lt;code&gt;set_up_spec_files&lt;/code&gt; helper task builds a hash of spec file paths and corresponding checksums. When we invoke the &lt;code&gt;sliced&lt;/code&gt; task with &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;concurrency&lt;/code&gt; values (e.g., &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt;), only the spec files with checksums equal to &lt;code&gt;0&lt;/code&gt; when mod-ed by &lt;code&gt;5&lt;/code&gt; are run. Thus, the Jenkins build flow would look like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;java&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;parallel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;master-ci-task&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;tasks:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;spec:sliced[0,5]&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;master-ci-task&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;tasks:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;spec:sliced[1,5]&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;master-ci-task&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;tasks:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;spec:sliced[2,5]&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;master-ci-task&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;tasks:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;spec:sliced[3,5]&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;master-ci-task&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;tasks:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;spec:sliced[4,5]&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;master-ci-succeeded&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Now, spec times &lt;em&gt;might&lt;/em&gt; continue to be unbalanced despite files being split up approximately evenly. (For a more thorough approach based on recording spec times, see &lt;a href=&quot;https://github.com/ArturT/knapsack&quot;&gt;knapsack&lt;/a&gt;.) However, this little bit of randomness was a big improvement over our previous approach, and promises to scale in a uniform manner.&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Sep 2015 22:13:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/09/24/splitting-up-a-large-test-suite/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/09/24/splitting-up-a-large-test-suite/</guid>
        
        
        <category>continuous integration</category>
        
        <category>rspec</category>
        
        <category>ruby</category>
        
        <category>testing</category>
        
      </item>
    
      <item>
        <title>MVVM in Swift</title>
        <description>&lt;p&gt;Model View ViewModel has become the default way I write apps on iOS – it makes writing iOS apps a joy. I&#39;ve written &lt;a href=&quot;https://www.objc.io/issues/13-architecture/mvvm/&quot;&gt;about it&lt;/a&gt; &lt;a href=&quot;http://www.teehanlax.com/blog/model-view-viewmodel-for-ios/&quot;&gt;again&lt;/a&gt; and &lt;a href=&quot;https://speakerdeck.com/ashfurrow/reactivecocoa-at-mdevcon-2014&quot;&gt;again&lt;/a&gt; and &lt;a href=&quot;https://leanpub.com/iosfrp&quot;&gt;oh my&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But last Autumn, as our team was all-hands-on-deck to wrap up the &lt;a href=&quot;http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&quot;&gt;auctions kiosk app&lt;/a&gt;, we chose not to use MVVM. Why not?&lt;/p&gt;

&lt;p&gt;We were building a &lt;em&gt;new app&lt;/em&gt; in a &lt;em&gt;new language&lt;/em&gt; using a &lt;em&gt;non-Swift framework&lt;/em&gt; for functional reactive programming. I was also teaching colleagues what they needed to know about ReactiveCocoa to help write the app. We used the MVC pattern because the relative cost of MVVM was too high.&lt;/p&gt;

&lt;p&gt;&quot;... &lt;em&gt;was&lt;/em&gt; ...&quot;&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;Since then, I&#39;ve been &lt;a href=&quot;https://github.com/artsy/eidolon/issues/333&quot;&gt;pecking away&lt;/a&gt; at converting small view controllers away from MVC, to figure out what MVVM on iOS written in Swift might look like. My goal has been getting ready to cut down our behemoth main view controller and create a view model for it. Before the rewrite, it was nearly 600 lines of code and was responsible for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;networking.&lt;/li&gt;
&lt;li&gt;syncing auction lot states.&lt;/li&gt;
&lt;li&gt;user interaction.&lt;/li&gt;
&lt;li&gt;collection view layouts.&lt;/li&gt;
&lt;li&gt;image caching.&lt;/li&gt;
&lt;li&gt;background-thread data processing.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It&#39;s quite terrifying now that I think about it!&lt;/p&gt;

&lt;p&gt;Well, &lt;a href=&quot;https://github.com/artsy/eidolon/pull/503/files&quot;&gt;finally I was ready&lt;/a&gt;. The view controller is now down to 224 lines, and is responsible for only things like displaying data. Calculating &lt;em&gt;what&lt;/em&gt; to display and &lt;em&gt;when&lt;/em&gt; to display it is now contained within the view model. In true MVVM form, our view controller doesn&#39;t even have direct access to the models it displays!&lt;/p&gt;

&lt;p&gt;So what does MVVM in Swift look like? Well, our answer is just that – &lt;em&gt;our&lt;/em&gt; answer. Others exist, and they have merits and faults of their own.&lt;/p&gt;

&lt;p&gt;I&#39;m not here to preach a definitive definition of MVVM in Swift. Instead, I want to talk about some of the lessons we learnt in the process of building a solution that worked for us.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Programming boils down to getting certain bits of code to communicate with other bits in an intelligent way. Software &lt;em&gt;patterns&lt;/em&gt; are ways of constraining programmers to make it easier to program.&lt;/p&gt;

&lt;p&gt;MVVM, roughly, has the following constraints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Models don&#39;t talk to anybody (same as MVC).&lt;/li&gt;
&lt;li&gt;View models only talk to models.&lt;/li&gt;
&lt;li&gt;View controllers can&#39;t talk to models directly; they only interact with view models and views.&lt;/li&gt;
&lt;li&gt;Views only talk to the view &lt;em&gt;controllers&lt;/em&gt;, notifying them of interaction events (same as MVC).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And that&#39;s pretty much it. It&#39;s not that different from MVC – the key differences are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There&#39;s a new &quot;view model&quot; class.&lt;/li&gt;
&lt;li&gt;The view controller no longer has access to the model.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img src=&quot;/images/2015-09-24-mvvm-in-swift/mvvm.png&quot; alt=&quot;MVVM Diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Additionally, MVVM on iOS acknowledges the one-to-one relationship between views and view controllers. I tend to think of them as one entity that just happens to be split across a &lt;code&gt;.swift&lt;/code&gt; file and a Storyboard.&lt;/p&gt;

&lt;p&gt;The view model&#39;s job is to handle all presentation logic. If a model contains an &lt;code&gt;NSDate&lt;/code&gt;, the &lt;code&gt;NSDateFormatter&lt;/code&gt; to format that date would live in the view model.&lt;/p&gt;

&lt;p&gt;View models don&#39;t have &lt;em&gt;any&lt;/em&gt; access to the user interface. You should not even &lt;code&gt;import UIKit&lt;/code&gt; in a view model. Typically, a view controller observes the view model somehow to know when there&#39;s new data to display. This can be done through KVO or FRP.&lt;/p&gt;

&lt;p&gt;MVVM and MVC share a common weakness: neither defines where the network logic of an app should go. I&#39;ve put it in the view model for now, but I plan on separating it out into its own object soon. That object will be owned by the view model.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So let&#39;s talk about some specific challenges we had.&lt;/p&gt;

&lt;h2&gt;User Interface Structure&lt;/h2&gt;

&lt;p&gt;Part of our user interface consists of a segment control near the top of the screen. The currently selected segment determines the sort order of the collection view cells, as well as the collection view&#39;s layout. We had previously defined an enum to store the titles and sort order corresponding to each segmented control; the order of the enum cases implies the order of the controls in the UI.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;SwitchValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Grid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LeastBids&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MostBids&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HighestCurrentBid&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LowestCurrentBid&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Alphabetical&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;So where does this enum live in MVVM? Since the logic for sorting models, the button titles, and the order of the buttons are all pieces of presentation logic, the enum seems like it belongs in the view model.&lt;/p&gt;

&lt;p&gt;However, the decision of which layout for the collection view to use is slightly more nuanced. The layout doesn&#39;t affect what data we show the user or how they interact with it; it only affects the visuals how the information is presented. This suggests the logic for deciding layouts might belong in the view controller.&lt;/p&gt;

&lt;p&gt;My solution was to put the enum in the view model, and have the view model expose a signal defining which of the two layouts should be used. Based on the selected segment index, the view model decides which layout should be used and sends that value on a signal. The view controller is responsible for mapping that signal into a configured layout, then setting that layout on the collection view.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Respond to changes in layout, driven by switch selection.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gridSelectedSignal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gridSelected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gridSelected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListingsViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;masonryLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListingsViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGRectGetWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;switchView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGRectZero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribeNext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCollectionViewLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UICollectionViewLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;The view controller also uses this signal to define which cell reuse identifier should be used.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Map switch selection to cell reuse identifier.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;RAC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cellIdentifier&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gridSelectedSignal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gridSelected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gridSelected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MasonryCellIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TableCellIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;h2&gt;Structuring a View Model&lt;/h2&gt;

&lt;p&gt;The most common question from iOS developers about MVVM and FRP concerns how the view model exposes data to the view controller. The view controller needs to be notified about changes to the underlying model, but what mechanism to we use to do this? There are two options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use (dynamic) properties on the view model, which can be observed using KVO (or wrapped in a signal/sequence using FRP).&lt;/li&gt;
&lt;li&gt;Use signals/sequences/futures as properties on the view model, which can be consumed by their corresponding async frameworks.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The first option is appealing since it gives your view controller a choice of how to observe the properties. However, I&#39;d recommend against it; Swift doesn&#39;t have type-checking on KVO (you need to cast from &lt;code&gt;AnyObject!&lt;/code&gt; a lot).&lt;/p&gt;

&lt;p&gt;The second option is what I prefer, and it seems the most &quot;Swift&quot; way of doing things. When we do move away from RAC&#39;s Objective-C interface, the view model will replace its &lt;code&gt;RACSignal&lt;/code&gt; properties with sequences based on Swift generics, which will provide compile-time type-checking 💯&lt;/p&gt;

&lt;p&gt;Defining these signals on a view model can be tricky. Swift initializers have &lt;a href=&quot;http://ashfurrow.com/blog/swift-initializers/&quot;&gt;strict rules&lt;/a&gt; around when properties are assigned. The signals need access to the internal state of the view model, so they need to be created &lt;em&gt;after&lt;/em&gt; calling &lt;code&gt;super.init()&lt;/code&gt;. However, we can&#39;t call &lt;code&gt;super.init()&lt;/code&gt; until all our properties have been assigned to, including the signal properties.&lt;/p&gt;

&lt;p&gt;It&#39;s your standard chicken-and-the-egg problem 🐣&lt;/p&gt;

&lt;p&gt;I took the easy way out and used implicitly-unwrapped optionals, defined with &lt;code&gt;var&lt;/code&gt;, which can be assigned to &lt;em&gt;after&lt;/em&gt; the call to &lt;code&gt;super.init()&lt;/code&gt;. It&#39;s not a perfect solution. We could instead use &lt;code&gt;lazy var&lt;/code&gt; properties assigned to self-evaluating closures, or just use computed properties. I&#39;m hoping to explore other options when we move away from RAC 2&#39;s Objective-C API.&lt;/p&gt;

&lt;h2&gt;Handling User Interaction&lt;/h2&gt;

&lt;p&gt;The next problem I had was presenting details based on user interaction. Users tap a button, which is handled in the view controller, which presents the details. However, the view controller should not have access to the models, so how can it configure the details to present them?&lt;/p&gt;

&lt;p&gt;My solution took advantage of the interchangeability of Swift functions and closures. First I defined a closure type in the view model.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShowDetailsClosure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SaleArtwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Then I added a property to the view model and a corresponding parameter to the initializer.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListingsViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;showDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShowDetailsClosure&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;         &lt;span class=&quot;nl&quot;&gt;showDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShowDetailsClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;         &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Next I need to actually call the closure. I defined a function on the view model that the view controller can invoke, passing in the context that&#39;s necessary to decide which model&#39;s details should be presented. This context is just an index path.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showDetailsForSaleArtworkAtIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;showDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sortedSaleArtworks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Nice! So now when the user selects a cell, we can call this function on the view model with the index path that the user selected. The view model decides which model to use, and calls the closure.&lt;/p&gt;

&lt;p&gt;The final piece of the puzzle is being clever about creating the view model. We need to pass a closure to its initializer, one that shows the model&#39;s details. I defined a function on the view controller that matched the &lt;code&gt;ShowDetailsClosure&lt;/code&gt; signature.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showDetailsForSaleArtwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;saleArtwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SaleArtwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;performSegueWithIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SegueIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ShowSaleArtworkDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saleArtwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;And then use lazy loading (discussed below) to call the view model&#39;s initializer. I pass in a reference to the above function as the closure parameter.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListingsViewModelType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListingsViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;showDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showDetailsForSaleArtwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;So let&#39;s review what happens when a user makes a selection.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/2015-09-24-mvvm-in-swift/selection.png&#39;&gt;&lt;img src=&quot;/images/2015-09-24-mvvm-in-swift/selection.png&quot; title=&quot;Selection diagram&quot; &gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;Here are the steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User taps a cell.&lt;/li&gt;
&lt;li&gt;A callback on the view controller is invoked with the selected index path.&lt;/li&gt;
&lt;li&gt;The view controller tells the view model which index path was selected.&lt;/li&gt;
&lt;li&gt;The view model looks up the corresponding model.&lt;/li&gt;
&lt;li&gt;The view model invokes the &lt;code&gt;showDetails&lt;/code&gt; closure given to it when it was initialized.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;showDetails&lt;/code&gt; &quot;closure&quot; performs a segue with the model.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;It&#39;s not an ideal solution since it still exposes the model to the view controller (even under very strict conditions), but it&#39;s a reasonable compromise. As we continue to use more view models, I&#39;m curious to see how this solution scales.&lt;/p&gt;

&lt;h2&gt;Testing&lt;/h2&gt;

&lt;p&gt;Earlier I mentioned the lazy closure property in the view controller. This is a trick that lets the view controller customize the view model by using references to &lt;code&gt;self&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListingsViewModelType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListingsViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nl&quot;&gt;selectedIndexSignal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;switchView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selectedIndexSignal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nl&quot;&gt;showDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showDetailsForSaleArtwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nl&quot;&gt;presentModal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;presentModalForSaleArtwork&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;viewModel&lt;/code&gt; property is first accessed by the view controller in &lt;code&gt;viewDidLoad()&lt;/code&gt;, which means that we can replace the property by a test double any time before that.&lt;/p&gt;

&lt;p&gt;The view controller is tested using &lt;a href=&quot;https://github.com/facebook/ios-snapshot-test-case&quot;&gt;snapshots&lt;/a&gt; to verify the user interface hasn&#39;t been inadvertently changed. Testing is straightforward:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a view controller to test.&lt;/li&gt;
&lt;li&gt;Create a stubbed view model, customized for each test.&lt;/li&gt;
&lt;li&gt;Give the view controller the stubbed view model before &lt;code&gt;viewDidLoad()&lt;/code&gt; is called.&lt;/li&gt;
&lt;li&gt;Verify the view controller renders correctly.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;While writing tests, I found it difficult to subclass the existing view model (for stubbing purposes). Since the view model&#39;s initializer has side-effects (starting recurring network requests 😬), I can&#39;t call &lt;code&gt;super.init()&lt;/code&gt;. Instead, I made a &lt;code&gt;ListingsViewModelType&lt;/code&gt; protocol. The view controller only interacts with the view model through this protocol – it has no reference to the class itself. Now creating a stubbed view model is as easy as conforming to a protocol.&lt;/p&gt;

&lt;p&gt;Seems more &quot;Swift&quot;, too.&lt;/p&gt;

&lt;p&gt;Now that the view model and view controller are separate objects, we no longer have to test presentation logic in the view controller at all. The view model now takes care of network requests, data processing, etc – this is now all tested &lt;em&gt;independently&lt;/em&gt; of the user interface 🎉&lt;/p&gt;

&lt;p&gt;In my opinion, the key benefits of MVVM boil down to the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Separating the view model from the user interface makes it easier to test presentation logic.&lt;/li&gt;
&lt;li&gt;Separating the view controller from the presentation logic makes it easier to test the user interface.&lt;/li&gt;
&lt;/ol&gt;


&lt;hr /&gt;

&lt;p&gt;This is only a description of what we&#39;ve come up with so far. As our community and the Swift language continue to evolve, hand-in-hand, we&#39;ll re-evaluate our answer to the question of what MVVM with Swift looks like. For now, I&#39;m quite pleased with the step we&#39;ve taken, and I&#39;m looking forward to continuing to explore programming patterns in Swift.&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Sep 2015 16:13:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/09/24/mvvm-in-swift/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/09/24/mvvm-in-swift/</guid>
        
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>mvvm</category>
        
        <category>open source</category>
        
        <category>swift</category>
        
      </item>
    
      <item>
        <title>Cocoa Architecture: Dependencies</title>
        <description>&lt;p&gt;As a part of going through the design patterns we&#39;ve found in the creation of the Artsy iOS apps, I&#39;d like to talk a bit about some of
the way in which we decide our apps dependencies.&lt;/p&gt;

&lt;p&gt;It&#39;s easy to think of your dependencies as being things in your Podfile, but it&#39;s a bit more nuanced than that. The tools you use for development, deployment, testing and external integrations are all things in which you depend on others to make your app work. I&#39;d like to look into the hows and the whys of the decisions we&#39;ve made.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;hr /&gt;

&lt;p&gt;The mobile team of is a collection of smart people; we aim to work with people who have different opinions, and different backgrounds. This means we often don&#39;t agree on project direction but moving forwards is about finding compromise. Every technical project within Artsy has a de-facto leader, and they get to make the call at the end of the day.&lt;/p&gt;

&lt;p&gt;This means that dependencies and priorities change per-project, because a different developer has more influence on the end result. There isn&#39;t a singular &quot;Artsy Mobile&quot; way.&lt;/p&gt;

&lt;h3&gt;Implicit Dependencies&lt;/h3&gt;

&lt;p&gt;Thinking on the largest macro scope, I think these are our biggest dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Xcode&lt;/li&gt;
&lt;li&gt;iOS SDK&lt;/li&gt;
&lt;li&gt;Swift&lt;/li&gt;
&lt;li&gt;CocoaPods&lt;/li&gt;
&lt;li&gt;Individual Pods&lt;/li&gt;
&lt;li&gt;Fastlane&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Some of these are mandatory, mainly Xcode and the iOS SDK. Talk to someone at Facebook however and they&#39;ll tell you even that can become a &lt;a href=&quot;http://facebook.github.io/react-native/&quot;&gt;much weaker dependency&lt;/a&gt; than you&#39;d think. For us though, we still create native apps that eventually get built via &lt;code&gt;xcodebuild&lt;/code&gt; either via Xcode/AppCode/Vim as a part of our individual build processes.&lt;/p&gt;

&lt;p&gt;The dependencies provided by Apple are the daily trade-off in order to build apps that are competitive. Apple ships a new SDK each year, developers need to ship new builds. If you can keep pace, then you can get you app in-front of millions of potentially paying customers.&lt;/p&gt;

&lt;h3&gt;Leveraging OSS&lt;/h3&gt;

&lt;p&gt;So, allow me to don my best flame-proof suit and answer the intent of the question that was originally asked of us? &lt;em&gt;What qualities do we look for in OSS dependencies?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This question is interesting because we&#39;re not just shipping an app in the dark, every app we have is open source and available for inspection. Our choices with OSS dependencies become our implicit public recommendations, why else would we be using them?&lt;/p&gt;

&lt;p&gt;To to give the simplest TLDR; I created the &lt;a href=&quot;https://guides.cocoapods.org/making/quality-indexes&quot;&gt;CocoaPods Quality Indexes&lt;/a&gt;. The Quality Indexes (QIs) are a series of metrics that are applied programmatically to every library which generate a single number that &lt;a href=&quot;http://cocoapods.org&quot;&gt;cocoapods.org&lt;/a&gt; uses for search ranking. These are based on conversations within Artsy, and as many contributors as I could during the course of a year. Here are a few QIs that matter a lot to me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The library is popular, this is measured in GitHub stars.&lt;/li&gt;
&lt;li&gt;Great README, has a CHANGELOG and uses internal appledoc/headerdoc.&lt;/li&gt;
&lt;li&gt;The project has test coverage.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you&#39;re interested in the reasoning behind these, I&#39;d recommend reading the &lt;a href=&quot;https://guides.cocoapods.org/making/quality-indexes&quot;&gt;full guide for the metrics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If I could determine that a project was a good dependency via code - I wouldn&#39;t be writing apps, I&#39;d be a millionaire, who has moved on to working in politics or cryptography in Denmark. So what are the key metrics that not Turing-compatible?&lt;/p&gt;

&lt;h4&gt;Can We Take Over?&lt;/h4&gt;

&lt;p&gt;We&#39;re a pretty versatile bunch of developers, even with our focus on native iOS development. Being able to understand a foreign codebase when debugging a problem, in order to &lt;a href=&quot;http://dictionary.reference.com/browse/grok&quot;&gt;grok&lt;/a&gt; if a bug lies in our code or a libraries is essential.&lt;/p&gt;

&lt;p&gt;Being blocked because you don&#39;t understand how to create an assembly trampoline for message passing on 64 bit processors sucks. Relying on someone else to provide a fix in their spare time, is a nice way to strain a relationship.&lt;/p&gt;

&lt;p&gt;There have been times when we&#39;ve taken over libraries completely, which has worked out well for everyone involved. Examples being &lt;a href=&quot;https://cocoapods.org/pods/NAMapKit&quot;&gt;NAMapKit&lt;/a&gt; and &lt;a href=&quot;https://cocoapods.org/pods/Specta&quot;&gt;Specta&lt;/a&gt;/&lt;a href=&quot;https://cocoapods.org/pods/Expecta&quot;&gt;Expecta&lt;/a&gt;. It can be a matter of providing small incremental work on the project, or just being someone with a vision &lt;a href=&quot;http://orta.io/rebase/oss-management/&quot;&gt;for the project&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Features vs Hidden Dependencies&lt;/h4&gt;

&lt;p&gt;A dependency can offer you shortcuts to features, new ways to do things or a way to interface with externalities. When you look at the README you get to see all of the best parts of a library, the reasons why it&#39;s worth trying, the easy installation instructions. You don&#39;t get to see some of uglier issues under the surface, that only become exposed once you look a bit harder.&lt;/p&gt;

&lt;p&gt;These can be subtle for example, using Fastlane introduces a lot of dependencies.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;~/dev/scratch ⏛  cat Gemfile
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;gem &lt;span class=&quot;s1&quot;&gt;&amp;#39;fastlane&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;~/dev/scratch ⏛  bundle install
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;...&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;Bundle &lt;span class=&quot;nb&quot;&gt;complete&lt;/span&gt;! &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; Gemfile dependency, &lt;span class=&quot;m&quot;&gt;73&lt;/span&gt; gems now installed.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;There&#39;s a trade-off here, Fastlane provides a great programmable API to a bunch of really annoying time-consuming tasks. There isn&#39;t a system similar to CocoaPods&#39; subspecs which lets a library consumer choose to use a subset of a dependency graph, so instead everyone gets &lt;code&gt;slack-notifier&lt;/code&gt; regardless of if you need it.&lt;/p&gt;

&lt;p&gt;ReactiveCocoa feels quite similar. In exchange for Cocoa-native approach to Functional Reactive Programming you also have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Swizzling dealloc on objects in order to do it&#39;s magic KVO-unbinding at runtime.&lt;/li&gt;
&lt;li&gt;To pretty much giving up on trying to use the stack trace for understanding flow. Instead you can use their custom dtrace instrument.&lt;/li&gt;
&lt;li&gt;Complicated pre-compiler macros that can get tricky to debug.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These trade-offs can be happily made in exchange for ReactiveCocoa&#39;s well thought out API. Functional Reactive Programming is something that the majority of us are particularly interested in. Since Swift came out, a few Swift-only FRP libraries have been released. So we&#39;ve been keeping our eyes &lt;a href=&quot;https://cocoapods.org/?q=summary%3Areactive&quot;&gt;on the alternatives&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Focus&lt;/h4&gt;

&lt;p&gt;Ideally you&#39;re bringing in a dependency for one specific task. Something like &lt;a href=&quot;https://cocoapods.org/pods/ObjectiveSugar&quot;&gt;ObjectiveSugar&lt;/a&gt; is a great example of a small focused library. I studied it&#39;s API when we first integrated it, and it&#39;s not really changed at all since. The library authors have done a great job of ensuring that Objective Sugar stays on-topic.&lt;/p&gt;

&lt;h4&gt;Community Relationships&lt;/h4&gt;

&lt;p&gt;The amount of energy you have to put into using certain dependencies, in an engaging way like we do, also means you have to interact with external people. This is often the case with OSS, so we’re used to that and quite good at it. Sometimes, however, people and their opinions don’t match, it’s a fact of life, and in these cases it can be worth choosing to not use a certain dependency.&lt;/p&gt;

&lt;p&gt;One such example has been ReactiveCocoa. While they are free to make whatever decisions they like, we feel that we’ve wasted energy on supporting their dependencies in CocoaPods that took away from our already constraining time-budget. Our interactions consume and creates energy that we don&#39;t want to be associated with. This makes us want to engage less with the community at whole, which is really not something we want. So that, combined with our opinion on the framework itself (as aforementioned) means we’re looking at alternatives.&lt;/p&gt;

&lt;p&gt;This contrasts sharply with working on Fastlane, where we&#39;re willing to take the dependency graph in part because working with &lt;a href=&quot;https://krausefx.com&quot;&gt;Felix Krause&lt;/a&gt; is such a pleasure. We&#39;ve sent PRs,  helped out on &lt;a href=&quot;https://github.com/KrauseFx/fastlane/pull/173&quot;&gt;documentation&lt;/a&gt; and provided advice on how we would/are using Fastlane. I actively feel guilty that we&#39;re still not deploying to the App Store using Fastlane because of this relationship.&lt;/p&gt;

&lt;h4&gt;Project Maturity&lt;/h4&gt;

&lt;p&gt;We got burned by working with Swift too early, but coming back at Swift 2.0 feels good. We just started introducing Swift into our Objective-C codebases, as it&#39;s looking like the tooling has matured.&lt;/p&gt;

&lt;p&gt;We spent a good chunk of time over the last 6 months discussing and testing out React-Native as an approach for building apps. It&#39;s turning into an amazing platform, but for us it&#39;s not mature enough to start building apps with it as a foundation.&lt;/p&gt;

&lt;h2&gt;Not All Dependencies are Third Party&lt;/h2&gt;

&lt;p&gt;We ship a lot of our internal code as Pods. The rubric we use for deciding on when to externalise code is &quot;would we want this in more than 2 apps&quot; at the moment. This is an easy choice for libraries as fundamental as a fonts, or colours schemes. It becomes a more nuanced choice when it comes to &lt;a href=&quot;https://github.com/ashfurrow/Forgeries&quot;&gt;a class or two&lt;/a&gt;, or &lt;a href=&quot;https://github.com/orta/ar_dispatch&quot;&gt;some functions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Creating a library that gets popular can also turn into an unexpected time-sink, we&#39;ve been supporting &lt;a href=&quot;https://cocoapods.org/pods/ARAnalytics&quot;&gt;ARAnalytics&lt;/a&gt; for 4 years now and nearly all features for the last 3 years have come from external developers. Ensuring that they don&#39;t break the build, making monthly releases and keeping documentation up to date takes time. &lt;a href=&quot;https://cocoapods.org/pods/Moya&quot;&gt;Moya&lt;/a&gt; has consumed multiple weekends in a row of our time.&lt;/p&gt;

&lt;p&gt;Ensuring that we are good stewards for the code we release as a separate consumable library is important to our team values. We&#39;ve not had to deprecate a library, though I look forwards to doing that to &lt;a href=&quot;https://cocoapods.org/pods/ORStackView&quot;&gt;ORStackView&lt;/a&gt; at some point when everyone is building for iOS9+.&lt;/p&gt;

&lt;h3&gt;Nuance&lt;/h3&gt;

&lt;p&gt;There are no simple answers to &quot;should you use a certain dependency&quot;. The CocoaPods QIs can give you a sense of what libraries are worth looking into, then you can load up a demo for the library by running &lt;code&gt;pod try [Podname]&lt;/code&gt; to dig around and get a feel for how the library works. These decisions end up being quite personal.&lt;/p&gt;

&lt;p&gt;We work with external dependencies because we enjoy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Working with other people.&lt;/li&gt;
&lt;li&gt;Making improvements for the entire community, instead of just ourselves.&lt;/li&gt;
&lt;li&gt;Not having to re-invent the wheel.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For us, it&#39;s nearly always win-win.&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Sep 2015 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/09/18/Cocoa-Architecture-Dependencies/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/09/18/Cocoa-Architecture-Dependencies/</guid>
        
        
        <category>architecture</category>
        
        <category>dependencies</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
      </item>
    
      <item>
        <title>Releasecop Tracks Stale Releases</title>
        <description>&lt;p&gt;Artsy practices a sort of &lt;a href=&quot;http://en.wikipedia.org/wiki/Continuous_delivery&quot;&gt;continuous delivery&lt;/a&gt;. We keep release cycles short and the process of reviewing, testing, and deploying our software as reliable, fast, and automated as possible. (This blog has touched on these practices &lt;a href=&quot;http://artsy.github.io/blog/categories/testing/&quot;&gt;multiple&lt;/a&gt; &lt;a href=&quot;http://artsy.github.io/blog/categories/continuous-integration&quot;&gt;times&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Usually, commits that have been reviewed and merged are immediately built and tested. Successfully built versions of the codebase are often automatically deployed to a staging environment. On an automated or frequent-but-manual basis, that version is deployed to a production environment. Thus, commits form a pipeline:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From developers&#39; working branches&lt;/li&gt;
&lt;li&gt;To the master branch&lt;/li&gt;
&lt;li&gt;Through a hopefully-successful build&lt;/li&gt;
&lt;li&gt;To a staging environment&lt;/li&gt;
&lt;li&gt;To production&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The number of apps and services we deploy has grown to &lt;em&gt;dozens&lt;/em&gt; per team, so sometimes things fall through the cracks. We&#39;ve been using &lt;a href=&quot;https://github.com/joeyAghion/releasecop&quot;&gt;Releasecop&lt;/a&gt; for the last few months to get gentle email reminders when an environment could use a deploy.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;pre&gt;&lt;code&gt;gem install releasecop
releasecop edit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This opens a &lt;em&gt;manifest&lt;/em&gt; file where you can describe the sequence of git remotes and branches that make up your own release pipeline. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &quot;projects&quot;: {
    &quot;charge&quot;: [
      { &quot;name&quot;: &quot;master&quot;, &quot;git&quot;: &quot;git@github.com:artsy/charge.git&quot; },
      { &quot;name&quot;: &quot;staging&quot;, &quot;git&quot;: &quot;git@heroku.com:charge-staging.git&quot; },
      { &quot;name&quot;: &quot;production&quot;, &quot;git&quot;: &quot;git@heroku.com:charge-production.git&quot; }
    ],
    &quot;gravity&quot;: [
      { &quot;name&quot;: &quot;master&quot;, &quot;git&quot;: &quot;git@github.com:artsy/gravity.git&quot; },
      { &quot;name&quot;: &quot;master-succeeded&quot;, &quot;git&quot;: &quot;git@github.com:artsy/gravity.git&quot;, &quot;branch&quot;: &quot;master-succeeded&quot; },
      { &quot;name&quot;: &quot;staging&quot;, &quot;git&quot;: &quot;git@github.com:artsy/gravity.git&quot;, &quot;branch&quot;: &quot;staging&quot; },
      { &quot;name&quot;: &quot;production&quot;, &quot;git&quot;: &quot;git@github.com:artsy/gravity.git&quot;, &quot;branch&quot;: &quot;production&quot; }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;charge&lt;/code&gt; app is a typical deployment to Heroku. Work progresses from the &lt;code&gt;master&lt;/code&gt; branch to a &lt;code&gt;charge-staging&lt;/code&gt; app to a &lt;code&gt;charge-production&lt;/code&gt; app. The &lt;code&gt;gravity&lt;/code&gt; app is a more complicated, non-Heroku deployment. It updates git branches to reflect what has been merged (&lt;code&gt;master&lt;/code&gt;), tested (&lt;code&gt;master-succeeded&lt;/code&gt;), deployed to staging, and deployed to production.&lt;/p&gt;

&lt;p&gt;Run the &lt;code&gt;releasecop check [app]&lt;/code&gt; command to report the status of your apps&#39; releases:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ releasecop check --all
charge...
  staging is up-to-date with master
  production is up-to-date with staging
gravity...
  master-succeeded is up-to-date with master
  staging is up-to-date with master-succeeded
  production is behind staging by:
    06ca969 2015-09-04 [config] Replace Apple Push Notification certificates that expire today. (Eloy Durán)
    171121f 2015-09-03 Admin-only API for cancelling a bid (Matthew Zikherman)
    4c5feea 2015-09-02 install mongodb client in Docker so that import rake tasks can run (Barry Hoggard)
    95347d1 2015-08-31 Update to delayed_job cookbook that works with Chef 11.10 (Joey Aghion)
2 project(s) checked. 1 environment(s) out-of-date.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A nightly &lt;a href=&quot;https://jenkins-ci.org/&quot;&gt;Jenkins&lt;/a&gt; job emails us the results, but a cron job could work equally well.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joeyAghion/releasecop&quot;&gt;Releasecop&lt;/a&gt; reminds us to deploy ready commits and close the loop on in-progress work. We hope you find it useful. (Pull requests are welcome!)&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Sep 2015 17:30:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/09/01/releasecop-tracks-stale-releases/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/09/01/releasecop-tracks-stale-releases/</guid>
        
        
        <category>continuous deployment</category>
        
        <category>continuous integration</category>
        
        <category>devops</category>
        
        <category>open source</category>
        
        <category>oss</category>
        
        <category>ruby</category>
        
        <category>testing</category>
        
        <category>tools</category>
        
      </item>
    
      <item>
        <title>Cocoa Architecture: Dropped Design Patterns</title>
        <description>&lt;p&gt;As a part of going through the design patterns we&#39;ve found in the creation of the Artsy iOS apps, I&#39;d like to talk a bit about some of the patterns that we&#39;ve had and migrated away from. This is not 100% comprehensive, as there has been a lot of time, and a lot of people involved. Instead I&#39;m going to try and give a birds eye view, and zoom in on some things that feel more important overall.&lt;/p&gt;

&lt;p&gt;It&#39;s important to preface that I don&#39;t believe in perfect code, or am I a fan of big re-writes. We can spot a bad pattern, but not do anything about it. We do have apps to ship, not a codebase to make perfect for the sake of technical purity.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;hr /&gt;

&lt;h2&gt;NSNotifications as a decoupling method&lt;/h2&gt;

&lt;p&gt;A lot of the initial codebase for Energy relied on using NSNotifications as a way of passing messages throughout the application. There were notifications for user settings changes, download status updates, anything related to authentication and the corresponding different error states and a few app features. These relied on sending global notifications with very little attempts at scoping the relationship between objects.&lt;/p&gt;

&lt;p&gt;NSNotificationCenter notifications are an implementation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;Observer Pattern&lt;/a&gt; in Cocoa. They are a beginner to intermediate programmer&#39;s design paradigm dream. It offers a way to have objects send messages to each other without having to go through any real coupling. As someone just starting with writing apps for iOS, it was an easy choice to adapt.&lt;/p&gt;

&lt;p&gt;One of the biggest downsides of using NSNotifications are that they make it easy to be lazy as a programmer. It allows you to not think carefully about the relationships between your objects and instead to pretend that they are loosely coupled, when instead they are coupled but via stringly typed notifications.&lt;/p&gt;

&lt;p&gt;Loose-coupling can have it&#39;s place but without being careful there is no scope on what could be listening to any notification. Also de-registering for interest can be a tricky thing &lt;a href=&quot;http://stackoverflow.com/questions/tagged/nsnotification&quot;&gt;to learn&lt;/a&gt; and the default memory-management behavior is about to change ( &lt;a href=&quot;https://developer.apple.com/library/prerelease/mac/releasenotes/Foundation/RN-Foundation/index.html#//apple_ref/doc/uid/TP30000742&quot;&gt;for the better&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;We still have a &lt;a href=&quot;https://github.com/artsy/energy/blob/702036664a087db218d3aece8ddddb2441f931c8/Classes/Constants/ARNotifications.h&quot;&gt;lot of notifications&lt;/a&gt; in Energy, however in Eigen and Eidolon there are next to none. We don&#39;t even have a specific file for the constants.&lt;/p&gt;

&lt;h2&gt;#define kARConstant&lt;/h2&gt;

&lt;p&gt;Not much to say here, using &lt;code&gt;#defines&lt;/code&gt; as constants was definitely &lt;a href=&quot;https://github.com/adium/adium/blob/master/Source/AdiumAccounts.m#L24-L30&quot;&gt;in favour&lt;/a&gt; when I learned Objective-C. Likely a throw back from C. Using &lt;code&gt;#defines&lt;/code&gt; as constants would not use on-device memory to store an unchanging value. This is because a &lt;code&gt;#define&lt;/code&gt; uses the pre-compiler to directly change the source code to be the value, whereas using a static constant takes up memory space on the device, which we used to &lt;em&gt;really&lt;/em&gt; care about. It&#39;s likely that a modern copy of LLVM doesn&#39;t assign on device memory unless it needs to, especially for things marked &lt;code&gt;const&lt;/code&gt;. Switching to real variables means you can inspect and use in a debugger and use can rely on the type system better.&lt;/p&gt;

&lt;p&gt;What this means in practice is what when we would have had something &lt;a href=&quot;https://github.com/artsy/eigen/blob/master/Artsy/Views/Table_View_Cells/AdminTableView/ARAnimatedTickView.m#L3&quot;&gt;like&lt;/a&gt;: &lt;code&gt;#define TICK_DIMENSION 32&lt;/code&gt; it should be &lt;a href=&quot;https://github.com/artsy/eigen/blob/master/Artsy/View_Controllers/App_Navigation/ARAppSearchViewController.m#L11&quot;&gt;migrated to&lt;/a&gt; &lt;code&gt;static const NSInteger ARTickViewDimensionSize = 20;&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Sprinkling Analytics&lt;/h2&gt;

&lt;p&gt;We took some of the ideas for &lt;a href=&quot;http://albertodebortoli.github.io/blog/2014/03/25/an-aspect-oriented-approach-programming-to-ios-analytics/&quot;&gt;Aspect oriented programming&lt;/a&gt; with &lt;a href=&quot;https://cocoapods.org/pods/ARAnalytics#user-content-aspect-oriented-dsl&quot;&gt;Analytics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Where we used to &lt;a href=&quot;https://github.com/artsy/energy/blob/master/Classes/Controllers/Popovers/Add%20to%20Album/ARAddToAlbumViewController.m#L271-L282&quot;&gt;have this&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ARAddToAlbumViewController&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tableView:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UITableView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didSelectRowAtIndexPath:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSIndexPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;albums&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;n&quot;&gt;Album&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selectedAlbum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Album&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;albums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;n&quot;&gt;ARTickedTableViewCell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARTickedTableViewCell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;cellForRowAtIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isSelected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARAnalytics&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARRemoveFromAlbumEvent&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;withProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;@{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                &lt;span class=&quot;s&quot;&gt;@&amp;quot;artworks&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artworks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                &lt;span class=&quot;s&quot;&gt;@&amp;quot;from&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARNavigationController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;l&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;We would instead build something &lt;a href=&quot;https://github.com/artsy/eigen/blob/master/Artsy/App/ARAppDelegate+Analytics.m#L69&quot;&gt;like this&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ARAppDelegate&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;(Analytics)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setupAnalytics&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;ArtsyKeys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArtsyKeys&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARAnalytics&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setupWithAnalytics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;@{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l&quot;&gt;@{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nl&quot;&gt;ARAnalyticsTrackedEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;l&quot;&gt;@[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                &lt;span class=&quot;l&quot;&gt;@{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                    &lt;span class=&quot;nl&quot;&gt;ARAnalyticsClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARAddToAlbumViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                    &lt;span class=&quot;nl&quot;&gt;ARAnalyticsDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;@[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                        &lt;span class=&quot;l&quot;&gt;@{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                            &lt;span class=&quot;nl&quot;&gt;ARAnalyticsEventName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARRemoveFromAlbumEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                            &lt;span class=&quot;nl&quot;&gt;ARAnalyticsSelectorName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSStringFromSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;didSelectRowAtIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                            &lt;span class=&quot;nl&quot;&gt;ARAnalyticsProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSDictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARAddToAlbumViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;@{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                                    &lt;span class=&quot;s&quot;&gt;@&amp;quot;artworks&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artworks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                                    &lt;span class=&quot;s&quot;&gt;@&amp;quot;from&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARNavigationController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                                &lt;span class=&quot;l&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                        &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                    &lt;span class=&quot;l&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                &lt;span class=&quot;l&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;              &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This gives us the ability to not sprinkle analytics code around the app in every file. It keeps the responsibilities of objects simpler and we&#39;ve been happy with it in Eigen. We&#39;ve not migrated it into Energy, its dependency on ReactiveCocoa brings too much additional weight. So far we&#39;ve been applying analytics inline, Energy has much less need for individual analytics throughout the application. If you want to learn more about this pattern check out &lt;a href=&quot;http://artsy.github.io/blog/2014/08/04/aspect-oriented-programming-and-aranalytics/&quot;&gt;Aspect-Oriented Programming and ARAnalytics&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Class Methods as the whole API&lt;/h2&gt;

&lt;p&gt;For a very long time, I preferred aesthetics of class based APIs. E.g. using only class methods instead instance methods. I think I still do. However, once you start adding tests to a project then they become a bit of a problem.&lt;/p&gt;

&lt;p&gt;I&#39;m a big fan of the idea of Dependency Injection within tests. This, roughly &lt;em&gt;TL:DR&#39;d&lt;/em&gt;, means passing in any additional context, instead of an object finding the context itself. A common case is a call to &lt;code&gt;NSUserDefaults&lt;/code&gt;. It&#39;s very likely &lt;em&gt;not&lt;/em&gt; the role of your class to know which &lt;code&gt;NSUserDefault&lt;/code&gt;s object you&#39;re working with, but it&#39;s likely that you&#39;re making that decision in the method by doing something like &lt;code&gt;[[NSUserDefaults standardUserDefaults] setObject:reminderID forKey:@&quot;ARReminderID&quot;];&lt;/code&gt;. Using dependency injection would be allowing that object to come from outside that method. If you&#39;re interested in a longer and better, explanation, read this great &lt;a href=&quot;https://www.objc.io/issues/15-testing/dependency-injection/&quot;&gt;objc.io&lt;/a&gt; by &lt;a href=&quot;http://qualitycoding.org/about/&quot;&gt;Jon Reid&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The problem with a class based API, is that it becomes difficult to inject that object. This doesn&#39;t flow well with writing simple, fast tests. You can use a mocking library to fake the class API, but that feels weird. Mocking should be used for things you don&#39;t control. You control the object if you&#39;re making the API. Having an instance&#39;d object means being able to provide different versions with different behaviors or values, even better if you can reduce the behavior to &lt;a href=&quot;https://github.com/artsy/eigen/blob/e19ac594bf6240d076e8092d9c56e9876c94444e/Artsy/Networking/Network_Models/ARArtistNetworkModel.h&quot;&gt;a protocol&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Objects Sneakily Networking&lt;/h2&gt;

&lt;p&gt;When you have a complicated application, there can be a lot of places you can perform networking. We&#39;ve had it in models, view controllers and views. Basically throwing the idea of purity in MVC out of the system. We started to recognise a pattern in eigen, we were not doing a good job of keeping our networking well abstracted. If you want to see the full story check out the &lt;a href=&quot;https://github.com/Moya/Moya&quot;&gt;moya/Moya README&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One attempt to at trying to fix this pattern by creating a different type of networking client I&#39;ve just referenced, &lt;a href=&quot;https://github.com/Moya/Moya&quot;&gt;Moya&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The other was to abstract any networking performed into a separate object. If you&#39;ve heard of Model-View-ViewModel (&lt;a href=&quot;http://www.teehanlax.com/blog/model-view-viewmodel-for-ios/&quot;&gt;MVVM&lt;/a&gt;) then this is a similar premise for networking instead of views. Network Models give us a way to abstract the networking into a set of behaviors. The extra abstraction means that you think &quot;I want the things related to &lt;em&gt;x&lt;/em&gt;&quot; instead of &quot;send a GET to address &lt;em&gt;x&lt;/em&gt; and turn it into &lt;em&gt;y&lt;/em&gt;.&quot;&lt;/p&gt;

&lt;p&gt;Network models also make it extremely easy to swap behavior out in tests. In eigen, we have our asynchronous networking &lt;a href=&quot;https://github.com/artsy/eigen/pull/575&quot;&gt;run synchronously in tests&lt;/a&gt; but we still use the network models to be able to provide &lt;a href=&quot;https://github.com/artsy/eigen/blob/master/Artsy_Tests/View_Controller_Tests/Artist/ARArtistViewControllerTests.m#L29-L40&quot;&gt;whatever data we want to expect&lt;/a&gt; from the server in our tests.&lt;/p&gt;

&lt;h2&gt;Subclassing more than twice&lt;/h2&gt;

&lt;p&gt;As projects evolve it can become very easy to subclass &lt;em&gt;x&lt;/em&gt; in order to provide a &quot;similar but a little bit different&quot; behavior. Perhaps you need to &lt;a href=&quot;https://github.com/artsy/eigen/blob/e19ac594bf6240d076e8092d9c56e9876c94444e/Artsy/View_Controllers/Web_Browsing/ARTopMenuInternalMobileWebViewController.m#L58&quot;&gt;override some methods&lt;/a&gt;, or add a &lt;a href=&quot;https://github.com/artsy/eigen/blob/e19ac594bf6240d076e8092d9c56e9876c94444e/Artsy/View_Controllers/Web_Browsing/AREndOfLineInternalMobileWebViewController.h#L5&quot;&gt;specific behavior&lt;/a&gt;. Like the &lt;a href=&quot;http://ezinearticles.com/?The-Boiled-Frog-Phenomenon&amp;amp;id=932310&quot;&gt;urban myth&lt;/a&gt; of a frog being slowly boiled, you end up with a difficult to understand codebase as expected behavior mutates depending on how deep the hierarchy goes.&lt;/p&gt;

&lt;p&gt;One pattern for handling this is &lt;a href=&quot;http://stackoverflow.com/questions/9710411/ios-grasping-composition&quot;&gt;class composition&lt;/a&gt;. This is the idea that instead of having one object do multiple things, you allow a collection of objects to work together. Providing more space for each object to conform to the Single Responsibility Principle (&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;SRP&lt;/a&gt;.) If you&#39;re interested in this, you may also be interested in the &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/ClassClusters/ClassClusters.html&quot;&gt;class clusters&lt;/a&gt; pattern.&lt;/p&gt;

&lt;p&gt;A good example of this comes &lt;a href=&quot;https://github.com/artsy/energy/blob/aa97d90cf37932d4c0f49ea4c4d31f7e491f16a6/Classes/Controllers/Top%20View%20Controller/ARTopViewToolbarController.m&quot;&gt;from Energy&lt;/a&gt;, our root view controller &lt;code&gt;ARTopViewController&lt;/code&gt; used to control its own toolbar items. Over 4 years this became difficult to manage, and a lot of extra code in the view controller. By abstracting out the implementation details of managing the toolbar items into it&#39;s &lt;a href=&quot;https://github.com/artsy/energy/blob/aa97d90cf37932d4c0f49ea4c4d31f7e491f16a6/Classes/Controllers/Top%20View%20Controller/ARTopViewToolbarController.m&quot;&gt;own class&lt;/a&gt; we were able to allow the &lt;code&gt;ARTopViewController&lt;/code&gt; to state what it wanted by not how it was done.&lt;/p&gt;

&lt;h2&gt;Configuration Classes over Inter-Class Communication&lt;/h2&gt;

&lt;p&gt;A one of the most important aspects of Energy is to &lt;a href=&quot;http://folio.artsy.net&quot;&gt;email artworks&lt;/a&gt;. So there is a lot of code around configuring the email you want to send, and then generating HTML from those settings. This started out pretty simple as we had very few app-wide settings. Over time, deciding what we need to show in terms of settings and how they affected the email became very complicated.&lt;/p&gt;

&lt;p&gt;The part that eventually became a strong enough code-smell to warrant a re-write was the view controller which allowed a partner to choose what information to send would pass details individually to an object that would generate the HTML. I found it difficult to write simple tests for the class&#39; behavior. Initially I would mock the email composer, then inspect the methods that were called. This felt wrong, as you shouldn&#39;t really be mocking classes you own. Given the importance of the functionality that classes provide our application, ideas on ways to improve the section of code stayed on my mind for a long time.&lt;/p&gt;

&lt;p&gt;The fix came to me during Justin Searls&#39; talk &lt;a href=&quot;https://speakerdeck.com/searls/sometimes-a-controller-is-just-a-controller&quot;&gt;Sometimes a Controller is Just a Controller&lt;/a&gt; - specifically slide &lt;a href=&quot;https://speakerdeck.com/searls/sometimes-a-controller-is-just-a-controller?slide=55&quot;&gt;55&lt;/a&gt;. Justin talks about objects that &lt;em&gt;either hold and describe a value or perform useful behavior, never both&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I took this advice and re-evaluated the relationship between settings view controller and composer object. Before the change, the settings view controller would configure the composer directly. Now, the settings view controller creates a configuration object and the composer consumes it. This made it &lt;em&gt;significantly&lt;/em&gt; easier to write tests for both objects, as they have very obvious inputs and outputs in the form of a &lt;a href=&quot;https://github.com/artsy/energy/blob/aa97d90cf37932d4c0f49ea4c4d31f7e491f16a6/Classes/Util/Emails/AREmailSettings.h&quot;&gt;AREmailSettings&lt;/a&gt;. The &lt;a href=&quot;https://github.com/artsy/energy/blob/aa97d90cf37932d4c0f49ea4c4d31f7e491f16a6/ArtsyFolio%20Tests/Util/AREmailComposerTests.m&quot;&gt;AREmailComposerTests&lt;/a&gt; in particular become much more elegant.&lt;/p&gt;

&lt;h3&gt;Direct use of Responder Chain&lt;/h3&gt;

&lt;p&gt;Before I worked at Artsy, I was a &lt;a href=&quot;http://i.imgur.com/Am9LjED.gif&quot;&gt;Mac developer&lt;/a&gt;, I&#39;ve been doing that since before iOS existed, so this influences my code style. One of the great parts of the Cocoa toolchain is the &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/event_delivery_responder_chain/event_delivery_responder_chain.html&quot;&gt;responder chain&lt;/a&gt;, a well documented way of passing methods up a known chain of objects. It solves a common problem with complicated view structures. You could have a button that is generated at runtime deep inside a view hierarchy and you would like the view controller to handle it being tapped. You could use a long chain of delegate methods, or use a &lt;a href=&quot;https://twitter.com/unimp0rtanttech/status/555828778015129600&quot;&gt;private method&lt;/a&gt; to get the reference to the view controller instance. On the Mac usage of the responder chain is a common pattern, on iOS it is used rarely.&lt;/p&gt;

&lt;p&gt;We have this problem with our Artwork view controller in Eigen. There are buttons that are many &lt;a href=&quot;https://speakerdeck.com/orta/ios-at-artsy?slide=38&quot;&gt;stack views deep&lt;/a&gt; that need to pass a message back to the view controller. When we first hit this the issue I immediately used the responder chain, you write a &lt;a href=&quot;https://github.com/artsy/eigen/blob/e19ac594bf6240d076e8092d9c56e9876c94444e/Artsy/Views/Artwork/ARArtworkActionsView.m#L85&quot;&gt;line of code&lt;/a&gt; like: &lt;code&gt;[bidButton addTarget:self action:@selector(tappedBidButton:) forControlEvents:UIControlEventTouchUpInside];&lt;/code&gt; where the &lt;code&gt;self&lt;/code&gt; is referring to the view. This would send the message &lt;code&gt;tappedBidButton:&lt;/code&gt; up the responder chain where it is reacted upon by the &lt;a href=&quot;https://github.com/artsy/eigen/blob/e19ac594bf6240d076e8092d9c56e9876c94444e/Artsy/View_Controllers/Artwork/ARArtworkViewController+ButtonActions.m#L114&quot;&gt;ARArtworkViewController&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I had to explain the premise of the responder chain to almost everyone touching this area of the code base. This is great in terms of the &lt;a href=&quot;https://xkcd.com/1053/&quot;&gt;&quot;lucky 10,000&quot;&lt;/a&gt; but  means that the pattern is unintuitive to those who have not previously heard of it. There was one more issue, the lack of coupling means that renaming selectors via refactoring can break the chain.&lt;/p&gt;

&lt;p&gt;The way that we reduced the cognitive load was via a protocol, all of the actions that the responder chain will use are mapped inside &lt;a href=&quot;https://github.com/artsy/eigen/blob/e19ac594bf6240d076e8092d9c56e9876c94444e/Artsy/Views/Artwork/ARArtworkActionsView.h#L10-L20&quot;&gt;ARArtworkActionsViewButtonDelegate&lt;/a&gt;-like protocols. It&#39;s a bit of a white-lie given that there is no direct relationship using the protocol in the app, but it makes the relationship more obvious. We use a class extension that &lt;a href=&quot;https://github.com/artsy/eigen/blob/e19ac594bf6240d076e8092d9c56e9876c94444e/Artsy/View_Controllers/Artwork/ARArtworkViewController+ButtonActions.h#L11&quot;&gt;conforms to these types of protocols&lt;/a&gt; to keep the actions all kept in one place.&lt;/p&gt;

&lt;h3&gt;Wrap-up&lt;/h3&gt;

&lt;p&gt;There are many design patterns, and they all come with trade-offs. Over time, our opinions on what is &quot;good code&quot; changes, this is great. It&#39;s important that as developers we understand that being able to change our minds is one of the most vital skills we have in our toolchain. This means being open to opinions outside of your usual sphere of influence and to maybe bring some good ideas from them. It&#39;s great to be passionate about an aspect of how we craft applications, but from my perspective, the best programmers choose pragmatism over idealism.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/09/01/Cocoa-Architecture-Dropped-Design-Patterns/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/09/01/Cocoa-Architecture-Dropped-Design-Patterns/</guid>
        
        
        <category>architecture</category>
        
        <category>eigen</category>
        
        <category>energy</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
      </item>
    
      <item>
        <title>Swift Trek 2: The Wrath of count()</title>
        <description>&lt;p&gt;On Tuesday at our mobile practice standup, I mentioned that I was in-between projects and looking for something to do. Orta suggested migrating Eidolon, the Artsy bidding kiosk app, to Swift 2.&lt;/p&gt;

&lt;p&gt;Our CI is &lt;a href=&quot;https://github.com/artsy/eidolon/pull/466&quot;&gt;broken anyway&lt;/a&gt;, so now is the perfect opportunity to make changes that would break CI. Additionally, Swift 2 seems to have more-or-less stabilized in the latest betas, so we don&#39;t expect many gotchas leading up to the GM. Finally, this is an enterprise-distributed app, so we don&#39;t have to worry about submitting to the App Store using betas of Xcode.&lt;/p&gt;

&lt;p&gt;So Swift 2 it is!&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;img src=&quot;http://media1.giphy.com/media/7PzALWNJotBxS/giphy.gif&quot; alt=&quot;When your boss tells you that you can use the new Swift version.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I didn&#39;t think it would take long, but Orta was less optimistic. I knew that we would need to start with the dependencies, which was tricky since I was updating to the latest beta (only one day old at this point). Our &lt;a href=&quot;https://github.com/artsy/eidolon/commit/b77a9c2add780a52aac2c48b9cd3a5eb257ab003#diff-4a25b996826623c4a3a4910f47f10c30R59&quot;&gt;Podfile needed some changes&lt;/a&gt;, but a lot of this was work I had done before when initially moving Eidolon to CocoaPods frameworks, then to Swift 1.2.&lt;/p&gt;

&lt;p&gt;Dependencies are weird. Different libraries take different approaches to Swift changes, so I had to evaluate each one individually. Usually it was a matter of telling CocoaPods to use the branch that the library was using for Swift 2 support. It took about an hour or two, but I got our dependencies working.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/IO1QU8E.gif&quot; alt=&quot;When pod update works.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Two of our dependencies, &lt;a href=&quot;https://github.com/Quick/Quick&quot;&gt;Quick&lt;/a&gt; and &lt;a href=&quot;https://github.com/Quick/Nimble&quot;&gt;Nimble&lt;/a&gt;, were a breeze to update – even though we were using way out-of-date versions. We&#39;re really impressed by the well thought-out foundations of their libraries.&lt;/p&gt;

&lt;p&gt;The next thing was getting &lt;em&gt;our own&lt;/em&gt; code to work. This was a lot more work than I had anticipated, since the automatic migrator in Xcode didn&#39;t work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/abykDJa.gif&quot; alt=&quot;When the Xcode migrator fails.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No problem – a lot of the time, Xcode&#39;s autosuggest worked fine, like adding labels to function calls. But it doesn&#39;t catch everything. It turns out that a few hours of manually changing &lt;code&gt;count(array)&lt;/code&gt; to &lt;code&gt;array.count&lt;/code&gt; etc was a great way to zone out and enjoy a summer afternoon.&lt;/p&gt;

&lt;p&gt;After the low-hanging fruit, it was time to move on to the more... esoteric problems. For example, Swift was getting confused by the ambiguity of the &lt;code&gt;&amp;lt;~&lt;/code&gt; we use for ReactiveCocoa 2.x bindings, vs the &lt;code&gt;&amp;lt;~&lt;/code&gt; operator ReactiveCocoa 3.x uses for bindings. Weird.&lt;/p&gt;

&lt;p&gt;I tracked down the problem to precedence. ReactiveCocoa&#39;s &lt;code&gt;&amp;lt;~&lt;/code&gt; has a &lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveCocoa/blob/5b19af9b2777462e37ead2dfea95e1fea74b7d63/ReactiveCocoa/Swift/Property.swift#L193&quot;&gt;precedence of 93&lt;/a&gt;. After I changed &lt;a href=&quot;https://github.com/ashfurrow/Swift-RAC-Macros/commit/57b041d8a99a3e2a90583709ed7ed91f8ca271b8&quot;&gt;ours to match&lt;/a&gt;, everything was fine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://media3.giphy.com/media/PrAMyghZaYjm/giphy.gif&quot; alt=&quot;When your code compiles but you don&#39;t know why.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I noticed a lot of changes surrounding the way Swift handles strings. Apple themselves &lt;a href=&quot;https://developer.apple.com/swift/blog/?id=30&quot;&gt;have discussed changes&lt;/a&gt;, which were fine. I tried to use their &lt;code&gt;.isEmpty&lt;/code&gt; property where I could, but I often had to test if a string &lt;em&gt;wasn&#39;t&lt;/em&gt; empty. &lt;code&gt;!str.isEmpty&lt;/code&gt; doesn&#39;t really sit well with me, so we used &lt;code&gt;str.isEmpty == false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, the problem was further compounded by the changes to &lt;code&gt;UITextField&lt;/code&gt;, whose &lt;code&gt;text&lt;/code&gt; property now returns an &lt;em&gt;optional&lt;/em&gt; string. So there was a lot of this code:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Gross&lt;/em&gt;. We&#39;ve since moved onto &lt;a href=&quot;https://github.com/artsy/eidolon/pull/498&quot;&gt;something nicer&lt;/a&gt;, an experiment with Swift 2&#39;s power protocols. The above code can now be written as:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isNotNilNotEmpty&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Very neat.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://38.media.tumblr.com/tumblr_m8mpwh1gTe1qciljio1_500.gif&quot; alt=&quot;It works!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While Orta and I reviewed the &lt;a href=&quot;https://github.com/artsy/eidolon/pull/496&quot;&gt;pull request&lt;/a&gt;, we noted some things we liked, and some things we didn&#39;t like. I &lt;em&gt;really&lt;/em&gt; like that UIKit now uses Objective-C generic NSArrays so I don&#39;t have to cast so much. I really &lt;em&gt;don&#39;t&lt;/em&gt; like that libraries, mostly the ones that we maintain, don&#39;t use that feature of Objective-C yet. That&#39;s now &lt;a href=&quot;https://github.com/artsy/mobile/issues/54&quot;&gt;on our todo list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://media3.giphy.com/media/52VjAeGgj78GY/giphy.gif&quot; alt=&quot;When you put it on your todo list.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I am amazed at how quickly Swift is changing – as a community, we are still seeing new patterns and methodologies emerge. Not all of them will catch on, of course. But what I&#39;m really excited about is that Swift&#39;s engineers are building tools that let us do &lt;em&gt;so much&lt;/em&gt;. They aren&#39;t making architectural decisions for us, but letting us experiment and discover for ourselves what works and what doesn&#39;t. The future of iOS development has never felt more exciting.&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Aug 2015 05:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/08/27/swift-trek-2-the-wrath-of-count/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/08/27/swift-trek-2-the-wrath-of-count/</guid>
        
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>open source</category>
        
        <category>swift</category>
        
      </item>
    
      <item>
        <title>Cocoa Architecture: Hybrid Apps</title>
        <description>&lt;p&gt;As a part of going through the design patterns we&#39;ve found in the creation of the Artsy iOS apps, I&#39;d like to talk a bit about &lt;em&gt;Hybrid Applications&lt;/em&gt;. A hybrid application refers to an app that uses native code and web content intertwined. Our flagship iOS app, &lt;a href=&quot;https://github.com/artsy/eigen&quot;&gt;eigen&lt;/a&gt; is a hybrid app, and it seems to get more and more hybrid-y each release. Let&#39;s talk a little bit about the pros and cons of this approach.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;hr /&gt;

&lt;h1&gt;What is a Hybrid App&lt;/h1&gt;

&lt;p&gt;Above is the widest possible definition above, so let&#39;s dig in as this can be a contentious. There is a whole spectrum of which an app can be classed as a hybrid app. This ranges from more or less web-tech everywhere to 100% native code like Objective-C / Swift.&lt;/p&gt;

&lt;p&gt;A great example of the furthest to the web-side is &lt;a href=&quot;https://atom.io&quot;&gt;ATOM&lt;/a&gt;, the text editor. It&#39;s on the extreme side because all of the user interface is built using HTML + CSS, and almost all of the app is in javascript. The trade-off for them is that their developers can easy write cross-platform code, that will work reliably with technology that the vast majority of programmers use. This vastly reduces the barrier to entry for contributors and gives ATOM a really large community of programmers to draw from with respect to extending the app.&lt;/p&gt;

&lt;p&gt;An example of a purely native application would be &lt;a href=&quot;https://github.com/artsy/energy/&quot;&gt;Energy&lt;/a&gt;. It&#39;s over a hundred thousand plus lines of Objective-C. Yet under the hood, there&#39;s definitely some web-tech there. Prior to iOS7 &lt;code&gt;UILabel&lt;/code&gt;s, &lt;code&gt;UITextField&lt;/code&gt;s and &lt;code&gt;UITextField&lt;/code&gt;s &lt;a href=&quot;http://www.objc.io/issues/5-ios7/getting-to-know-textkit/&quot;&gt;used WebKit for rendering&lt;/a&gt;. Not to mention that when a Partner sends an email via Energy, the editor is a &lt;code&gt;UIWebView&lt;/code&gt;. However, from the app developer&#39;s perspective they are creating native interactions that are consistent with the rest of the operating system&#39;s behavior.&lt;/p&gt;

&lt;h1&gt;Eigen&lt;/h1&gt;

&lt;p&gt;When we started building Eigen, it was very obvious that we had a Sisyphean task ahead of us. We wanted to take the core ideas of the Artsy website,  &lt;em&gt;The Art World Online&lt;/em&gt;, and convert it into mobile, &lt;em&gt;The Art World in Your Pocket&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;That&#39;s not impossible, but the mobile team was a fraction of the Artsy development team. Any new features added to the website would need a mobile equivalent, and given the speed in which web developer&#39;s can ship, we&#39;d need to outnumber them to stand a chance at keeping up.&lt;/p&gt;

&lt;p&gt;So, we opted for building a highly integrated mobile website at the same time, it would use the same design language as the iOS app and can act as a way for Android devices to access Artsy.&lt;/p&gt;

&lt;h1&gt;Techniques for Doing It Well&lt;/h1&gt;

&lt;p&gt;So we&#39;ll be talking about our &lt;a href=&quot;https://github.com/artsy/eigen/blob/6bb44a01c1b23fb8e92c645c3091fd33725743c3/Artsy/View_Controllers/Web_Browsing/ARInternalMobileWebViewController.m&quot;&gt;ARInteralMobileViewController&lt;/a&gt; - which currently relies on &lt;code&gt;UIWebView&lt;/code&gt; but is in &lt;a href=&quot;https://github.com/artsy/eigen/pull/606&quot;&gt;the process of&lt;/a&gt; migrating to &lt;code&gt;WKWebkit&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Scroll like an &lt;a href=&quot;https://github.com/artsy/eigen/blob/6bb44a01c1b23fb8e92c645c3091fd33725743c3/Artsy/View_Controllers/Web_Browsing/ARExternalWebBrowserViewController.m#L39&quot;&gt;iOS app&lt;/a&gt; by setting the web view&#39;s &lt;code&gt;scrollView.decelerationRate = UIScrollViewDecelerationRateNormal&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use a simple design language to avoid the &lt;a href=&quot;http://tvtropes.org/pmwiki/pmwiki.php/Main/UncannyValley&quot;&gt;uncanny valley&lt;/a&gt;. Care about using the same &lt;a href=&quot;https://github.com/artsy/Artsy-UILabels&quot;&gt;typographical rules&lt;/a&gt; on everything including tabs, buttons and switches.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Take over navigation. This means pushing a &lt;a href=&quot;https://github.com/artsy/eigen/blob/6bb44a01c1b23fb8e92c645c3091fd33725743c3/Artsy/View_Controllers/Web_Browsing/ARInternalMobileWebViewController.m#L180&quot;&gt;new view controller&lt;/a&gt; on the navigation stack every time a user intends to change context.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Take over common OS features. We take over &lt;a href=&quot;https://github.com/artsy/eigen/blob/master/Artsy/View_Controllers/Web_Browsing/ARInternalMobileWebViewController.m#L184-L190&quot;&gt;social sharing&lt;/a&gt;  instead of letting the web site send you to an external page, offering a native share sheet instead.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Downsides&lt;/h1&gt;

&lt;p&gt;When you choose developer ease over user experience it&#39;s important to take into consideration some of the downsides.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Localisation is difficult. Cocoa offers a great localisation APIs. We can&#39;t use them, otherwise half of our app is correctly localised and the rest isn&#39;t.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Conforming to the operating system&#39;s Human Interface Guidelines is difficult, as you&#39;re relying less on foundations built with this in mind.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web tech is slower, and threading APIs are generally poor. A difficulty here is that you are also complicating the technical stack upon which your app sits above. When relying on web-tech in a Mac app, it&#39;s common for that trade-off to show itself in excessive memory usage over time.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Evolution&lt;/h1&gt;

&lt;p&gt;One of the most interesting developments this year in the Cocoa world is Facebook&#39;s &lt;a href=&quot;https://cocoapods.org/pods/React&quot;&gt;react-native&lt;/a&gt;, a bridge between web technology and native code that doesn&#39;t rely on using the &lt;a href=&quot;http://www.quirksmode.org/dom/intro.html&quot;&gt;traditional DOM&lt;/a&gt; - freeing it from a lot of the common problems found in highly web-based apps.&lt;/p&gt;

&lt;p&gt;We&#39;re pretty optimistic about it on the mobile team. We&#39;re not quite willing to jump head-first into a &lt;a href=&quot;http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&quot;&gt;pre-1.0 technology&lt;/a&gt; again, but it shows a lot of promise.&lt;/p&gt;

&lt;p&gt;The fact that we were able to ship an app at all was because we could build the parts that meant the most to us native, then rely on web technologies to cover the rest of the ground. By being pragmatic in our approach to using web tech, we have the chance to stand on the shoulders of giants.&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Aug 2015 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/08/24/Cocoa-Architecture-Hybrid-Apps/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/08/24/Cocoa-Architecture-Hybrid-Apps/</guid>
        
        
        <category>architecture</category>
        
        <category>eigen</category>
        
        <category>hybrid</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
      </item>
    
  </channel>
</rss>
