<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artsy Engineering</title>
    <description></description>
    <link>http://artsy.github.io/</link>
    <atom:link href="http://artsy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 24 Sep 2015 21:45:00 +0000</pubDate>
    <lastBuildDate>Thu, 24 Sep 2015 21:45:00 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>MVVM in Swift</title>
        <description>&lt;p&gt;Model View ViewModel has become the default way I write apps on iOS – it makes writing iOS apps a joy. I&#39;ve written &lt;a href=&quot;https://www.objc.io/issues/13-architecture/mvvm/&quot;&gt;about it&lt;/a&gt; &lt;a href=&quot;http://www.teehanlax.com/blog/model-view-viewmodel-for-ios/&quot;&gt;again&lt;/a&gt; and &lt;a href=&quot;https://speakerdeck.com/ashfurrow/reactivecocoa-at-mdevcon-2014&quot;&gt;again&lt;/a&gt; and &lt;a href=&quot;https://leanpub.com/iosfrp&quot;&gt;oh my&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But last Autumn, as our team was all-hands-on-deck to wrap up the &lt;a href=&quot;http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&quot;&gt;auctions kiosk app&lt;/a&gt;, we chose not to use MVVM. Why not?&lt;/p&gt;

&lt;p&gt;We were building a &lt;em&gt;new app&lt;/em&gt; in a &lt;em&gt;new language&lt;/em&gt; using a &lt;em&gt;non-Swift framework&lt;/em&gt; for functional reactive programming. I was also teaching colleagues what they needed to know about ReactiveCocoa to help write the app. We used the MVC pattern because the relative cost of MVVM was too high.&lt;/p&gt;

&lt;p&gt;&quot;... &lt;em&gt;was&lt;/em&gt; ...&quot;&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;Since then, I&#39;ve been &lt;a href=&quot;https://github.com/artsy/eidolon/issues/333&quot;&gt;pecking away&lt;/a&gt; at converting small view controllers away from MVC, to figure out what MVVM on iOS written in Swift might look like. My goal has been getting ready to cut down our behemoth main view controller and create a view model for it. Before the rewrite, it was nearly 600 lines of code and was responsible for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;networking.&lt;/li&gt;
&lt;li&gt;syncing auction lot states.&lt;/li&gt;
&lt;li&gt;user interaction.&lt;/li&gt;
&lt;li&gt;collection view layouts.&lt;/li&gt;
&lt;li&gt;image caching.&lt;/li&gt;
&lt;li&gt;background-thread data processing.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It&#39;s quite terrifying now that I think about it!&lt;/p&gt;

&lt;p&gt;Well, &lt;a href=&quot;https://github.com/artsy/eidolon/pull/503/files&quot;&gt;finally I was ready&lt;/a&gt;. The view controller is now down to 224 lines, and is responsible for only things like displaying data. Calculating &lt;em&gt;what&lt;/em&gt; to display and &lt;em&gt;when&lt;/em&gt; to display it is now contained within the view model. In true MVVM form, our view controller doesn&#39;t even have direct access to the models it displays!&lt;/p&gt;

&lt;p&gt;So what does MVVM in Swift look like? Well, our answer is just that – &lt;em&gt;our&lt;/em&gt; answer. Others exist, and they have merits and faults of their own.&lt;/p&gt;

&lt;p&gt;I&#39;m not here to preach a definitive definition of MVVM in Swift. Instead, I want to talk about some of the lessons we learnt in the process of building a solution that worked for us.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Programming boils down to getting certain bits of code to communicate with other bits in an intelligent way. Software &lt;em&gt;patterns&lt;/em&gt; are ways of constraining programmers to make it easier to program.&lt;/p&gt;

&lt;p&gt;MVVM, roughly, has the following constraints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Models don&#39;t talk to anybody (same as MVC).&lt;/li&gt;
&lt;li&gt;View models only talk to models.&lt;/li&gt;
&lt;li&gt;View controllers can&#39;t talk to models directly; they only interact with view models and views.&lt;/li&gt;
&lt;li&gt;Views only talk to the view &lt;em&gt;controllers&lt;/em&gt;, notifying them of interaction events (same as MVC).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And that&#39;s pretty much it. It&#39;s not that different from MVC – the key differences are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There&#39;s a new &quot;view model&quot; class.&lt;/li&gt;
&lt;li&gt;The view controller no longer has access to the model.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img src=&quot;/images/2015-09-24-mvvm-in-swift/mvvm.png&quot; alt=&quot;MVVM Diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Additionally, MVVM on iOS acknowledges the one-to-one relationship between views and view controllers. I tend to think of them as one entity that just happens to be split across a &lt;code&gt;.swift&lt;/code&gt; file and a Storyboard.&lt;/p&gt;

&lt;p&gt;The view model&#39;s job is to handle all presentation logic. If a model contains an &lt;code&gt;NSDate&lt;/code&gt;, the &lt;code&gt;NSDateFormatter&lt;/code&gt; to format that date would live in the view model.&lt;/p&gt;

&lt;p&gt;View models don&#39;t have &lt;em&gt;any&lt;/em&gt; access to the user interface. You should not even &lt;code&gt;import UIKit&lt;/code&gt; in a view model. Typically, a view controller observes the view model somehow to know when there&#39;s new data to display. This can be done through KVO or FRP.&lt;/p&gt;

&lt;p&gt;MVVM and MVC share a common weakness: neither defines where the network logic of an app should go. I&#39;ve put it in the view model for now, but I plan on separating it out into its own object soon. That object will be owned by the view model.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So let&#39;s talk about some specific challenges we had.&lt;/p&gt;

&lt;h2&gt;User Interface Structure&lt;/h2&gt;

&lt;p&gt;Part of our user interface consists of a segment control near the top of the screen. The currently selected segment determines the sort order of the collection view cells, as well as the collection view&#39;s layout. We had previously defined an enum to store the titles and sort order corresponding to each segmented control; the order of the enum cases implies the order of the controls in the UI.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;SwitchValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Grid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LeastBids&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MostBids&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HighestCurrentBid&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LowestCurrentBid&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Alphabetical&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;So where does this enum live in MVVM? Since the logic for sorting models, the button titles, and the order of the buttons are all pieces of presentation logic, the enum seems like it belongs in the view model.&lt;/p&gt;

&lt;p&gt;However, the decision of which layout for the collection view to use is slightly more nuanced. The layout doesn&#39;t affect what data we show the user or how they interact with it; it only affects the visuals how the information is presented. This suggests the logic for deciding layouts might belong in the view controller.&lt;/p&gt;

&lt;p&gt;My solution was to put the enum in the view model, and have the view model expose a signal defining which of the two layouts should be used. Based on the selected segment index, the view model decides which layout should be used and sends that value on a signal. The view controller is responsible for mapping that signal into a configured layout, then setting that layout on the collection view.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Respond to changes in layout, driven by switch selection.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gridSelectedSignal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gridSelected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gridSelected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListingsViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;masonryLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListingsViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGRectGetWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;switchView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGRectZero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribeNext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCollectionViewLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UICollectionViewLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;The view controller also uses this signal to define which cell reuse identifier should be used.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Map switch selection to cell reuse identifier.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;RAC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cellIdentifier&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gridSelectedSignal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gridSelected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gridSelected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MasonryCellIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TableCellIdentifier&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;h2&gt;Structuring a View Model&lt;/h2&gt;

&lt;p&gt;The most common question from iOS developers about MVVM and FRP concerns how the view model exposes data to the view controller. The view controller needs to be notified about changes to the underlying model, but what mechanism to we use to do this? There are two options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use (dynamic) properties on the view model, which can be observed using KVO (or wrapped in a signal/sequence using FRP).&lt;/li&gt;
&lt;li&gt;Use signals/sequences/futures as properties on the view model, which can be consumed by their corresponding async frameworks.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The first option is appealing since it gives your view controller a choice of how to observe the properties. However, I&#39;d recommend against it; Swift doesn&#39;t have type-checking on KVO (you need to cast from &lt;code&gt;AnyObject!&lt;/code&gt; a lot).&lt;/p&gt;

&lt;p&gt;The second option is what I prefer, and it seems the most &quot;Swift&quot; way of doing things. When we do move away from RAC&#39;s Objective-C interface, the view model will replace its &lt;code&gt;RACSignal&lt;/code&gt; properties with sequences based on Swift generics, which will provide compile-time type-checking 💯&lt;/p&gt;

&lt;p&gt;Defining these signals on a view model can be tricky. Swift initializers have &lt;a href=&quot;http://ashfurrow.com/blog/swift-initializers/&quot;&gt;strict rules&lt;/a&gt; around when properties are assigned. The signals need access to the internal state of the view model, so they need to be created &lt;em&gt;after&lt;/em&gt; calling &lt;code&gt;super.init()&lt;/code&gt;. However, we can&#39;t call &lt;code&gt;super.init()&lt;/code&gt; until all our properties have been assigned to, including the signal properties.&lt;/p&gt;

&lt;p&gt;It&#39;s your standard chicken-and-the-egg problem 🐣&lt;/p&gt;

&lt;p&gt;I took the easy way out and used implicitly-unwrapped optionals, defined with &lt;code&gt;var&lt;/code&gt;, which can be assigned to &lt;em&gt;after&lt;/em&gt; the call to &lt;code&gt;super.init()&lt;/code&gt;. It&#39;s not a perfect solution. We could instead use &lt;code&gt;lazy var&lt;/code&gt; properties assigned to self-evaluating closures, or just use computed properties. I&#39;m hoping to explore other options when we move away from RAC 2&#39;s Objective-C API.&lt;/p&gt;

&lt;h2&gt;Handling User Interaction&lt;/h2&gt;

&lt;p&gt;The next problem I had was presenting details based on user interaction. Users tap a button, which is handled in the view controller, which presents the details. However, the view controller should not have access to the models, so how can it configure the details to present them?&lt;/p&gt;

&lt;p&gt;My solution took advantage of the interchangeability of Swift functions and closures. First I defined a closure type in the view model.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShowDetailsClosure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SaleArtwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Then I added a property to the view model and a corresponding parameter to the initializer.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListingsViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;showDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShowDetailsClosure&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;         &lt;span class=&quot;nl&quot;&gt;showDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShowDetailsClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;         &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Next I need to actually call the closure. I defined a function on the view model that the view controller can invoke, passing in the context that&#39;s necessary to decide which model&#39;s details should be presented. This context is just an index path.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showDetailsForSaleArtworkAtIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;showDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sortedSaleArtworks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Nice! So now when the user selects a cell, we can call this function on the view model with the index path that the user selected. The view model decides which model to use, and calls the closure.&lt;/p&gt;

&lt;p&gt;The final piece of the puzzle is being clever about creating the view model. We need to pass a closure to its initializer, one that shows the model&#39;s details. I defined a function on the view controller that matched the &lt;code&gt;ShowDetailsClosure&lt;/code&gt; signature.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showDetailsForSaleArtwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;saleArtwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SaleArtwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;performSegueWithIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SegueIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ShowSaleArtworkDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saleArtwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;And then use lazy loading (discussed below) to call the view model&#39;s initializer. I pass in a reference to the above function as the closure parameter.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListingsViewModelType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListingsViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;showDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showDetailsForSaleArtwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;So let&#39;s review what happens when a user makes a selection.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/2015-09-24-mvvm-in-swift/selection.png&#39;&gt;&lt;img src=&quot;/images/2015-09-24-mvvm-in-swift/selection.png&quot; title=&quot;Selection diagram&quot; &gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;Here are the steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User taps a cell.&lt;/li&gt;
&lt;li&gt;A callback on the view controller is invoked with the selected index path.&lt;/li&gt;
&lt;li&gt;The view controller tells the view model which index path was selected.&lt;/li&gt;
&lt;li&gt;The view model looks up the corresponding model.&lt;/li&gt;
&lt;li&gt;The view model invokes the &lt;code&gt;showDetails&lt;/code&gt; closure given to it when it was initialized.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;showDetails&lt;/code&gt; &quot;closure&quot; performs a segue with the model.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;It&#39;s not an ideal solution since it still exposes the model to the view controller (even under very strict conditions), but it&#39;s a reasonable compromise. As we continue to use more view models, I&#39;m curious to see how this solution scales.&lt;/p&gt;

&lt;h2&gt;Testing&lt;/h2&gt;

&lt;p&gt;Earlier I mentioned the lazy closure property in the view controller. This is a trick that lets the view controller customize the view model by using references to &lt;code&gt;self&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListingsViewModelType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListingsViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nl&quot;&gt;selectedIndexSignal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;switchView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selectedIndexSignal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nl&quot;&gt;showDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showDetailsForSaleArtwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nl&quot;&gt;presentModal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;presentModalForSaleArtwork&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;viewModel&lt;/code&gt; property is first accessed by the view controller in &lt;code&gt;viewDidLoad()&lt;/code&gt;, which means that we can replace the property by a test double any time before that.&lt;/p&gt;

&lt;p&gt;The view controller is tested using &lt;a href=&quot;https://github.com/facebook/ios-snapshot-test-case&quot;&gt;snapshots&lt;/a&gt; to verify the user interface hasn&#39;t been inadvertently changed. Testing is straightforward:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a view controller to test.&lt;/li&gt;
&lt;li&gt;Create a stubbed view model, customized for each test.&lt;/li&gt;
&lt;li&gt;Give the view controller the stubbed view model before &lt;code&gt;viewDidLoad()&lt;/code&gt; is called.&lt;/li&gt;
&lt;li&gt;Verify the view controller renders correctly.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;While writing tests, I found it difficult to subclass the existing view model (for stubbing purposes). Since the view model&#39;s initializer has side-effects (starting recurring network requests 😬), I can&#39;t call &lt;code&gt;super.init()&lt;/code&gt;. Instead, I made a &lt;code&gt;ListingsViewModelType&lt;/code&gt; protocol. The view controller only interacts with the view model through this protocol – it has no reference to the class itself. Now creating a stubbed view model is as easy as conforming to a protocol.&lt;/p&gt;

&lt;p&gt;Seems more &quot;Swift&quot;, too.&lt;/p&gt;

&lt;p&gt;Now that the view model and view controller are separate objects, we no longer have to test presentation logic in the view controller at all. The view model now takes care of network requests, data processing, etc – this is now all tested &lt;em&gt;independently&lt;/em&gt; of the user interface 🎉&lt;/p&gt;

&lt;p&gt;In my opinion, the key benefits of MVVM boil down to the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Separating the view model from the user interface makes it easier to test presentation logic.&lt;/li&gt;
&lt;li&gt;Separating the view controller from the presentation logic makes it easier to test the user interface.&lt;/li&gt;
&lt;/ol&gt;


&lt;hr /&gt;

&lt;p&gt;This is only a description of what we&#39;ve come up with so far. As our community and the Swift language continue to evolve, hand-in-hand, we&#39;ll re-evaluate our answer to the question of what MVVM with Swift looks like. For now, I&#39;m quite pleased with the step we&#39;ve taken, and I&#39;m looking forward to continuing to explore programming patterns in Swift.&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Sep 2015 16:13:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/09/24/mvvm-in-swift/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/09/24/mvvm-in-swift/</guid>
        
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>mvvm</category>
        
        <category>open source</category>
        
        <category>swift</category>
        
      </item>
    
      <item>
        <title>Cocoa Architecture: Dependencies</title>
        <description>&lt;p&gt;As a part of going through the design patterns we&#39;ve found in the creation of the Artsy iOS apps, I&#39;d like to talk a bit about some of
the way in which we decide our apps dependencies.&lt;/p&gt;

&lt;p&gt;It&#39;s easy to think of your dependencies as being things in your Podfile, but it&#39;s a bit more nuanced than that. The tools you use for development, deployment, testing and external integrations are all things in which you depend on others to make your app work. I&#39;d like to look into the hows and the whys of the decisions we&#39;ve made.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;hr /&gt;

&lt;p&gt;The mobile team of is a collection of smart people; we aim to work with people who have different opinions, and different backgrounds. This means we often don&#39;t agree on project direction but moving forwards is about finding compromise. Every technical project within Artsy has a de-facto leader, and they get to make the call at the end of the day.&lt;/p&gt;

&lt;p&gt;This means that dependencies and priorities change per-project, because a different developer has more influence on the end result. There isn&#39;t a singular &quot;Artsy Mobile&quot; way.&lt;/p&gt;

&lt;h3&gt;Implicit Dependencies&lt;/h3&gt;

&lt;p&gt;Thinking on the largest macro scope, I think these are our biggest dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Xcode&lt;/li&gt;
&lt;li&gt;iOS SDK&lt;/li&gt;
&lt;li&gt;Swift&lt;/li&gt;
&lt;li&gt;CocoaPods&lt;/li&gt;
&lt;li&gt;Individual Pods&lt;/li&gt;
&lt;li&gt;Fastlane&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Some of these are mandatory, mainly Xcode and the iOS SDK. Talk to someone at Facebook however and they&#39;ll tell you even that can become a &lt;a href=&quot;http://facebook.github.io/react-native/&quot;&gt;much weaker dependency&lt;/a&gt; than you&#39;d think. For us though, we still create native apps that eventually get built via &lt;code&gt;xcodebuild&lt;/code&gt; either via Xcode/AppCode/Vim as a part of our individual build processes.&lt;/p&gt;

&lt;p&gt;The dependencies provided by Apple are the daily trade-off in order to build apps that are competitive. Apple ships a new SDK each year, developers need to ship new builds. If you can keep pace, then you can get you app in-front of millions of potentially paying customers.&lt;/p&gt;

&lt;h3&gt;Leveraging OSS&lt;/h3&gt;

&lt;p&gt;So, allow me to don my best flame-proof suit and answer the intent of the question that was originally asked of us? &lt;em&gt;What qualities do we look for in OSS dependencies?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This question is interesting because we&#39;re not just shipping an app in the dark, every app we have is open source and available for inspection. Our choices with OSS dependencies become our implicit public recommendations, why else would we be using them?&lt;/p&gt;

&lt;p&gt;To to give the simplest TLDR; I created the &lt;a href=&quot;https://guides.cocoapods.org/making/quality-indexes&quot;&gt;CocoaPods Quality Indexes&lt;/a&gt;. The Quality Indexes (QIs) are a series of metrics that are applied programmatically to every library which generate a single number that &lt;a href=&quot;http://cocoapods.org&quot;&gt;cocoapods.org&lt;/a&gt; uses for search ranking. These are based on conversations within Artsy, and as many contributors as I could during the course of a year. Here are a few QIs that matter a lot to me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The library is popular, this is measured in GitHub stars.&lt;/li&gt;
&lt;li&gt;Great README, has a CHANGELOG and uses internal appledoc/headerdoc.&lt;/li&gt;
&lt;li&gt;The project has test coverage.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you&#39;re interested in the reasoning behind these, I&#39;d recommend reading the &lt;a href=&quot;https://guides.cocoapods.org/making/quality-indexes&quot;&gt;full guide for the metrics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If I could determine that a project was a good dependency via code - I wouldn&#39;t be writing apps, I&#39;d be a millionaire, who has moved on to working in politics or cryptography in Denmark. So what are the key metrics that not Turing-compatible?&lt;/p&gt;

&lt;h4&gt;Can We Take Over?&lt;/h4&gt;

&lt;p&gt;We&#39;re a pretty versatile bunch of developers, even with our focus on native iOS development. Being able to understand a foreign codebase when debugging a problem, in order to &lt;a href=&quot;http://dictionary.reference.com/browse/grok&quot;&gt;grok&lt;/a&gt; if a bug lies in our code or a libraries is essential.&lt;/p&gt;

&lt;p&gt;Being blocked because you don&#39;t understand how to create an assembly trampoline for message passing on 64 bit processors sucks. Relying on someone else to provide a fix in their spare time, is a nice way to strain a relationship.&lt;/p&gt;

&lt;p&gt;There have been times when we&#39;ve taken over libraries completely, which has worked out well for everyone involved. Examples being &lt;a href=&quot;https://cocoapods.org/pods/NAMapKit&quot;&gt;NAMapKit&lt;/a&gt; and &lt;a href=&quot;https://cocoapods.org/pods/Specta&quot;&gt;Specta&lt;/a&gt;/&lt;a href=&quot;https://cocoapods.org/pods/Expecta&quot;&gt;Expecta&lt;/a&gt;. It can be a matter of providing small incremental work on the project, or just being someone with a vision &lt;a href=&quot;http://orta.io/rebase/oss-management/&quot;&gt;for the project&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Features vs Hidden Dependencies&lt;/h4&gt;

&lt;p&gt;A dependency can offer you shortcuts to features, new ways to do things or a way to interface with externalities. When you look at the README you get to see all of the best parts of a library, the reasons why it&#39;s worth trying, the easy installation instructions. You don&#39;t get to see some of uglier issues under the surface, that only become exposed once you look a bit harder.&lt;/p&gt;

&lt;p&gt;These can be subtle for example, using Fastlane introduces a lot of dependencies.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;~/dev/scratch ⏛  cat Gemfile
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;gem &lt;span class=&quot;s1&quot;&gt;&amp;#39;fastlane&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;~/dev/scratch ⏛  bundle install
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;...&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;Bundle &lt;span class=&quot;nb&quot;&gt;complete&lt;/span&gt;! &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; Gemfile dependency, &lt;span class=&quot;m&quot;&gt;73&lt;/span&gt; gems now installed.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;There&#39;s a trade-off here, Fastlane provides a great programmable API to a bunch of really annoying time-consuming tasks. There isn&#39;t a system similar to CocoaPods&#39; subspecs which lets a library consumer choose to use a subset of a dependency graph, so instead everyone gets &lt;code&gt;slack-notifier&lt;/code&gt; regardless of if you need it.&lt;/p&gt;

&lt;p&gt;ReactiveCocoa feels quite similar. In exchange for Cocoa-native approach to Functional Reactive Programming you also have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Swizzling dealloc on objects in order to do it&#39;s magic KVO-unbinding at runtime.&lt;/li&gt;
&lt;li&gt;To pretty much giving up on trying to use the stack trace for understanding flow. Instead you can use their custom dtrace instrument.&lt;/li&gt;
&lt;li&gt;Complicated pre-compiler macros that can get tricky to debug.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These trade-offs can be happily made in exchange for ReactiveCocoa&#39;s well thought out API. Functional Reactive Programming is something that the majority of us are particularly interested in. Since Swift came out, a few Swift-only FRP libraries have been released. So we&#39;ve been keeping our eyes &lt;a href=&quot;https://cocoapods.org/?q=summary%3Areactive&quot;&gt;on the alternatives&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Focus&lt;/h4&gt;

&lt;p&gt;Ideally you&#39;re bringing in a dependency for one specific task. Something like &lt;a href=&quot;https://cocoapods.org/pods/ObjectiveSugar&quot;&gt;ObjectiveSugar&lt;/a&gt; is a great example of a small focused library. I studied it&#39;s API when we first integrated it, and it&#39;s not really changed at all since. The library authors have done a great job of ensuring that Objective Sugar stays on-topic.&lt;/p&gt;

&lt;h4&gt;Community Relationships&lt;/h4&gt;

&lt;p&gt;The amount of energy you have to put into using certain dependencies, in an engaging way like we do, also means you have to interact with external people. This is often the case with OSS, so we’re used to that and quite good at it. Sometimes, however, people and their opinions don’t match, it’s a fact of life, and in these cases it can be worth choosing to not use a certain dependency.&lt;/p&gt;

&lt;p&gt;One such example has been ReactiveCocoa. While they are free to make whatever decisions they like, we feel that we’ve wasted energy on supporting their dependencies in CocoaPods that took away from our already constraining time-budget. Our interactions consume and creates energy that we don&#39;t want to be associated with. This makes us want to engage less with the community at whole, which is really not something we want. So that, combined with our opinion on the framework itself (as aforementioned) means we’re looking at alternatives.&lt;/p&gt;

&lt;p&gt;This contrasts sharply with working on Fastlane, where we&#39;re willing to take the dependency graph in part because working with &lt;a href=&quot;https://krausefx.com&quot;&gt;Felix Krause&lt;/a&gt; is such a pleasure. We&#39;ve sent PRs,  helped out on &lt;a href=&quot;https://github.com/KrauseFx/fastlane/pull/173&quot;&gt;documentation&lt;/a&gt; and provided advice on how we would/are using Fastlane. I actively feel guilty that we&#39;re still not deploying to the App Store using Fastlane because of this relationship.&lt;/p&gt;

&lt;h4&gt;Project Maturity&lt;/h4&gt;

&lt;p&gt;We got burned by working with Swift too early, but coming back at Swift 2.0 feels good. We just started introducing Swift into our Objective-C codebases, as it&#39;s looking like the tooling has matured.&lt;/p&gt;

&lt;p&gt;We spent a good chunk of time over the last 6 months discussing and testing out React-Native as an approach for building apps. It&#39;s turning into an amazing platform, but for us it&#39;s not mature enough to start building apps with it as a foundation.&lt;/p&gt;

&lt;h2&gt;Not All Dependencies are Third Party&lt;/h2&gt;

&lt;p&gt;We ship a lot of our internal code as Pods. The rubric we use for deciding on when to externalise code is &quot;would we want this in more than 2 apps&quot; at the moment. This is an easy choice for libraries as fundamental as a fonts, or colours schemes. It becomes a more nuanced choice when it comes to &lt;a href=&quot;https://github.com/ashfurrow/Forgeries&quot;&gt;a class or two&lt;/a&gt;, or &lt;a href=&quot;https://github.com/orta/ar_dispatch&quot;&gt;some functions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Creating a library that gets popular can also turn into an unexpected time-sink, we&#39;ve been supporting &lt;a href=&quot;https://cocoapods.org/pods/ARAnalytics&quot;&gt;ARAnalytics&lt;/a&gt; for 4 years now and nearly all features for the last 3 years have come from external developers. Ensuring that they don&#39;t break the build, making monthly releases and keeping documentation up to date takes time. &lt;a href=&quot;https://cocoapods.org/pods/Moya&quot;&gt;Moya&lt;/a&gt; has consumed multiple weekends in a row of our time.&lt;/p&gt;

&lt;p&gt;Ensuring that we are good stewards for the code we release as a separate consumable library is important to our team values. We&#39;ve not had to deprecate a library, though I look forwards to doing that to &lt;a href=&quot;https://cocoapods.org/pods/ORStackView&quot;&gt;ORStackView&lt;/a&gt; at some point when everyone is building for iOS9+.&lt;/p&gt;

&lt;h3&gt;Nuance&lt;/h3&gt;

&lt;p&gt;There are no simple answers to &quot;should you use a certain dependency&quot;. The CocoaPods QIs can give you a sense of what libraries are worth looking into, then you can load up a demo for the library by running &lt;code&gt;pod try [Podname]&lt;/code&gt; to dig around and get a feel for how the library works. These decisions end up being quite personal.&lt;/p&gt;

&lt;p&gt;We work with external dependencies because we enjoy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Working with other people.&lt;/li&gt;
&lt;li&gt;Making improvements for the entire community, instead of just ourselves.&lt;/li&gt;
&lt;li&gt;Not having to re-invent the wheel.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For us, it&#39;s nearly always win-win.&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Sep 2015 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/09/18/Cocoa-Architecture-Dependencies/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/09/18/Cocoa-Architecture-Dependencies/</guid>
        
        
        <category>architecture</category>
        
        <category>dependencies</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
      </item>
    
      <item>
        <title>Releasecop Tracks Stale Releases</title>
        <description>&lt;p&gt;Artsy practices a sort of &lt;a href=&quot;http://en.wikipedia.org/wiki/Continuous_delivery&quot;&gt;continuous delivery&lt;/a&gt;. We keep release cycles short and the process of reviewing, testing, and deploying our software as reliable, fast, and automated as possible. (This blog has touched on these practices &lt;a href=&quot;http://artsy.github.io/blog/categories/testing/&quot;&gt;multiple&lt;/a&gt; &lt;a href=&quot;http://artsy.github.io/blog/categories/continuous-integration&quot;&gt;times&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Usually, commits that have been reviewed and merged are immediately built and tested. Successfully built versions of the codebase are often automatically deployed to a staging environment. On an automated or frequent-but-manual basis, that version is deployed to a production environment. Thus, commits form a pipeline:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From developers&#39; working branches&lt;/li&gt;
&lt;li&gt;To the master branch&lt;/li&gt;
&lt;li&gt;Through a hopefully-successful build&lt;/li&gt;
&lt;li&gt;To a staging environment&lt;/li&gt;
&lt;li&gt;To production&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The number of apps and services we deploy has grown to &lt;em&gt;dozens&lt;/em&gt; per team, so sometimes things fall through the cracks. We&#39;ve been using &lt;a href=&quot;https://github.com/joeyAghion/releasecop&quot;&gt;Releasecop&lt;/a&gt; for the last few months to get gentle email reminders when an environment could use a deploy.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;pre&gt;&lt;code&gt;gem install releasecop
releasecop edit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This opens a &lt;em&gt;manifest&lt;/em&gt; file where you can describe the sequence of git remotes and branches that make up your own release pipeline. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &quot;projects&quot;: {
    &quot;charge&quot;: [
      { &quot;name&quot;: &quot;master&quot;, &quot;git&quot;: &quot;git@github.com:artsy/charge.git&quot; },
      { &quot;name&quot;: &quot;staging&quot;, &quot;git&quot;: &quot;git@heroku.com:charge-staging.git&quot; },
      { &quot;name&quot;: &quot;production&quot;, &quot;git&quot;: &quot;git@heroku.com:charge-production.git&quot; }
    ],
    &quot;gravity&quot;: [
      { &quot;name&quot;: &quot;master&quot;, &quot;git&quot;: &quot;git@github.com:artsy/gravity.git&quot; },
      { &quot;name&quot;: &quot;master-succeeded&quot;, &quot;git&quot;: &quot;git@github.com:artsy/gravity.git&quot;, &quot;branch&quot;: &quot;master-succeeded&quot; },
      { &quot;name&quot;: &quot;staging&quot;, &quot;git&quot;: &quot;git@github.com:artsy/gravity.git&quot;, &quot;branch&quot;: &quot;staging&quot; },
      { &quot;name&quot;: &quot;production&quot;, &quot;git&quot;: &quot;git@github.com:artsy/gravity.git&quot;, &quot;branch&quot;: &quot;production&quot; }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;charge&lt;/code&gt; app is a typical deployment to Heroku. Work progresses from the &lt;code&gt;master&lt;/code&gt; branch to a &lt;code&gt;charge-staging&lt;/code&gt; app to a &lt;code&gt;charge-production&lt;/code&gt; app. The &lt;code&gt;gravity&lt;/code&gt; app is a more complicated, non-Heroku deployment. It updates git branches to reflect what has been merged (&lt;code&gt;master&lt;/code&gt;), tested (&lt;code&gt;master-succeeded&lt;/code&gt;), deployed to staging, and deployed to production.&lt;/p&gt;

&lt;p&gt;Run the &lt;code&gt;releasecop check [app]&lt;/code&gt; command to report the status of your apps&#39; releases:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ releasecop check --all
charge...
  staging is up-to-date with master
  production is up-to-date with staging
gravity...
  master-succeeded is up-to-date with master
  staging is up-to-date with master-succeeded
  production is behind staging by:
    06ca969 2015-09-04 [config] Replace Apple Push Notification certificates that expire today. (Eloy Durán)
    171121f 2015-09-03 Admin-only API for cancelling a bid (Matthew Zikherman)
    4c5feea 2015-09-02 install mongodb client in Docker so that import rake tasks can run (Barry Hoggard)
    95347d1 2015-08-31 Update to delayed_job cookbook that works with Chef 11.10 (Joey Aghion)
2 project(s) checked. 1 environment(s) out-of-date.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A nightly &lt;a href=&quot;https://jenkins-ci.org/&quot;&gt;Jenkins&lt;/a&gt; job emails us the results, but a cron job could work equally well.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/joeyAghion/releasecop&quot;&gt;Releasecop&lt;/a&gt; reminds us to deploy ready commits and close the loop on in-progress work. We hope you find it useful. (Pull requests are welcome!)&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Sep 2015 17:30:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/09/01/releasecop-tracks-stale-releases/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/09/01/releasecop-tracks-stale-releases/</guid>
        
        
        <category>continuous deployment</category>
        
        <category>continuous integration</category>
        
        <category>devops</category>
        
        <category>open source</category>
        
        <category>oss</category>
        
        <category>ruby</category>
        
        <category>testing</category>
        
        <category>tools</category>
        
      </item>
    
      <item>
        <title>Cocoa Architecture: Dropped Design Patterns</title>
        <description>&lt;p&gt;As a part of going through the design patterns we&#39;ve found in the creation of the Artsy iOS apps, I&#39;d like to talk a bit about some of the patterns that we&#39;ve had and migrated away from. This is not 100% comprehensive, as there has been a lot of time, and a lot of people involved. Instead I&#39;m going to try and give a birds eye view, and zoom in on some things that feel more important overall.&lt;/p&gt;

&lt;p&gt;It&#39;s important to preface that I don&#39;t believe in perfect code, or am I a fan of big re-writes. We can spot a bad pattern, but not do anything about it. We do have apps to ship, not a codebase to make perfect for the sake of technical purity.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;hr /&gt;

&lt;h2&gt;NSNotifications as a decoupling method&lt;/h2&gt;

&lt;p&gt;A lot of the initial codebase for Energy relied on using NSNotifications as a way of passing messages throughout the application. There were notifications for user settings changes, download status updates, anything related to authentication and the corresponding different error states and a few app features. These relied on sending global notifications with very little attempts at scoping the relationship between objects.&lt;/p&gt;

&lt;p&gt;NSNotificationCenter notifications are an implementation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;Observer Pattern&lt;/a&gt; in Cocoa. They are a beginner to intermediate programmer&#39;s design paradigm dream. It offers a way to have objects send messages to each other without having to go through any real coupling. As someone just starting with writing apps for iOS, it was an easy choice to adapt.&lt;/p&gt;

&lt;p&gt;One of the biggest downsides of using NSNotifications are that they make it easy to be lazy as a programmer. It allows you to not think carefully about the relationships between your objects and instead to pretend that they are loosely coupled, when instead they are coupled but via stringly typed notifications.&lt;/p&gt;

&lt;p&gt;Loose-coupling can have it&#39;s place but without being careful there is no scope on what could be listening to any notification. Also de-registering for interest can be a tricky thing &lt;a href=&quot;http://stackoverflow.com/questions/tagged/nsnotification&quot;&gt;to learn&lt;/a&gt; and the default memory-management behavior is about to change ( &lt;a href=&quot;https://developer.apple.com/library/prerelease/mac/releasenotes/Foundation/RN-Foundation/index.html#//apple_ref/doc/uid/TP30000742&quot;&gt;for the better&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;We still have a &lt;a href=&quot;https://github.com/artsy/energy/blob/702036664a087db218d3aece8ddddb2441f931c8/Classes/Constants/ARNotifications.h&quot;&gt;lot of notifications&lt;/a&gt; in Energy, however in Eigen and Eidolon there are next to none. We don&#39;t even have a specific file for the constants.&lt;/p&gt;

&lt;h2&gt;#define kARConstant&lt;/h2&gt;

&lt;p&gt;Not much to say here, using &lt;code&gt;#defines&lt;/code&gt; as constants was definitely &lt;a href=&quot;https://github.com/adium/adium/blob/master/Source/AdiumAccounts.m#L24-L30&quot;&gt;in favour&lt;/a&gt; when I learned Objective-C. Likely a throw back from C. Using &lt;code&gt;#defines&lt;/code&gt; as constants would not use on-device memory to store an unchanging value. This is because a &lt;code&gt;#define&lt;/code&gt; uses the pre-compiler to directly change the source code to be the value, whereas using a static constant takes up memory space on the device, which we used to &lt;em&gt;really&lt;/em&gt; care about. It&#39;s likely that a modern copy of LLVM doesn&#39;t assign on device memory unless it needs to, especially for things marked &lt;code&gt;const&lt;/code&gt;. Switching to real variables means you can inspect and use in a debugger and use can rely on the type system better.&lt;/p&gt;

&lt;p&gt;What this means in practice is what when we would have had something &lt;a href=&quot;https://github.com/artsy/eigen/blob/master/Artsy/Views/Table_View_Cells/AdminTableView/ARAnimatedTickView.m#L3&quot;&gt;like&lt;/a&gt;: &lt;code&gt;#define TICK_DIMENSION 32&lt;/code&gt; it should be &lt;a href=&quot;https://github.com/artsy/eigen/blob/master/Artsy/View_Controllers/App_Navigation/ARAppSearchViewController.m#L11&quot;&gt;migrated to&lt;/a&gt; &lt;code&gt;static const NSInteger ARTickViewDimensionSize = 20;&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Sprinkling Analytics&lt;/h2&gt;

&lt;p&gt;We took some of the ideas for &lt;a href=&quot;http://albertodebortoli.github.io/blog/2014/03/25/an-aspect-oriented-approach-programming-to-ios-analytics/&quot;&gt;Aspect oriented programming&lt;/a&gt; with &lt;a href=&quot;https://cocoapods.org/pods/ARAnalytics#user-content-aspect-oriented-dsl&quot;&gt;Analytics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Where we used to &lt;a href=&quot;https://github.com/artsy/energy/blob/master/Classes/Controllers/Popovers/Add%20to%20Album/ARAddToAlbumViewController.m#L271-L282&quot;&gt;have this&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ARAddToAlbumViewController&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tableView:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UITableView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didSelectRowAtIndexPath:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSIndexPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;albums&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;n&quot;&gt;Album&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selectedAlbum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Album&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;albums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;n&quot;&gt;ARTickedTableViewCell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARTickedTableViewCell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;cellForRowAtIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isSelected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARAnalytics&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARRemoveFromAlbumEvent&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;withProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;@{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                &lt;span class=&quot;s&quot;&gt;@&amp;quot;artworks&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artworks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                &lt;span class=&quot;s&quot;&gt;@&amp;quot;from&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARNavigationController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;l&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;We would instead build something &lt;a href=&quot;https://github.com/artsy/eigen/blob/master/Artsy/App/ARAppDelegate+Analytics.m#L69&quot;&gt;like this&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ARAppDelegate&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;(Analytics)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setupAnalytics&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;ArtsyKeys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArtsyKeys&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARAnalytics&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setupWithAnalytics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;@{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l&quot;&gt;@{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nl&quot;&gt;ARAnalyticsTrackedEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;l&quot;&gt;@[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                &lt;span class=&quot;l&quot;&gt;@{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                    &lt;span class=&quot;nl&quot;&gt;ARAnalyticsClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARAddToAlbumViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                    &lt;span class=&quot;nl&quot;&gt;ARAnalyticsDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;@[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                        &lt;span class=&quot;l&quot;&gt;@{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                            &lt;span class=&quot;nl&quot;&gt;ARAnalyticsEventName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARRemoveFromAlbumEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                            &lt;span class=&quot;nl&quot;&gt;ARAnalyticsSelectorName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSStringFromSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;didSelectRowAtIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                            &lt;span class=&quot;nl&quot;&gt;ARAnalyticsProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSDictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARAddToAlbumViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;@{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                                    &lt;span class=&quot;s&quot;&gt;@&amp;quot;artworks&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artworks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                                    &lt;span class=&quot;s&quot;&gt;@&amp;quot;from&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARNavigationController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                                &lt;span class=&quot;l&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                        &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                    &lt;span class=&quot;l&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                &lt;span class=&quot;l&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;              &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This gives us the ability to not sprinkle analytics code around the app in every file. It keeps the responsibilities of objects simpler and we&#39;ve been happy with it in Eigen. We&#39;ve not migrated it into Energy, its dependency on ReactiveCocoa brings too much additional weight. So far we&#39;ve been applying analytics inline, Energy has much less need for individual analytics throughout the application. If you want to learn more about this pattern check out &lt;a href=&quot;http://artsy.github.io/blog/2014/08/04/aspect-oriented-programming-and-aranalytics/&quot;&gt;Aspect-Oriented Programming and ARAnalytics&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Class Methods as the whole API&lt;/h2&gt;

&lt;p&gt;For a very long time, I preferred aesthetics of class based APIs. E.g. using only class methods instead instance methods. I think I still do. However, once you start adding tests to a project then they become a bit of a problem.&lt;/p&gt;

&lt;p&gt;I&#39;m a big fan of the idea of Dependency Injection within tests. This, roughly &lt;em&gt;TL:DR&#39;d&lt;/em&gt;, means passing in any additional context, instead of an object finding the context itself. A common case is a call to &lt;code&gt;NSUserDefaults&lt;/code&gt;. It&#39;s very likely &lt;em&gt;not&lt;/em&gt; the role of your class to know which &lt;code&gt;NSUserDefault&lt;/code&gt;s object you&#39;re working with, but it&#39;s likely that you&#39;re making that decision in the method by doing something like &lt;code&gt;[[NSUserDefaults standardUserDefaults] setObject:reminderID forKey:@&quot;ARReminderID&quot;];&lt;/code&gt;. Using dependency injection would be allowing that object to come from outside that method. If you&#39;re interested in a longer and better, explanation, read this great &lt;a href=&quot;https://www.objc.io/issues/15-testing/dependency-injection/&quot;&gt;objc.io&lt;/a&gt; by &lt;a href=&quot;http://qualitycoding.org/about/&quot;&gt;Jon Reid&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The problem with a class based API, is that it becomes difficult to inject that object. This doesn&#39;t flow well with writing simple, fast tests. You can use a mocking library to fake the class API, but that feels weird. Mocking should be used for things you don&#39;t control. You control the object if you&#39;re making the API. Having an instance&#39;d object means being able to provide different versions with different behaviors or values, even better if you can reduce the behavior to &lt;a href=&quot;https://github.com/artsy/eigen/blob/e19ac594bf6240d076e8092d9c56e9876c94444e/Artsy/Networking/Network_Models/ARArtistNetworkModel.h&quot;&gt;a protocol&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Objects Sneakily Networking&lt;/h2&gt;

&lt;p&gt;When you have a complicated application, there can be a lot of places you can perform networking. We&#39;ve had it in models, view controllers and views. Basically throwing the idea of purity in MVC out of the system. We started to recognise a pattern in eigen, we were not doing a good job of keeping our networking well abstracted. If you want to see the full story check out the &lt;a href=&quot;https://github.com/Moya/Moya&quot;&gt;moya/Moya README&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One attempt to at trying to fix this pattern by creating a different type of networking client I&#39;ve just referenced, &lt;a href=&quot;https://github.com/Moya/Moya&quot;&gt;Moya&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The other was to abstract any networking performed into a separate object. If you&#39;ve heard of Model-View-ViewModel (&lt;a href=&quot;http://www.teehanlax.com/blog/model-view-viewmodel-for-ios/&quot;&gt;MVVM&lt;/a&gt;) then this is a similar premise for networking instead of views. Network Models give us a way to abstract the networking into a set of behaviors. The extra abstraction means that you think &quot;I want the things related to &lt;em&gt;x&lt;/em&gt;&quot; instead of &quot;send a GET to address &lt;em&gt;x&lt;/em&gt; and turn it into &lt;em&gt;y&lt;/em&gt;.&quot;&lt;/p&gt;

&lt;p&gt;Network models also make it extremely easy to swap behavior out in tests. In eigen, we have our asynchronous networking &lt;a href=&quot;https://github.com/artsy/eigen/pull/575&quot;&gt;run synchronously in tests&lt;/a&gt; but we still use the network models to be able to provide &lt;a href=&quot;https://github.com/artsy/eigen/blob/master/Artsy_Tests/View_Controller_Tests/Artist/ARArtistViewControllerTests.m#L29-L40&quot;&gt;whatever data we want to expect&lt;/a&gt; from the server in our tests.&lt;/p&gt;

&lt;h2&gt;Subclassing more than twice&lt;/h2&gt;

&lt;p&gt;As projects evolve it can become very easy to subclass &lt;em&gt;x&lt;/em&gt; in order to provide a &quot;similar but a little bit different&quot; behavior. Perhaps you need to &lt;a href=&quot;https://github.com/artsy/eigen/blob/e19ac594bf6240d076e8092d9c56e9876c94444e/Artsy/View_Controllers/Web_Browsing/ARTopMenuInternalMobileWebViewController.m#L58&quot;&gt;override some methods&lt;/a&gt;, or add a &lt;a href=&quot;https://github.com/artsy/eigen/blob/e19ac594bf6240d076e8092d9c56e9876c94444e/Artsy/View_Controllers/Web_Browsing/AREndOfLineInternalMobileWebViewController.h#L5&quot;&gt;specific behavior&lt;/a&gt;. Like the &lt;a href=&quot;http://ezinearticles.com/?The-Boiled-Frog-Phenomenon&amp;amp;id=932310&quot;&gt;urban myth&lt;/a&gt; of a frog being slowly boiled, you end up with a difficult to understand codebase as expected behavior mutates depending on how deep the hierarchy goes.&lt;/p&gt;

&lt;p&gt;One pattern for handling this is &lt;a href=&quot;http://stackoverflow.com/questions/9710411/ios-grasping-composition&quot;&gt;class composition&lt;/a&gt;. This is the idea that instead of having one object do multiple things, you allow a collection of objects to work together. Providing more space for each object to conform to the Single Responsibility Principle (&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;SRP&lt;/a&gt;.) If you&#39;re interested in this, you may also be interested in the &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/ClassClusters/ClassClusters.html&quot;&gt;class clusters&lt;/a&gt; pattern.&lt;/p&gt;

&lt;p&gt;A good example of this comes &lt;a href=&quot;https://github.com/artsy/energy/blob/aa97d90cf37932d4c0f49ea4c4d31f7e491f16a6/Classes/Controllers/Top%20View%20Controller/ARTopViewToolbarController.m&quot;&gt;from Energy&lt;/a&gt;, our root view controller &lt;code&gt;ARTopViewController&lt;/code&gt; used to control its own toolbar items. Over 4 years this became difficult to manage, and a lot of extra code in the view controller. By abstracting out the implementation details of managing the toolbar items into it&#39;s &lt;a href=&quot;https://github.com/artsy/energy/blob/aa97d90cf37932d4c0f49ea4c4d31f7e491f16a6/Classes/Controllers/Top%20View%20Controller/ARTopViewToolbarController.m&quot;&gt;own class&lt;/a&gt; we were able to allow the &lt;code&gt;ARTopViewController&lt;/code&gt; to state what it wanted by not how it was done.&lt;/p&gt;

&lt;h2&gt;Configuration Classes over Inter-Class Communication&lt;/h2&gt;

&lt;p&gt;A one of the most important aspects of Energy is to &lt;a href=&quot;http://folio.artsy.net&quot;&gt;email artworks&lt;/a&gt;. So there is a lot of code around configuring the email you want to send, and then generating HTML from those settings. This started out pretty simple as we had very few app-wide settings. Over time, deciding what we need to show in terms of settings and how they affected the email became very complicated.&lt;/p&gt;

&lt;p&gt;The part that eventually became a strong enough code-smell to warrant a re-write was the view controller which allowed a partner to choose what information to send would pass details individually to an object that would generate the HTML. I found it difficult to write simple tests for the class&#39; behavior. Initially I would mock the email composer, then inspect the methods that were called. This felt wrong, as you shouldn&#39;t really be mocking classes you own. Given the importance of the functionality that classes provide our application, ideas on ways to improve the section of code stayed on my mind for a long time.&lt;/p&gt;

&lt;p&gt;The fix came to me during Justin Searls&#39; talk &lt;a href=&quot;https://speakerdeck.com/searls/sometimes-a-controller-is-just-a-controller&quot;&gt;Sometimes a Controller is Just a Controller&lt;/a&gt; - specifically slide &lt;a href=&quot;https://speakerdeck.com/searls/sometimes-a-controller-is-just-a-controller?slide=55&quot;&gt;55&lt;/a&gt;. Justin talks about objects that &lt;em&gt;either hold and describe a value or perform useful behavior, never both&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I took this advice and re-evaluated the relationship between settings view controller and composer object. Before the change, the settings view controller would configure the composer directly. Now, the settings view controller creates a configuration object and the composer consumes it. This made it &lt;em&gt;significantly&lt;/em&gt; easier to write tests for both objects, as they have very obvious inputs and outputs in the form of a &lt;a href=&quot;https://github.com/artsy/energy/blob/aa97d90cf37932d4c0f49ea4c4d31f7e491f16a6/Classes/Util/Emails/AREmailSettings.h&quot;&gt;AREmailSettings&lt;/a&gt;. The &lt;a href=&quot;https://github.com/artsy/energy/blob/aa97d90cf37932d4c0f49ea4c4d31f7e491f16a6/ArtsyFolio%20Tests/Util/AREmailComposerTests.m&quot;&gt;AREmailComposerTests&lt;/a&gt; in particular become much more elegant.&lt;/p&gt;

&lt;h3&gt;Direct use of Responder Chain&lt;/h3&gt;

&lt;p&gt;Before I worked at Artsy, I was a &lt;a href=&quot;http://i.imgur.com/Am9LjED.gif&quot;&gt;Mac developer&lt;/a&gt;, I&#39;ve been doing that since before iOS existed, so this influences my code style. One of the great parts of the Cocoa toolchain is the &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/event_delivery_responder_chain/event_delivery_responder_chain.html&quot;&gt;responder chain&lt;/a&gt;, a well documented way of passing methods up a known chain of objects. It solves a common problem with complicated view structures. You could have a button that is generated at runtime deep inside a view hierarchy and you would like the view controller to handle it being tapped. You could use a long chain of delegate methods, or use a &lt;a href=&quot;https://twitter.com/unimp0rtanttech/status/555828778015129600&quot;&gt;private method&lt;/a&gt; to get the reference to the view controller instance. On the Mac usage of the responder chain is a common pattern, on iOS it is used rarely.&lt;/p&gt;

&lt;p&gt;We have this problem with our Artwork view controller in Eigen. There are buttons that are many &lt;a href=&quot;https://speakerdeck.com/orta/ios-at-artsy?slide=38&quot;&gt;stack views deep&lt;/a&gt; that need to pass a message back to the view controller. When we first hit this the issue I immediately used the responder chain, you write a &lt;a href=&quot;https://github.com/artsy/eigen/blob/e19ac594bf6240d076e8092d9c56e9876c94444e/Artsy/Views/Artwork/ARArtworkActionsView.m#L85&quot;&gt;line of code&lt;/a&gt; like: &lt;code&gt;[bidButton addTarget:self action:@selector(tappedBidButton:) forControlEvents:UIControlEventTouchUpInside];&lt;/code&gt; where the &lt;code&gt;self&lt;/code&gt; is referring to the view. This would send the message &lt;code&gt;tappedBidButton:&lt;/code&gt; up the responder chain where it is reacted upon by the &lt;a href=&quot;https://github.com/artsy/eigen/blob/e19ac594bf6240d076e8092d9c56e9876c94444e/Artsy/View_Controllers/Artwork/ARArtworkViewController+ButtonActions.m#L114&quot;&gt;ARArtworkViewController&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I had to explain the premise of the responder chain to almost everyone touching this area of the code base. This is great in terms of the &lt;a href=&quot;https://xkcd.com/1053/&quot;&gt;&quot;lucky 10,000&quot;&lt;/a&gt; but  means that the pattern is unintuitive to those who have not previously heard of it. There was one more issue, the lack of coupling means that renaming selectors via refactoring can break the chain.&lt;/p&gt;

&lt;p&gt;The way that we reduced the cognitive load was via a protocol, all of the actions that the responder chain will use are mapped inside &lt;a href=&quot;https://github.com/artsy/eigen/blob/e19ac594bf6240d076e8092d9c56e9876c94444e/Artsy/Views/Artwork/ARArtworkActionsView.h#L10-L20&quot;&gt;ARArtworkActionsViewButtonDelegate&lt;/a&gt;-like protocols. It&#39;s a bit of a white-lie given that there is no direct relationship using the protocol in the app, but it makes the relationship more obvious. We use a class extension that &lt;a href=&quot;https://github.com/artsy/eigen/blob/e19ac594bf6240d076e8092d9c56e9876c94444e/Artsy/View_Controllers/Artwork/ARArtworkViewController+ButtonActions.h#L11&quot;&gt;conforms to these types of protocols&lt;/a&gt; to keep the actions all kept in one place.&lt;/p&gt;

&lt;h3&gt;Wrap-up&lt;/h3&gt;

&lt;p&gt;There are many design patterns, and they all come with trade-offs. Over time, our opinions on what is &quot;good code&quot; changes, this is great. It&#39;s important that as developers we understand that being able to change our minds is one of the most vital skills we have in our toolchain. This means being open to opinions outside of your usual sphere of influence and to maybe bring some good ideas from them. It&#39;s great to be passionate about an aspect of how we craft applications, but from my perspective, the best programmers choose pragmatism over idealism.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/09/01/Cocoa-Architecture-Dropped-Design-Patterns/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/09/01/Cocoa-Architecture-Dropped-Design-Patterns/</guid>
        
        
        <category>architecture</category>
        
        <category>eigen</category>
        
        <category>energy</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
      </item>
    
      <item>
        <title>Swift Trek 2: The Wrath of count()</title>
        <description>&lt;p&gt;On Tuesday at our mobile practice standup, I mentioned that I was in-between projects and looking for something to do. Orta suggested migrating Eidolon, the Artsy bidding kiosk app, to Swift 2.&lt;/p&gt;

&lt;p&gt;Our CI is &lt;a href=&quot;https://github.com/artsy/eidolon/pull/466&quot;&gt;broken anyway&lt;/a&gt;, so now is the perfect opportunity to make changes that would break CI. Additionally, Swift 2 seems to have more-or-less stabilized in the latest betas, so we don&#39;t expect many gotchas leading up to the GM. Finally, this is an enterprise-distributed app, so we don&#39;t have to worry about submitting to the App Store using betas of Xcode.&lt;/p&gt;

&lt;p&gt;So Swift 2 it is!&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;img src=&quot;http://media1.giphy.com/media/7PzALWNJotBxS/giphy.gif&quot; alt=&quot;When your boss tells you that you can use the new Swift version.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I didn&#39;t think it would take long, but Orta was less optimistic. I knew that we would need to start with the dependencies, which was tricky since I was updating to the latest beta (only one day old at this point). Our &lt;a href=&quot;https://github.com/artsy/eidolon/commit/b77a9c2add780a52aac2c48b9cd3a5eb257ab003#diff-4a25b996826623c4a3a4910f47f10c30R59&quot;&gt;Podfile needed some changes&lt;/a&gt;, but a lot of this was work I had done before when initially moving Eidolon to CocoaPods frameworks, then to Swift 1.2.&lt;/p&gt;

&lt;p&gt;Dependencies are weird. Different libraries take different approaches to Swift changes, so I had to evaluate each one individually. Usually it was a matter of telling CocoaPods to use the branch that the library was using for Swift 2 support. It took about an hour or two, but I got our dependencies working.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/IO1QU8E.gif&quot; alt=&quot;When pod update works.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Two of our dependencies, &lt;a href=&quot;https://github.com/Quick/Quick&quot;&gt;Quick&lt;/a&gt; and &lt;a href=&quot;https://github.com/Quick/Nimble&quot;&gt;Nimble&lt;/a&gt;, were a breeze to update – even though we were using way out-of-date versions. We&#39;re really impressed by the well thought-out foundations of their libraries.&lt;/p&gt;

&lt;p&gt;The next thing was getting &lt;em&gt;our own&lt;/em&gt; code to work. This was a lot more work than I had anticipated, since the automatic migrator in Xcode didn&#39;t work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/abykDJa.gif&quot; alt=&quot;When the Xcode migrator fails.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No problem – a lot of the time, Xcode&#39;s autosuggest worked fine, like adding labels to function calls. But it doesn&#39;t catch everything. It turns out that a few hours of manually changing &lt;code&gt;count(array)&lt;/code&gt; to &lt;code&gt;array.count&lt;/code&gt; etc was a great way to zone out and enjoy a summer afternoon.&lt;/p&gt;

&lt;p&gt;After the low-hanging fruit, it was time to move on to the more... esoteric problems. For example, Swift was getting confused by the ambiguity of the &lt;code&gt;&amp;lt;~&lt;/code&gt; we use for ReactiveCocoa 2.x bindings, vs the &lt;code&gt;&amp;lt;~&lt;/code&gt; operator ReactiveCocoa 3.x uses for bindings. Weird.&lt;/p&gt;

&lt;p&gt;I tracked down the problem to precedence. ReactiveCocoa&#39;s &lt;code&gt;&amp;lt;~&lt;/code&gt; has a &lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveCocoa/blob/5b19af9b2777462e37ead2dfea95e1fea74b7d63/ReactiveCocoa/Swift/Property.swift#L193&quot;&gt;precedence of 93&lt;/a&gt;. After I changed &lt;a href=&quot;https://github.com/ashfurrow/Swift-RAC-Macros/commit/57b041d8a99a3e2a90583709ed7ed91f8ca271b8&quot;&gt;ours to match&lt;/a&gt;, everything was fine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://media3.giphy.com/media/PrAMyghZaYjm/giphy.gif&quot; alt=&quot;When your code compiles but you don&#39;t know why.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I noticed a lot of changes surrounding the way Swift handles strings. Apple themselves &lt;a href=&quot;https://developer.apple.com/swift/blog/?id=30&quot;&gt;have discussed changes&lt;/a&gt;, which were fine. I tried to use their &lt;code&gt;.isEmpty&lt;/code&gt; property where I could, but I often had to test if a string &lt;em&gt;wasn&#39;t&lt;/em&gt; empty. &lt;code&gt;!str.isEmpty&lt;/code&gt; doesn&#39;t really sit well with me, so we used &lt;code&gt;str.isEmpty == false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, the problem was further compounded by the changes to &lt;code&gt;UITextField&lt;/code&gt;, whose &lt;code&gt;text&lt;/code&gt; property now returns an &lt;em&gt;optional&lt;/em&gt; string. So there was a lot of this code:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Gross&lt;/em&gt;. We&#39;ve since moved onto &lt;a href=&quot;https://github.com/artsy/eidolon/pull/498&quot;&gt;something nicer&lt;/a&gt;, an experiment with Swift 2&#39;s power protocols. The above code can now be written as:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isNotNilNotEmpty&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Very neat.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://38.media.tumblr.com/tumblr_m8mpwh1gTe1qciljio1_500.gif&quot; alt=&quot;It works!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While Orta and I reviewed the &lt;a href=&quot;https://github.com/artsy/eidolon/pull/496&quot;&gt;pull request&lt;/a&gt;, we noted some things we liked, and some things we didn&#39;t like. I &lt;em&gt;really&lt;/em&gt; like that UIKit now uses Objective-C generic NSArrays so I don&#39;t have to cast so much. I really &lt;em&gt;don&#39;t&lt;/em&gt; like that libraries, mostly the ones that we maintain, don&#39;t use that feature of Objective-C yet. That&#39;s now &lt;a href=&quot;https://github.com/artsy/mobile/issues/54&quot;&gt;on our todo list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://media3.giphy.com/media/52VjAeGgj78GY/giphy.gif&quot; alt=&quot;When you put it on your todo list.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I am amazed at how quickly Swift is changing – as a community, we are still seeing new patterns and methodologies emerge. Not all of them will catch on, of course. But what I&#39;m really excited about is that Swift&#39;s engineers are building tools that let us do &lt;em&gt;so much&lt;/em&gt;. They aren&#39;t making architectural decisions for us, but letting us experiment and discover for ourselves what works and what doesn&#39;t. The future of iOS development has never felt more exciting.&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Aug 2015 05:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/08/27/swift-trek-2-the-wrath-of-count/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/08/27/swift-trek-2-the-wrath-of-count/</guid>
        
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>open source</category>
        
        <category>swift</category>
        
      </item>
    
      <item>
        <title>Cocoa Architecture: Hybrid Apps</title>
        <description>&lt;p&gt;As a part of going through the design patterns we&#39;ve found in the creation of the Artsy iOS apps, I&#39;d like to talk a bit about &lt;em&gt;Hybrid Applications&lt;/em&gt;. A hybrid application refers to an app that uses native code and web content intertwined. Our flagship iOS app, &lt;a href=&quot;https://github.com/artsy/eigen&quot;&gt;eigen&lt;/a&gt; is a hybrid app, and it seems to get more and more hybrid-y each release. Let&#39;s talk a little bit about the pros and cons of this approach.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;hr /&gt;

&lt;h1&gt;What is a Hybrid App&lt;/h1&gt;

&lt;p&gt;Above is the widest possible definition above, so let&#39;s dig in as this can be a contentious. There is a whole spectrum of which an app can be classed as a hybrid app. This ranges from more or less web-tech everywhere to 100% native code like Objective-C / Swift.&lt;/p&gt;

&lt;p&gt;A great example of the furthest to the web-side is &lt;a href=&quot;https://atom.io&quot;&gt;ATOM&lt;/a&gt;, the text editor. It&#39;s on the extreme side because all of the user interface is built using HTML + CSS, and almost all of the app is in javascript. The trade-off for them is that their developers can easy write cross-platform code, that will work reliably with technology that the vast majority of programmers use. This vastly reduces the barrier to entry for contributors and gives ATOM a really large community of programmers to draw from with respect to extending the app.&lt;/p&gt;

&lt;p&gt;An example of a purely native application would be &lt;a href=&quot;https://github.com/artsy/energy/&quot;&gt;Energy&lt;/a&gt;. It&#39;s over a hundred thousand plus lines of Objective-C. Yet under the hood, there&#39;s definitely some web-tech there. Prior to iOS7 &lt;code&gt;UILabel&lt;/code&gt;s, &lt;code&gt;UITextField&lt;/code&gt;s and &lt;code&gt;UITextField&lt;/code&gt;s &lt;a href=&quot;http://www.objc.io/issues/5-ios7/getting-to-know-textkit/&quot;&gt;used WebKit for rendering&lt;/a&gt;. Not to mention that when a Partner sends an email via Energy, the editor is a &lt;code&gt;UIWebView&lt;/code&gt;. However, from the app developer&#39;s perspective they are creating native interactions that are consistent with the rest of the operating system&#39;s behavior.&lt;/p&gt;

&lt;h1&gt;Eigen&lt;/h1&gt;

&lt;p&gt;When we started building Eigen, it was very obvious that we had a Sisyphean task ahead of us. We wanted to take the core ideas of the Artsy website,  &lt;em&gt;The Art World Online&lt;/em&gt;, and convert it into mobile, &lt;em&gt;The Art World in Your Pocket&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;That&#39;s not impossible, but the mobile team was a fraction of the Artsy development team. Any new features added to the website would need a mobile equivalent, and given the speed in which web developer&#39;s can ship, we&#39;d need to outnumber them to stand a chance at keeping up.&lt;/p&gt;

&lt;p&gt;So, we opted for building a highly integrated mobile website at the same time, it would use the same design language as the iOS app and can act as a way for Android devices to access Artsy.&lt;/p&gt;

&lt;h1&gt;Techniques for Doing It Well&lt;/h1&gt;

&lt;p&gt;So we&#39;ll be talking about our &lt;a href=&quot;https://github.com/artsy/eigen/blob/6bb44a01c1b23fb8e92c645c3091fd33725743c3/Artsy/View_Controllers/Web_Browsing/ARInternalMobileWebViewController.m&quot;&gt;ARInteralMobileViewController&lt;/a&gt; - which currently relies on &lt;code&gt;UIWebView&lt;/code&gt; but is in &lt;a href=&quot;https://github.com/artsy/eigen/pull/606&quot;&gt;the process of&lt;/a&gt; migrating to &lt;code&gt;WKWebkit&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Scroll like an &lt;a href=&quot;https://github.com/artsy/eigen/blob/6bb44a01c1b23fb8e92c645c3091fd33725743c3/Artsy/View_Controllers/Web_Browsing/ARExternalWebBrowserViewController.m#L39&quot;&gt;iOS app&lt;/a&gt; by setting the web view&#39;s &lt;code&gt;scrollView.decelerationRate = UIScrollViewDecelerationRateNormal&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use a simple design language to avoid the &lt;a href=&quot;http://tvtropes.org/pmwiki/pmwiki.php/Main/UncannyValley&quot;&gt;uncanny valley&lt;/a&gt;. Care about using the same &lt;a href=&quot;https://github.com/artsy/Artsy-UILabels&quot;&gt;typographical rules&lt;/a&gt; on everything including tabs, buttons and switches.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Take over navigation. This means pushing a &lt;a href=&quot;https://github.com/artsy/eigen/blob/6bb44a01c1b23fb8e92c645c3091fd33725743c3/Artsy/View_Controllers/Web_Browsing/ARInternalMobileWebViewController.m#L180&quot;&gt;new view controller&lt;/a&gt; on the navigation stack every time a user intends to change context.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Take over common OS features. We take over &lt;a href=&quot;https://github.com/artsy/eigen/blob/master/Artsy/View_Controllers/Web_Browsing/ARInternalMobileWebViewController.m#L184-L190&quot;&gt;social sharing&lt;/a&gt;  instead of letting the web site send you to an external page, offering a native share sheet instead.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Downsides&lt;/h1&gt;

&lt;p&gt;When you choose developer ease over user experience it&#39;s important to take into consideration some of the downsides.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Localisation is difficult. Cocoa offers a great localisation APIs. We can&#39;t use them, otherwise half of our app is correctly localised and the rest isn&#39;t.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Conforming to the operating system&#39;s Human Interface Guidelines is difficult, as you&#39;re relying less on foundations built with this in mind.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web tech is slower, and threading APIs are generally poor. A difficulty here is that you are also complicating the technical stack upon which your app sits above. When relying on web-tech in a Mac app, it&#39;s common for that trade-off to show itself in excessive memory usage over time.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Evolution&lt;/h1&gt;

&lt;p&gt;One of the most interesting developments this year in the Cocoa world is Facebook&#39;s &lt;a href=&quot;https://cocoapods.org/pods/React&quot;&gt;react-native&lt;/a&gt;, a bridge between web technology and native code that doesn&#39;t rely on using the &lt;a href=&quot;http://www.quirksmode.org/dom/intro.html&quot;&gt;traditional DOM&lt;/a&gt; - freeing it from a lot of the common problems found in highly web-based apps.&lt;/p&gt;

&lt;p&gt;We&#39;re pretty optimistic about it on the mobile team. We&#39;re not quite willing to jump head-first into a &lt;a href=&quot;http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&quot;&gt;pre-1.0 technology&lt;/a&gt; again, but it shows a lot of promise.&lt;/p&gt;

&lt;p&gt;The fact that we were able to ship an app at all was because we could build the parts that meant the most to us native, then rely on web technologies to cover the rest of the ground. By being pragmatic in our approach to using web tech, we have the chance to stand on the shoulders of giants.&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Aug 2015 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/08/24/Cocoa-Architecture-Hybrid-Apps/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/08/24/Cocoa-Architecture-Hybrid-Apps/</guid>
        
        
        <category>architecture</category>
        
        <category>eigen</category>
        
        <category>hybrid</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
      </item>
    
      <item>
        <title>Cocoa Architecture: ARSwitchboard</title>
        <description>&lt;p&gt;As a part of going through the design patterns we&#39;ve found in the creation of the Artsy iOS apps, I&#39;d like to introduce the Switchboard pattern. This evolved quite naturally out of &lt;a href=&quot;/blog/2015/08/15/Cocoa-Architecture:-Router-Pattern/&quot;&gt;ARRouter&lt;/a&gt; when applied to generating view controllers instead of API requests.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;hr /&gt;

&lt;h1&gt;Where we started&lt;/h1&gt;

&lt;p&gt;In what must be one of my best named commits, &lt;code&gt;b9ff28&lt;/code&gt; aka &lt;em&gt;&quot;CREATING THE VOID&quot;&lt;/em&gt; introduced an &lt;code&gt;ARSwitchboard&lt;/code&gt; to Eigen. Aside from this being the commit where I could finally write &lt;code&gt;[ARVoidViewController theVoid]&lt;/code&gt; it added support for tapping an Artwork on the home-screen and going to another view controller.&lt;/p&gt;

&lt;p&gt;We knew up-front that we needed to emulate the website&#39;s URL schemes, so we needed to come up with a way to support two ways of loading up a view controller. Here&#39;s what it looked like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;31&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;32&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;33&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;34&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;35&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;36&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;37&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;38&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;39&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;40&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;41&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ARSwitchBoard&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setupRouter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;artsyHosts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSSet&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setWithObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;art.sy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;artsyapi.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;artsy.net&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCRouter&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;/artwork/:id&amp;quot;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;loadArtworkFromURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;navigateToURL:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isInternalURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCRouter&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;canRespondToRoute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCRouter&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;//        [self openInternalBrowser:url];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isInternalURL:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;hasPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;www&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;substringFromIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artsyHosts&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;containsObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;cp&quot;&gt;#pragma mark -&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;cp&quot;&gt;#pragma mark Artworks&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loadAttachmentCollection:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AttachmentCollection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;collection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARVoidViewController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theVoid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;loadArtworkViewWithAttachmentCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loadArtwork:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Artwork&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;artwork&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;AttachmentCollection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AttachmentCollection&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;collectionWithItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;@[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artwork&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;andIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;loadAttachmentCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loadArtworkFromURL:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARVoidViewController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theVoid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;loadArtworkViewWithID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;It shows the pattern&#39;s humble origins quite well. The &lt;code&gt;ARSwitchboard&lt;/code&gt; provides an API that any object can call, and it will handle presenting the view controller. Offering an API that can either use arbitrary URLs or model objects.&lt;/p&gt;

&lt;h2&gt;Where the pattern evolved&lt;/h2&gt;

&lt;p&gt;I initially wrote this during my &quot;Class methods look prettier&quot; stage. Our &lt;code&gt;ARSwitchboard&lt;/code&gt; has evolved into using instance methods, and it uses a sharedInstance. This makes writing tests for the routing extremely simple for &lt;a href=&quot;https://github.com/artsy/energy/blob/master/ArtsyFolio%20Tests/Util/ARSwitchboardTests.m&quot;&gt;easy use cases&lt;/a&gt;, and possible &lt;a href=&quot;https://github.com/artsy/eigen/blob/2eb00a8050a69ab2e05ffeb11a2bbdcbadf9fb7e/Artsy_Tests/App_Tests/ARSwitchBoardTests.m&quot;&gt;for the complex&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The pattern was established pretty well by the time it was integrated &lt;a href=&quot;https://github.com/artsy/energy/blob/a35969d232d8309fd2aedaae35f2dbdf6d505004/Classes/Util/App/ARSwitchBoard.m&quot;&gt;into Energy&lt;/a&gt;. Some of it&#39;s highlights are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The sharedInstance is &lt;a href=&quot;https://github.com/artsy/energy/blob/a35969d232d8309fd2aedaae35f2dbdf6d505004/Classes/Util/App/ARSwitchBoard.m#L20-L31&quot;&gt;set up&lt;/a&gt; with some of the other singletons, from that point on it only acts on properties it owns.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It deals with setting up entire &lt;a href=&quot;https://github.com/artsy/energy/blob/a35969d232d8309fd2aedaae35f2dbdf6d505004/Classes/Util/App/ARSwitchBoard.m#L229-L259&quot;&gt;view hierarchies&lt;/a&gt;. Not just pushing another view on to a &lt;code&gt;UINavigationController&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Internal Routing&lt;/h2&gt;

&lt;p&gt;We try to make all view controllers that could represent a URL have two initializers; one that accepts a full model object and another that works off an ID. This means that we can provide as much context as we can initially, but can generate everything at runtime if you&#39;ve come from a push notification or from another app.&lt;/p&gt;

&lt;p&gt;We use an internal routing tool to do the heavy-lifting here, currently this is &lt;a href=&quot;https://cocoapods.org/pods/JLRoutes&quot;&gt;JLRoutes&lt;/a&gt; which we use to map URLs to blocks and dictionaries.&lt;/p&gt;

&lt;h2&gt;Difficulties&lt;/h2&gt;

&lt;p&gt;With Eigen we&#39;re trying to map the whole data-set of Artsy into a single app, which likely an architecture post of it&#39;s own. However, one of the issues we&#39;re having that really strains this metaphor is ambiguity in the routing system. For us this crops up in two places:
- The URL &lt;a href=&quot;https://github.com/artsy/eigen/pull/534&quot;&gt;routing structure&lt;/a&gt; you&#39;re mapping against can change.
- When one route could have &lt;a href=&quot;https://github.com/artsy/eigen/blob/2eb00a8050a69ab2e05ffeb11a2bbdcbadf9fb7e/Artsy/App/ARSwitchBoard.m#L156&quot;&gt;many types&lt;/a&gt; of data.&lt;/p&gt;

&lt;p&gt;Handling routes that changes is something we ended up building an &lt;a href=&quot;https://github.com/artsy/echo/blob/master/app/api/v1/presenters/route_presenter.rb&quot;&gt;API for&lt;/a&gt;. It provides a JSON package of routes and names, and Eigen updates its routing internally.&lt;/p&gt;

&lt;p&gt;Having one route represent multiple &lt;em&gt;potential&lt;/em&gt; view controllers is tricky. We didn&#39;t want to introduce asynchronicity to the &lt;code&gt;ARSwitchboard&lt;/code&gt;, so we use &lt;a href=&quot;https://github.com/artsy/eigen/blob/2eb00a8050a69ab2e05ffeb11a2bbdcbadf9fb7e/Artsy/View_Controllers/Fair/ARProfileViewController.m#L55-L66&quot;&gt;polymorphic view controllers&lt;/a&gt;. This is a technique where the view controller returned then looks deeper into what it is representing and using child view controllers, embeds the true view controller inside itself.&lt;/p&gt;

&lt;h2&gt;Future&lt;/h2&gt;

&lt;p&gt;Like all patterns, our &lt;code&gt;ARSwitchboard&lt;/code&gt; pattern is evolving. With Eigen we have  a complicated navigation stack, due to supporting app-wide tabs and hosting navigation controllers inside view controllers. This adds additional logic to pretty complicated code when we&#39;re dealing with URLs that could be root elements of a tab. So we are planning to eventually move the presentation aspect of the &lt;code&gt;ARSwitchboard&lt;/code&gt; into a separate object.&lt;/p&gt;

&lt;h2&gt;Alternatives&lt;/h2&gt;

&lt;p&gt;We didn&#39;t need an &lt;code&gt;ARSwitchboard&lt;/code&gt; in Eidolon. Which, so far always seems to be the exception in these architecture pattern posts. Instead we opted for Apple&#39;s &lt;a href=&quot;http://www.objc.io/issues/15-testing/dependency-injection/#which-di-framework-should-i-use&quot;&gt;Dependency Injection tool&lt;/a&gt;, Interface Builder + Storyboards. Energy pre-dates Storyboards, and they didn&#39;t feel like a good fit for Eigen.&lt;/p&gt;

&lt;p&gt;We found storyboards to be a really good replacement to this pattern when you have an established series of steps in your application with some well defined connections.&lt;/p&gt;

&lt;p&gt;As an example, our on-boarding process for Eigen probably should have been storyboarded, as it&#39;s a series of view controllers pushed incrementally. However given that the rest of Eigen is essentially a web of interconnected view controllers, we&#39;d be abusing the tool.&lt;/p&gt;

&lt;h2&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;So the Switchboard is a way that we&#39;ve managed to contain some of the complexity around having web-like abilities to jump between any two view controllers. This pattern makes it easy to stub a switchboard in tests, and to easily test the routing itself.&lt;/p&gt;

&lt;p&gt;When I looked through some of the other open source iOS apps to compare the pattern, I couldn&#39;t find anything similar. So if you do have something similar, you should probably Open Source your app ;)&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Aug 2015 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/08/19/Cocoa-Architecture-Switchboard-Pattern/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/08/19/Cocoa-Architecture-Switchboard-Pattern/</guid>
        
        
        <category>architecture</category>
        
        <category>eidolon</category>
        
        <category>eigen</category>
        
        <category>energy</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
      </item>
    
      <item>
        <title>Cocoa Architecture: ARRouter</title>
        <description>&lt;p&gt;I want to talk about a pattern that we&#39;ve been using for the last few years on the Artsy Mobile team. This pattern pre-dates me joining Artsy by a few weeks, and was introduced into our codebase by &lt;a href=&quot;http://90wpm.com&quot;&gt;Ben Jackson&lt;/a&gt;, this was the &lt;code&gt;ARRouter&lt;/code&gt;&#39;s first method:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;newOAuthURLWithUsername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;bp&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;initWithObjectsAndKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                              &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                              &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                              &lt;span class=&quot;n&quot;&gt;ARAuthClientID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;client_id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                              &lt;span class=&quot;n&quot;&gt;ARAuthSecret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;client_secret&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                              &lt;span class=&quot;s&quot;&gt;@&amp;quot;credentials&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;grant_type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                              &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;initWithFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;%@%@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AROAuthURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;bp&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARRouter&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;newURLWithPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Yep, that&#39;s pre-ARC, pre-Dictionary Literals, memory-managed code. We took this pattern and rolled with it for the next 4 years, this article is about where we&#39;ve taken it.&lt;/p&gt;

&lt;p&gt;Within Eigen, &lt;code&gt;ARRouter&lt;/code&gt; is one of our &lt;a href=&quot;https://github.com/artsy/eigen/blob/904e8abfc11ce6ea4b6e81f0e02684b755a280c3/Artsy/Networking/ARRouter.m&quot;&gt;biggest classes&lt;/a&gt;, coming in at almost 1,000 lines of code. Whereas in Energy, it sits at a &lt;a href=&quot;https://github.com/artsy/energy/blob/e51529250ede359c781042f222d5836eb9e8a979/Classes/Util/App/ARRouter.m&quot;&gt;more reasonable&lt;/a&gt; 300 lines. Eidolon does not have an ARRouter, what gives?&lt;/p&gt;

&lt;!-- more --&gt;


&lt;hr /&gt;

&lt;h2&gt;Pattern Evolution&lt;/h2&gt;

&lt;p&gt;We started out with a Router object as being something that can take a model object, and return a &lt;code&gt;NSURL&lt;/code&gt; corresponding to a server side end-point.&lt;/p&gt;

&lt;p&gt;This worked pretty well, we shipped a 1.0 of Energy with this pattern. However, it become obvious that we were putting a lot of extra knowledge about the type and the parameters of request into classes whose responsibility was not generating a route. For example, user account creation, and user account deletion would use the same &lt;code&gt;NSURL&lt;/code&gt; but have different HTTP methods.&lt;/p&gt;

&lt;p&gt;We migrated our networking stack to using AFNetworking &lt;code&gt;1.0&lt;/code&gt;, and started using CocoaPods instead of manually dragging and dropping code. With this in mind, we improved on the pattern and started returning &lt;code&gt;NSURLRequest&lt;/code&gt;s which better encapsulate the server end-point request we were trying to map in the Router.&lt;/p&gt;

&lt;p&gt;The pattern evolved when mixed with a &lt;a href=&quot;http://cocoadocs.org/docsets/AFNetworking/1.3.4/Classes/AFHTTPClient.html&quot;&gt;AFHTTPClient&lt;/a&gt; to act as the base URL resolver, allowing us to easily switch between staging and production environments, and as a central point for hosting all HTTP headers. This meant it was trivial to generate authenticated &lt;code&gt;NSURLRequest&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;As it is presently, this pattern is working. We&#39;ve just wrapped up a new Pod, &lt;a href=&quot;https://github.com/artsy/Artsy_Authentication&quot;&gt;Artsy Authentication&lt;/a&gt;. It&#39;s a library that has an &lt;code&gt;ARRouter&lt;/code&gt; that behaves &lt;a href=&quot;https://github.com/artsy/Artsy_Authentication/blob/master/Pod/Classes/ArtsyAuthenticationRouter.h&quot;&gt;exactly like above&lt;/a&gt;. We continue to build new apps with the pattern.&lt;/p&gt;

&lt;h2&gt;Siblings&lt;/h2&gt;

&lt;p&gt;This pattern is standing the test of time, but that doesn&#39;t mean we&#39;re not actively trying to experiment within the domain. There are three interesting offshoots from our work on &lt;code&gt;ARRouter&lt;/code&gt; that are worth talking about.&lt;/p&gt;

&lt;h4&gt;Got the Routes like Swagger&lt;/h4&gt;

&lt;p&gt;The difference between Eigen&#39;s &lt;code&gt;ARRouter&lt;/code&gt; and Energy&#39;s &lt;code&gt;ARRouter&lt;/code&gt; is pretty simple. Eigen&#39;s networking scope is an order of magnitude larger. This is a reflection on the varied data that Eigen is interested in, while Energy has a tight scope on specifically Artsy Parter related data.&lt;/p&gt;

&lt;p&gt;During the new year of 2015, I explored the &lt;a href=&quot;https://github.com/orta/GotTheRoutesLikeSwagger&quot;&gt;idea of programmatically generating&lt;/a&gt; an &lt;code&gt;ARRouter&lt;/code&gt; as a CocoaPod, and then using CocoaPods&#39; subspecs to make it easy to define what collections of end-points you were interested in. This project is based on a standard in which an API is documented, &lt;a href=&quot;http://swagger.io&quot;&gt;Swagger&lt;/a&gt;. This meant as an API consumer, I can generate the types of &lt;code&gt;NSURLRequest&lt;/code&gt;s I would require from the API itself. It created files that looked like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Generated by Routes Like Swagger - 31/12/14&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ARRouter&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;(User)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;/// Retrieve a user by id.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;/// @return URLRequest for /api/v1/user/{id}.{format}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getUserWithID:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;slug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;/// Update an existing user.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;/// @return URLRequest for /api/v1/user/{id}.{format}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;updateUserWithID:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;slug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This was a pretty nice expansion of the pattern, but overall felt a bit over-engineered and so, it was left as just an experiment.&lt;/p&gt;

&lt;h4&gt;Moya&lt;/h4&gt;

&lt;p&gt;When we started an entirely fresh application, we noted down all the networking-related pain points felt from Eigen and Energy. The Router pattern was pretty good, but we were finding that we were having problems with the API consuming part of the &lt;code&gt;NSURLRequest&lt;/code&gt;s. Mainly, a difficulty in testing, an inconsistency in how we would perform networking and that it didn&#39;t feel declarative.&lt;/p&gt;

&lt;p&gt;Moya is our attempt at fixing this. I won&#39;t go into depth on what Moya is, we&#39;ve &lt;a href=&quot;/blog/2014/09/22/transparent-prerequisite-network-requests/&quot;&gt;written articles&lt;/a&gt; on this already. The part that is interesting is that it obviates an ARRouter by using a collection of Swift enums - forcing developers to include all necessary metadata an an end-point.&lt;/p&gt;

&lt;h4&gt;HAL, and API v2&lt;/h4&gt;

&lt;p&gt;The Router pattern relies on the idea that you know all the routes ahead of time, and add support for them as you build out each part of the app. &lt;a href=&quot;http://stateless.co/hal_specification.html&quot;&gt;HAL, a Hypermedia Application Layer&lt;/a&gt; - can be approximated as being a self describing API. dB. wrote about it in &lt;a href=&quot;/blog/2014/09/12/designing-the-public-artsy-api/&quot;&gt;this blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This means that you ask the API how to get certain bits of data, and it will describe the ways in which you can access it.&lt;/p&gt;

&lt;p&gt;Artsy&#39;s future APIs are using this, and the Router pattern is, more or less, totally deprecated in this world. This is what an artwork&#39;s JSON data looks like in v2:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;31&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;32&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;33&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;34&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;35&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;36&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;37&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;38&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;39&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;40&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;41&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;42&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;43&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;44&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;45&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;46&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;47&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;48&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;49&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;50&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;51&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;52&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;53&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;54&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;55&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;json&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4d8b92bb4eb68a1b2c00044a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2010-11-15T16:32:38+00:00&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;updated_at&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2015-08-16T09:26:26+00:00&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Jeff Koons&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;sortable_name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Koons Jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;gender&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;male&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;birthday&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1955&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;hometown&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;York, Pennsylvania&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;New York, New York&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;nationality&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;American&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;_links&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;curies&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;image&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://d32dm0rphc51dk.cloudfront.net/Uqad2mGhbNGhAUgb8bUvIA/{rel}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;quot;templated&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;thumbnail&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://d32dm0rphc51dk.cloudfront.net/Uqad2mGhbNGhAUgb8bUvIA/four_thirds.jpg&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;image:self&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{?image_version}.jpg&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;templated&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;self&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.artsy.net/api/artists/4d8b92bb4eb68a1b2c00044a&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;permalink&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.artsy.net/artist/jeff-koons&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;artworks&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.artsy.net/api/artworks?artist_id=4d8b92bb4eb68a1b2c00044a&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;published_artworks&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.artsy.net/api/artworks?artist_id=4d8b92bb4eb68a1b2c00044a&amp;amp;published=true&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;similar_artists&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.artsy.net/api/artists?similar_to_artist_id=4d8b92bb4eb68a1b2c00044a&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;similar_contemporary_artists&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.artsy.net/api/artists?similar_to_artist_id=4d8b92bb4eb68a1b2c00044a&amp;amp;similarity_type=contemporary&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;genes&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.artsy.net/api/genes?artist_id=4d8b92bb4eb68a1b2c00044a&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;image_versions&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;four_thirds&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;large&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;square&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;tall&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;You can see that via the _links section, curies and self-referential urls, you can build network client which traverses the API without built-in implicit knowledge.&lt;/p&gt;

&lt;p&gt;It&#39;s a really exciting pattern, and as client developers, we can work on improving standard API clients that work on all HAL APIs. Instead of something specific to Artsy&#39;s API. A lot of the most interesting work in the Cocoa space has been done by Kyle Fuller with &lt;a href=&quot;https://cocoapods.org/pods/Hyperdrive&quot;&gt;Hyperdrive&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Wrap Up&lt;/h3&gt;

&lt;p&gt;Given that we&#39;re not writing applications against the v2 API, yet. The Router pattern is working fine for us at Artsy. It can be a really nice way to abstract out a responsibility that may currently be sitting inside a very large API client that might be worth extracting out.&lt;/p&gt;

&lt;p&gt;Let us know what you think, send tweets to &lt;a href=&quot;https://twitter.com/ArtsyOpenSource&quot;&gt;@ArtsyOpenSource&lt;/a&gt; on twitter. Ps. it&#39;s pronounced &quot;rooter&quot;.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Aug 2015 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/08/15/Cocoa-Architecture-Router-Pattern/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/08/15/Cocoa-Architecture-Router-Pattern/</guid>
        
        
        <category>architecture</category>
        
        <category>eidolon</category>
        
        <category>eigen</category>
        
        <category>energy</category>
        
        <category>hal</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
      </item>
    
      <item>
        <title>Peer Lab</title>
        <description>&lt;p&gt;When I was living in Amsterdam, I participated in plenty of &lt;a href=&quot;https://appsterdam.rs&quot;&gt;Appsterdam&lt;/a&gt; events. Things like the weekly Meeten en Drinken. I even helped lead a class in Swift. One of the events I liked the most was called Peer Lab, organized every Saturday morning by &lt;a href=&quot;https://twitter.com/samuelgoodwin&quot;&gt;Samuel Goodwin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The idea of Peer Lab is pretty simple, but also somewhat profound: developers gather in a physical space to work on things. If someone has a question, they ask the group. If you can help, you offer assistance. The goal is to foster a collaborative learning environment where everyone feels fulfilled.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;Samuel held Peer Lab on Saturday mornings to dissuade recruiters from attending. The café where we met had wifi and good coffee, which is all you really need when you&#39;re trying to get something accomplished on a Saturday morning.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;http://photos.ashfurrow.com/autumn-in-amsterdam&#39;&gt;&lt;img src=&quot;/images/2015-08-10-peer-lab/amsterdam.jpg&quot; title=&quot;Amsterdam&quot; &gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;Before I moved to New York, I talked to Orta about organizing something similar at the Artsy offices. He was very receptive and excited to see it happen. I would be there every Saturday from 10:30-12:30 to host, and Artsy would provide the space, the wifi, and some free coffee and snacks. Pretty minimal costs. Orta offered the &lt;a href=&quot;http://www.meetup.com/CocoaPods-NYC/events/222362372/&quot;&gt;CocoaPods NYC meetup group&lt;/a&gt; as a place to promote the event. We&#39;ve also been mentioning it to people we meet at other tech events in New York.&lt;/p&gt;

&lt;p&gt;It&#39;s been about six months, and I feel that the Peer Lab has been a fantastic success. Every week, I get to meet developers – some regulars and some newcomers. We sit around, talk shop, code, and hang out until pizza arrives for lunch.&lt;/p&gt;

&lt;p&gt;From my perspective, it&#39;s been great. I get to meet other developers in a really chill setting, and it gets me out of the house early on Saturday. It sets an awesome tone for the rest of the weekend.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;https://instagram.com/p/5dlU_MyORN/&#39;&gt;&lt;img src=&quot;/images/2015-08-10-peer-lab/coffee.jpg&quot; title=&quot;Nothing like a cup of coffee&quot; &gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;Everyone seems to have a good time – people meet, chat, work away on their projects or open source or whatever. Attendance includes iOS experts, iOS beginners, and everyone in between. Non-iOS developers are always welcome, but the CocoaPods branding – and the network of people Orta and I know – make it somewhat iOS-centric. We&#39;re working on that.&lt;/p&gt;

&lt;p&gt;We&#39;ve been doing our best to create an inclusive environment, with an emphasis placed on &lt;a href=&quot;http://cocoapods.org/legal&quot;&gt;CocoaPods&#39; Code of Conduct&lt;/a&gt;. Importantly, the event creates a space where developers can meet, work, and socialize outside of the regular alcohol-soaked meetup scene. There&#39;s nothing wrong with booze at tech meetups, but it&#39;s nice to have a space where people can socialize outside that context.&lt;/p&gt;

&lt;p&gt;The Peer Lab is a cost-effective way for Artsy to get respect from the NYC developer scene. This is good for &lt;a href=&quot;http://ashfurrow.com/blog/sharing-is-selfish/&quot;&gt;all manner of reasons&lt;/a&gt;, and it only costs a pizza every week.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;https://instagram.com/p/31tKTiGZVC/&#39;&gt;&lt;img src=&quot;/images/2015-08-10-peer-lab/classroom.jpg&quot; width=&quot;1280&quot; title=&quot;The Classroom at Artsy&quot; &gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;So I&#39;m happy, the people who attend are happy, and Artsy is happy.&lt;/p&gt;

&lt;p&gt;But there&#39;s a problem.&lt;/p&gt;

&lt;p&gt;Not everyone can make it to Artsy&#39;s lower Manhattan office every Saturday morning. Some developers live too far away, or have family/work obligations Saturday morning.&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;I want to see more Peer Labs pop up across New York, and across the world. I want you, reader, to consider starting one. It&#39;s super easy to do, I promise!&lt;/p&gt;

&lt;p&gt;You don&#39;t even need a company or sponsor to organize something like this. You&#39;ll be surprised how easy it is.&lt;/p&gt;

&lt;p&gt;I have a few friends living near Toronto that get together weekly at a café to work together. They tweet about it and invite others. It&#39;s nothing formal, but it&#39;s valuable time for them.&lt;/p&gt;

&lt;p&gt;A Peer Lab by any other name is still an awesome idea.&lt;/p&gt;

&lt;p&gt;If you &lt;em&gt;are&lt;/em&gt; a company, and you&#39;re looking for an easy way to meet talented developers, hosting or sponsoring a Peer Lab is definitely worth considering. There are a &lt;em&gt;tonne&lt;/em&gt; of meetups in tech, but most revolve around evening drinks, maybe pizza, maybe a talk. A Peer Lab can help you stand out – even people who don&#39;t attend are thinking &quot;oh, that&#39;s cool.&quot;&lt;/p&gt;

&lt;p&gt;Nice job, company.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;https://instagram.com/p/yNNXtKJqrk/&#39;&gt;&lt;img src=&quot;/images/2015-08-10-peer-lab/couch.jpg&quot; width=&quot;1280&quot; title=&quot;Bart the Art Plant&quot; &gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;How to Peer Lab in four simple steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Pick a Time&lt;/strong&gt;. When are &lt;em&gt;you&lt;/em&gt; free to do this? Do you like working in the evenings? Awesome! Do it then. Are Sunday afternoons your jam? Sweet. Whenever works for you.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Find a Space&lt;/strong&gt;. This is easier than it sounds, trust me. As an organizer, you need a space that&#39;s convenient &lt;em&gt;for you&lt;/em&gt;. I use my workplace because I live nearby. Samuel used a café by his apartment. Anywhere that has wifi. Pick a place that works for your time – for example, if you&#39;re meeting in the morning, a place with coffee is a good idea.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Let the World Know&lt;/strong&gt;. Tweet it, send it to some friends, whatever works. You could ask your employer to pay for a Meetup account. Send details to popular developers in your city and ask them to help spread the word 🎉&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Show Up&lt;/strong&gt;. Most of success is just showing up. At the very least, you&#39;ve got a nice time to jam every week, and hopefully you&#39;ll meet some other people to jam with.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Keep things as simple as possible so Peer Lab stays something fun that you look forward to, and doesn&#39;t become a chore. Like I said, six months in and I still love it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Peer Lab is a fun and rewarding activity. From my perspective, from attendees&#39; perspectives, and from Artsy&#39;s perspective. It&#39;s simply awesome.&lt;/p&gt;

&lt;p&gt;Whether you&#39;re a developer or a company, an expert or a beginner, I highly encourage you to start one of your own.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;https://ortastuff.s3.amazonaws.com/gifs/three-hands.gif&#39;&gt;&lt;img src=&quot;https://ortastuff.s3.amazonaws.com/gifs/three-hands.gif&quot; width=&quot;1280&quot; title=&quot;Thumbs Up&quot; &gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Aug 2015 10:57:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/08/10/peer-lab/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/08/10/peer-lab/</guid>
        
        
        <category>community</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>open source</category>
        
        <category>oss</category>
        
      </item>
    
      <item>
        <title>Open Sourcing Energy</title>
        <description>&lt;p&gt;The Artsy Mobile team is pretty aggressive in our stance on &lt;a href=&quot;http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html&quot;&gt;Open Source by Default&lt;/a&gt;. We&#39;ve talked about it at &lt;a href=&quot;https://www.youtube.com/watch?v=2DvDeEZ0NDw&amp;amp;spfreload=10&quot;&gt;conferences&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=SjjvnrqDjpM&quot;&gt;around&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=zPbLYWmLPow&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;https://speakerdeck.com/orta/ios-at-artsy&quot;&gt;world&lt;/a&gt;, in &lt;a href=&quot;http://www.objc.io/issues/22-scale/artsy&quot;&gt;renowned magazines&lt;/a&gt; and on &lt;a href=&quot;http://artsy.github.io/blog/2015/04/28/how-we-open-sourced-eigen/&quot;&gt;our blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&#39;s worth mentioning that we don&#39;t just talk externally about Open Source. Internally, the Mobile team runs talks about Open Source for the rest of the Artsy staff. As well, we discuss the tooling and business implications of having our work in public repos. Artsy strives for an open culture, in this case the development team, on the whole, is just further along in the process.&lt;/p&gt;

&lt;p&gt;The Open Source app idea started with an experiment in the Summer of 2014, asking, &quot;What does a truly Open Source App look like?&quot; The outcome of that was our Swift Kiosk app, &lt;a href=&quot;https://github.com/artsy/eidolon/&quot;&gt;Eidolon&lt;/a&gt;. Open from day one. We took the knowledge from that and applied it to our public facing app, &lt;a href=&quot;https://github.com/artsy/eigen/&quot;&gt;Eigen&lt;/a&gt;. Open from day 806. That made 2/3rds of our apps Open Source.&lt;/p&gt;

&lt;p&gt;I&#39;m going to talk about our final app, &lt;a href=&quot;https://github.com/artsy/energy&quot;&gt;Energy&lt;/a&gt;. Open from day 1433 and ~3500 commits.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-08-01-open-sourcing-energy/ENERGY.png&quot; alt=&quot;ENERGY&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Energy is commonly known as &lt;a href=&quot;http://folio.artsy.net&quot;&gt;Artsy Folio&lt;/a&gt;. It&#39;s a tool for Artsy&#39;s Partners to showcase their artworks on the go, and quickly email them. Here&#39;s a beautiful splash showing it in action.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;http://folio.artsy.net/images/cover-bbf6fdf4.jpg&#39;&gt;&lt;img src=&quot;http://folio.artsy.net/images/cover-bbf6fdf4.jpg&quot; title=&quot;Folio overview&quot; &gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;This app comes from the pre-CocoaPods, pre-ARC, pre-UICollectionView and pre-Auto Layout days. It spent 3 years with no tests, but has come up to over 50% code coverage in the last year. It&#39;s testing suite is super fast, given that we learned a lot with Eigen&#39;s tests we stuck with five main principals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No un-stubbed HTTP requests.&lt;/li&gt;
&lt;li&gt;Avoid &lt;code&gt;will&lt;/code&gt;s in a test as much as possible.&lt;/li&gt;
&lt;li&gt;Never allow access to the main Core Data instance in tests&lt;/li&gt;
&lt;li&gt;Dependency Inject anything&lt;/li&gt;
&lt;li&gt;Use snapshots to test view controller states&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;On Opening Folio&lt;/h3&gt;

&lt;p&gt;Folio is interesting in that it has competitors. To some extent the Kiosk app does too, but the cost of entry there is really high in comparison. Folio on the other hand, has a handful of competing businesses who exist to &lt;em&gt;only&lt;/em&gt; build a Gallery/Museum/Collector portfolio app. In opening the code for Folio, we&#39;re not making it easy for people to copy and paste our business, it&#39;s very directly tied to Artsy&#39;s APIs and &lt;a href=&quot;http://www.dylanfareed.com/projects/artsy-cms/&quot;&gt;CMS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I commonly get questions about the process of Open Sourcing an app, so here&#39;s what happened after I decided it was time. First, I emailed my intent:&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/2015-08-01-open-sourcing-energy/oss-energy-email.png&#39;&gt;&lt;img src=&quot;/images/2015-08-01-open-sourcing-energy/oss-energy-email.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;The concepts I wanted to cover were: &quot;This is a codebase is worthy of art&quot;, &quot;We know what we&#39;re doing&quot;, &quot;This doesn&#39;t make it simple for someone to create a business off our product&quot; and &quot;I&#39;ve managed to get a lot of the source out already.&quot; I gave a month or so to ensure that I could have corridor chats with people, in order to be very certain around opinions. We had some discussions in the email thread about ways in which an open source&#39;d Energy would impact the team, and overall the reaction was positive. This wasn&#39;t surprising, the non-technical parts of the team are regularly kept up to date on thoughts like this.&lt;/p&gt;

&lt;p&gt;After the internal announcement I started looking at the codebase, what should be cleaned up. I don&#39;t believe a codebase is ever perfect ( just look at Eigen&#39;s &lt;a href=&quot;https://raw.githubusercontent.com/artsy/eigen/3f29f61f2b96f516e9ecf407818b82911b268694/HACKS.md&quot;&gt;HACKS.md&lt;/a&gt; ) but one thing I learned from the launch of Eigen is that we need a lot of beginner docs to help people get started. So I went into Energy&#39;s &lt;a href=&quot;https://github.com/artsy/energy/tree/master/docs&quot;&gt;docs&lt;/a&gt; directory and started comparing it to &lt;a href=&quot;https://github.com/artsy/eigen/tree/master/docs&quot;&gt;Eigen&lt;/a&gt;&#39;s.&lt;/p&gt;

&lt;p&gt;With the docs ready, we anticipated the repo change as we did &lt;a href=&quot;/blog/2015/04/28/how-we-open-sourced-eigen/&quot;&gt;with Eigen&lt;/a&gt;. This means making sure all loose pull requests were wrapped up. All code comments were audited. Then we used &lt;a href=&quot;https://github.com/google/github-issue-mover&quot;&gt;github-issue-mover&lt;/a&gt; to migrate important issues to the new repo. Then we deleted the &lt;code&gt;.git&lt;/code&gt; folder in the app, and &lt;code&gt;git init&lt;/code&gt; to create a new repo.&lt;/p&gt;

&lt;p&gt;Given that we have three Open source apps now, I wanted to give them a consistent branding when we talk about the apps from the context of the codebase. It&#39;s like programming, if you&#39;re writing a similar thing 3 times, definitely time to refactor.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/2015-08-01-open-sourcing-energy/oss-design-sketch.png&#39;&gt;&lt;img src=&quot;/images/2015-08-01-open-sourcing-energy/oss-design-sketch.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;Finally, I started working on the announcement blog post. Which you&#39;re reading. I&#39;ll send a &lt;a href=&quot;https://github.com/artsy/artsy.github.com/pull/119&quot;&gt;pull request&lt;/a&gt; for this blog post, then when it&#39;s merged. I&#39;ll make one more final look over how everything looks, then make the new Energy repo public.&lt;/p&gt;

&lt;h3&gt;On more than just Opening Source&lt;/h3&gt;

&lt;p&gt;Eigen, the public facing iOS app, allows people to log in with a trial user account. We also have a known API Key + Secret for the &lt;a href=&quot;https://github.com/artsy/eigen/blob/master/Makefile#L41-L42&quot;&gt;OSS app&lt;/a&gt;. With this, any developer can run a few commands and have a working application to play around in. This makes it easy to look around and see how things are done.&lt;/p&gt;

&lt;p&gt;Energy, however, requires you have a Artsy partner account. So opening it up would mean that an OSS developer hits the login screen and is stuck. In developing this app, I&#39;ve slowly been creating my own partner gallery account based on my paintings and photography. So now when you set up the app to be ran as an OSS app, it will pre-load a known database of artworks and metadata from my test gallery.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/2015-08-01-open-sourcing-energy/ios-sim.png&#39;&gt;&lt;img src=&quot;/images/2015-08-01-open-sourcing-energy/ios-sim.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;Its easy to imagine that Open Sourcing something is an end-point, but from our perspective it is a journey. We want to make sure that anyone can download this app, learn how and why it&#39;s structured and then run through the app with a debugger to get a deeper sense of how everything connects. Just releasing the code would have been underwhelming. Instead we&#39;re aiming high.&lt;/p&gt;

&lt;p&gt;I think that there is no higher compliment to your team and your code than opening it to the public.&lt;/p&gt;

&lt;p&gt;You should Open Source your app.&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Aug 2015 13:54:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/08/06/open-sourcing-energy/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/08/06/open-sourcing-energy/</guid>
        
        
        <category>energy</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>open source</category>
        
        <category>oss</category>
        
      </item>
    
  </channel>
</rss>
