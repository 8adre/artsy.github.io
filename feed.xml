<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artsy Engineering</title>
    <description></description>
    <link>http://artsy.github.io/</link>
    <atom:link href="http://artsy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 31 Jul 2019 16:27:52 +0000</pubDate>
    <lastBuildDate>Wed, 31 Jul 2019 16:27:52 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Server-Rendering Responsively</title>
        <description>&lt;p&gt;We use server-side rendering (SSR) to deliver every page you hit on &lt;a href=&quot;https://artsy.net&quot;&gt;artsy.net&lt;/a&gt;. We decided on
using SSR for many reasons, amongst them performance.
&lt;a href=&quot;https://artsy.github.io/blog/2013/11/30/rendering-on-the-server-and-client-in-node-dot-js/&quot;&gt;We wrote about this all the way back in 2013&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;We&#39;ve also built our site using responsive design, so you get a browsing experience optimized for your device.&lt;/p&gt;

&lt;p&gt;Combining SSR and responsive design is a non-trivial problem. There are many concerns to manage, and they are
sometimes in conflict with each other. We server render for performance reasons, but we also want to be sure our
app is performant when your browser takes over, all while optimizing for accessibility and SEO.&lt;/p&gt;

&lt;p&gt;This article describes the tools we use on &lt;a href=&quot;https://artsy.net&quot;&gt;artsy.net&lt;/a&gt; to combine SSR and responsive design.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Tool.1:..code.styled-system..code.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Tool 1: &lt;a href=&quot;https://styled-system.com&quot;&gt;&lt;code&gt;styled-system&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;We handle the majority of responsive styling differences with
&lt;a href=&quot;https://styled-system.com/responsive-styles&quot;&gt;&lt;code&gt;styled-system&lt;/code&gt;&lt;/a&gt;. This has been a really great addition to our
toolbox. Here&#39;s a component that would render a &lt;code&gt;div&lt;/code&gt; (&lt;code&gt;Box&lt;/code&gt;) with a width of 50% for small screens, 75% for
medium-sized screens, and 100% for anything larger:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;xml&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Box&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[&amp;quot;50%&amp;quot;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;quot;75%&amp;quot;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;quot;100%&amp;quot;]}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  ...
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Box&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Another example:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;xml&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Flex&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;flexDirection=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[&amp;quot;column&amp;quot;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;quot;row&amp;quot;]}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Box&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;px=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{40}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;background=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;black10&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    ...
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Box&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Box&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;While only one property in this example is specifying an array of values to be used at different breakpoints, all
of those properties &lt;em&gt;can&lt;/em&gt; take an array for different breakpoints. As developers, we love this experience. We can
apply subtle differences to components across breakpoints with very little code and effort.&lt;/p&gt;

&lt;p&gt;We use &lt;a href=&quot;https://styled-system.com&quot;&gt;&lt;code&gt;styled-system&lt;/code&gt;&lt;/a&gt; extensively within
&lt;a href=&quot;https://palette.artsy.net/&quot;&gt;our design system&lt;/a&gt;. You can
&lt;a href=&quot;https://github.com/artsy/reaction/blob/32de03fe526355258655ded510d23335a456b9ce/src/Components/NavBar/Menus/MoreNavMenu.tsx#L23-L28&quot;&gt;poke around our source&lt;/a&gt;
to see how much we&#39;ve embraced &lt;a href=&quot;https://styled-system.com&quot;&gt;&lt;code&gt;styled-system&lt;/code&gt;&lt;/a&gt;&#39;s responsive styles.&lt;/p&gt;

&lt;p&gt;There&#39;s one type of challenge with building a responsive app that &lt;a href=&quot;https://styled-system.com&quot;&gt;&lt;code&gt;styled-system&lt;/code&gt;&lt;/a&gt;
can&#39;t solve: when we need to emit different layouts across different breakpoints. In this case, we need something
that can render very different component sub-trees. We couldn&#39;t find an approach that satisfied our needs, so we
wrote our own.&lt;/p&gt;

&lt;a name=&quot;Tool.2:..code..artsy.fresnel..code.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Tool 2: &lt;a href=&quot;https://github.com/artsy/fresnel&quot;&gt;&lt;code&gt;@artsy/fresnel&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;First off, an announcement: we&#39;ve just released &lt;a href=&quot;https://github.com/artsy/fresnel&quot;&gt;&lt;code&gt;@artsy/fresnel&lt;/code&gt;&lt;/a&gt; version 1.0!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/artsy/fresnel&quot;&gt;&lt;code&gt;@artsy/fresnel&lt;/code&gt;&lt;/a&gt; allows you to define a set of breakpoint widths, then
declaratively render component sub-trees when those breakpoints are met. It looks something like this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;xml&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Media&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;at=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;xs&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;MobileLayout&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Media&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Media&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;greaterThan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;xs&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;NonMobileLayout&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Media&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;In this example, we&#39;re emitting the &lt;code&gt;MobileLayout&lt;/code&gt; component for devices at or below our &lt;code&gt;xs&lt;/code&gt; breakpoint, and the
&lt;code&gt;NonMobileLayout&lt;/code&gt; for devices greater than our &lt;code&gt;xs&lt;/code&gt; breakpoint. You can imagine that the &lt;code&gt;MobileLayout&lt;/code&gt; and
&lt;code&gt;NonMobileLayout&lt;/code&gt; components contain complicated sub-trees, with more significant differences than
&lt;a href=&quot;https://styled-system.com&quot;&gt;&lt;code&gt;styled-system&lt;/code&gt;&lt;/a&gt; could handle.&lt;/p&gt;

&lt;a name=&quot;How.it.works&quot;&gt;&lt;/a&gt;
&lt;h3&gt;How it works&lt;/h3&gt;

&lt;p&gt;The first important thing to note is that when server-rendering with
&lt;a href=&quot;https://github.com/artsy/fresnel&quot;&gt;&lt;code&gt;@artsy/fresnel&lt;/code&gt;&lt;/a&gt;, &lt;strong&gt;all&lt;/strong&gt; breakpoints get rendered by the server. Each &lt;code&gt;Media&lt;/code&gt;
component is wrapped by plain CSS that will only show that breakpoint if it matches the user&#39;s current browser
size. This means that the client can accurately start rendering the HTML/CSS &lt;em&gt;while&lt;/em&gt; it receives it, which is long
before the React application has booted. This improves perceived performance for end-users.&lt;/p&gt;

&lt;p&gt;Why not just the breakpoint that the current device needs? Because we can&#39;t &lt;em&gt;accurately&lt;/em&gt; identify which breakpoint
your device needs on the server. We could use a library to sniff the browser &lt;code&gt;user-agent&lt;/code&gt;, but those aren&#39;t always
accurate, and they wouldn&#39;t give us all the information we need to know when we are server-rendering.&lt;/p&gt;

&lt;p&gt;If you&#39;re interested, you can
&lt;a href=&quot;https://github.com/artsy/reaction/issues/1367&quot;&gt;read the issue that originally inspired us to build &lt;code&gt;@artsy/fresnel&lt;/code&gt;&lt;/a&gt;.
One of the neat things about Artsy being &lt;a href=&quot;/series/open-source-by-default/&quot;&gt;open-source by default&lt;/a&gt; is that you can
see decisions being made and libraries being built &lt;em&gt;as they happen&lt;/em&gt;; not just after they&#39;re complete.&lt;/p&gt;

&lt;a name=&quot;Tool.3:..code..artsy.detect-responsive-traits..code.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Tool 3: &lt;a href=&quot;https://github.com/artsy/detect-responsive-traits&quot;&gt;&lt;code&gt;@artsy/detect-responsive-traits&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I mentioned above that it&#39;s difficult to accurately detect devices by user agent to identify which breakpoint to
render. We didn&#39;t want this to be our primary strategy for combining SSR with responsive design.&lt;/p&gt;

&lt;p&gt;But with &lt;a href=&quot;https://github.com/artsy/fresnel&quot;&gt;&lt;code&gt;@artsy/fresnel&lt;/code&gt;&lt;/a&gt; as our primary approach, we felt that we could make
some further optimizations with user agent detection. In the event that we don&#39;t know your device by its user
agent, we&#39;ll still render all breakpoints on the server. But if we are certain you are on a device that only ever
needs a subset of the breakpoints, we only render those on the server. This saves a bit of rendering time; more
importantly it reduces the number of bytes sent over the wire.&lt;/p&gt;

&lt;p&gt;We really wanted to not maintain our own list of user agents. Alas, we found that none of the existing user agent
detection libraries surfaced all the information we needed in a single resource. We needed to know the minimum
width for a browser on a given device, and if it was resizable, and to what dimensions it was resizable. If any
existing libraries &lt;em&gt;did&lt;/em&gt; have this data, they didn&#39;t provide it to us easily.&lt;/p&gt;

&lt;p&gt;So we did some experimentation, given the browsers and devices we knew we needed to support. And yeah...we
(reluctantly) created our own user-agent detection library,
&lt;a href=&quot;https://github.com/artsy/detect-responsive-traits&quot;&gt;@artsy/detect-responsive-traits&lt;/a&gt;. We&#39;re using this to determine
if your browser is likely going to use only the mobile breakpoint of our app, in which case we don&#39;t have to also
render the desktop version. The library is currently targeting only the browsers and devices we support on
&lt;a href=&quot;artsy.net&quot;&gt;artsy.net&lt;/a&gt;, but
&lt;a href=&quot;https://github.com/artsy/detect-responsive-traits&quot;&gt;we&#39;re always open to contributions&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;We aren&#39;t doing any detection of desktop browsers. They are more resizable than mobile browsers, and we are more
concerned with mobile users getting less content sent over their 3G connection.&lt;/p&gt;

&lt;a name=&quot;Why.didn.t.you.___.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Why didn&#39;t you ___?&lt;/h2&gt;

&lt;p&gt;Those are our primary tools for combining SSR with responsive design! They work well for us. We considered many
many other options along the way. Here are a couple:&lt;/p&gt;

&lt;a name=&quot;L.code.react-media..code..or..code.react-responsive..code.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;https://github.com/ReactTraining/react-media&quot;&gt;&lt;code&gt;react-media&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://github.com/contra/react-responsive&quot;&gt;&lt;code&gt;react-responsive&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;We investigated both &lt;a href=&quot;https://github.com/ReactTraining/react-media&quot;&gt;&lt;code&gt;react-media&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&quot;https://github.com/contra/react-responsive&quot;&gt;&lt;code&gt;react-responsive&lt;/code&gt;&lt;/a&gt;, but found that they didn&#39;t approach the SSR side
of the problem as deeply as we needed.&lt;/p&gt;

&lt;p&gt;We also weren&#39;t fans of the imperative API in &lt;a href=&quot;https://github.com/ReactTraining/react-media&quot;&gt;&lt;code&gt;react-media&lt;/code&gt;&lt;/a&gt;. We
started with a similar API when building &lt;a href=&quot;https://github.com/artsy/fresnel&quot;&gt;&lt;code&gt;@artsy/fresnel&lt;/code&gt;&lt;/a&gt;, but found ourselves
inhibited by the restriction that only one branch can be rendered. This contradicted our strategy of emitting all
breakpoints from the server.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;https://github.com/contra/react-responsive&quot;&gt;&lt;code&gt;react-responsive&lt;/code&gt;&lt;/a&gt;, we didn&#39;t like that it relied on user agent
detection as its primary method of handling SSR.&lt;/p&gt;

&lt;a name=&quot;Rely.solely.on.CSS&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Rely solely on CSS&lt;/h3&gt;

&lt;p&gt;As mentioned before, we render all breakpoints from the server and hide the non-matching branches with CSS. The
issue with this approach, when combined with React, is that after
&lt;a href=&quot;https://reactjs.org/docs/react-dom.html#hydrate&quot;&gt;hydration&lt;/a&gt; you have many components that are mounted and rendered
unnecessarily. There&#39;s a performance hit you take for rendering components your user isn&#39;t seeing, but even worse
is the potential for duplicate side-effects.&lt;/p&gt;

&lt;p&gt;Imagine a component that, when rendered, emits a call to an analytics service. If this component exists in both a
mobile and desktop branch, you&#39;re now double-stuffing your analytics. Hopefully your analytics service is smart
enough to count only one call, but it&#39;s still a bad idea to duplicate components that have side-effects.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/artsy/fresnel&quot;&gt;&lt;code&gt;@artsy/fresnel&lt;/code&gt;&lt;/a&gt; will only client-render the breakpoint that matches your
browser dimensions, so you don&#39;t have to worry about duplicate side-effects.&lt;/p&gt;

&lt;a name=&quot;What.s.left.to.solve.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What&#39;s left to solve?&lt;/h2&gt;

&lt;p&gt;Our SSR and responsive design toolbox does a lot of things well. We get great performance from both the server and
client. Our site looks great on any device.&lt;/p&gt;

&lt;p&gt;We do have some SEO concerns, though. Since we&#39;re server-rendering multiple breakpoints, it&#39;s likely that search
engine bots are seeing double the content on our pages. We &lt;em&gt;think&lt;/em&gt; this is okay.
&lt;a href=&quot;https://youtu.be/WsgrSxCmMbM&quot;&gt;Google WebMasters&lt;/a&gt; says it&#39;s okay. We haven&#39;t noticed any awful side-effects from
this yet, but SEO is a bit of a dark art, yeah?&lt;/p&gt;

&lt;a name=&quot;Our.advice&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Our advice&lt;/h2&gt;

&lt;p&gt;Responsive design is hard, especially when layouts change significantly between desktop and mobile. Server-side
rendering in React is hard to get right, period. Combining SSR with responsive design compounds the challenges.&lt;/p&gt;

&lt;p&gt;At the end of the day, you should do everything you can to limit layout differences between mobile and desktop. Use
responsive props from &lt;a href=&quot;https://styled-system.com&quot;&gt;&lt;code&gt;styled-system&lt;/code&gt;&lt;/a&gt;. Play around with &lt;code&gt;flexbox&lt;/code&gt; and
&lt;code&gt;flex-direction&lt;/code&gt;, start learning about CSS &lt;code&gt;grid&lt;/code&gt;, and use CSS &lt;code&gt;@media&lt;/code&gt; queries when you can. If you absolutely
must render different views on different breakpoints, render all the UI and hide what&#39;s not needed for that
breakpoint. You want your users to see the right content as quickly as possible. Send them HTML and CSS from your
server that their client can use.&lt;/p&gt;
</description>
        <pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/05/24/server-rendering-responsively/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/05/24/server-rendering-responsively/</guid>
        
        
        <category>html</category>
        
        <category>react</category>
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>Why Projects Need Code Names</title>
        <description>&lt;p&gt;Before I joined Artsy, I worked at companies where software projects tended to have meaningful, predictable names. If we were building a system for flagging media uploads, it might be called &lt;code&gt;media-review&lt;/code&gt;. In many cases, our code repositories&#39; names matched the main product&#39;s branding or even the company&#39;s name. Life was simple and there was no risk of ambiguity.&lt;/p&gt;

&lt;p&gt;At Artsy, our systems have peculiar code names like &lt;em&gt;Gravity&lt;/em&gt;, &lt;em&gt;Pulse&lt;/em&gt;, and &lt;em&gt;Vortex&lt;/em&gt;. There&#39;s a persistent learning curve as you contribute to different repositories or as new services get created. Numerous times, I&#39;ve wondered: are code names worth the trouble?&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;img src=&quot;/images/2019-05-10-why-projects-need-codenames/github_projects.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To be clear, &lt;em&gt;any&lt;/em&gt; project naming scheme works in small quantities. Personal projects or libraries for public release should probably just be named for clarity and find-ability. Code names start to offer benefits as a team grows and a product evolves over the longer term:&lt;/p&gt;

&lt;p&gt;Code names embrace that &lt;strong&gt;we don&#39;t necessarily know the fit or scope of a system when it&#39;s first conceived&lt;/strong&gt;. To &lt;em&gt;not&lt;/em&gt; employ code names would require accurately predicting a system&#39;s eventual function. A project named &lt;code&gt;artsy-admin&lt;/code&gt; starts to grate when we make the architectural decision to split apart management utilities or introduce more fine-grained administrative roles. An &lt;code&gt;artwork-taxonomy&lt;/code&gt; label loses meaning when that system expands to include less structured tags&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Branding shifts, products pivot, and companies merge.&lt;/strong&gt; Project code names introduce a level of indirection between what engineers build and the labels, URLs, or brands that end users experience. Over a long enough period, these external or superficial changes &lt;em&gt;will&lt;/em&gt; happen and risk introducing confusion or just subtle misalignment between form and function. As with software design in general, abstractions can be a powerful tool to &lt;a href=&quot;https://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;separate concerns&lt;/a&gt;. Ask yourself: what code changes might be required if your company were to spin off your product or be merged into an acquirer?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Language is important&lt;/strong&gt;, and not just for communication but for shaping our thoughts and assumptions. We frequently find ourselves debating which system should serve as the authority for a given domain model or where to implement a new feature, and project names that overlap with these topics (e.g., &lt;code&gt;search&lt;/code&gt;, &lt;code&gt;images&lt;/code&gt;, &lt;code&gt;suggestions&lt;/code&gt;) would predispose us to certain decisions. Code names free us to focus on the architectural and organizational merits instead.&lt;/p&gt;

&lt;p&gt;We like to &lt;strong&gt;have fun at work&lt;/strong&gt; and it&#39;s more joyful to proclaim that &quot;Torque is in the wild&quot; than &quot;data-sync has been deployed.&quot; Over time these names gain mythologies and personalities within the team and organization.&lt;/p&gt;

&lt;p&gt;With this in mind, how should you choose a naming scheme?&lt;/p&gt;

&lt;a name=&quot;Rules.for.a.project.naming.scheme&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Rules for a project naming scheme&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Avoid implicit value judgments like &quot;new,&quot; &quot;next,&quot; or &quot;modern.&quot; We&#39;ve all witnessed today&#39;s hot project become next year&#39;s unloved albatross.&lt;/li&gt;
&lt;li&gt;Choose a code name scheme that isn&#39;t directly related to your technology or business. A flower business using flower names is cute, but breaks down when you want to build a feature that &lt;em&gt;actually&lt;/em&gt; is about tulips.&lt;/li&gt;
&lt;li&gt;Everyone should be able to participate, so avoid industry lingo or obscure terminology. Funny story: I work at an art start-up but don&#39;t know enough artists to name my projects that way. I struggle even more to pronounce the few projects that are.&lt;/li&gt;
&lt;li&gt;There should be lots of choices. You&#39;ll regret choosing to name your projects after &quot;decathlon sports&quot; or &quot;days of the week&quot; when your team inevitably transitions to microservices.&lt;/li&gt;
&lt;li&gt;Names should be unique within a company and--ideally--beyond the company&#39;s scope. You wouldn&#39;t want your &lt;code&gt;marketing-site&lt;/code&gt; repository to conflict with a contributor&#39;s &lt;code&gt;marketing-site&lt;/code&gt; repository from another organization. Github projects, S3 buckets, Heroku application names, and published libraries all benefit from being globally unique.&lt;/li&gt;
&lt;li&gt;Bonus points for choosing a rich enough scheme that names can subtly relate to each system&#39;s function. At Artsy, we use physics terms for code names, so our e-commerce back-end is called &lt;a href=&quot;https://github.com/artsy/exchange&quot;&gt;Exchange&lt;/a&gt; and a command line utility for developers is called &lt;a href=&quot;https://github.com/artsy/momentum&quot;&gt;Momentum&lt;/a&gt;. A shipping service might be called &lt;em&gt;Weight&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Example code name schemes: animals, movies, sea creatures, cartoon/TV characters, woodworking tools, celebrities (but get legal advice before borrowing living individuals&#39; names). &lt;a href=&quot;https://wiki.ubuntu.com/DevelopmentCodeNames&quot;&gt;Ubuntu&lt;/a&gt; gets extra mileage by combining adjectives with animal names. &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_Apple_codenames&quot;&gt;Apple&lt;/a&gt; has used wine, cats, and California geography. &lt;a href=&quot;https://en.wikipedia.org/wiki/Android_%28operating_system%29&quot;&gt;Google&lt;/a&gt; likes dessert.&lt;/p&gt;

&lt;a name=&quot;Finally&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Finally&lt;/h2&gt;

&lt;p&gt;These days, I&#39;ve embraced Artsy&#39;s use of physics terms for project names. There continues to be some head-scratching as new engineers navigate codebases and encounter these terms or just struggle to identify the system responsible for a given site or feature. (This isn&#39;t shocking, since code names were probably adapted from more secretive environments like the military.) As your code names multiply and projects come and go, a glossary becomes essential. I suggest creating a simple document that maps projects&#39; code names to descriptions, URL destinations, hosting environments, and teams.&lt;/p&gt;

&lt;p&gt;See also:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.codinghorror.com/whats-in-a-project-name/&quot;&gt;What&#39;s in a Project Name?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://royal.pingdom.com/the-developer-obsession-with-code-names-186-interesting-examples/&quot;&gt;The Developer Obsession With Code Names, 186 Interesting Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 10 May 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/05/10/why-projects-need-codenames/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/05/10/why-projects-need-codenames/</guid>
        
        
        <category>engineering</category>
        
        <category>git</category>
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>Rosalind and The Art Genome Project</title>
        <description>&lt;p&gt;We recently bade a fond farewell to two &lt;a href=&quot;https://code.dblock.org&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;http://orta.io&quot;&gt;the&lt;/a&gt; champions of our “open source by default” ethos, but
this spirit lives on at Artsy.&lt;/p&gt;

&lt;p&gt;Today we open-source one of our key metadata apps, and explain how it fits into Artsy’s ecosystem.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Open.source.by.default....or.at.least.eventually&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Open source by default… or at least eventually&lt;/h2&gt;

&lt;p&gt;Even when we don’t start a project by building in the open, we encourage ourselves to question why that is so. Can
we go ahead and open things up? If the answer is no (and it might be), are we clear on why not?&lt;/p&gt;

&lt;p&gt;We’ve even added a &lt;a href=&quot;https://github.com/artsy/peril-settings/pull/96&quot;&gt;light bit of process&lt;/a&gt; to promote this kind of questioning. Our robots will periodically
trawl our GitHub org and file an issue against any closed-source repo that doesn’t include a rationale for its
closed nature in the project README.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&quot;illustration&quot;&gt;
  &lt;img alt=&quot;Peril issue&quot; src=&quot;/images/2019-05-09-rosalind/issue.png&quot;  /&gt;
  &lt;figcaption&gt;Robot would like to have a word with you&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;One of our repos got this &lt;a href=&quot;https://github.com/artsy/rosalind/issues/179&quot;&gt;treatment&lt;/a&gt; recently. I’m the point person on this project, and while I considered
adding a rationale of “&lt;em&gt;primary author will die of acute impostor syndrome if this repo is open-sourced, he will
just stop living&lt;/em&gt; 😅,” instead we’ve gone ahead and made this repo public.&lt;/p&gt;

&lt;p&gt;Meet &lt;a href=&quot;https://github.com/artsy/rosalind&quot;&gt;Rosalind&lt;/a&gt;, an admin app for large-batch genoming operations on Artsy’s database of artworks.&lt;/p&gt;

&lt;a name=&quot;The.Art.Genome.Project..and.the.Genome.Team&quot;&gt;&lt;/a&gt;
&lt;h2&gt;The Art Genome Project, and the Genome Team&lt;/h2&gt;

&lt;p&gt;Rosalind is a close cousin of &lt;a href=&quot;https://github.com/artsy/helix&quot;&gt;Helix&lt;/a&gt;, our original dedicated genoming app. (That project is private for
now, but was described by &lt;a href=&quot;https://artsy.github.io/author/sarahweir/&quot;&gt;Sarah&lt;/a&gt; in an an &lt;a href=&quot;/blog/2015/04/08/creating-a-dynamic-single-page-app-for-our-genome-team-using-react&quot;&gt;earlier blog post&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;What’s genoming, you ask, and what’s it got to do with art?&lt;/p&gt;

&lt;p&gt;Artsy’s discovery and recommendation capabilites are powered in large part by &lt;a href=&quot;https://www.artsy.net/about/the-art-genome-project&quot;&gt;The Art Genome Project&lt;/a&gt;,
a comprehensive system of classification that uses our homegrown art-historical controlled vocabulary to describe
the artists and artworks in our database. (Here’s an &lt;a href=&quot;https://www.artsy.net/article/the-art-genome-project-seven-facts-about-the-art-genome-project&quot;&gt;explainer&lt;/a&gt; and our full list of
&lt;a href=&quot;https://www.artsy.net/categories&quot;&gt;categories&lt;/a&gt;. You can even view a &lt;a href=&quot;https://github.com/artsy/the-art-genome-project&quot;&gt;structured data export&lt;/a&gt; of the “genes” which make
up our controlled vocabulary.)&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&quot;illustration&quot;&gt;
  &lt;img alt=&quot;Helix&quot; src=&quot;/images/2019-05-09-rosalind/helix.png&quot;  /&gt;
  &lt;figcaption&gt;Screenshot of Helix, an app for genoming artists and artworks, and an early foray into React&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;For a long time, our team of art historians — the Genome Team — bore sole responsibility for applying this
vocabulary, using Helix, to the artworks that entered our platform. This was always a daunting task, and only
became more so as our network of partner galleries and institutions continued to grow and upload more artworks.&lt;/p&gt;

&lt;p&gt;Artsy is now home to over 1,000,000 artworks by over 100,000 artists, described by over 1,000 genes. A few years
ago, it became clear to us that in order to continue applying high-quality metadata at scale, we were going to need
some new processes and some new tools.&lt;/p&gt;

&lt;p&gt;On the process side, we decided to share a simplified genoming interface with our gallery partners, so that they
could start contributing the metadata that would be most relevant to our audience of collectors. We called it
“Partner Applied Categories.”&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&quot;illustration&quot;&gt;
  &lt;img alt=&quot;Partner applied categories&quot; src=&quot;/images/2019-05-09-rosalind/cms-pac.png&quot;  /&gt;
  &lt;figcaption&gt;Partner Applied Categories interface from Artsy’s partner CMS, showing choices for works of photography&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Note that this is a tiny subset of our full genome vocabulary, and that values are applied as on/off, versus the
more nuanced 0-100 score that our own Genome Team would apply.&lt;/p&gt;

&lt;p&gt;This was a good step, a fundamental building block in scaling artwork metadata on our platform, but it created new
problems as well as new opportunities.&lt;/p&gt;

&lt;p&gt;This is where Rosalind came in.&lt;/p&gt;

&lt;a name=&quot;About.Rosalind&quot;&gt;&lt;/a&gt;
&lt;h2&gt;About Rosalind&lt;/h2&gt;

&lt;p&gt;We started work on this tool in earnest in early 2017, at a time when we felt an internal need for the ability to,
among other things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Perform boolean searches against our database of artworks using The Art Genome Project’s vocabulary – a general
purpose superpower that would be useful for our art historians, our editorial team, and our collector relations
and marketing teams, among others&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make large-batch modifications to artworks’ genomes (whether genomed by us, or by our gallery partners via
Partner Applied Categories), in order to maintain metadata quality&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The user experience we built looks something like this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&quot;illustration&quot;&gt;
  &lt;img alt=&quot;Rosalind session&quot; src=&quot;/images/2019-05-09-rosalind/rosalind.gif&quot; style=&quot;outline: solid 1px #eee&quot; /&gt;
  &lt;figcaption&gt;A sample admin interaction in Rosalind&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Under the hood this is a Rails 5 application that talks to our core API server and our Elasticsearch cluster on the
backend, and serves up a React single page app on the frontend.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&quot;illustration&quot;&gt;
  &lt;img alt=&quot;Rosalind architecture&quot; src=&quot;/images/2019-05-09-rosalind/architecture.png&quot; /&gt;
  &lt;figcaption&gt;Bird’s eye view of Rosalind’s architecture&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Among the tactical goals of this project were to support heavy-duty admin workflows by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;offering a featureful interface tailored to power users&lt;/li&gt;
&lt;li&gt;adding a useful complement of keyboard navigation capabilities&lt;/li&gt;
&lt;li&gt;making it as blazingly fast as possible&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That last goal led to the somewhat quirky decision to have Rosalind talk to the Elasticsearch cluster directly,
instead of making a search request to our core API server.&lt;/p&gt;

&lt;p&gt;While this entails some risk of drift from our accumulated search best practices as encapsulated in our API, in
reality this has not been a problem yet. Rosalind’s search needs are fairly straightforward and using
Elasticsearch’s REST API has been working out just fine. And it is fast as heck.&lt;/p&gt;

&lt;p&gt;Although the project was mostly built out in early 2017, we’ve periodically revisited it for upkeep and
maintenance. Along the way we’ve ridden some of the larger trends in the React+Rails ecosystem, as well as internal
trends.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We started out on &lt;a href=&quot;https://github.com/mipearson/webpack-rails&quot;&gt;webpack-rails&lt;/a&gt;, an early pioneer in nudging Rails away from the Asset Pipeline
provided by Sprockets, and toward Webpack&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We &lt;a href=&quot;https://github.com/artsy/rosalind/pull/157&quot;&gt;migrated&lt;/a&gt; over to the &lt;a href=&quot;https://github.com/rails/webpacker&quot;&gt;Webpacker&lt;/a&gt; gem once that became a core Rails concern&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We &lt;a href=&quot;https://github.com/artsy/rosalind/pull/158&quot;&gt;migrated&lt;/a&gt; from RSpec feature specs to &lt;a href=&quot;https://guides.rubyonrails.org/testing.html#system-testing&quot;&gt;Rails system tests&lt;/a&gt;, after that was
rolled out&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We experimented with adopting &lt;a href=&quot;https://github.com/artsy/reaction&quot;&gt;Reaction&lt;/a&gt;, our shared internal React component library&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We more recently switched to using &lt;a href=&quot;https://github.com/artsy/palette&quot;&gt;Palette&lt;/a&gt;, our nascent design system library&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;After being in maintenance mode for a couple of years, we’re excited to start up new feature work again, and plan
to bring even more bits of the &lt;a href=&quot;https://artsy.github.io/series/omakase&quot;&gt;Artsy Omakase&lt;/a&gt; into this project. Maybe this project will even be a
good proving ground for &lt;a href=&quot;https://github.com/prettier/plugin-ruby&quot;&gt;prettier-ruby&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Whatever happens, Rosalind will continue to play an important role in maintaining Artsy’s high-quality metadata and
in making Artsy the best online destination for art.&lt;/p&gt;
</description>
        <pubDate>Thu, 09 May 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/05/09/rosalind/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/05/09/rosalind/</guid>
        
        
        <category>open source</category>
        
        <category>oss</category>
        
        <category>rails</category>
        
        <category>react</category>
        
        <category>the art genome project</category>
        
      </item>
    
      <item>
        <title>Artsy Writing Office Hours</title>
        <description>&lt;p&gt;Welcome back to my series on writing for engineers. In the last post, we discussed &lt;a href=&quot;https://ashfurrow.com/blog/technical-writing-on-the-web/&quot;&gt;technical writing on the
web&lt;/a&gt; from an individual&#39;s perspective: how do you get started? how do you leverage the web? how do you
improve? In today&#39;s post, I want to change directions; instead of focusing on how &lt;em&gt;individuals&lt;/em&gt; write, we&#39;ll
discuss how &lt;em&gt;teams&lt;/em&gt; write.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;To get started, I want to return the quote that opened up my first post. When
&lt;a href=&quot;https://open.nytimes.com/five-questions-with-orta-therox-d5bb9659c50b&quot;&gt;interviewed by the New York Times developer blog&lt;/a&gt;,
Artsy alumnus &lt;a href=&quot;https://twitter.com/orta&quot;&gt;Orta&lt;/a&gt; said:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;One of my colleagues, Ash Furrow, is really the powerhouse behind improving the state of our public
documentation. He runs weekly writing workshops internally and always encourages achievements as being
post-worthy. Sometimes the best practice is to have someone who cares encouraging you. It works for me.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This post is going to pick this quote apart, but first I want to address something upfront:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you&#39;re thinking about helping others write, then you should do it&lt;/strong&gt;. Having the desire to help others write is
the only qualification for &lt;em&gt;actually helping&lt;/em&gt;. You might think that in order to help others write, you should first
become a proficient writer yourself. This is backwards. I became the writing powerhouse that Orta mentions &lt;em&gt;by
helping others write&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let&#39;s think about this in terms of coding. When you help teach someone, &lt;em&gt;you also&lt;/em&gt; learn a lot. Assisting others
solidifies concepts &lt;em&gt;for you&lt;/em&gt; and helps &lt;em&gt;you&lt;/em&gt; hone your own skills. We recognize that engineers are ready to mentor
other engineers long before they become &lt;em&gt;experts&lt;/em&gt;; indeed, it&#39;s usually &lt;em&gt;through mentoring&lt;/em&gt; that they become
experts.&lt;/p&gt;

&lt;p&gt;This is how writing works, too.&lt;/p&gt;

&lt;p&gt;Engineering teams really benefit from having a culture of writing (and of sharing knowledge in general). To
summarize the benefits of teams which write:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generally speaking, documentation is important – but writing and maintaining it is difficult. A team culture of
writing can help make it easier.&lt;/li&gt;
&lt;li&gt;Public blog posts increase a team&#39;s reputation, which makes it easier for the team to hire (and onboard) new
members.&lt;/li&gt;
&lt;li&gt;Teaching and learning from colleagues helps &lt;a href=&quot;https://ashfurrow.com/blog/building-better-software-by-building-better-teams/&quot;&gt;cultivate a sense of psychological safety&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I don&#39;t want to go into detail about the benefits here, but if you&#39;d like to learn more, you can check out &lt;a href=&quot;https://www.youtube.com/watch?v=SjjvnrqDjpM&quot;&gt;this
talk&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;400&quot; src=&quot;https://www.youtube.com/embed/SjjvnrqDjpM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;Okay let&#39;s dive in.&lt;/p&gt;

&lt;a name=&quot;Just.Show.Up&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Just Show Up&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;[Ash] runs weekly writing workshops.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Most of success is honestly just showing up. By itself, having a time and space set aside for colleagues to come
and write every week has pushed the team culture towards valuing writing. But it took time.&lt;/p&gt;

&lt;p&gt;Six months after I started running weekly office hours, no one was really showing up. One or two people here and
there, but that was it. Orta said that he&#39;d have cancelled the event by then, due to lack of interest. Here&#39;s the
thing, though: the value of the writing office hours transcends just what gets written. Having a weekly place to
come to write tells the team that &lt;em&gt;writing is important&lt;/em&gt;. It says something, to have writing office hours, even if
no one shows up.&lt;/p&gt;

&lt;p&gt;At first, writing office hours were aspirational. That&#39;s okay. There are still weeks where no one shows up. That&#39;s
okay, too. Besides, even if no one showed up, &lt;em&gt;I&lt;/em&gt; still got an hour to write, so it was definitely worth my time.&lt;/p&gt;

&lt;p&gt;But Orta had a point: people weren&#39;t showing up, so I looked at that problem. I asked around and it turned out that
people were interested in &lt;em&gt;sharing knowledge&lt;/em&gt; but weren&#39;t always keen to write a blog post. So I changed my
approach.&lt;/p&gt;

&lt;p&gt;Nowadays when I announce the writing office hours at our &lt;a href=&quot;https://github.com/artsy/README/blob/master/events/open-standup.md&quot;&gt;weekly engineering standup&lt;/a&gt;, I am clear that it
isn&#39;t &lt;em&gt;just&lt;/em&gt; for writing. I now let people know that this is a place where they can come for help with whatever
knowledge-sharing they&#39;re interested in. Let&#39;s take a look at a few examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An engineer wanted to speak at a conference, so they brought their ideas and we outlined a talk proposal.&lt;/li&gt;
&lt;li&gt;A product manager wanted to document how Artsy&#39;s product team works, so we worked on turning that documentation
into a public blog post.&lt;/li&gt;
&lt;li&gt;An engineer was planning an architecture review meeting to get the team up to speed on how some of our systems
worked. They brought their slides and we went through the presentation together; I gave some feedback on what
worked well and what was unclear.&lt;/li&gt;
&lt;li&gt;An engineer had an idea for a blog post, but the post was too big and they felt overwhelmed. They brought their
outline and we worked to break it into several smaller posts.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So you can see that writing office hours grew to include more than just writing. And as the event helped more
people accomplish their knowledge-sharing goals, I folded those success stories into my weekly standup pitch.&lt;/p&gt;

&lt;p&gt;I also knew I needed to make it easier to write blog posts. Lots of engineers wanted to write, but had a difficult
time starting. To help, I created some &lt;a href=&quot;https://artsy.github.io/blog/2017/12/01/engineering-blog-post-templates/&quot;&gt;engineering blog post templates&lt;/a&gt; to kick-start new blog posts.
Sometimes, engineers just didn&#39;t know where to go to write a new blog post, so I did some pairing and lunch&amp;amp;learns
demonstrating the blog&#39;s setup.&lt;/p&gt;

&lt;p&gt;I still call the event &quot;writing office hours&quot; because it rolls of the tongue better than &quot;knowledge-sharing office
hours&quot;, but that&#39;s basically what they&#39;ve become!&lt;/p&gt;

&lt;a name=&quot;Frame.Deliverables.as.Blog.Posts&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Frame Deliverables as Blog Posts&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;[Ash] always encourages achievements as being post-worthy.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Here&#39;s my take: engineering work should be approached &lt;em&gt;primarily as a learning opportunity&lt;/em&gt;. A traditional
engineering project might be structured around building some product, but my approach is to structure it around how
to &lt;em&gt;learn&lt;/em&gt; how to build some product. As a team learns how to build it, the product is a natural consequence of
that learning. If you&#39;re familiar with my talk on &lt;a href=&quot;https://ashfurrow.com/blog/building-compassionate-software/&quot;&gt;building compassionate software&lt;/a&gt;, this will sound familiar.
It&#39;s also reflected in Artsy&#39;s &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#psychological-safety&quot;&gt;psychological safety engineering principle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A byproduct of this framing of work in terms of &lt;em&gt;learning&lt;/em&gt; experiences is that it lends itself naturally to framing
work as &lt;em&gt;teaching&lt;/em&gt; experiences (ie: blog posts or other knowledge-sharing). So if you&#39;re writing a new feature, or
fixing a difficult bug, or building a whole new app, then you should be thinking about the blog post as a
deliverable for that project. At least I do, anyway. The benefit of my approach is that others don&#39;t need to share
my views on teaching and learning – as long as I&#39;m there to support them, we can work together to share what they
inevitably learn. We&#39;ll touch more on this in the next section.&lt;/p&gt;

&lt;p&gt;A really common response I get to &quot;hey have you thought about writing a blog post about this?&quot; is that &quot;this isn&#39;t
really worth writing a post about.&quot; I disagree. Even if a subject has been written about before, it has never been
written about from &lt;em&gt;your perspective&lt;/em&gt;. And short posts are valuable, too – just think about how often you&#39;ll be
searching for an answer to a question and find a short, simple blog post that&#39;s unblocked you. Here is a selection
of short, focused posts from the Artsy blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://artsy.github.io/blog/2015/11/05/Using-OCR-To-Fix-A-Hilarious-Bug/&quot;&gt;Using OCR To Fix a Hilarious Bug&lt;/a&gt; (bug fix becomes a blog post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen/&quot;&gt;Being a Good OSS Citizen&lt;/a&gt; (an open source pull request becomes a blog post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://artsy.github.io/blog/2018/01/19/upgrading-volt-to-circleci-two/&quot;&gt;Upgrading Volt to CircleCI 2.0&lt;/a&gt; (an infrastructure upgrade becomes a blog post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://artsy.github.io/blog/2018/08/24/How-to-debug-jest-tests/&quot;&gt;How To Debug Jest Tests&lt;/a&gt; (learning a tool becomes a blog post)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As you can see, each of these are small posts that represent significant engineering effort. Our time is valuable,
and only through sharing what we learn (&lt;a href=&quot;https://ashfurrow.com/blog/contemporaneous-blogging/&quot;&gt;as we learn it&lt;/a&gt;) can we really honour the title of
&lt;em&gt;engineer&lt;/em&gt;.&lt;/p&gt;

&lt;a name=&quot;Caring.is.Sharing&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Caring is Sharing&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;Sometimes the best practice is to have someone who cares encouraging you.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yup, this is the part of the post where I talk about feelings. I don&#39;t think you can effectively lead &lt;em&gt;anything&lt;/em&gt; –
not a blog, not a team – without caring about the people around you.&lt;/p&gt;

&lt;p&gt;Another way I tried to increase attendance to writing office hours was to reach out to colleagues one-on-one to
offer my help (and mention the office hours). The first thing I did was look for engineers who &lt;em&gt;wanted&lt;/em&gt; to write
more. Artsy uses &lt;a href=&quot;https://lattice.com&quot;&gt;Lattice&lt;/a&gt; to help employees accomplish their goals, so I looked for anyone who had shared a goal
related to knowledge-sharing. I found a few and reached out to them to offer my help achieve those goals.&lt;/p&gt;

&lt;p&gt;But that was just a one-off way to find people interested in writing; what I wanted to build was an ongoing way to
encourage more blog posts. I found this &lt;em&gt;one weird trick&lt;/em&gt;: just pay attention to what people were working on.
That&#39;s it. If I heard that someone had experimented with a new technology, or shipped a new feature, or solved an
interesting bug, I would contact them privately to ask if they&#39;d be interested in writing a post about it.
Sometimes over Slack, sometimes in person.&lt;/p&gt;

&lt;p&gt;Over the years, I&#39;ve perfected my pitch:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Emphasize the learning experience they&#39;ve gone through: &quot;That must have been a difficult
feature/bug/investigation. Good job figuring it out!&quot;&lt;/li&gt;
&lt;li&gt;Ask them if they&#39;ve thought about writing a blog post (in a lot of cases, they had!): &quot;Have you thought about
writing a blog post about this? The engineering blog would be a great spot, or you could use your personal blog.&quot;&lt;/li&gt;
&lt;li&gt;Describe the value of writing: &quot;Lots of people have faced this same issue – a blog post would be really valuable
to the whole web developer community!&quot;&lt;/li&gt;
&lt;li&gt;Offer to help and tell them about weekly writing office hours: &quot;I run writing office hours every Wednesday at
2:00, but feel free to ping me directly if I can help out before then.&quot;&lt;/li&gt;
&lt;li&gt;Emphasize that, while I&#39;m here to help, there is no pressure to write: &quot;No pressure, of course! I know you&#39;re
busy with such-and-such project.&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Pitching them is only the first step – I&#39;d then create recurring reminders in OmniFocus to follow-up with every few
weeks. I&#39;d DM them to ask how the post was going and if I could help get them to the next step. So if they were
still working on an outline, I&#39;d offer to help them finish it. Or if they had an outline and were working on
filling it out, I&#39;d offer to read what they had so far and give feedback. It really depended on the person and
their goals. At two reminders, I&#39;d offer to stop reminding them if it wasn&#39;t helpful. After five or so reminders,
with no progress, I&#39;d quietly drop them from my OmniFocus list. No shame.&lt;/p&gt;

&lt;p&gt;It might sound like a lot of work, but it&#39;s actually just a few small recurring tasks. With a little care and the
right system for managing my own time, I might spend 10 minutes a week following up with people. The important part
is just caring about the person and their knowledge-sharing goals (whatever they are).&lt;/p&gt;

&lt;p&gt;I would estimate that my success rate was about 50%. That&#39;s pretty great, actually! Some blog posts just didn&#39;t go
anywhere, and that&#39;s okay. Everyone is busy. Some were months-long journeys that &lt;em&gt;did&lt;/em&gt; eventually get posted. But
some blog posts grew to be much more than blog posts – in one case, it grew to an entire working group of engineers
who are now investing in everyone&#39;s capacity to grow as an engineer.&lt;/p&gt;

&lt;p&gt;Like I said earlier, writing office hours became about more than &lt;em&gt;just&lt;/em&gt; writing.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;We saw in the &lt;a href=&quot;https://ashfurrow.com/blog/technical-writing-on-the-web/&quot;&gt;last post&lt;/a&gt; how to become a proficient technical writer. We saw in this post how to nurture
a culture of writing on a team. It&#39;s an ongoing process – as I learn more, I&#39;ll be sure to share what I learn with
all of you. Take care.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/05/06/technical-writing-for-teams/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/05/06/technical-writing-for-teams/</guid>
        
        
        <category>culture</category>
        
        <category>writing</category>
        
      </item>
    
      <item>
        <title>Orta&#39;s best of</title>
        <description>&lt;p&gt;Today is my last day at Artsy, it&#39;s been 8 years and I figured a nice way to book-end my time here is to make a
post that tries to talk over &lt;a href=&quot;https://artsy.github.io/author/orta/&quot;&gt;the last ~90 blog posts I&#39;ve shipped&lt;/a&gt;. My posts
tell the story of a junior-ish engineering solving problems on successive larger scales, until their decisions
impact whole industries.&lt;/p&gt;

&lt;p&gt;These posts cover so many topics that the right way to give them justice is to try group them in terms of general
themes and provide a larger context about why they were written.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;I used to occasionally write before I came to Artsy, but inside the environment of Artsy&#39;s Engineering team I could
consider it &lt;em&gt;&quot;work work&quot;&lt;/em&gt; and not just &lt;em&gt;&quot;things I should do, but in my own spare time.&quot;&lt;/em&gt; Writing for Artsy on the
blog is &lt;a href=&quot;https://artsy.github.io/blog/2019/01/30/why-we-run-our-blog/&quot;&gt;very similar to writing code in our repos&lt;/a&gt;, you assign an editor (thanks &lt;a href=&quot;https://github.com/artsy/artsy.github.io/pulls?utf8=%E2%9C%93&amp;amp;q=is%3Aclosed+is%3Apr+author%3Aorta+&quot;&gt;Ash&lt;/a&gt; for
taking the lion&#39;s share!) and request reviews. This lowered the barriers considerably.&lt;/p&gt;

&lt;a name=&quot;Career.Growth&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Career Growth&lt;/h1&gt;

&lt;p&gt;I started working at Artsy with about 2-3 years of professional programming experience at the end of 2011. When
people ask about how career progression tends to work I TLDR it as:
&lt;/br&gt;&lt;code&gt;Feature -&amp;gt; Section of Codebase -&amp;gt; Codebase -&amp;gt; Codebases -&amp;gt; Systems -&amp;gt; Businesses -&amp;gt; Industry&lt;/code&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;This echoes how Artsy used to handle &lt;a href=&quot;https://artsy.github.io/blog/2016/09/10/Help!-I&#39;m-becoming-Post-Junior/&quot;&gt;an IC career ladder&lt;/a&gt; (&lt;a href=&quot;https://github.com/artsy/README/blob/master/careers/ladder.md&quot;&gt;current&lt;/a&gt;). At that
point I joined, I sat somewhere around &lt;code&gt;Section of Codebase&lt;/code&gt;. Each progression is more responsibility, and can
sometimes be about making decisions and not necessarily being the person to put the work in.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2012 - Building Features&lt;/strong&gt; - &lt;br/&gt;&lt;a href=&quot;https://artsy.github.io/blog/2012/09/13/on-grid-thumbnails/&quot;&gt;On Grid Thumbnails&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2012/05/11/on-making-it-personal--in-iOS-with-searchbars/&quot;&gt;On Making It Personal in iOS with
Searchbars&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2013 - Creating Libraries&lt;/strong&gt; - &lt;br/&gt;&lt;a href=&quot;https://artsy.github.io/blog/2013/04/10/aranalytics/&quot;&gt;ARAnalytics - Analytics for iOS Apps&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2013/03/29/musical-chairs/&quot;&gt;Musical Chairs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2014 - Supporting Team Infra&lt;/strong&gt; - &lt;br/&gt;&lt;a href=&quot;https://artsy.github.io/blog/2014/08/08/CocoaPods-Caching/&quot;&gt;Using CocoaPods Caching with Travis CI&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2014/06/17/building-the-xcode-plugin-snapshots/&quot;&gt;Building the Xcode
Plugin Snapshots&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2014/06/11/testing-core-data-migrations/&quot;&gt;Testing Core Data Migrations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2015 - Long term iOS Software Architecture and OSS&lt;/strong&gt; - &lt;br/&gt;&lt;a href=&quot;https://artsy.github.io/blog/2015/09/18/Cocoa-Architecture-Dependencies/&quot;&gt;Dependencies&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/09/01/Cocoa-Architecture-Dropped-Design-Patterns/&quot;&gt;Dropped Design Patterns&lt;/a&gt;,
&lt;a href=&quot;https://artsy.github.io/blog/2015/08/24/Cocoa-Architecture-Hybrid-Apps/&quot;&gt;Hybrid Apps&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/08/19/Cocoa-Architecture-Switchboard-Pattern/&quot;&gt;ARSwitchboard&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/08/15/Cocoa-Architecture-Router-Pattern/&quot;&gt;ARRouter&lt;/a&gt; and &lt;a href=&quot;https://artsy.github.io/blog/2015/08/06/open-sourcing-energy/&quot;&gt;Open Sourcing Energy&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/04/28/how-we-open-sourced-eigen/&quot;&gt;How we Open
Source&#39;d Eigen&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2015/12/10/License-and-You/&quot;&gt;Licenses for OSS Code&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2016 - Consolidating web + iOS&lt;/strong&gt; - &lt;br/&gt;&lt;a href=&quot;https://artsy.github.io/blog/2016/08/24/On-Emission/&quot;&gt;On our implementation of React Native&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/06/19/graphql-for-mobile/&quot;&gt;GraphQL for iOS
Developers&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/08/15/vscode/&quot;&gt;Using VS Code for JavaScript&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2016/11/14/JS-Glossary/&quot;&gt;JavaScript Glossary for
2017&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2017 - Process at Scale (OSS/All of Artsy)&lt;/strong&gt; - &lt;br/&gt;&lt;a href=&quot;https://artsy.github.io/blog/2017/10/10/C4Q-QandA/&quot;&gt;C4Q&amp;amp;A&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2017/09/04/Introducing-Peril/&quot;&gt;Introducing Peril to the Artsy Org&lt;/a&gt;,
&lt;a href=&quot;https://artsy.github.io/blog/2017/06/30/danger-one-oh-again/&quot;&gt;Danger&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2017/04/14/artsy-technology-stack-2017/&quot;&gt;Artsy&#39;s Technology Stack, 2017&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2018 - Cementing Artsy Culture&lt;/strong&gt; - &lt;br/&gt;JavaScriptures (&lt;a href=&quot;https://artsy.github.io/blog/2018/05/01/JavaScriptures-1-React/&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/05/02/JavaScriptures-2-TypeScript/&quot;&gt;TypeScript&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/06/15/JavaScriptures-4.2-Local-State/&quot;&gt;Tooling&lt;/a&gt;,
&lt;a href=&quot;https://artsy.github.io/blog/2018/06/13/JavaScriptures-4.1-Relay/&quot;&gt;Relay&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/06/15/JavaScriptures-4.2-Local-State/&quot;&gt;Local State&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/05/04/JavaScriptures-3-Styled-Components/&quot;&gt;Styled Components&lt;/a&gt;), &lt;a href=&quot;https://artsy.github.io/blog/2018/10/18/long-term-highlights/&quot;&gt;Engineering Highlights&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2018/06/03/Announcing-Artsy-x-React-Native/&quot;&gt;Announcing:
Artsy x React Native&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2019 - Archivist&lt;/strong&gt; - &lt;br/&gt;&lt;a href=&quot;https://artsy.github.io/blog/2019/04/11/on-an-rfcs-process/&quot;&gt;Why we added an RFC process to Artsy&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2019/04/10/omakase-relay/&quot;&gt;Why does Artsy use Relay?&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2019/01/30/why-we-run-our-blog/&quot;&gt;Why
We Run Our Own Blog&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2019/04/04/peril-architecture-deep-dive/&quot;&gt;Peril Architecture Deep Dive&lt;/a&gt; &amp;amp; this post.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;iOS&quot;&gt;&lt;/a&gt;
&lt;h1&gt;iOS&lt;/h1&gt;

&lt;p&gt;While I was originally expecting to be working on Ruby apps at Artsy, I very quickly ended up working on our iOS
app &lt;a href=&quot;https://folio.artsy.net&quot;&gt;Artsy Folio&lt;/a&gt; and eventually owned it post-1.0. This makes sense because I had a few years of macOS
native experience and I knew the project lead (&lt;a href=&quot;https://twitter.com/benjaminjackson&quot;&gt;Ben Jackson&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Over time, I grew to own the iOS team at Artsy. In doing so I became a manager with 3-4 reports and tried to really
make a name for Artsy&#39;s iOS team in the industry. We built more apps, and started to need to think through our
larger I found our &lt;a href=&quot;https://www.artsy.net/article/artsy-jobs-mobile-engineer&quot;&gt;old job posting&lt;/a&gt; from just before we consolidated with web. It echoes a lot of the
idea on how I framed our team&#39;s responsibilities being in that we should build Artsy in a way that improves the
industry for everyone too.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2015/09/18/Cocoa-Architecture-Dependencies/&quot;&gt;Dependencies&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/09/01/Cocoa-Architecture-Dropped-Design-Patterns/&quot;&gt;Dropped Design Patterns&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/08/24/Cocoa-Architecture-Hybrid-Apps/&quot;&gt;Hybrid Apps&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/08/19/Cocoa-Architecture-Switchboard-Pattern/&quot;&gt;ARSwitchboard&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2015/08/15/Cocoa-Architecture-Router-Pattern/&quot;&gt;ARRouter&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think the pinnacle of my writing in this phase comes from a collaboration with the entire iOS team the magazine
&lt;a href=&quot;https://www.objc.io/&quot;&gt;obcj.io&lt;/a&gt; - &lt;a href=&quot;https://www.objc.io/issues/22-scale/artsy/&quot;&gt;iOS at Scale: Artsy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As we hired, it became important to find ways to teach each other how our native codebases work. So, we have a set
of open codebase walk-throughs which explain the high level architecture and occasionally deep-dive on specific
features.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Code Review: &lt;a href=&quot;https://artsy.github.io/blog/2015/11/05/Emergence-Code-Review/&quot;&gt;Emergence&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/02/11/Code-Review-Energy/&quot;&gt;Energy&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/02/12/Code-Review-Energy-Sync/&quot;&gt;Energy Sync&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As we started to adopt React Native at Artsy, we really needed a different structure for our entire team and
technology stack. We had to re-think how we build apps, interact with the open community and what we were as
engineers.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2016/08/24/On-Emission/&quot;&gt;On our implementation of React Native&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2017/02/05/Retrospective-Swift-at-Artsy/&quot;&gt;Retrospective: Swift at Artsy&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2017/07/06/React-Native-for-iOS-devs/&quot;&gt;Intro to React
Native for an iOS Developer&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/03/17/two-years-of-react-native/&quot;&gt;React Native, 2 years later&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/04/17/making-a-components-pod/&quot;&gt;Making a React Native Components
Pod&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2019/03/17/three-years-of-react-native/&quot;&gt;React Native at Artsy, 3 years later&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Re-defining ourselves as native engineers who support JavaScript via our iOS silos was tricky, I think both
&lt;a href=&quot;https://ashfurrow.com/blog/learning-from-other-programming-communities/&quot;&gt;Ash&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://www.youtube.com/watch?v=zqnJBksguVI&quot;&gt;Maxim&lt;/a&gt; have great write-ups on the topic. For me, the move to the
JavaScript came at a perfect time: the iOS community was fragmenting because of competing dependency managers and
the introduction of Swift which made infrastructure work less valuable.&lt;/p&gt;

&lt;p&gt;We still needed to be up-to-date with the latest tools and ideas from the native world, but mainly from &quot;iOS as
Platform&quot; instead of features development (though my non-technical &lt;a href=&quot;https://artsy.github.io/blog/2018/03/18/ar/&quot;&gt;ARKit post&lt;/a&gt; is a great read).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2017/07/31/fastlane-travis-weekly-deploys/&quot;&gt;Deploying your app on a weekly basis via fastlane + Travis CI&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2017/04/05/what-is-fastlane-match/&quot;&gt;What is fastlane match?&lt;/a&gt;,
&lt;a href=&quot;https://artsy.github.io/blog/2019/01/05/its-time-to-use-spm/&quot;&gt;It&#39;s time to use Swift Package Manager&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/10/14/Accessing-the-Source-Code-from-your-Simulator/&quot;&gt;Accessing the app&#39;s Source Code from your Simulator&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/05/03/podspec-checksums/&quot;&gt;Why
does my team&#39;s Podfile.lock Podspec checksums change?&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/03/05/iOS-Code-Injection/&quot;&gt;Code Injection for Xcode&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2014/06/20/artsys-first-closed-source-pod/&quot;&gt;Artsy&#39;s
first closed source Pod&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/01/21/cocoapods-keys-and-CI/&quot;&gt;CocoaPods-Keys and CI&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;JavaScript&quot;&gt;&lt;/a&gt;
&lt;h1&gt;JavaScript&lt;/h1&gt;

&lt;p&gt;To get experience in JavaScript, I took one of my large open source projects and &lt;a href=&quot;https://artsy.github.io/blog/2017/06/30/danger-one-oh-again/&quot;&gt;re-create it from
scratch&lt;/a&gt;. Which eventually turned into &lt;a href=&quot;https://artsy.github.io/blog/2017/09/04/Introducing-Peril/&quot;&gt;Peril&lt;/a&gt;, which solves &lt;a href=&quot;https://artsy.github.io/blog/2018/06/18/On-Obsessive-Statelessness/&quot;&gt;some interesting
problems&lt;/a&gt; at Artsy and in the rest of my OSS work.&lt;/p&gt;

&lt;p&gt;For Artsy, we needed to consider: What is the right tech to build for both React Native and React on web? We had a
good guess &lt;a href=&quot;https://artsy.github.io/blog/2017/02/05/Front-end-JavaScript-at-Artsy-2017/&quot;&gt;back in 2016&lt;/a&gt; and that slowly evolved over the course of a few years into what we now call
the &lt;a href=&quot;https://www.youtube.com/watch?v=1Z3loALSVQM&quot;&gt;Artsy Omakase&lt;/a&gt;. Making sure that the rest of the team agreed, and that new people could go see our
reasoning was important when making foundations which could last 5-10 years.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2017/02/05/Front-end-JavaScript-at-Artsy-2017/&quot;&gt;Exploration: Front-end JavaScript at Artsy in 2017&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/08/15/vscode/&quot;&gt;Using VS Code for JavaScript&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/06/19/graphql-for-mobile/&quot;&gt;GraphQL
for iOS Developers&lt;/a&gt;, JavaScriptures (&lt;a href=&quot;https://artsy.github.io/blog/2018/05/01/JavaScriptures-1-React/&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/05/02/JavaScriptures-2-TypeScript/&quot;&gt;TypeScript&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/06/15/JavaScriptures-4.2-Local-State/&quot;&gt;Tooling&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/06/13/JavaScriptures-4.1-Relay/&quot;&gt;Relay&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/06/15/JavaScriptures-4.2-Local-State/&quot;&gt;Local
State&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/05/04/JavaScriptures-3-Styled-Components/&quot;&gt;Styled Components&lt;/a&gt;), &lt;a href=&quot;https://artsy.github.io/blog/2019/04/10/omakase-relay/&quot;&gt;Why does Artsy use Relay?&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;Open.Source&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Open Source&lt;/h1&gt;

&lt;p&gt;Artsy had a rich relationship with Open Source before I arrived, and I devoted a lot of time and effort to making
this world-class. There is an entire blog post on how Artsy became &lt;a href=&quot;https://artsy.github.io/blog/2019/04/29/how-did-artsy-become-oss-by-default/&quot;&gt;Open Source by Default&lt;/a&gt;, but I made sure
to make it easy for people interested in following Artsy&#39;s footsteps. I believe the world will be a lot richer as
more people work in the open.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2016/01/13/OSS-Expectations/&quot;&gt;Open Expectations&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2017/01/04/OSS-FAQ/&quot;&gt;Open Source FAQ for Engineers&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/12/10/License-and-You/&quot;&gt;Licenses for OSS Code&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/08/06/open-sourcing-energy/&quot;&gt;Open
Sourcing Energy&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/04/28/how-we-open-sourced-eigen/&quot;&gt;How we Open Source&#39;d Eigen&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/09/06/Milestone-on-OSS-by-Default/&quot;&gt;Helping the Web Towards OSS by
Default&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/08/21/OSS-by-Default-Docs/&quot;&gt;Open Source by Default: Docs&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;Teaching&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Teaching&lt;/h1&gt;

&lt;p&gt;To quote myself:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Open Source is important to me because I grew up outside of an urban center in Britain where I had very little in
the way of community mentorship. Open Source gave me the ability to see how difficult things were built. I moved
from being a beginner to an intermediate programmer by reading the source code that others had opened up.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://open.nytimes.com/five-questions-with-orta-therox-d5bb9659c50b&quot;&gt;5 Questions with Orta Therox&lt;/a&gt; &lt;em&gt;(open.nytimes.com)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I use Open Source, and Artsy&#39;s leverage, to help make sure that the next generation of programmers feel like they
have so much more insight into how we build hard things. I know it&#39;s not easy getting started, so I&#39;ve tried to
take common questions and wrap them up into larger sets of documentation on how I went through those phases.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2016/01/30/iOS-Junior-Interviews/&quot;&gt;Interviewing, applying and getting your first job in iOS&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/09/10/Help!-I&#39;m-becoming-Post-Junior/&quot;&gt;Help! I&#39;m becoming
Post-Junior&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/11/14/JS-Glossary/&quot;&gt;JavaScript Glossary for 2017&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2017/10/10/C4Q-QandA/&quot;&gt;C4Q&amp;amp;A&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2018/01/10/C4Q-QandA-two/&quot;&gt;C4Q&amp;amp;A 2&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;So..What.Next.&quot;&gt;&lt;/a&gt;
&lt;h1&gt;So, What Next?&lt;/h1&gt;

&lt;p&gt;If you want to keep on top of what I&#39;m up-to, I&#39;m starting &lt;a href=&quot;https://buttondown.email/orta&quot;&gt;a personal mailing list&lt;/a&gt;. You should join, it&#39;ll
be roughly monthly - so pretty low key.&lt;/p&gt;

&lt;p&gt;Well, I built a system for doing guest posts in this blog, so maybe I&#39;ll appear again on this blog now that I can&#39;t
write &quot;we&quot; when talking about Artsy. In the mean time there&#39;s a lot of engineers at Artsy writing really cool
things!&lt;/p&gt;

&lt;p align=&quot;right&quot;&gt;&lt;code&gt;./orta&lt;/code&gt;&lt;/br&gt;&lt;code&gt;x&lt;/code&gt;&lt;/p&gt;



</description>
        <pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/05/03/ortas-best-of/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/05/03/ortas-best-of/</guid>
        
        
        <category>everything</category>
        
      </item>
    
      <item>
        <title>How did Artsy become OSS by Default?</title>
        <description>&lt;p&gt;One of the defining cultural features of the Artsy Engineering team is that we strive to be Open Source by Default.
This didn&#39;t happen over-night and was a multi-year effort from many people to push Artsy&#39;s engineering culture to
the point where it was acceptable and living up to the ideals still requires on-going effort today.&lt;/p&gt;

&lt;p&gt;I think to understand this, we need to dive into the archives of some of member&#39;s older posts to grok their
intentions and ideas. Yes, this is a re-cap episode. Let&#39;s go.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;What.is..Open.Source.by.Default..&quot;&gt;&lt;/a&gt;
&lt;h1&gt;What is &quot;Open Source by Default&quot;?&lt;/h1&gt;

&lt;p&gt;In short, it&#39;s the idea that working in the open should be your starting position for a new project and when
creating a new project you need to argue the value of closing the project instead. This turns into an axiom which
powers quite a lot of the &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#engineering-principles&quot;&gt;Engineering Principles&lt;/a&gt; which Artsy holds dear.&lt;/p&gt;

&lt;p&gt;In 2015, as we were nearing working entirely in the open - our CTO at the time, &lt;a href=&quot;https://code.dblock.org&quot;&gt;dB.&lt;/a&gt; wrote what became our
Open Source by Default north-star:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;When starting a new service, library or application I am going to default to open. I am going to weigh whether
there’s any advantage of keeping a project closed-source, knowing and presuming that there’re numerous
disadvantages.&lt;/p&gt;

&lt;p&gt;Team heads, including myself, are making open-source their foundation. This means building non-core intellectual
property components as open source. That’s easily 2/3 of the code you write and we all want to focus on our core
competencies. Hence open-source is a better way to develop software, it’s like working for a company of the size
of Microsoft, without the centralized bureaucracy and true competition.&lt;/p&gt;

&lt;p&gt;By default, I contribute to other people’s generic open-source solutions to save time and money by not
reinventing the wheel. Taking this further, I spend significant amount of time extracting non-domain-specific
code into new or existing open-source libraries, reducing the footprint of the proprietary applications I work
on.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://code.dblock.org/2015/02/09/becoming-open-source-by-default.html&quot;&gt;Becoming Open Source by Default&lt;/a&gt;&lt;/p&gt;

&lt;a name=&quot;How.Did.We.Get.There.&quot;&gt;&lt;/a&gt;
&lt;h1&gt;How Did We Get There?&lt;/h1&gt;

&lt;p&gt;In 2011 Artsy hired &lt;a href=&quot;https://code.dblock.org&quot;&gt;dB.&lt;/a&gt; to be our Head of Engineering, You can get a sense of his frustration in trying to do
Open Source work in prior companies via a post from 2010 on opensource.com.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Armed with a healthy dose of idealism, I went to executive management and proposed we open source the tool. I was
hoping for a no-brainer and a quick decision at the division level. To my surprise, it took two years, a vast
amount of bureaucracy, and far more effort than I ever anticipated.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://opensource.com/life/10/12/corporate-change-contributing-open-source&quot;&gt;Corporate change: Contributing to open source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In contrast today, in the culture he set up for Artsy Engineering - you actually have a (&lt;a href=&quot;https://github.com/artsy/README/issues/131&quot;&gt;tiny!&lt;/a&gt;) bit more
bureaucracy if you wanted to create a new &lt;em&gt;closed&lt;/em&gt; source project than an open source one.&lt;/p&gt;

&lt;a name=&quot;L2011.-.First.steps&quot;&gt;&lt;/a&gt;
&lt;h2&gt;2011 - First steps&lt;/h2&gt;

&lt;p&gt;Towards the end of 2011, Artsy&#39;s first step into contributing to open source was via a project called &lt;a href=&quot;https://github.com/sarcilav/heroku-bartender&quot;&gt;Heroku
Bartender&lt;/a&gt; (dB. has a &lt;a href=&quot;https://code.dblock.org/2011/03/20/continuous-deployment-with-heroku-bartender.html&quot;&gt;write up on it&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Artsy is lucky because both of our co-founders have a technical background (&lt;a href=&quot;https://www.forbes.com/special-report/2014/30-under-30/art-and-style.html&quot;&gt;computer science at
Princeton&lt;/a&gt;, and &lt;a href=&quot;https://www.technyc.org/leadership-council/sebastian-cwilich&quot;&gt;AT&amp;amp;T Labs&lt;/a&gt;) because our CEO then sent a team email which really hammered the internal
value of writing OSS and letting people know it exists:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;Team, The Engineering team just open sourced an awesome tool called Heroku-Bartender. It was mentioned on Hacker
News with a link to its GitHub repository. It made it into the top posts. I want everyone to check it out and
read through the comments. Open source is a great way for us to establish engineering credibility while
contributing to the community-at-large. -Thank you and congratulations to Engineering.&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;dB. reflects on how different the mentality for open source is different in a modern startup in contrast to
existing large corporations.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;My CEO has made giving back to the community and building karma part of our company culture. Investors look for
this because it attracts those top engineers who will ultimately execute the company’s vision. Open source is no
longer the way of the future—it is the way the new CEOs are wired.&lt;/p&gt;

&lt;p&gt;The companies that don’t embrace these open movements will simply fail, because the culture of secrecy and fear
is a thing of the past.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://opensource.com/business/11/5/thinking-open-source-how-startups-destroy-culture-fear&quot;&gt;Thinking open source: How startups destroy a culture of fear&lt;/a&gt;&lt;/p&gt;

&lt;a name=&quot;L2012.-.Open.Communications&quot;&gt;&lt;/a&gt;
&lt;h2&gt;2012 - Open Communications&lt;/h2&gt;

&lt;p&gt;While Artsy started to ship a lot more libraries in 2012, probably the most important step we took during this
first year was creating this blog, and publishing 33 (&lt;a href=&quot;/blog/archives/&quot;&gt;!&lt;/a&gt;) blog posts by 8 authors (close to the entire
team!).&lt;/p&gt;

&lt;p&gt;This really helped established a baseline that external communications could be a foundation of openness, it might
not yet be code, but blog posts are an awesome start. I know my first blog during this time was specifically built
because I had solved a hard problem which I expected others would have. My answer wasn&#39;t generic enough to warrant
making a library but it was big enough to write a &lt;a href=&quot;/blog/2012/05/11/on-making-it-personal--in-iOS-with-searchbars/&quot;&gt;blog post sharing the code&lt;/a&gt; and providing context.&lt;/p&gt;

&lt;p&gt;We structured write-ups as being an important part of our work, and dB. as Head of Engineering started leading by
example by shipping about 2/3rds of our posts. Writing this many blog posts in our first year of creating a blog is
a pretty solid achievement in my opinion, and the blog has always represented Artsy&#39;s Engineering team in one way
or another:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I consider our blog, and the rest of the site, to be the canonical representation of the Artsy Engineering team
online. We&#39;ve carefully grown an Artsy Engineering aesthetic around it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;/blog/2019/01/30/why-we-run-our-blog/&quot;&gt;Why We Run Our Own Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Getting people into a space where they feel like contributions to this blog are not &lt;em&gt;big deals&lt;/em&gt; but are &lt;em&gt;iterative
improvements&lt;/em&gt; was step one towards OSS by Default.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;A commit says the what, a pull request the how and a blog post gives the why. Writing about our code allows us to
provide documentation for future employees with the context around how decisions were made. Nobody &lt;em&gt;wants&lt;/em&gt; to
ship messy code, but a lot of the time you choose to in order to provide something positive.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;TODO&quot;&gt;OSS Expectations&lt;/a&gt;&lt;/p&gt;

&lt;!--
require &#39;yaml&#39;
a = YAML.load_file(&quot;config.yml&quot;)
a[&quot;oss_projects&quot;].select { |o| o[&quot;created&quot;].include? &quot;2012&quot; }.map { |o| &#39;[&#39; + o[&quot;title&quot;] + &#39;](&#39; + o[&quot;repository&quot;] + &#39;)&#39;  }.join(&quot;, &quot;)
--&gt;


&lt;p&gt;That said, the team wasn&#39;t sitting on our hands in terms of making shared infrastructure, we built libraries within
the Ruby and iOS communities: &lt;a href=&quot;https://github.com/orta/ARAnalytics&quot;&gt;ARAnalytics&lt;/a&gt;,
&lt;a href=&quot;https://github.com/aaw/resque-heroku-scaling-canary&quot;&gt;resque-heroku-scaling-canary&lt;/a&gt;,
&lt;a href=&quot;https://github.com/dblock/heroku-forward&quot;&gt;heroku-forward&lt;/a&gt;, &lt;a href=&quot;http://github.com/artsy/garner&quot;&gt;Garner&lt;/a&gt;,
&lt;a href=&quot;https://github.com/joeyAghion/spidey&quot;&gt;spidey&lt;/a&gt;, &lt;a href=&quot;https://github.com/dblock/guard-rack&quot;&gt;guard-rack&lt;/a&gt;,
&lt;a href=&quot;https://github.com/dblock/rspec-rerun&quot;&gt;rspec-rerun&lt;/a&gt;,
&lt;a href=&quot;https://github.com/aaw/hyperloglog-redis&quot;&gt;hyperloglog-redis&lt;/a&gt;,
&lt;a href=&quot;https://github.com/aaw/cartesian-product&quot;&gt;cartesian-product&lt;/a&gt;,
&lt;a href=&quot;https://github.com/aaw/space-saver-redis&quot;&gt;space-saver-redis&lt;/a&gt; &amp;amp;
&lt;a href=&quot;https://github.com/dblock/mongoid-cached-json&quot;&gt;mongoid-cached-json&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some of which we still use today.&lt;/p&gt;

&lt;a name=&quot;L2013.-.Tools..amp..Libraries&quot;&gt;&lt;/a&gt;
&lt;h2&gt;2013 - Tools &amp;amp; Libraries&lt;/h2&gt;

&lt;p&gt;In 2013 Artsy took its first steps towards separating our front-ends from our back-ends. From a perspective of OSS
by Default this lowers the barriers a lot. We have been conservative with opening the source code for back-end
services, as they tended to contain more valuable business infrastructure.&lt;/p&gt;

&lt;p&gt;As the web team explored building websites in Node, we took opportunities to use marketing websites like
&lt;a href=&quot;https://iphone.artsy.net&quot;&gt;iphone.artsy.net&lt;/a&gt; (&lt;a href=&quot;https://github.com/artsy/flare&quot;&gt;flare&lt;/a&gt;) and &lt;a href=&quot;https://2013.artsy.net&quot;&gt;2013.artsy.net&lt;/a&gt;
(&lt;a href=&quot;https://github.com/artsy/artsy-2013&quot;&gt;artsy-2013&lt;/a&gt;) to explore building a website in the open. These projects were
small, self contained and well scoped. I wasn&#39;t involved in the decision to make them open, but I&#39;m pretty sure it
went something like &lt;em&gt;&quot;Should this be private? Nah. Ok.&quot;&lt;/em&gt; A single page web-app wasn&#39;t a risk.&lt;/p&gt;

&lt;p&gt;The team also started exploring working on some more fundamental OSS infrastructure, we built out a framework for
building Node apps called &lt;a href=&quot;/blog/2013/11/30/rendering-on-the-server-and-client-in-node-dot-js/&quot;&gt;Ezel&lt;/a&gt; (which we still use today &lt;a href=&quot;/blog/2017/09/05/Modernizing-Force/&quot;&gt;in Force&lt;/a&gt;) and started work to
co-maintain CocoaPods and CocoaDocs.&lt;/p&gt;

&lt;a name=&quot;L2014.-.New.Apps&quot;&gt;&lt;/a&gt;
&lt;h2&gt;2014 - New Apps&lt;/h2&gt;

&lt;a name=&quot;artsy.net&quot;&gt;&lt;/a&gt;
&lt;h3&gt;artsy.net&lt;/h3&gt;

&lt;p&gt;In 2014 we &lt;a href=&quot;/blog/2014/09/05/we-open-sourced-our-isomorphic-javascript-website/&quot;&gt;open-sourced the Artsy website&lt;/a&gt;. This was a major step forward in OSS by Default, we played
it safe by having the open source aspect as being a public fork that engineers would push changes to. This meant
that GitHub issues and Pull Request discussion could happen in private. It was a good, safe, incremental step. We
took an application which was very dear to us, and found a way to reduce the risk in moving to be open.&lt;/p&gt;

&lt;p&gt;We could move our main website to be open source because we had successfully shipped prior art. The problems were
more or less the same, just at a larger scale. We had to worry about leaking secrets in code and commits, but those
best practices we had baked into the website from its inception 10 months prior.&lt;/p&gt;

&lt;a name=&quot;Editorial.CMS..amp..Bidding.Kiosk&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Editorial CMS &amp;amp; Bidding Kiosk&lt;/h3&gt;

&lt;p&gt;We scoped out building a &lt;a href=&quot;https://github.com/artsy/positron&quot;&gt;new CMS&lt;/a&gt; for our editorial team, this new app started as open source from day one.&lt;/p&gt;

&lt;p&gt;This step inspired the iOS team who were also exploring trying to move to be more open in their work. By this point
we had two large private iOS apps, but had the need for a new iOS app for covering bidding at auctions on-site.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Orta and I met some friends over a weekend in Austria and, during our drive across the country, discussed the
possibility of developing this new iOS app as a completely open source project. We were both excited about the
prospect and had the support from dB. to make it open.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&quot;&gt;Developing a Bidding Kiosk for iOS in Swift&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We built out some necessary community infrastructure for iOS apps to be built in the open, and worked exclusively
in the open on this project. Working in the open on the bidding kiosk proved to be very useful when communicating
with others about hard problems we were seeing with new tooling, as well as providing reference implementations for
community ideas.&lt;/p&gt;

&lt;a name=&quot;L2015.-.Backtracking.to.move.iOS.to.OSS.by.Default&quot;&gt;&lt;/a&gt;
&lt;h2&gt;2015 - Backtracking to move iOS to OSS by Default&lt;/h2&gt;

&lt;p&gt;We were really starting to see what OSS by Default looks like by 2015. You can feel it in dB&#39;s and the mobile
team&#39;s writing:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;First, I recognize that becoming open-source by default is emotionally, organizationally and, sometimes,
technically hard. As such, this post is not a manifesto, it’s a step in the right direction that will guide my
career and technology choices in the future.&lt;/p&gt;

&lt;p&gt;When starting a new service, library or application I am going to default to open. I am going to weigh whether
there’s any advantage of keeping a project closed-source, knowing and presuming that there’re numerous
disadvantage&lt;/p&gt;

&lt;p&gt;I am going to default to the MIT License for all new projects, because it’s short and clear and protects everyone
[...]&lt;/p&gt;

&lt;p&gt;Despite overwhelming evidence, many non-technical people are worried about risks surrounding open-source. I am
convinced that any business success depends a lot more on your ability to serve customers and partners, the brand
and culture and the commitment to hiring the best of the best in all fields, than on the hypothetical risks that
a competitor might gain by taking advantage of your open-source software.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://code.dblock.org/2015/02/09/becoming-open-source-by-default.html&quot;&gt;Becoming Open Source by Default&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The Artsy mobile team is small, especially in contrast to the other teams in this issue of objc.io. Despite this,
we’re notable for our impact on the community. Members of our iOS development team are — and have been — involved
in almost all major open-source projects in the Cocoa community.&lt;/p&gt;

&lt;p&gt;At the start of 2015, we finished open sourcing the Artsy iOS app, eigen. This is a process that took many
months; we needed to take considered, incremental steps both to prove that there was business value in open
sourcing our consumer-facing app, and to disprove any concerns around letting others see how the sausage is made.&lt;/p&gt;

&lt;p&gt;Earlier, we said that being open source by default means that everything stays open unless there is a good reason
to keep it secret. The code we do share isn’t what makes Artsy unique or valuable. There is code at Artsy that
will necessarily stay closed forever.&lt;/p&gt;

&lt;p&gt;Working in the open isn’t so different from typical software development. We open issues, submit pull requests,
and communicate over GitHub. When we see an opportunity to create a new library, the developer responsible for
that library creates it under his or her own GitHub account, not Artsy’s.&lt;/p&gt;

&lt;p&gt;People often ask why we operate in the open as we do. We’ve already discussed our technical motivations, as well
as the sense of purpose it gives individual team members, but honestly, working in the open is just smart
business.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://www.objc.io/issues/22-scale/artsy/&quot;&gt;iOS at Scale: Artsy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2015 was the year where the mobile team went back and open-sourced our previous iOS apps. We had two of them, we
started with the app the team worked on daily: Artsy for iOS (Eigen). We opened the repo in january, and had a
write-up on the process and changes needed to make it work a few months later once the dust has settled.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Credit where credit is due, when we were working on Eidolon [the Bidding Kiosk], our CTO dB. just casually tossed
the idea that, really, Eigen should be open source too.&lt;/p&gt;

&lt;p&gt;We devoted time at the end of 2014 to understand what the constraints were for getting the app opened. [...] We
opted to go for a total repo switch, removing all history. There were a lot of places where keys could have been
hiding within the app.&lt;/p&gt;

&lt;p&gt;One of the things that we found a bit sad about the transition to a new repo, is that it&#39;s hard to give past
contributors recognition for their work.&lt;/p&gt;

&lt;p&gt;It&#39;s one thing to think that it&#39;s possible, it&#39;s another to do it. I&#39;m glad that I am in a position where I can
enact change. I felt no resistance in the process. I kept offering potential avenues for someone to stop me, too.
I emailed the entire team as I started the process 2 weeks before it happened, I talked to anyone who might write
issues or contribute from the design team. As I got further along the process and sent another email out that it
was going to happen tomorrow. All I got were 👍 and 🎉s in GIF form.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://artsy.github.io/blog/2015/04/28/how-we-open-sourced-eigen/&quot;&gt;How we Open Source&#39;d Eigen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Going through the process, and being certain in the trade-offs meant for the project gave the mobile team the
confidence to take the time to open source their oldest iOS project - a gallery portfolio tool, Folio.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It&#39;s worth mentioning that we don&#39;t just talk externally about open source. Internally, the Mobile team runs
talks about open source for the rest of the Artsy staff. As well, we discuss the tooling and business
implications of having our work in public repos. Artsy strives for an open culture, in this case the development
team, on the whole, is just further along in the process.&lt;/p&gt;

&lt;p&gt;The open Source app idea started with an experiment in the Summer of 2014, asking, &quot;What does a truly open source
App look like?&quot; The outcome of that was our Swift Kiosk app, Eidolon. Open from day one. We took the knowledge
from that and applied it to our public facing app, Eigen. Open from day 806. That made 2/3rds of our apps Open
Source. I&#39;m going to talk about our final app, Energy. Open from day 1433 and ~3500 commits.&lt;/p&gt;

&lt;p&gt;Folio is interesting in that it has competitors. To some extent the Kiosk app does too, but the cost of entry
there is really high in comparison. Folio on the other hand, has a handful of competing businesses who exist to
only build a Gallery/Museum/Collector portfolio app.&lt;/p&gt;

&lt;p&gt;Energy, however, requires you have a Artsy partner account. So opening it up would mean that an OSS developer
hits the login screen and is stuck. In developing this app, I&#39;ve slowly been creating my own partner gallery
account based on my paintings and photography. So now when you set up the app to be ran as an OSS app, it will
pre-load a known database of artworks and metadata from my test gallery.&lt;/p&gt;

&lt;p&gt;Its easy to imagine that open sourcing something is an end-point, but from our perspective it is a journey. We
want to make sure that anyone can download this app, learn how and why it&#39;s structured and then run through the
app with a debugger to get a deeper sense of how everything connects. Just releasing the code would have been
underwhelming. Instead we&#39;re aiming high.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://artsy.github.io/blog/2015/08/06/open-sourcing-energy/&quot;&gt;Open Sourcing Energy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one is a good read, but extra worth the click because it includes an email I wrote to the entire of Artsy with
the intent of priming the company about opening the source code.&lt;/p&gt;

&lt;p&gt;dB. and myself spent quite a lot of time talking to the rest of the company about the OSS ideals, our company&#39;s
values and open source fit. Here&#39;s &lt;a href=&quot;https://vimeo.com/136554627&quot;&gt;a 5m video&lt;/a&gt; which is a great example of how we presented open source
internally:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;Are there any advantages in keeping something closed? If there are no advantages, default to open.&quot;&lt;/p&gt;

&lt;p&gt;&quot;Instead of asking for permission, just communicate what you are doing and let other people suggest better ways
of doing it. Maybe sometimes a better way is closed.&quot;&lt;/p&gt;

&lt;p&gt;&quot;Artsy will stand behind your open source contributions as a team.&quot;&lt;/p&gt;

&lt;p&gt;&quot;Open Source will create more value, and it will positively impact our culture.&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;L2016.-.Web.OSS.by.Default&quot;&gt;&lt;/a&gt;
&lt;h2&gt;2016 - Web OSS by Default&lt;/h2&gt;

&lt;p&gt;In 2016 we had really started to understand the differences in how we interact with the open source community:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;...and in over a year these expectations have been met. Some of our libraries have become big, and our apps have
received small feature PRs. We&#39;re pleasantly surprised when it happens, but we don&#39;t expect it.&lt;/p&gt;

&lt;p&gt;I didn&#39;t expect to be told face to face how many people have read, and learned from our codebases. We get around
120 unique clones of our iOS apps every week. People tell us that it&#39;s where they found a certain technique, or
that they could see how the trade-offs were made for certain decisions.&lt;/p&gt;

&lt;p&gt;I also under-estimated how useful open code is in encouraging a culture of writing.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://artsy.github.io/blog/2016/01/13/OSS-Expectations/&quot;&gt;Open Source Expectations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we had proved that we could safely port our large, private iOS codebases to be public. That we could safely
work in the open on mobile project, we &lt;a href=&quot;https://artsy.github.io/blog/2016/09/06/Milestone-on-OSS-by-Default/&quot;&gt;brought that back to web&lt;/a&gt;. We went back to take artsy.net from
being an open fork to working in the open:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Though Force wasn&#39;t quite Open Source by Default, it represented a really important step for Artsy&#39;s OSS
perspective but was not the end goal. We were opening our source, but not opening our process.&lt;/p&gt;

&lt;p&gt;... the web team started the process of opening our apps at Artsy, then the mobile team took the next big step.
Now the teams are both in lock-step, and if you work on the front-end at Artsy - OSS by Default is the way we all
work now.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://artsy.github.io/blog/2016/09/06/Milestone-on-OSS-by-Default/&quot;&gt;Helping the Web Towards OSS by Default&lt;/a&gt;&lt;/p&gt;

&lt;a name=&quot;L2017-2019.Moving.the.Platform.forward&quot;&gt;&lt;/a&gt;
&lt;h2&gt;2017-2019 Moving the Platform forward&lt;/h2&gt;

&lt;p&gt;As a gross simplification, Artsy is split between back-end and front-end engineers. With most all of the
front-end as open (well, maybe 90%, which is &lt;em&gt;good enough&lt;/em&gt;™️) then the only space for improvement towards Open
Source by Default was within the back-end. We call the collection of engineers with the skill-sets for building
APIs and shared infrastructure the Platform team.&lt;/p&gt;

&lt;p&gt;Our platform teams have always had a weaker stance towards opening their codebases. Most of our APIs are almost
100% business logic, and there&#39;s a good reason for a lot of our APIs to be closed source. Though in the the last
two years though there&#39;s been movement towards writing new services in the open:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2017&lt;/strong&gt; - &lt;a href=&quot;https://github.com/artsy/bearden&quot;&gt;artsy/bearden&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/artsy/rsvp&quot;&gt;artsy/rsvp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2018&lt;/strong&gt; - &lt;a href=&quot;https://github.com/artsy/APR&quot;&gt;artsy/APR&lt;/a&gt;, &lt;a href=&quot;https://github.com/artsy/exchange/&quot;&gt;artsy/exchange&lt;/a&gt; &amp;amp;
&lt;a href=&quot;https://github.com/artsy/kaws/&quot;&gt;artsy/kaws&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2019&lt;/strong&gt; - &lt;a href=&quot;https://github.com/artsy/volley&quot;&gt;artsy/volley&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which over the course of the last two years seems to be about half of the new systems we&#39;ve built. This is great!
Examples of private tools are analytics parsers, GDPR infrastructure and machine learning services. These had good
reasons to be closed and &lt;a href=&quot;https://github.com/artsy/README/issues/131&quot;&gt;have documented rationales for being closed&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;L2019.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;2019+&lt;/h2&gt;

&lt;p&gt;However, asking where do we go from here is a pretty tricky question. Most of the code that would be opened is now
open, and the projects which could move into the public be are very reasonably contentious.&lt;/p&gt;

&lt;a name=&quot;Does.that.mean.we..strong.are..strong..Open.Source.by.Default.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Does that mean we &lt;strong&gt;are&lt;/strong&gt; Open Source by Default?&lt;/h2&gt;

&lt;p&gt;For people that joined post-2016, it certainly feels like it. People who apply to Artsy cite Open Source by Default
as being a strong factor in their decisions.&lt;/p&gt;

&lt;p&gt;I&#39;m not too sure personally though, maybe only in the axiomatic sense. Artsy operate by the rule of open by
default, but it takes time and effort to do the extra work which is derived from that idea: e.g. improving our
community engagement.&lt;/p&gt;

&lt;p&gt;That&#39;s Artsy&#39;s biggest space for cultural growth now.&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/04/29/how-did-artsy-become-oss-by-default/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/04/29/how-did-artsy-become-oss-by-default/</guid>
        
        
        <category>community</category>
        
        <category>culture</category>
        
        <category>oss</category>
        
      </item>
    
      <item>
        <title>What I Learned Having a Coffee with Every Engineer</title>
        <description>&lt;p&gt;In early 2018, I was set to begin my fifth year working at Artsy. Something about my imminent Artsyversary had me
thinking about my role within the Engineering team. Not my role as an engineer &lt;em&gt;per se&lt;/em&gt;, but my role as a
&lt;em&gt;colleague&lt;/em&gt;. This is the longest I&#39;ve ever worked for one company, and as Artsy started growing the team last year,
I wanted to &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#leverage-your-impact&quot;&gt;leverage my impact&lt;/a&gt; as a longtime colleague to help scale its culture.&lt;/p&gt;

&lt;p&gt;Artsy collects quarterly, anonymous, company-wide surveys through &lt;a href=&quot;https://www.cultureamp.com&quot;&gt;Culture Amp&lt;/a&gt; to determine how everyone is
doing. These are great for answering quantitative questions about the team, like &quot;how engaged are we on average?&quot;,
and I always check out the breakdown of answers in the Engineering team. But there&#39;s something unsatisfying about
these reports – they&#39;re super-valuable, but they feel impersonal to me.&lt;/p&gt;

&lt;p&gt;If I wanted to leverage my impact, I needed to play to my strengths and interests. I&#39;m keenly interested in people
– as individuals – so I decided that the best way for me to contribute to the team was to get to know everyone as
individuals. To become someone the team could talk to. Someone outside the typical manager/employee structure, who
could use their history at Artsy to answer questions (or at least point them in the right direction).&lt;/p&gt;

&lt;p&gt;So, I set off on a project to meet with every member of Artsy&#39;s Engineering team for a one-on-one. With no explicit
goals or expectations, but in line with Artsy&#39;s &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#people-are-paramount&quot;&gt;People are Paramount&lt;/a&gt; value, I got to know my colleagues
better.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;I didn&#39;t want this project to interfere with my product work, so I decided to take things slow. I started with a
list of every Artsy engineer and then removed anyone I already had a close working relationship with. Next, I
prioritized the team leads and randomized the rest of the list. I set up a recurring task (yay OmniFocus) to
schedule a coffee with an engineer every week. When we met, I&#39;d cross them off my list.&lt;/p&gt;

&lt;p&gt;That was over a year ago, so what did I learn? Well, a lot, actually! But to get a sense of the impact my project
had, you&#39;ll need some context.&lt;/p&gt;

&lt;p&gt;2018 was a complex year for Artsy, where we both gained and lost more engineers than usual. The increase in
engineering turnover was generally attributable to what I&#39;ll call &quot;cultural churn.&quot; Scaling a team comes with new
challenges, and our team leadership tried to meet those challenges with changes to the team&#39;s structure. Some of
these changes turned out to be tougher than we&#39;d hoped. Our team is in a great spot &lt;em&gt;now&lt;/em&gt;, but we didn&#39;t get from
there to here via a straight line.&lt;/p&gt;

&lt;p&gt;In the midst of this cultural churn, I was trying to have a one-on-one with every engineer. I was asking
people &quot;hey, how are you doing? Want to grab a coffee?&quot; And that actually had a pretty big impact: if I met someone
and they told me &quot;this situation is stressing me out&quot; or &quot;this feels bad&quot;, it was really validating for them to
hear me respond &quot;yeah, I&#39;m feeling this too. It&#39;s not just you.&quot; This dovetailed with my contemporaneous research
into &lt;a href=&quot;https://ashfurrow.com/blog/building-better-software-by-building-better-teams/&quot;&gt;building compassionate teams&lt;/a&gt;, which I leveraged throughout this project.&lt;/p&gt;

&lt;p&gt;Turns out: people feel better when they know the problems they have are shared by others. &lt;em&gt;Sharing&lt;/em&gt; suffering is
actually one way to &lt;em&gt;minimize&lt;/em&gt; suffering, and minimizing suffering is at the core of my beliefs on compassionate
teams.&lt;/p&gt;

&lt;p&gt;Once I knew something was wrong with our team culture, I went to my manager to discuss the broad-strokes themes of
what I was hearing from my peers. I would never betray the confidence of a colleague, but being able to say &quot;lots
of people are all feeling X&quot; provided an important data point. While leadership already knew that &lt;em&gt;something&lt;/em&gt; was
not quite right, this data point was a strong indicator that leadership had to intervene quickly. I&#39;ll skip the
details of how we ultimately addressed our cultural churn (tl;dr it involved our leaders asking IC&#39;s questions, and
then listening to what they had say). I&#39;m quite happy to say that things are a lot better now!&lt;/p&gt;

&lt;p&gt;While my &quot;have a one-on-one with everyone&quot; project obviously didn&#39;t &quot;fix&quot; the situation, it put me in a position to
&lt;em&gt;help&lt;/em&gt; fix it. In addition to getting to know everyone as individuals, I got to help identify and help address our
cultural churn.&lt;/p&gt;

&lt;p&gt;So what next? Well, a lot, actually! Even more engineers have since joined Artsy, and I admittedly haven&#39;t had a
one-on-one with all of them. But through this project, I realized that I&#39;m very keen to do more of this kind of
people-work. When my manager recently brought up the possibility of becoming a tech lead, &lt;a href=&quot;https://ashfurrow.com/blog/reflecting-on-5-years-at-artsy/&quot;&gt;I jumped on the
opportunity&lt;/a&gt;. I started last week.&lt;/p&gt;

&lt;p&gt;My initial goal, to have a coffee with everyone, remains unfulfilled. It probably won&#39;t ever be, considering that I
now have even less free time in my new role. I&#39;m not an IC anymore – my one-on-ones have to now be focused on &lt;em&gt;my&lt;/em&gt;
team. While the goal of meeting everyone for a one-on-one will never be accomplished, the journey turned out to be
more important.&lt;/p&gt;

&lt;p&gt;Important both to me – getting to know my colleagues (and myself!) better – but also important for the team. I got
to help our team&#39;s culture scale up, and through that experience, I found and expanded the perimeter of my sphere
of influence as an IC.&lt;/p&gt;

&lt;p&gt;I can&#39;t thank Artsy enough for giving me the freedom, as an IC, to research team dynamics, to pursue this project,
and for taking all my feedback seriously. If you&#39;re a senior engineer wondering what&#39;s next, try turning your
attention to your team. I would bet that you&#39;ll learning something worthwhile.&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/04/19/having-a-coffee-with-every-engineer/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/04/19/having-a-coffee-with-every-engineer/</guid>
        
        
        <category>culture</category>
        
        <category>people</category>
        
        <category>process</category>
        
      </item>
    
      <item>
        <title>Why we added an RFC process to Artsy</title>
        <description>&lt;p&gt;Growth is tricky. Whether in terms of raw headcount or people&#39;s evolving career stages. As a team you want to
provide ways in which members can experiment with new ideas, and provide tools to help them offer new perspectives.
One of our greatest tools for instituting change at Artsy is our RFC process.&lt;/p&gt;

&lt;p&gt;An RFC is a Request For Comments, and it is a structured document (in the form of GitHub issue normally) which
offers a change to something. The format is used in large open source projects like: React
(&lt;a href=&quot;https://github.com/reactjs/rfcs/blob/master/README.md&quot;&gt;Overview&lt;/a&gt;,
&lt;a href=&quot;https://github.com/reactjs/rfcs/blob/master/0000-template.md&quot;&gt;Template&lt;/a&gt;), Swift
(&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/process.md#how-to-propose-a-change&quot;&gt;Overview&lt;/a&gt;,
&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/0000-template.md&quot;&gt;Template&lt;/a&gt;) and Rust
(&lt;a href=&quot;https://github.com/rust-lang/rfcs#rust-rfcs&quot;&gt;Overview&lt;/a&gt;,
&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/0000-template.md&quot;&gt;Template&lt;/a&gt;). To give core &amp;amp; non-core contributors a
chance to propose an idea to everyone before implementing a change.&lt;/p&gt;

&lt;p&gt;We &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#own-your-dependencies&quot;&gt;took&lt;/a&gt; this idea and applied to the process of making any cultural change in the company. Read on to find out
why we needed it, how we refined it, some of the tooling we built around it, and what other options are available.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Why.did.we.create.an.RFC.process.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Why did we create an RFC process?&lt;/h2&gt;

&lt;p&gt;We created the RFC process in parallel with &lt;a href=&quot;https://github.com/danger/peril&quot;&gt;Peril&lt;/a&gt; being &lt;a href=&quot;/blog/2017/09/04/Introducing-Peril/&quot;&gt;introduced at Artsy&lt;/a&gt;. Prior to
Peril, most changes to culture were localised in different teams. However, once Peril gave us the ability to create
cultural rules across all engineering repos in GitHub we also needed a way to let people know and provide feedback
about these changes.&lt;/p&gt;

&lt;p&gt;We started with the &lt;a href=&quot;https://github.com/artsy/peril-settings/pull/4&quot;&gt;smallest possible implementation&lt;/a&gt; of an RFC and a &lt;a href=&quot;https://artsy.slack.com/archives/C02BC3HEJ/p1503690782000372&quot;&gt;notification service&lt;/a&gt;🔒. You
would write an issue with this template:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;&#39;&gt;&lt;span class=&#39;line&#39;&gt;Title: &quot;RFC: Add an emoji for when a node package is version bumped&quot;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;Proposal: If the repo has a `package.json`, we should look to see if its version has
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          changed and then submit a tada emoji.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;Reasoning: A release is important, we should cherish them.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;Exceptions: None&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This RFC came with a Peril rule that would post a notification into slack about an RFC being created:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intro-rfcs/first-rfc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Which meant everyone had the chance to know in-advance that a change was being discussed because it crossed team
communication boundaries. Here&#39;s &lt;a href=&quot;https://github.com/artsy/artsy-danger/issues/5&quot;&gt;the first RFC&lt;/a&gt; used at Artsy.&lt;/p&gt;

&lt;p&gt;This was specifically built to be the minimum possible to get an idea of what we actually wanted from an RFC
process for cultural changes.&lt;/p&gt;

&lt;a name=&quot;How.did.it.evolve.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;How did it evolve?&lt;/h2&gt;

&lt;p&gt;Version 2 of our RFC process is what we&#39;ve stuck with for the last 2 years. The second version expanded the scope
from just making Peril changes to being comprehensive enough to cover most cultural changes we wanted.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;&#39;&gt;&lt;span class=&#39;line&#39;&gt;Title: &quot;RFC: Add a Markdown Spell Checker to all Markdown docs in PR&quot;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;## Proposal:
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;Apply a spell checker to every markdown document that appears in a PR.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;## Reasoning
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;We want to have polished documents, both internally and externally. Having a spellcheck
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;happening without any effort on a developers part means that we&#39;ll get a second look at
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;any documentation improvements on any repo.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;## Exceptions:
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;This won&#39;t be perfect, but it is better to get something working than to not have it at all.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;I added the ability to ignore files: so CHANGELOGs which tend to be really jargon heavy will
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;be avoided in every repo.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;Other than that, we can continue to build up a global list of words to ignore.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;## Additional Context:
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;You can see our discussion [in slack here](/link/to/slack.com)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This version also came with a recommendation on how to resolve the RFC, after a week you would add a comment and
close the issue:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;&#39;&gt;&lt;span class=&#39;line&#39;&gt;## Resolution
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;We decided to do it.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;## Level of Support
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;3: Majority acceptance, with conflicting feedback.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;#### Additional Context:
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;Some people were in favor of it, but some people said they didn&#39;t want to do it for project X.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;## Next Steps
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;We will implement it.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;#### Exceptions
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;We will not implement it on project X. We will revisit the decision in 1 year.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;We&#39;ve evolved the closing an RFC process since then:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To &lt;a href=&quot;https://github.com/artsy/README/issues/162&quot;&gt;be more specific on how/when to close an RFC&lt;/a&gt;. Which introduces a stalled state. Turns out some
discussions take longer to resolve than a week&lt;/li&gt;
&lt;li&gt;Peril would post &lt;a href=&quot;https://github.com/artsy/peril-settings/pull/46&quot;&gt;multiple notifications&lt;/a&gt; over the course of a week to make sure people don&#39;t miss the
chance to contribute&lt;/li&gt;
&lt;li&gt;We added a weekly summary of open RFCs into Slack for our &lt;a href=&quot;https://github.com/artsy/README/blob/master/events/open-standup.md#during-standup&quot;&gt;team standup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img src=&quot;/images/intro-rfcs/summary.png&quot; alt=&quot;/images/intro-rfcs/summary.png&quot; /&gt;&lt;/p&gt;

&lt;a name=&quot;What.are.the.alternatives.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What are the alternatives?&lt;/h2&gt;

&lt;p&gt;This RFC process is not without it&#39;s trade-offs.&lt;/p&gt;

&lt;p&gt;An RFC is built with an action in mind, and it explicitly defaults towards this. This process purposely bakes in
silence as positive indifference from observers. When being used as a consensus device, an RFC process really isn&#39;t
that great. It&#39;s an asynchronous, flat conversation, which makes it hard to discuss all avenues with many
simultaneous voices and can sometimes feel like whoever posts the most often kinda wins.&lt;/p&gt;

&lt;p&gt;For consensus tools you really are better off with a meeting. There are all sorts of structured meetings which do a
great job of finding agreement across many opinions.&lt;/p&gt;

&lt;p&gt;For example, we wanted to try and get consensus on how to build APIs at Artsy. The RFC for that would probably have
been something like &quot;Move to use GraphQL in all new APIs&quot;, which is a nuanced technical mandate that would require
buy in from many people. While it does have an direct action, trying to feel like everyone agrees and will work
this way in the future would have probably not worked out in a single-threaded long-form issue. Instead, we opted
to use a &lt;a href=&quot;https://en.wikipedia.org/wiki/Town_hall_meeting&quot;&gt;town-hall style&lt;/a&gt; meeting, where people who had strong opinions would have time to present them - then
at the end all developers would have the chance for feedback.&lt;/p&gt;

&lt;a name=&quot;Where.does.it.work.best.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Where does it work best?&lt;/h2&gt;

&lt;p&gt;This RFC process is good for &quot;I would like to improve this, does that make sense?&quot; - and it&#39;s a really great case
of &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#minimal-viable-process&quot;&gt;Minimum Viable Process&lt;/a&gt; where one issue can spark a great team discussion. Here&#39;s some of my favourite
ones from Artsy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/171&quot;&gt;Provide explicit recommendations when PDDE should take time off &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/131&quot;&gt;Document the rationale for why Artsy&#39;s various closed source repositories aren&#39;t open&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/86&quot;&gt;Relaunch the Platform practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/76&quot;&gt;New Hire Buddies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/31&quot;&gt;All GraphQL API servers have a root &lt;code&gt;_schema.graphql&lt;/code&gt; file &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/117&quot;&gt;New dependencies to Emission/Reaction go through the RFC process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/108&quot;&gt;Creating a public facing status page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/130&quot;&gt;Updates to On-Call Process: Jira Ops + Status Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/10&quot;&gt;Rename the Artsy Omakase to [Something]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We sometimes have RFCs which we don&#39;t want to discuss in public, for those we use our private version of README
called potential. That said, our notification system works on any repo, so if it makes sense to have an RFC on a
repo specifically, that&#39;s no problem too.&lt;/p&gt;

&lt;p&gt;You can see all of our &lt;a href=&quot;https://github.com/search?q=org%3Aartsy+is%3Aissue+label%3ARFC+is%3Aopen&quot;&gt;current open RFCs on the Artsy org here&lt;/a&gt;, and I&#39;ve opened comments for folks
to talk below about whether they&#39;ve enacted something similar - would love to see how this can be improved.&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/04/11/on-an-rfcs-process/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/04/11/on-an-rfcs-process/</guid>
        
        
        <category>culture</category>
        
        <category>mvp</category>
        
        <category>process</category>
        
      </item>
    
      <item>
        <title>Why does Artsy use Relay?</title>
        <description>&lt;p&gt;When the mobile team at Artsy considered &lt;a href=&quot;/blog/2016/08/15/React-Native-at-Artsy/&quot;&gt;moving to React Native&lt;/a&gt; back in 2016, one of the most compelling
cases for making that jump was Relay. This, it seems, is a dependency that is rarely used in the JS community and
we often find ourselves re-explaining this decision to new engineers during onboarding, and to the public at large.&lt;/p&gt;

&lt;p&gt;Which makes this a perfect blog post topic, so let&#39;s have a deep dive into what makes Relay compelling for Artsy&#39;s
engineering team.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;What.problem.does.Relay.solve.&quot;&gt;&lt;/a&gt;
&lt;h1&gt;What problem does Relay solve?&lt;/h1&gt;

&lt;p&gt;Relay is an API client for GraphQL, it comes in two parts: a compiler and a set of front-end components. Relay aims
to provide a really tight binding between your GraphQL API and your view hierarchy. When you build data-driven
apps, Relay removes a whole suite of non-business logic from your application.&lt;/p&gt;

&lt;p&gt;Relay handles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data binding (API → props)&lt;/li&gt;
&lt;li&gt;Cache management (invalidation, re-render live components with data updates, etc)&lt;/li&gt;
&lt;li&gt;Consistent abstractions for bi-directional pagination&lt;/li&gt;
&lt;li&gt;Multiple query consolidation (e.g. consolidate all API requests to one request)&lt;/li&gt;
&lt;li&gt;UI best practices baked in (e.g. optimistic response rendering)&lt;/li&gt;
&lt;li&gt;Declarative data mutation (describe how data should change, instead of doing it)&lt;/li&gt;
&lt;li&gt;Compile-time query generation (removing runtime overhead and allowing you to persist queries)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;By taking the responsibilities of the grunt work for most complex apps and moving it into Relay you get
Facebook-scale best-practices and can build on top of that.&lt;/p&gt;

&lt;a name=&quot;How.does.it.work.&quot;&gt;&lt;/a&gt;
&lt;h1&gt;How does it work?&lt;/h1&gt;

&lt;p&gt;You write a set of Relay components, you always start with a &lt;a href=&quot;https://facebook.github.io/relay/docs/en/query-renderer.html&quot;&gt;&lt;code&gt;QueryRenderer&lt;/code&gt;&lt;/a&gt; and a tree of either
&lt;a href=&quot;https://facebook.github.io/relay/docs/en/fragment-container.html&quot;&gt;&lt;code&gt;FragmentContainer&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://facebook.github.io/relay/docs/en/refetch-container.html&quot;&gt;&lt;code&gt;RefetchContainer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://facebook.github.io/relay/docs/en/pagination-container.html&quot;&gt;&lt;code&gt;PaginationContainer&lt;/code&gt;&lt;/a&gt;s. You mostly use
&lt;code&gt;FragmentContainer&lt;/code&gt;s, so I&#39;ll focus on that here.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;FragmentContainer&lt;/code&gt; is based on a &lt;a href=&quot;https://graphql.org/learn/queries/#fragments&quot;&gt;GraphQL fragment&lt;/a&gt;. If you&#39;ve never used a fragment, they are an
abstraction that lets you declare shared field-selections on a specific GraphQL type to reduce duplication in your
queries. For example:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;&#39;&gt;&lt;span class=&#39;line&#39;&gt;query GetPopularArtistAndFeaturedArtist {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  featuredArtist {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    id
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    name
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    bio
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  }
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  popularArtist {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    id
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    name
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    bio
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  }
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;To move this query to use fragments:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;&#39;&gt;&lt;span class=&#39;line&#39;&gt;query GetPopularArtistAndFeaturedArtist {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  featuredArtist {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    ...ArtistMetadata
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  }
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  popularArtist {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    ...ArtistMetadata
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  }
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;}
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;fragment ArtistMetadata on Artist {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  id
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  name
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  bio
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;It&#39;s a tiny bit longer, but you have a guarantee that the data is consistent across both artists. Now that you have
a rough idea of what a GraphQL fragment is, let&#39;s look at what a &lt;code&gt;FragmentContainer&lt;/code&gt; looks like. Here&#39;s a
simplified &lt;a href=&quot;https://github.com/artsy/emission/blob/892af2621eef455388e074701cca747330de3b3f/src/lib/Scenes/Settings/MyProfile.tsx#L95&quot;&gt;profile page&lt;/a&gt; from the Artsy iOS app:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;31&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;32&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;33&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;34&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;35&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;36&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;37&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;38&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;39&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;40&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;41&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ts&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;react&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createFragmentContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graphql&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;react-relay&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyProfile_me&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;__generated__/MyProfile_me.graphql&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Props&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ViewProperties&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;MyProfile_me&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyProfile&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;render() {&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProfilePhoto&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Subheading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/Subheading&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/Header&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ButtonSection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProfileButton&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Selling&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Sell works from your collection&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;onPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startSubmission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProfileButton&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Account Details&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Email, password reset, profile&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;onPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;goToUserSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/ButtonSection&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/View&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createFragmentContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyProfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;graphql&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;fragment&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyProfile_me&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Me&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;initials&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;There are three moving parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The TypeScript interface &lt;code&gt;MyProfile_me&lt;/code&gt;, generated by the compiler, which ensures we can only use fields that
were selected in the fragment&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;MyProfile&lt;/code&gt; component, which is a vanilla React component&lt;/li&gt;
&lt;li&gt;The exported &lt;code&gt;createFragmentContainer&lt;/code&gt; which returns a higher-order component that wraps &lt;code&gt;MyProfile&lt;/code&gt; and ties it
to a fragment on a &lt;code&gt;Me&lt;/code&gt; type in GraphQL&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Isolation&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Isolation&lt;/h2&gt;

&lt;p&gt;The React component &lt;code&gt;MyProfile&lt;/code&gt; will be passed in props that directly tie to the fragment that was requested. In
Relay terms, this is called &lt;a href=&quot;https://facebook.github.io/relay/docs/en/thinking-in-relay.html#data-masking&quot;&gt;data masking&lt;/a&gt; and it is one of the first hurdles for someone new to Relay to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Grok&quot;&gt;grok&lt;/a&gt;. In REST clients, and GraphQL API clients like Apollo Client, you make a request and that request is
passed through the React tree. E.g.&lt;/p&gt;

&lt;p&gt;&lt;/article&gt;
&lt;a href=&#39;/images/omakase-relay/tree.png&#39; style=&quot;&quot;&gt;
  &lt;img src=&quot;/images/omakase-relay/tree.png&quot; alt=&quot;REST inspired props&quot; style=&quot;width:100%;&quot;&gt;
&lt;/a&gt;
&lt;article class=&quot;post&quot;&gt;&lt;/p&gt;

&lt;p&gt;This means most components know more about the request than it probably needs, as it may be needed to pass on to
the component&#39;s children. This can lead to over-fetching, or even worse, not knowing if you can delete or refactor
a component.&lt;/p&gt;

&lt;p&gt;Data masking solves this by hiding data that the component didn&#39;t request. I&#39;ve still yet to find the right visual
abstraction, but I feel this just about pays for itself.&lt;/p&gt;

&lt;p&gt;&lt;/article&gt;
&lt;a href=&#39;/images/omakase-relay/isolation.png&#39; style=&quot;&quot;&gt;
  &lt;img src=&quot;/images/omakase-relay/isolation.png&quot; alt=&quot;Relay isolation tree&quot; style=&quot;width:100%;&quot;&gt;
&lt;/a&gt;
&lt;article class=&quot;post&quot;&gt;&lt;/p&gt;

&lt;p&gt;You let Relay be responsible for consolidating all your fragments into a query via the &lt;code&gt;QueryRenderer&lt;/code&gt;, causing the
network request, and your response data to be passed your through your component hierarchy. This means Relay
powered components can be safely changed and drastically reduces the chance for unintended consequences elsewhere.&lt;/p&gt;

&lt;p&gt;This isolation gives Artsy engineers the safety to work on projects with tens of contributors which regularly
change over time. Providing a guarantee that you can safely work in isolated parts of the codebase without accruing
technical debt.&lt;/p&gt;

&lt;p&gt;Relay&#39;s container components mean that the components we create are nearly all focused only on the data-driven
aspects of rendering a subset of that GraphQL response into views. It&#39;s very powerful.&lt;/p&gt;

&lt;a name=&quot;Co-location&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Co-location&lt;/h2&gt;

&lt;p&gt;Relay helped us move to one file representing everything a component needed. Effectively a single file now handles
the styles, the actual view content hierarchy, and the exact parts of the API it needs to render itself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/omakase-relay/co-location.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;In roughly that proportion too, though our most modern code uses the Artsy design system &lt;a href=&quot;https://github.com/artsy/palette&quot;&gt;Palette&lt;/a&gt; which
drastically reduces the need for style in our components.&lt;/p&gt;

&lt;p&gt;Co-location&#39;s biggest selling point is reducing &lt;a href=&quot;https://en.wikipedia.org/wiki/Cognitive_load&quot;&gt;cognitive load&lt;/a&gt;,
having everything you need in one place makes it easier to understand how a component works. This makes code review
simpler, and lowers the barrier to understanding the entire systems at scale.&lt;/p&gt;

&lt;a name=&quot;Community&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Community&lt;/h2&gt;

&lt;p&gt;When we adopted Relay, there was no competition - we&#39;d have just used the &lt;code&gt;fetch&lt;/code&gt; API. Over time, &lt;a href=&quot;https://www.apollographql.com&quot;&gt;the Apollo
team&lt;/a&gt; came up and really put a considerable amount of effort into lowering the barriers to entry, and
making it feasible to build complex apps easily.&lt;/p&gt;

&lt;p&gt;As we hired a set of new engineers, the &quot;Apollo vs Relay&quot; debate came up. Interested in whether we would still
start with Relay today, we ran an audit last year of what it would take to re-create a lot of the infrastructure we
love in Relay atop of the (much more popular) Apollo GraphQL eco-system and saw it was reasonably feasible but
would require a considerable amount of work across many different plugins and tools. With Relay that&#39;s all packaged
into one tool, works consistently and has been proven with Facebook having tens of thousands of Relay components in
production.&lt;/p&gt;

&lt;p&gt;It&#39;s worth highlighting the core difference in community engagement for Apollo vs Relay. Engineers working on
Apollo have great incentives to do user support, and improve the tools for the community - that&#39;s their businesses
value. Relay on the other hand is used in many places at Facebook, and the engineers on the team support internal
issues first. IMO, this is reasonable: Relay is an opinionated batteries-included framework for building user
interfaces, and ensuring it works with the baffling amount of JavaScript at Facebook is more or less all the team
has time for.&lt;/p&gt;

&lt;p&gt;That leaves space for the OSS community to own their own problems. Notably there&#39;s been quite a lot of work going
on in the community-managed &lt;a href=&quot;https://github.com/relay-tools&quot;&gt;relay-tools&lt;/a&gt; GitHub organization.&lt;/p&gt;

&lt;a name=&quot;Scale.Safety&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Scale Safety&lt;/h2&gt;

&lt;p&gt;Relay puts a lot of emphasis on ahead-of-time safety. The Relay compiler validates your queries against your
GraphQL schema, it emits Flow types for your fragment’s field selections–which we’ve extended to emit TypeScript
types instead, and there are strict naming systems enforced by the compiler. All of these help guide engineers to
build scalable codebases.&lt;/p&gt;

&lt;p&gt;How this works in practice is that whenever you need to change the data a component requires, you edit the
fragment, the Relay compiler verifies your query, if successful then your TypeScript types are updated and you can
use the new property in your React component above. See below for a &lt;a href=&quot;/images/omakase-relay/relay-process-720.mov&quot;&gt;quick video&lt;/a&gt; showing the Relay compiler
in action:&lt;/p&gt;

&lt;p&gt;&lt;/article&gt;&lt;/p&gt;

&lt;div&gt;
&lt;video controls style=&quot;margin: auto 20px; width:100%;&quot;&gt;
  &lt;source src=&quot;/images/omakase-relay/relay-process-720.mov&quot; type=&quot;video/mp4&quot;&gt;
  Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;


&lt;p&gt;&lt;article class=&quot;post&quot;&gt;&lt;/p&gt;

&lt;p&gt;Moving all of these checks to be during dev-time means we can feel more confident in our deploys. This is
especially an issue in an iOS native codebase, when any deploy requires a review from Apple and roll-backs are
impossible.&lt;/p&gt;

&lt;a name=&quot;Cultural.Fit&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Cultural Fit&lt;/h2&gt;

&lt;p&gt;Relay fit well into our team because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We had engineers who were interested in contributing back and extending Relay to work for our cases&lt;/li&gt;
&lt;li&gt;We had engineers that were used to the benefits of ahead-of-time error validation tools that compilers offer&lt;/li&gt;
&lt;li&gt;We saw a lot of value in a tightly coupling our view structure to our user interface&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Relay is not without its shortcomings to users outside of Facebook, but Relay has definitely paid for its initial
and occasional complexity for the tightness of our codebases many years down the line.&lt;/p&gt;

&lt;!-- prettier-ignore-start --&gt;


&lt;!-- prettier-ignore-end --&gt;



</description>
        <pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/04/10/omakase-relay/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/04/10/omakase-relay/</guid>
        
        
        <category>community</category>
        
        <category>omakase</category>
        
        <category>relay</category>
        
      </item>
    
      <item>
        <title>What is TypeScript?</title>
        <description>&lt;p&gt;TypeScript is a language from Microsoft which builds on JavaScript. This post is a non-technical overview of what
JavaScript is, how TypeScript extends JavaScript and why we choose to adopt TypeScript at Artsy.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;What.is.JavaScript.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What is JavaScript?&lt;/h2&gt;

&lt;p&gt;First up, you can&#39;t describe TypeScript without talking about JavaScript. To create a website (and a bunch of other
types of things) you work in three languages: HTML, CSS and JavaScript (JS). Broadly speaking: HTML defines the
content that will appear on the page, CSS defines the visual style of the page, and JS defines the interactive
behaviours of the page.&lt;/p&gt;

&lt;p&gt;We describe having these sets of skills as being a &quot;front-end&quot; developer. You have to understand those three
languages to present anything inside a web browser like Safari, Firefox or Chrome. So, given how popular the web
is, there is a massive demand for people who are good at using these three languages.&lt;/p&gt;

&lt;p&gt;There is also the set of skills for the &quot;back-end&quot; developers, which are to create computer services that
communicate either to a web browser (by passing it HTML/CSS/JS) or to another service (by sending a raw data.) You
don&#39;t need to use HTML, CSS or JS to write this type of code, but it&#39;s usually an end-product of your work. We
mostly build our back-ends in Ruby or JavaScript at Artsy.&lt;/p&gt;

&lt;a name=&quot;What.do.Programming.Languages.do.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;What do Programming Languages do?&lt;/h3&gt;

&lt;p&gt;Programming languages are an interesting problem to solve. People read code many, many multiples of times more than
they write it - so developers create languages which are good at solving particular problems with a small amount of
code. Here&#39;s an example using JavaScript:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;The first line makes a variable (a kind of box you can keep things in) and then the second line outputs text to the
console (think DOS, or the terminal) &lt;code&gt;&quot;Hello, Danger&quot;&lt;/code&gt;. JavaScript is designed to work as a scripting language,
which means the code starts at the top of the file and then goes through line by line. To provide some contrast,
here is the &lt;a href=&quot;https://repl.it/repls/VioletredGlisteningInfo&quot;&gt;same behavior&lt;/a&gt; in Java, which is built with different
language constraints:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;java&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;blockquote&gt;&lt;p&gt;Note: if you find the naming of Java and JavaScript confusing, it is (they are two completely separate
programming languages, no link at all.) JavaScript was &lt;a href=&quot;https://medium.com/@benastontweet/lesson-1a-the-history-of-javascript-8c1ce3bffb17&quot;&gt;named that way&lt;/a&gt; because Java was looking to be
really the next hot language (it did turn out that way for a decade or two, but now JavaScript is usually the
first language people have heard of.)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Aside from having a lot more lines, the Java version comes with a lot of words that aren&#39;t necessarily about
telling the computer exactly what to do, e.g. &lt;code&gt;class Main {&lt;/code&gt;, &lt;code&gt;public static void main(String[] args) {&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt; and
&lt;code&gt;}&lt;/code&gt; again. It also has semi-colons at the end of some lines. Java is aimed at building different things from
JavaScript, and these extra bits of code make sense within the constraints of building a Java app.&lt;/p&gt;

&lt;p&gt;To get to my main point though, there is one standout line I&#39;d like us to compare:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;java&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// JavaScript&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Java&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Both of these lines declare variables called &lt;code&gt;name&lt;/code&gt; which contain the value &lt;code&gt;&quot;Danger&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In JavaScript you use the abbreviation &lt;code&gt;var&lt;/code&gt; to declare a variable. Meanwhile, in Java you need to say &lt;em&gt;what kind
of data&lt;/em&gt; the variable contains. In this case the variable contains a &lt;code&gt;String&lt;/code&gt;. (A string is a programming term for
a collection of characters. They &lt;code&gt;&quot;look like this&quot;&lt;/code&gt;. This &lt;a href=&quot;https://www.youtube.com/watch?v=czTWbdwbt7E&quot;&gt;5m video&lt;/a&gt;
is a good primer if you want to learn more.)&lt;/p&gt;

&lt;p&gt;Both of these variables contain a string, but the difference is that in Java the variable can &lt;em&gt;only&lt;/em&gt; ever contain a
&lt;em&gt;string&lt;/em&gt;, because that&#39;s what we said when we created the variable. In JS the variable can change to be &lt;em&gt;anything&lt;/em&gt;,
like a number, or a list of dates.&lt;/p&gt;

&lt;p&gt;To illustrate:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Before in JS&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Also OK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;2018-02-03&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2019-01-12&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Before in Java&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Not OK, the code wouldn&amp;#39;t be accepted by Java&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;2018-02-03&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2019-01-12&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;These trade-offs make sense in the context for which these languages were built back in 1995. JavaScript was
originally designed to be a small programming language which handled simple interactions on websites. Java on the
other hand was built specifically to make big apps which could run on any computer. Their needs had different
scales, so the language required programmers write different types of code.&lt;/p&gt;

&lt;p&gt;Java required programmers to be more explicit with the values of their variables because the programs they expected
people to build were more complex. While JavaScript opted for ease of reading, and aimed to do less.&lt;/p&gt;

&lt;a name=&quot;What.is.TypeScript.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;What is TypeScript?&lt;/h3&gt;

&lt;p&gt;TypeScript is a programming language - it contains all of JavaScript, and then a bit more. Using our example above,
let&#39;s compare the scripts for &quot;Hello, Danger&quot; in JavaScript vs TypeScript:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// JavaScript&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// TypeScript&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Yep, you&amp;#39;re not missing something, there&amp;#39;s no difference&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Due to TypeScript&#39;s aim to only &lt;em&gt;extend&lt;/em&gt; JavaScript, your normal JavaScript code should work fine with TypeScript.
The things TypeScript adds to JavaScript are intended to help you be more explicit about what kinds of data are
used in your code, a bit like Java.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;diff&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gd&quot;&gt;- var name = &amp;quot;Danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ var name: string = &amp;quot;Danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;console.log(&amp;quot;Hello, &amp;quot; + danger)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This extra &lt;code&gt;: string&lt;/code&gt; allow the reader to be certain that &lt;code&gt;name&lt;/code&gt; will only be a string. Annotating your variables
also gives TypeScript the chance to verify this for you. This is &lt;em&gt;very&lt;/em&gt; useful because keeping track of changes
like the type of value in a variable seems easy when it&#39;s one or two, but once it starts hitting the hundreds,
that&#39;s a lot to keep track of. Types help programmers be more confident about their code because types catch
mistakes.&lt;/p&gt;

&lt;p&gt;Simply speaking, we call these annotations &quot;Types&quot;. Hence the name &lt;i&gt;Type&lt;/i&gt;Script. The tag-line for TypeScript
is &quot;JavaScript which scales&quot; which is a statement that these extra type annotations allows you to work on bigger
projects. This is because you can verify up-front how correct your code is. This means you have less need to
understand how every change affects the rest of the program.&lt;/p&gt;

&lt;p&gt;In the 90s, and maybe until a 5-10 years ago the trade-off for not having types in your JavaScript application was
fine because the size and complexities of the programs being built were constrained to just the front-end of
websites. Today though, JavaScript is being used everywhere:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apps like Slack, or Spotify for your computer are built in mostly JavaScript&lt;/li&gt;
&lt;li&gt;Some iOS apps, including Artsy&#39;s are mostly JavaScript&lt;/li&gt;
&lt;li&gt;The back-end and front-end of Artsy.net are JavaScript&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These are all considerably more complicated to build and understand, adding types drastically reduces the
complexity of making improvements to those programs.&lt;/p&gt;

&lt;a name=&quot;Why.does.Artsy.use.TypeScript.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Why does Artsy use TypeScript?&lt;/h3&gt;

&lt;p&gt;Artsy definitely isn&#39;t the size of Microsoft! Artsy is about 30 engineers, and Microsoft are about 60,000. However,
some of our problems are the same. Developers at Artsy build apps which are made up of thousands of files. A change
to one individual file can affect the behaviour of any number of other files, like throwing a pebble into a pond
and causing ripples to spread out to the bank.&lt;/p&gt;

&lt;p&gt;Typically, the need to ensure there are no bugs is less of a problem for people building websites. Websites are
easy to make changes to, because if you change the site - everyone gets the update instantly. We also build our iOS
app with JavaScript, but a change to our app requires Apple to review the changes and for users to download the new
version from the App Store.&lt;/p&gt;

&lt;p&gt;This means that the iOS team needs to have more checks that everything is OK before shipping the app to the world.
Using TypeScript gives our team the ability to feel good that the changes we have made are only the changes we
want.&lt;/p&gt;

&lt;p&gt;TypeScript isn&#39;t the only programming language to tackle the problem of making JavaScript code safer, but it&#39;s the
one with the biggest community, allows people to re-use their JavaScript knowledge, can be added in small steps,
and has really good tools to help developers work faster.&lt;/p&gt;

&lt;p&gt;These qualities made it worth adding an extra tool to our developers&#39; toolbelt, and we&#39;re not the only ones because
TypeScript is growing to be &lt;a href=&quot;https://www.wired.com/story/typescript-microsoft-javascript-alternative-most-popular&quot;&gt;one of the most popular programming languages in the world&lt;/a&gt; with almost 6
million downloads a week.&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/04/05/omakase-typescript/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/04/05/omakase-typescript/</guid>
        
        
        <category>community</category>
        
        <category>javascript</category>
        
        <category>roads and bridges</category>
        
        <category>typescript</category>
        
      </item>
    
  </channel>
</rss>
