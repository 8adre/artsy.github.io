<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artsy Engineering</title>
    <description></description>
    <link>http://artsy.github.io/</link>
    <atom:link href="http://artsy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 15 Mar 2016 15:44:17 +0000</pubDate>
    <lastBuildDate>Tue, 15 Mar 2016 15:44:17 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Public Speaking - Part 2: Where To Start?</title>
        <description>&lt;p&gt;So you’ve decided &lt;a href=&quot;http://artsy.github.io/blog/2016/03/09/public-speaking-part1-is-it-for-me/&quot;&gt;you’d like to give speaking a go&lt;/a&gt;, or perhaps you were always interested. By now you’re probably wondering where to start.&lt;/p&gt;

&lt;p&gt;There are various options depending on what you’re looking for. Would you prefer a smaller, intimate audience or would you like to reach far and wide? Is the topic of your choice suited for a quick talk or would you rather discuss it at length? Let’s have a look.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;h3&gt;In-house / Workplace Knowledge Share&lt;/h3&gt;

&lt;p&gt;Lots of workplaces dedicate some time to knowledge sharing nowadays (and if yours doesn’t, see if you can start one!). They can be technical, for instance at Artsy we host a technical Lunch and Learn weekly. They could also be on any topic, like &lt;a href=&quot;https://www.artsy.net/article/natalia-maldonado-introduction-to-office-meditation-5-steps-to-peace-of-mind-at-work&quot;&gt;meditation&lt;/a&gt;. Anywhere between 5 and 15 minutes in length is common, and they are a perfect opportunity to talk about things you know well. This could be centred around your day to day work, spreading the knowledge to decrease &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_factor&quot;&gt;the bus factor&lt;/a&gt;, or something from your personal life. I’ve given a talk on &lt;a href=&quot;https://speakerdeck.com/mennenia/colour-theory&quot;&gt;colour theory in painting&lt;/a&gt; once.&lt;/p&gt;

&lt;p&gt;If you have a workplace you feel comfortable at, this is definitely a good place to start.&lt;/p&gt;

&lt;p&gt;One of the key elements in public speaking that is often forgotten is the fact that the audience wants you to succeed. They’re not there to poke holes or boo you off stage. They are curious to see what you have to say and learn from you. Give them that opportunity.&lt;/p&gt;

&lt;p&gt;Even if you’re goal is towards speaking at bigger events, any chance at practicing and putting together a well flowing talk is good and shouldn’t be ignored.&lt;/p&gt;

&lt;h3&gt;Local meet-ups&lt;/h3&gt;

&lt;p&gt;If you’re in a city that has a thriving meet-up scene, you may want to put your name forward to speak on a certain topic. A UK meet-up, &lt;a href=&quot;http://www.meetup.com/NSLondon/&quot;&gt;NSLondon&lt;/a&gt;, is a great example of this. Many different members of the community have spoken, and it’s created a lovely atmosphere where it feels like you’re exchanging interesting tidbits of information continuously. Also for newcomers it’s created a welcoming atmosphere, as the people speaking are often people they know or “just like them”.&lt;/p&gt;

&lt;p&gt;If you have a meet-up with a similar positive vibe, there’s no reason not to have a chat with the organisers and see what the next steps would be. It might even be well worth practicing a talk here, for when you’ve got a bigger event coming up and you would like feedback. Bare in mind, the audience wants you to succeed!&lt;/p&gt;

&lt;p&gt;Sidenote — if your city does not (yet) have a great meet-up, it’s well worth starting one.&lt;/p&gt;

&lt;h3&gt;Conferences&lt;/h3&gt;

&lt;p&gt;Often considered the most intimidating of all. People have purchased tickets and possibly travelled from far. The audience is usually in the hundreds, occasionally even more than a thousand. Even the most experienced speakers can get a bit nervous for this.&lt;/p&gt;

&lt;p&gt;Funnily enough, my first ever talk, since starting out as a developer, was at a &lt;a href=&quot;http://www.iosdevuk.com/&quot;&gt;conference&lt;/a&gt;. It happened to have a very friendly atmosphere and really wasn’t that scary. I can’t stress enough that, yes, the audience wants you to succeed. I remember talking through my introduction and seeing all the curious, attentive faces. They were there because they were interested. They cared for what I had to say.&lt;/p&gt;

&lt;p&gt;I will say that this doesn’t necessarily mean you should go talk about anything your heart desires. Ultimately the attendees are there to learn, so it’s only fair that as speakers you’d tailor your presentation towards your audience. But more on that in Part 3.&lt;/p&gt;

&lt;p&gt;To be considered, often conference organisers ask people to submit a CfP (Call for Papers / Call for Proposals). This is your chance to submit details on what you’d like to present on, although they may &lt;a href=&quot;http://www.osfeels.com/talk-ideas/&quot;&gt;give you suggestions&lt;/a&gt;. You usually want to include a preliminary talk title, an abstract, and a bit of background on yourself. If you’ve done any talks before and they happen to have been recorded, it’s worth including the video or otherwise previous slidedecks.&lt;/p&gt;

&lt;p&gt;As for how CfPs then get chosen depends on the conference. Most of the time the organisational committee selects talks from the proposal list. Some conferences have &lt;a href=&quot;http://www.altconf.com&quot;&gt;an independent panel&lt;/a&gt; review anonymised proposals or have a system in place where &lt;a href=&quot;http://cfp.uikonf.com/about&quot;&gt;the community votes&lt;/a&gt;. Once it’s been decided, they will get back in touch with you.&lt;/p&gt;

&lt;p&gt;Usually conferences are swarmed with CfPs so please don’t be discouraged if it takes a few tries to get picked. It’s understandable to feel rejected and give up, but bare in mind that a friend of mine felt this way yet kept applying. He got his break at NSSpain 2014, and now is incredibly active in the &lt;a href=&quot;http://www.meetup.com/swift-language/&quot;&gt;San Francisco Swift&lt;/a&gt; meet-up scene. All of this got the ball rolling and now he&#39;s given talks all around the world. &lt;a href=&quot;https://twitter.com/simjp&quot;&gt;You might even have heard of him&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Lightning talks&lt;/h3&gt;

&lt;p&gt;If a CfP is a bit too much to prepare at the moment (we’re all busy) or you didn’t get in, another option is to give a lightning talk if the conference of your choice has slots. When done well, they are great.&lt;/p&gt;

&lt;p&gt;A lightning talk is usually capped at 5 minutes, and gives you the time and space to cover one thing well. The best ones I’ve heard, have had one main message to convey and did so excellently.&lt;/p&gt;

&lt;p&gt;They require a bit of planning as you &lt;a href=&quot;http://quoteinvestigator.com/2012/04/28/shorter-letter/&quot;&gt;want to be concise&lt;/a&gt;, but will be done before you know it and gives the audience a great point of reference to engage with you. Not to mention that sometimes you might get asked to do a full talk based off these.&lt;/p&gt;

&lt;h3&gt;Preparing content&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://artsy.github.io/blog/2016/03/09/public-speaking-part1-is-it-for-me/&quot;&gt;Choosing to publicly speak&lt;/a&gt; and where is only half the battle. Deciding the content, formulating an abstract, talk title, and slides are not trivial. But fear not, Part 3 in this series will have you covered. Stay tuned!&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Mar 2016 11:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/03/14/public-speaking-part2-where-to-start/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/03/14/public-speaking-part2-where-to-start/</guid>
        
        
        <category>community</category>
        
        <category>learning</category>
        
        <category>oss</category>
        
        <category>speaking</category>
        
        <category>teaching</category>
        
      </item>
    
      <item>
        <title>Public Speaking - Part 1: Is It For Me?</title>
        <description>&lt;p&gt;At Artsy, sharing knowledge is heavily encouraged and so we write our code in the open, document using blog posts, and speak about our experiences. Many have &lt;a href=&quot;https://twitter.com/qnoid/status/702955785064677376&quot;&gt;bumped into us&lt;/a&gt; at various places around the world. And so I often get the question: “How did you get started? I’m interested in speaking too”.&lt;/p&gt;

&lt;p&gt;In the name of sharing experiences with others, I can’t encourage this enough. Unfortunately though, public speaking is still considered &lt;a href=&quot;https://www.washingtonpost.com/news/wonk/wp/2014/10/30/clowns-are-twice-as-scary-to-democrats-as-they-are-to-republicans/&quot;&gt;man’s biggest fear&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’d like to share with you the benefits of public speaking, tips on how to get started, and how to give great presentations.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;h2&gt;Why do it?&lt;/h2&gt;

&lt;h3&gt;Communication&lt;/h3&gt;

&lt;p&gt;Without necessarily realising, you’re publicly speaking all the time. At the heart of it, it’s the act of communicating and expressing your ideas and viewpoints for others to understand.&lt;/p&gt;

&lt;p&gt;It could be as simple as ordering your morning coffee or as important as trying to convince your team that they should use a new technology. Regardless of the context, it involves restructuring your thoughts into words and metaphors that you think others can relate to in order for them to understand your concepts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Public speaking is a skill that is always good to improve on&lt;/strong&gt;. Misunderstandings happen all the time, and at the heart of that is often poor communication.&lt;/p&gt;

&lt;p&gt;I know people have refrained from speaking up in meetings at work, because they struggle with speaking in front of others. There’s no need for everyone to be a keynote speaker at a conference, but if it’s hindering you in your career, it may be worth practicing. Everyone should feel empowered to call a meeting, participate in discussions, or ask questions at an all hands.&lt;/p&gt;

&lt;h3&gt;Learning&lt;/h3&gt;

&lt;p&gt;Another reason giving talks is 👍🏽 is that it will allow you to learn more fully. One of the best ways to learn is by &lt;a href=&quot;http://ideas.time.com/2011/11/30/the-protege-effect/&quot;&gt;teaching others&lt;/a&gt;. You grasp ideas better yourself and in order to communicate them properly, you get into the habit of restructuring your ideas and concepts.&lt;/p&gt;

&lt;p&gt;Unfortunately, people often also consider this the blocker to public speaking. Not only are you afraid you’ll accidentally make a fool of yourself (“what if I trip?”) but also that it will be apparent that you don’t know something well enough. The only way to get over this is by doing it.&lt;/p&gt;

&lt;p&gt;Chances are that you are actually very knowledgeable in certain fields, you just perceive that as normal. “Yeah, but that’s not interesting… everyone knows about &lt;em&gt;that&lt;/em&gt;”. And I can bet that, well, probably not everyone knows about that. Definitely not as much as you might actually do.&lt;/p&gt;

&lt;p&gt;We all have our strengths. This is the time to play on them. We can’t be experts in both Core Image, Core Animation, and the Objective C runtime, all the while knowing everything about Swift Protocols. Pick your slice from a much wider scope. It doesn’t need to be a full framework, even just a specific use case of it, like &lt;a href=&quot;https://realm.io/news/gwendolyn-weston-ios-background-networking/&quot;&gt;background transfer services&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Furthermore, see it as a learning opportunity. Speak about a topic that truly interests you and take this time to uncover things you’ve always wanted to know. It does not require you to be an expert up front — sharing knowledge gives you the chance to become one.&lt;/p&gt;

&lt;p&gt;For example, I wanted to give a talk on the beauty of design and why beautiful things “just work”. I took this chance to read papers and books on the field of positive psychology and design, learning all kinds of fun new facts. Others have shared with me also that it wasn’t until they decided to write or speak about certain API that they fully got to understand all the ins and outs.&lt;/p&gt;

&lt;h2&gt;Ok you got me interested… now what?&lt;/h2&gt;

&lt;p&gt;That&#39;s great!&lt;/p&gt;

&lt;p&gt;Next you&#39;d probably want to figure out where you&#39;d like to speak and how to prepare a good talk. This will be covered in the next two posts, so stay tuned.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Mar 2016 11:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/03/09/public-speaking-part1-is-it-for-me/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/03/09/public-speaking-part1-is-it-for-me/</guid>
        
        
        <category>community</category>
        
        <category>learning</category>
        
        <category>oss</category>
        
        <category>speaking</category>
        
        <category>teaching</category>
        
      </item>
    
      <item>
        <title>Code Injection for Xcode</title>
        <description>&lt;p&gt;I have been writing code for roughly a decade. A large chunk of that time has been sitting waiting for my project to compile. It&#39;s a nice excuse to &lt;a href=&quot;https://xkcd.com/303/&quot;&gt;practice sword fighting&lt;/a&gt; in the office, but really, deep down. It&#39;s frustrating. It&#39;s so easy to become &lt;a href=&quot;https://xkcd.com/356/&quot;&gt;nerd-sniped&lt;/a&gt; when you wait for a long time.&lt;/p&gt;

&lt;p&gt;As we integrate Swift into our projects, I&#39;ve been seeing our compile times increase. So, I took some time to look at ways to improve this. The best option, so far, has been dynamic code injection via &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode&quot;&gt;Injection Plugin for Xcode&lt;/a&gt;. In a gist: This means that we don&#39;t recompile and re-launch, instead we inject new bits of code into a running application. This reduced the compile cycle on Eigen from 7 seconds to 1 second.&lt;/p&gt;

&lt;p&gt;I took some time over the weekend to try and put together a video showing how I used code injection on a trivial app to create a view controller in code. It covers the technique I&#39;ve &lt;a href=&quot;https://github.com/artsy/eigen/pull/1236&quot;&gt;started using in Eigen&lt;/a&gt; and talks a little bit about how the pieces come together.&lt;/p&gt;

&lt;p&gt;Jump &lt;a href=&quot;https://www.youtube.com/watch?v=uftvtmyZ8TM&quot;&gt;to YouTube&lt;/a&gt; for the video, or click more for a smaller inline preview.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;iframe width=&#39;100%&#39; height=&#39;600&#39; src=&#39;https://www.youtube.com/embed/uftvtmyZ8TM &#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Mar 2016 12:09:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/03/05/iOS-Code-Injection/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/03/05/iOS-Code-Injection/</guid>
        
        
        <category>mobile</category>
        
        <category>swift</category>
        
        <category>video</category>
        
        <category>xcode</category>
        
      </item>
    
      <item>
        <title>Being a Better Programmer When You&#39;re Actually Lazy.</title>
        <description>&lt;p&gt;I juggle a bunch of projects, both in Artsy and in the Open Source community. If you don&#39;t work with me directly, you&#39;d be mistaken for believing that I was an organized person. I&#39;m pretty far from that, and &lt;a href=&quot;https://github.com/artsy/mobile/issues/68&quot;&gt;don&#39;t really&lt;/a&gt; plan on changing that.&lt;/p&gt;

&lt;p&gt;However, I work with other people and very strongly believe that programming is mostly a social problem once you&#39;re good enough at writing code. It&#39;d be hypocritical of me to not improve the people process side, so I try to automate processes that makes me a better team-mate.&lt;/p&gt;

&lt;p&gt;I&#39;m going to cover four things I&#39;ve worked on lately to improve this: &lt;a href=&quot;https://github.com/danger/danger/&quot;&gt;Danger&lt;/a&gt;, &lt;a href=&quot;https://github.com/orta/github-clippers&quot;&gt;GitHub-Clippers&lt;/a&gt; and improving how I write commits and prefixing my name on branches.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;h3&gt;Danger&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/danger/danger/&quot;&gt;Danger&lt;/a&gt; is a tool I co-created with a friend (&lt;a href=&quot;https://github.com/krausefx/&quot;&gt;Felix Krause&lt;/a&gt;), and it&#39;s namesake, &lt;a href=&quot;https://github.com/dangermcshane&quot;&gt;Gem &quot;Danger&quot; McShane&lt;/a&gt;. It came out of frustration that we couldn&#39;t easily hold ourselves accountable to better team processes. Requiring a code-reviewer to  also remember details like &quot;Add a CHANGELOG Entry&quot; isn&#39;t much to ask, but it is &quot;Yet Another Thing To Remember&quot; for both the submitter and reviewer.&lt;/p&gt;

&lt;p&gt;It&#39;s turning into a really important part of our code-review, and the ideas it generates once we had it in place make it fun to add new rules. It means we can fail fast, and not have to think about process so much. Danger will tell us if we&#39;ve missed something.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-03-02-Lazily-Automation/danger.png&quot; alt=&quot;Danger Example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I expect to write a more serious post on &lt;a href=&quot;https://github.com/danger/danger/&quot;&gt;Danger&lt;/a&gt; once it&#39;s more fleshed out. For now though, the README covers what it does well.&lt;/p&gt;

&lt;h3&gt;Clippers&lt;/h3&gt;

&lt;p&gt;In every big team I operate in, other people care about keeping the repo clean of merged branches. I totally respect their opinion, but it&#39;s so low on things I care about that I just don&#39;t register the &quot;Delete Branch&quot; button on a GitHub pull request. I&#39;d rather be finding a &lt;a href=&quot;https://github.com/orta/gifs&quot;&gt;good response GIF&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So I created &lt;a href=&quot;https://github.com/orta/github-clippers&quot;&gt;a Safari Extension&lt;/a&gt; that handles automatically deleting branches on specific repos for me. It&#39;s not a biggie, it&#39;s not fancy, it&#39;s under a &lt;a href=&quot;https://github.com/orta/github-clippers/blob/master/GitHub-Clippers.safariextension/github_clippers.js&quot;&gt;hundred lines of code&lt;/a&gt; - but it automates something that annoyed others about my behavior. That counts for something.&lt;/p&gt;

&lt;h3&gt;Commit Automation&lt;/h3&gt;

&lt;p&gt;I write &lt;em&gt;reasonable&lt;/em&gt; commit messages, they&#39;re not &lt;a href=&quot;http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&quot;&gt;amazing&lt;/a&gt;, they&#39;re &lt;a href=&quot;http://www.whatthecommit.com&quot;&gt;not terrible&lt;/a&gt;. They&#39;re just, &lt;a href=&quot;https://github.com/artsy/energy/commits/master?author=orta&quot;&gt;alright&lt;/a&gt;. I wanted to start trying to hold everyone accountable for doing better, so I advocated for copying the person with the &lt;a href=&quot;https://github.com/artsy/eigen/commits/master?author=alloy&quot;&gt;best commit style&lt;/a&gt; on our team.&lt;/p&gt;

&lt;p&gt;Their style is to have commits in a format like &lt;code&gt;[Context] Thing I did.&lt;/code&gt; - it is much better that &lt;code&gt;Thing I did.&lt;/code&gt;. So I looked into how I could automate this, because I would very quickly forget to do this. Here&#39;s what I did:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;// Helper &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; to get the branch info
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; git_branch_info&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nv&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;git symbolic-ref HEAD 2&amp;gt; /dev/null&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nv&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;git rev-parse --short HEAD 2&amp;gt; /dev/null&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;${ref#refs/heads/}&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; branch&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  git checkout master&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  git pull upstream master&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  git checkout -b &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  git config branch.&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.description &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; commit&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BRANCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git_branch_info&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git config branch.&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$BRANCH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;.description&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;[$(echo $INFO)] $argv&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;// And &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; I forget to &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;my context
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; context&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BRANCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git_branch_info&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  git config branch.&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$BRANCH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;.description &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;I created two shell functions, one that makes a branch that includes a context type. So for example, say I&#39;m working on artwork notifications, I&#39;d start a new branch with &lt;code&gt;$ branch artwork_notifications Notifications&lt;/code&gt;. This saves the context as &lt;code&gt;Notifications&lt;/code&gt; on the git branch metadata. Then everytime I want to commit my changes, I use &lt;code&gt;$ commit This is the thing I changed.&lt;/code&gt; - and it will be prefixed with &lt;code&gt;[Notifications]&lt;/code&gt;. It makes it easier for someone looking through the history to have an idea about the context, and makes me feel like I&#39;m improving my process without remembering the context.&lt;/p&gt;

&lt;h3&gt;Branch Prefixes&lt;/h3&gt;

&lt;p&gt;We use a Makefile in all our projects to try and help automate per-project simple tasks like running &lt;a href=&quot;https://github.com/artsy/energy/blob/e5db035225490fb53c65c74a6c1bdd660f305ab6/Makefile#L44&quot;&gt;mogenerator&lt;/a&gt;, updating &lt;a href=&quot;https://github.com/artsy/energy/blob/e5db035225490fb53c65c74a6c1bdd660f305ab6/Makefile#L49&quot;&gt;storyboard identifiers&lt;/a&gt; and updating &lt;a href=&quot;https://github.com/artsy/eigen/blob/12fe9de4d927eea27f4942d15e74b89016a6345f/Makefile#L102-L103&quot;&gt;embedded resources&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also applied some standard make commands in our projects so that I can prefix my &lt;a href=&quot;https://github.com/artsy/eigen/blob/10106210196f096a27412a70af61dcae7fda285c/Makefile#L110-L117&quot;&gt;branches with my name&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;LOCAL_BRANCH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;shell git rev-parse --abbrev-ref HEAD&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;BRANCH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;shell &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;github.com &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; git credential fill &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed -E &lt;span class=&quot;s1&quot;&gt;&amp;#39;N; s/.*username=(.+)\n?.*/\1/&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;shell git rev-parse --abbrev-ref HEAD&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;pr:
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(LOCAL_BRANCH)&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;master&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;In master, not PRing&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; git push upstream &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(LOCAL_BRANCH):$(BRANCH)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; open &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://github.com/artsy/eigen/pull/new/artsy:master...$(BRANCH)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;push:
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(LOCAL_BRANCH)&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;master&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;In master, not pushing&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; git push upstream &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;LOCAL_BRANCH&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;:&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;BRANCH&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;fpush:
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(LOCAL_BRANCH)&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;master&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;In master, not pushing&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; git push upstream &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;LOCAL_BRANCH&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;:&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;BRANCH&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; --force&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This works by some funky shell work to pull out your current branch into &lt;code&gt;LOCAL_BRANCH&lt;/code&gt;, then to do the same thing but prefixed with your login name for &lt;code&gt;BRANCH&lt;/code&gt;. Then the make commands handle pushing to the server. This means that everyone in the team can provide have logically named branches without having to have their local repo filled with &lt;code&gt;[my_name]-thing&lt;/code&gt; branches.&lt;/p&gt;

&lt;h2&gt;On-going&lt;/h2&gt;

&lt;p&gt;This is a work in progress, as the mobile team grows, we need to add more process when it&#39;s appropriate. This &lt;em&gt;doesn&#39;t&lt;/em&gt; mean that we have to sacrifice speed, and we can continue thinking about the problem at hand rather than devoting energy to process.&lt;/p&gt;

&lt;p&gt;It&#39;s a time trade-off that has worked out well for me so far, and I&#39;d love to know other people&#39;s hacks for having useful process, but automating it so that it&#39;s not considered overhead.&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Mar 2016 12:09:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/03/02/Lazily-Automation/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/03/02/Lazily-Automation/</guid>
        
        
        <category>automation</category>
        
        <category>culture</category>
        
        <category>teams</category>
        
      </item>
    
      <item>
        <title>Code Review: Energy Sync</title>
        <description>&lt;p&gt;We are slowly trying to do high-level code-review views for all of our iOS apps. So far, we&#39;ve covered &lt;a href=&quot;/blog/2016/01/14/eidolon-code-review/&quot;&gt;Eidolon&lt;/a&gt; and &lt;a href=&quot;/blog/2015/11/05/Emergence-Code-Review/&quot;&gt;Emergence&lt;/a&gt; and now &lt;a href=&quot;/blog/2016/02/11/Code-Review-Energy/&quot;&gt;Energy&lt;/a&gt;. This is the second part of the Energy code review. The &lt;a href=&quot;/blog/2016/02/11/Code-Review-Energy/&quot;&gt;first part&lt;/a&gt; covers the the critical codepaths that go from the App&#39;s launch to sending an email, which is the main use-case for the app. This video covers how Folio does sync between the Artsy API and the app.&lt;/p&gt;

&lt;p&gt;Sync is a complex problem. This video covers our old techniques, how we changed them, the underlying abstractions we use now and how we can test each component individually. It&#39;s an hour long, and it&#39;s a little computer-sciencey. So I think people who have shipped some small apps would get a lot out of it.&lt;/p&gt;

&lt;p&gt;Jump &lt;a href=&quot;https://www.youtube.com/watch?v=05HaKChPe_g&quot;&gt;to YouTube&lt;/a&gt; for the video, or click more for a smaller inline preview.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;iframe width=&#39;100%&#39; height=&#39;600&#39; src=&#39;https://www.youtube.com/embed/05HaKChPe_g &#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Feb 2016 12:09:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/02/12/Code-Review-Energy-Sync/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/02/12/Code-Review-Energy-Sync/</guid>
        
        
        <category>energy</category>
        
        <category>folio</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>oss</category>
        
        <category>review</category>
        
        <category>video</category>
        
      </item>
    
      <item>
        <title>Code Review: Energy overview</title>
        <description>&lt;p&gt;We are slowly trying to do high-level code-review views for all of our iOS apps. So far, we&#39;ve covered &lt;a href=&quot;/blog/2016/01/14/eidolon-code-review/&quot;&gt;Eidolon&lt;/a&gt; and &lt;a href=&quot;/blog/2015/11/05/Emergence-Code-Review/&quot;&gt;Emergence&lt;/a&gt;. Folio is an app that&#39;s shipped to the App Store in early 2012, it&#39;s used by our Partners to showcase their works offline, at fairs and on the go. If you want the full spiel, check out &lt;a href=&quot;http://folio.artsy.net&quot;&gt;this microsite&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This video talks through a lot of the critical codepaths that go from the App&#39;s launch to sending an email, which is the main use-case for the app. We have another video coming up which exclusively covers how Folio does sync between the Artsy API and the app.&lt;/p&gt;

&lt;p&gt;Jump &lt;a href=&quot;https://www.youtube.com/watch?v=Xhd25hFzN4o&quot;&gt;to YouTube&lt;/a&gt; for the video, or click more for a smaller inline preview.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;iframe width=&#39;100%&#39; height=&#39;600&#39; src=&#39;https://www.youtube.com/embed/Xhd25hFzN4o &#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Feb 2016 11:09:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/02/11/Code-Review-Energy/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/02/11/Code-Review-Energy/</guid>
        
        
        <category>energy</category>
        
        <category>folio</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>oss</category>
        
        <category>review</category>
        
        <category>video</category>
        
      </item>
    
      <item>
        <title>Interviewing, applying and getting your first job in iOS</title>
        <description>&lt;p&gt;When I was at the beginning of my career, my first developer job application was to a design agency who were doing Mac development too. It was pretty nerve-wracking to apply for my first programming job, and I came into the interview with no idea what to expect. I had just graduated from university and was at the first few steps of my career, I&#39;d call this being a junior. It was a time period where I would need mentoring, and supervision in order to grow. A good explanation is in &lt;a href=&quot;http://programmers.stackexchange.com/questions/14914/whats-the-difference-between-entry-level-jr-sr-developers&quot;&gt;this StackOverflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that I&#39;m both further on in my career, and involved with so many juniors in NYC, I&#39;m meeting with a lot of people who are in the same position I was then and I get a lot of questions asking what they can do to prepare. This post &lt;em&gt;attempts&lt;/em&gt; at being a comprehensive collection of recommendations. It is subjective, of course, and strongly biased towards my experiences.&lt;/p&gt;

&lt;p&gt;Before I jump through to the article, there&#39;s one thing that should be above the fold. &lt;em&gt;Chill out&lt;/em&gt;. You might not get it right on the first try, I&#39;ve applied for jobs and received a &quot;no thanks.&quot; Yet eventually I became the head of mobile at Artsy. Everyone finds their place in time.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;h3&gt;On Your Readiness&lt;/h3&gt;

&lt;p&gt;No-one starting out is ever ready, and an individual is &lt;a href=&quot;https://ashfurrow.com/blog/you-never-arrive/&quot;&gt;never really &quot;done&quot;&lt;/a&gt;. However, in this &lt;a href=&quot;http://dbgrandi.github.io/minimum_viable_programmer/&quot;&gt;post @dbgrandi&lt;/a&gt; neatly sums up the lower bar to entry.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I had a long list of specific things relating to Xcode and iOS. They were very tedious things like, “you should know how to add a new file to an Xcode project.” I’ve shortened that list to a general description here.&lt;/p&gt;

&lt;p&gt;I expect you to be able to start a new project, write some code to download a bit of JSON via HTTP, and use the parsed JSON to present some data in a UITableView.&lt;/p&gt;

&lt;p&gt;If you can do that, in a well organised manner, and can discuss the choices you made to get your app built you’ll have been able to do almost everything that was on that long and tedious list.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is a great starting point. In an ideal world, an interviewer isn&#39;t going to judge you on not knowing every detail about the whole system. They will have expectations that you&#39;re going to have to learn on the job for a lot of things, and that&#39;s ok.&lt;/p&gt;

&lt;h3&gt;On the lookout&lt;/h3&gt;

&lt;p&gt;There are a bunch of websites for putting up job adverts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/jobs&quot;&gt;StackOverflow jobs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.natashatherobot.com/swift-jobs/&quot;&gt;Natasha The Robot&#39;s Swift Jobs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jobs.coreint.org&quot;&gt;Core Intuition&#39;s Jobs Board&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.apple.com/jobs/us/&quot;&gt;Apple&#39;s Jobs Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/xcodejobs&quot;&gt;@xcodejobs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These kind of things work, I got my first programming job through &lt;a href=&quot;http://www.cocoabuilder.com/archive/cocoa/174142-ann-cocoadev-jobs-board.html&quot;&gt;CocoaDev Jobs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These are great, but in my opinion the best way to find out what companies are hiring is to attend meet-ups in the city. In NYC we have 3-4 big iOS meet-ups a month, and all of them give a chance for people looking for others to work to speak up. You might not live in as big of a city, but I used to travel an hour to Manchester to attend a meet-up, they would have the same thing, I almost became a full-time rubyist because of it. I have quite a few friends in NYC who started their careers by talking to someone at a meet-up.&lt;/p&gt;

&lt;p&gt;Generic job websites can be good, for example Artsy&#39;s job postings are on &lt;a href=&quot;https://angel.co/artsy&quot;&gt;AngelList&lt;/a&gt; and &lt;a href=&quot;https://www.glassdoor.co.uk/Job/Artsy-Jobs-E793485.htm&quot;&gt;Glassdoor&lt;/a&gt; but the vast majority of applications feel like they were sent to a lot of companies. They are given a low priority when compared to direct inquiries because of this. I can&#39;t speak from experience but &lt;a href=&quot;https://www.theladders.com&quot;&gt;Ladders&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com&quot;&gt;LinkedIn&lt;/a&gt;, &lt;a href=&quot;http://hired.com&quot;&gt;Hired&lt;/a&gt; and &lt;a href=&quot;https://weworkremotely.com&quot;&gt;weworkremotely&lt;/a&gt; are probably worth a look too.&lt;/p&gt;

&lt;p&gt;Finally, search the websites of companies you like for careers or jobs pages.&lt;/p&gt;

&lt;p&gt;If you see an advert for a mobile developer, but they don&#39;t mention juniors, you should apply anyway. We&#39;ve never had junior positions on our jobs pages, but have hired some who inquired anyway. Don&#39;t pretend to be more senior than you are though, set the right expectations.&lt;/p&gt;

&lt;p&gt;Finally, consult your network, talk to people at meet ups, sneakily contribute to open source projects with people you want to talk to and then email the project owner after they&#39;ve got to know your name.&lt;/p&gt;

&lt;h3&gt;On a Coffee&lt;/h3&gt;

&lt;p&gt;Know what goes a long way? Talking with someone before applying. I regularly get coffee with applicants or potential applicants when I&#39;m in NYC. Coffee can be hard when applying for junior roles when remote, but so far, to my knowledge I&#39;ve not talked to anyone who hires a junior as a remote developer. I&#39;m not sure it could work unless the entire team was remote, or the junior developer had a lot of experience and was only a junior in the sense that they were just hitting the work-force.&lt;/p&gt;

&lt;p&gt;These are 15-30 minute informal chats, but from an employers perspective they are definitely a good way to filter candidates. A coffee is time-cheap, interviews are time-expensive. So ask someone on the dev team to do them, you&#39;ll usually get a yes. Tamar Nachmany has some &lt;a href=&quot;https://booleancubes.tumblr.com/post/137057622039/the-networking-with-awesome-strangers-checklist&quot;&gt;great, salient points&lt;/a&gt; on the right way to pitch these emails.&lt;/p&gt;

&lt;p&gt;It&#39;s definitely worth doing your homework on both the person doing coffee, and the company they work for. A coffee could turn into an interview.&lt;/p&gt;

&lt;h5&gt;But I don&#39;t live in a major metropolis&lt;/h5&gt;

&lt;p&gt;So meet-ups aren&#39;t going to work for you. I lived for most of my life (~25 years) about 2 hours train ride from Manchester. I love the little town, but there&#39;s very little meet-up scene or tech scene at all. Our meet-ups were people all starting together, and without a general core set of experienced people providing some consistency.&lt;/p&gt;

&lt;p&gt;Personally, I wouldn&#39;t hire a junior who was remote. I don&#39;t think that relationship would work out well for mentor/mentoree. You&#39;d need the entire company to be remote for that to work, and it&#39;s too much to ask for someone to be both learning everything on the job and to also have to play catch-up with company culture.&lt;/p&gt;

&lt;p&gt;So then what are the options? When I was looking I took a local white-pages/local ads and applied to all of the companies in my local area who were doing what I was interested in. I ended up working somewhere close enough to walk to work.&lt;/p&gt;

&lt;p&gt;The other option is to move to a big city with existing infrastructure. This can obviously be hard, but being surrounded with people doing similar things is difficult to put a price on. I never wanted to move to a big city, but once I did, it boosted my abilities to get things done considerably. Constant access to people and ideas change you. &lt;a href=&quot;http://www.gizmag.com/go/7613/&quot;&gt;Most people&lt;/a&gt; now live in cities.&lt;/p&gt;

&lt;p&gt;Finally, one of the best ways to distinguish yourself if you&#39;re going to aim for remote is in Open Source contributions. The process of contributing to Open Source is very similar to working as a remote developer. They both require self-motivation, clearness in your messaging and dealing with asynchronicity well.&lt;/p&gt;

&lt;h3&gt;On an Intro Email&lt;/h3&gt;

&lt;p&gt;Look at the language in the jobs page, and have your email / intro letter reflect that. When I receive very formal &quot;dear hiring manager&quot; emails it reflects badly on the applicant, &lt;a href=&quot;https://www.artsy.net/article/artsy-jobs-mobile-engineer&quot;&gt;our jobs page&lt;/a&gt; states to not worry about that, as we&#39;re not that kind of culture.&lt;/p&gt;

&lt;p&gt;An intro email is your chance to show that you understand the core value of a company. For example when I receive applications that only talk about our contributions to OSS then I wonder if they&#39;ve even studied what Artsy is, and how OSS by Default is derived from deeper values as opposed to being an end-goal in itself. If you apply to Facebook and the only thing you mention is &lt;a href=&quot;http://facebook.github.io/react-native/&quot;&gt;React-Native&lt;/a&gt; I think you&#39;d also be missing the point of Facebook. A great opener to Facebook might talk about how amazing it is that they can work on a product that pretty much everyone they meet uses, and you think it&#39;s amazing that there is now 1 billion active users a day. It shows you understand the scope of their problems, and have done your homework.&lt;/p&gt;

&lt;p&gt;Let&#39;s look at Ash&#39;s intro email:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;My name is Ash Furrow and I’m writing in regards to your mobile engineering position. I heard about the position first through Orta Therox, who spoke highly of Artsy.&lt;/p&gt;

&lt;p&gt;Upon further reading, Artsy sounded exactly like the kind of place I want to work. An ambitious goal, to change the world, with a thorough mix of math, software engineering, and art. I consider myself to be an artist, both when I code and when I am behind the lens of a camera (I like to develop my own film). I love working with companies who understand the important role of art in our society, as I did with 500px.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;10/10.&lt;/em&gt; Extremely on topic.&lt;/p&gt;

&lt;p&gt;Next, you&#39;re going to want to now talk about great of a fit you would be, how well you understand the domain and how you&#39;ve been doing similar work already.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I love how you’ve contributed back to the open source community. I am a strong believer in the power of open source, especially in the iOS community, where there has historically been a resistance to opening software. Sponsoring CocoaPods is a fantastic contribution toward the iOS community and I thank you for it. I’ve contributed back to several projects on GitHub, have written for the Teehan+Lax blog professionally, and have a selection of the apps I’ve written on my portfolio.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I know what you&#39;re thinking: &quot;Ash wasn&#39;t a junior when he applied&quot;, well, chances are you&#39;ve still got a history of things that can be applied towards an email like this. Also, flattery can get you everywhere. &quot;I&#39;ve been using your app for years, I love how it does &#39;x&#39; - have you thought of doing &#39;y&#39;?&quot;&lt;/p&gt;

&lt;p&gt;Sarah&#39;s was similar:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;First, I&#39;d just like to say I love Artsy and have been following your company since I learned of its existence two years ago. Making art accessible to the world is a problem the architects of the Internet should undoubtedly be solving and Artsy is doing so with elegance.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;10/10&lt;/em&gt; ✔&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I&#39;m currently transitioning from embedded systems to iOS development and looking for a place where I can learn a lot while making significant contributions to a product. As for my background, I just graduated from NYU with a B.S. in Electrical Engineering and completed a seven-month-long research and development internship at Canary (a home security hardware startup). While I do enjoy building hardware, I find software engineering generally more fun and in tune with my intellectual and creative preferences.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Dead on. Later on in the email, she references &lt;a href=&quot;https://en.wikipedia.org/wiki/Rosalind_E._Krauss&quot;&gt;art critics&lt;/a&gt; while discussing &lt;a href=&quot;https://en.wikipedia.org/wiki/Enumeration&quot;&gt;programming concepts&lt;/a&gt;. A great introduction email.&lt;/p&gt;

&lt;h3&gt;On a Portfolio&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;on wording&lt;/em&gt;: I use the word portfolio, to encapsulate a CV/Resume/Design Portfolio. They all have &lt;a href=&quot;http://www.diffen.com/difference/Curriculum_Vitae_vs_R%C3%A9sum%C3%A9&quot;&gt;specific meanings&lt;/a&gt;, but in this case, I mean something you attach to the email to provide the full context of your history/experiences.&lt;/p&gt;

&lt;p&gt;There are a lot of places for good, solid advice on the document you are using to persuade someone to interview you. So I&#39;ll tell you what has worked for me. I think it should be a one page document, that captures a snapshot of you. Things they must have: your name, a way to contact you and a list of things you think is relevant.&lt;/p&gt;

&lt;p&gt;You should consider what you think are qualities that you bring to the table, for some job applications I have submitted both a resume and a design portfolio. If you are particularly proud of your design work, perhaps find a way to include your app store screenshots and branding, or make your portfolio distinctive via design.&lt;/p&gt;

&lt;p&gt;Finally, consider that this is a document someone else will have to read. A dense document full of long descriptions and wordy titles is tough to read. Spend some time on making it as readable and easily digestible as possible.&lt;/p&gt;

&lt;h5&gt;On Representing Myself&lt;/h5&gt;

&lt;p&gt;I dug through my archives and found every resume I have ever created; ranging from my first as a student, through to last year.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/2007-144.jpg&quot;&gt;2007&lt;/a&gt; as a part of the WWDC Student Scholarship. It was significantly less competitive then.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/2008-general-144.jpg&quot;&gt;2008&lt;/a&gt; as a graduate applying for jobs that were not programming focused.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/2008-programming-144.jpg&quot;&gt;2008&lt;/a&gt; as a graduate applying for programming jobs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/2010-144.jpg&quot;&gt;2010&lt;/a&gt; when applying for jobs once I had stopped being a junior.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/2015-144.jpg&quot;&gt;2015&lt;/a&gt; my CV as a part of my U.S. VISA process.&lt;/li&gt;
&lt;/ul&gt;


&lt;table&gt;
  &lt;thead&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
            &lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/2007-144.jpg&quot;&gt;
                &lt;img height=&quot;200&quot; src=&quot;/images/2016-01-30-iOS-Junior-Interviews/2007-thumb.jpg&quot;&gt;
            &lt;/a&gt;
        &lt;/td&gt;
      &lt;td&gt;
            &lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/2008-general-144.jpg&quot;&gt;
                &lt;img height=&quot;200&quot; src=&quot;/images/2016-01-30-iOS-Junior-Interviews/2008-general-thumb.jpg&quot;&gt;
            &lt;/a&gt;
        &lt;/td&gt;
         &lt;td&gt;
            &lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/2008-programming-144.jpg&quot;&gt;
                &lt;img height=&quot;200&quot; src=&quot;/images/2016-01-30-iOS-Junior-Interviews/2008-programming-thumb.jpg&quot;&gt;
            &lt;/a&gt;
        &lt;/td&gt;
      &lt;td&gt;
            &lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/2010-144.jpg&quot;&gt;
                &lt;img height=&quot;200&quot; src=&quot;/images/2016-01-30-iOS-Junior-Interviews/2010-thumb.jpg&quot;&gt;
            &lt;/a&gt;
        &lt;/td&gt;
      &lt;td&gt;
            &lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/2015-144.jpg&quot;&gt;
                &lt;img height=&quot;200&quot; src=&quot;/images/2016-01-30-iOS-Junior-Interviews/2015-thumb.jpg&quot;&gt;
            &lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;You can definitely get a sense of my skill specialisations happening over the last 8 years, but the tone of how I present myself hasn&#39;t really changed.&lt;/p&gt;

&lt;p&gt;I also consider my personal web-page &lt;a href=&quot;http://orta.io&quot;&gt;orta.io&lt;/a&gt; to act as a portfolio, Ash Furrow&#39;s portfolio page has a &lt;a href=&quot;https://ashfurrow.com/portfolio/&quot;&gt;similar vibe&lt;/a&gt;.&lt;/p&gt;

&lt;h5&gt;On the team&lt;/h5&gt;

&lt;p&gt;Want to know what the resumes looked like for people applying to Artsy? I asked some of our team to send me their last resumes&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
            &lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/ash-furrow-resume.pdf&quot;&gt;
                &lt;img height=&quot;200&quot; src=&quot;/images/2016-01-30-iOS-Junior-Interviews/ash-thumbnail.jpg&quot;&gt;&lt;/br&gt;
                Ash Furrow (2013)
            &lt;/a&gt;
        &lt;/td&gt;
      &lt;td&gt;
            &lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/sarah-scott-resume.pdf&quot;&gt;
            &lt;img height=&quot;200&quot; src=&quot;/images/2016-01-30-iOS-Junior-Interviews/sarah-scott-resume.jpg&quot;&gt;&lt;br/&gt;
            Sarah Scott (2014)
            &lt;/a&gt;
        &lt;/td&gt;
      &lt;td&gt;
            &lt;a href=&quot;https://ortastuff.s3.amazonaws.com/artsy/maximcramer_artsy_portfolio.pdf&quot;&gt;
                &lt;img height=&quot;200&quot; src=&quot;/images/2016-01-30-iOS-Junior-Interviews/maximcramer_artsy_portfolio_thumb.jpg&quot;&gt;&lt;/br&gt;
                Maxim Cramer (2015)
            &lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;A portfolio can be whatever you want it to be. You could spend forever on a portfolio, but it&#39;s really just an exercise in restraint and prioritisation. Eventually it&#39;s been shaved to a point where you can remove nothing more.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;More infö that I&#39;ve reviewed and given a 👍:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.raywenderlich.com/54029/ios-developer-resume-examples&quot;&gt;iOS Developer Resume Examples&lt;/a&gt; - Somehow I ended up sneaking on this article too.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rooting-for-you.cenedella.com/8-minute-resume-my-guide-to-writing-your-resume-effectively-3b0b117d94a#.ouqnzegkh&quot;&gt;8 Minute Guide to Writing a Resume&lt;/a&gt; - Marc has a lot of experience in this space, plus his advice is definitely better if you&#39;re focusing on larger companies.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;On The One&lt;/h3&gt;

&lt;p&gt;So you know exactly who you are interested in applying to. One of your passions in life is to make music, and you think being a engineer at Spotify would be a dream job. How do you increase your chances?&lt;/p&gt;

&lt;p&gt;First up, you should have some experience before you apply. Apply at one or two other companies that you&#39;d also really like to work for first, test out the water. Then for Spotify, you should make sure everything is perfect for them. Write a new CV and mention your band on it, include links to your music in the bottom. Consider Maxim&#39;s portfolio above, this was obviously made specifically for an audience of Arts/Tech people, Sarah&#39;s also talks about activism and art projects. These are well-tuned portfolios for an audience of Artsy.&lt;/p&gt;

&lt;p&gt;A lot of companies have public employee get-togethers, for example at Artsy we have weekly Happy Hour in the office, or &lt;a href=&quot;https://artsy.github.io/blog/2015/08/10/peer-lab/&quot;&gt;Peer Labs&lt;/a&gt; where you can meet a lot of the people working at a company. This is a great way to mine the employees for information about the culture and to try and peek behind the curtain. In the case of Spotify, they host a lot of meet-ups, try attending some at their offices.&lt;/p&gt;

&lt;h3&gt;On Interview Preparation&lt;/h3&gt;

&lt;p&gt;So you&#39;ve got an interview, be gracious in setting up a time, it&#39;s normal for a bit of back and forth, the company probably has to find a time for a lot of people.&lt;/p&gt;

&lt;p&gt;There&#39;s a lot of value in a collection of interview questions though, one that IMO is a solid resource is &lt;a href=&quot;https://github.com/CameronBanga/iOS-Developer-and-Designer-Interview-Questions&quot;&gt;CameronBanga/iOS-Developer-and-Designer-Interview-Questions&lt;/a&gt; on GitHub. You could get asked a few of these.&lt;/p&gt;

&lt;p&gt;Be cautious with links on the internet here, some of the &lt;a href=&quot;http://www.raywenderlich.com/53962/ios-interview-questions&quot;&gt;top&lt;/a&gt; &lt;a href=&quot;http://www.geekinterview.com/Interview-Questions/iOS&quot;&gt;links&lt;/a&gt; &lt;a href=&quot;http://way2ios.com/development/ios-development-2/ios-interview-questions-with-answers/&quot;&gt;to&lt;/a&gt; &lt;a href=&quot;http://www.toptal.com/ios/interview-questions&quot;&gt;search&lt;/a&gt; here are probably not great for people starting. They aim at a different audience, or focus on minutiae that juniors probably don&#39;t know. If you want to help out there, and you&#39;re linking to this blog post on a website link it with the name include &quot;iOS interview&quot; in the text of the &lt;a href=&quot;http://answers.google.com/answers/threadview/id/141243.html&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One book that is considered the go-to for interview preparation is &lt;a href=&quot;http://www.crackingthecodinginterview.com&quot;&gt;Cracking the Coding Interview&lt;/a&gt;, it&#39;s considered a great guide to some of the computer-science-y questions you could get asked.&lt;/p&gt;

&lt;h5&gt;I didn&#39;t study Computer Science&lt;/h5&gt;

&lt;p&gt;Then I&#39;d definitely recommend Cracking the Coding Interview. I don&#39;t think this is a blocker &lt;em&gt;at all&lt;/em&gt; - we have a lot of engineers on staff who do not have a computer science degree. In our line of work, having experience of the art world can be more useful in a lot of cases. It&#39;s very likely that you&#39;ll feel a hint of &lt;a href=&quot;http://geekfeminism.wikia.com/wiki/Impostor_syndrome&quot;&gt;impostor syndrome&lt;/a&gt; - &lt;a href=&quot;https://medium.com/@aliciatweet/overcoming-impostor-syndrome-bdae04e46ec5#.ilrvfqjow&quot;&gt;you shouldn&#39;t&lt;/a&gt; - the tech industry should be (and is) begging for people who can bring interesting new contexts.&lt;/p&gt;

&lt;p&gt;During the process of setting up your interviews, you should ask what to expect from the interviews. If they are going to be whiteboards + algorithms like they do at Google/Facebook, then I think you&#39;re gonna have to hit the books.&lt;/p&gt;

&lt;h5&gt;On Mocks&lt;/h5&gt;

&lt;p&gt;If you can do Mock Interviews you should. You need an existing network in order to pull that off, but you can get real feedback that can be extremely helpful. As an employer you have to be very cautious in the way you word a rejection, in a mock interview you don&#39;t. This isn&#39;t a one-sided process, the interviewer can use the chance to try out a different technique or to improve their interviewing skills.&lt;/p&gt;

&lt;p&gt;If you don&#39;t know anyone who can do this for you, I&#39;d feel like there are two options: &lt;a href=&quot;http://www.careercup.com/interview&quot;&gt;buy a mock interview&lt;/a&gt; and befriend someone who says they&#39;re looking for someone at a meet-up - they must be interviewing so they might want a practice run too. I&#39;ve given about as many mock interviews as I have done real interviews in the last 2 years.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;More infö that I&#39;ve reviewed and given a 👍:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://macoscope.com/blog/so-you-have-a-technical-interview-at-macoscope/&quot;&gt;So You Have a Technical Interview at Macoscope&lt;/a&gt; - Again, probably a bit more than expected of a junior, but a great summary of how they do it&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.google.com/about/careers/lifeatgoogle/hiringprocess/&quot;&gt;How we hire&lt;/a&gt; - How Google&#39;s hiring process works.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;On iOS Interviews&lt;/h3&gt;

&lt;p&gt;To be at this point, a employer has already decided to invest probably something like 10 hours into you. This is spread across a few people but the point is important. To have got here, someone has to be on your side. They will have had to put in work to even get people to agree to schedule you into their day. Your mindset should reflect this, it&#39;s not you vs them. It&#39;s you and someone. Your job from here is persuading everyone else that gut feeling from that person is correct.&lt;/p&gt;

&lt;p&gt;There is no catch-all solid advice for interviews, but I can give you some of the things we talk about in Artsy.&lt;/p&gt;

&lt;p&gt;We look for &lt;a href=&quot;https://en.wikipedia.org/wiki/T-shaped_skills&quot;&gt;T shaped&lt;/a&gt; engineers, even in juniors. This means someone who has experience in a pretty wide net of things, but that they have a solid focus. This could be building their APIs for apps, writing their own blog, designing their website, automating some regular tasks or using technology for art.&lt;/p&gt;

&lt;p&gt;As a junior, the employer is looking for growth potential. Looking for people who, in the right environment could really thrive. However it&#39;s important to note, an interview only lets you know how well someone interviews. The greatest programmers can choke on interviews.&lt;/p&gt;

&lt;p&gt;You should come in with a few ideas about questions you&#39;d like to ask of the company, as interviews work both ways. Think of some specific to the space the company works, and this is a &lt;a href=&quot;https://www.theladders.com/career-newsletters/its-not-about-me-its-about-you-the-21-questions-you-need-to-ask-in-a-job-interview-june-2014&quot;&gt;great list of general questions&lt;/a&gt; to work from. You could consider them ice-brakers, or they can be used to finish up an interview. The most memorable question asked to me was &quot;Where would I work if I wasn&#39;t at Artsy?&quot; which threw me off completely, but probably told the interviewer a lot about the culture at Artsy.&lt;/p&gt;

&lt;h5&gt;How I interview Juniors&lt;/h5&gt;

&lt;p&gt;One thing I can tell you concretely though, is what I do. My interviews with juniors come in three parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A Chat&lt;/p&gt;

&lt;p&gt;I want to get someone comfortable with the interview, I&#39;ll have taken points from looking over the portfolio to explore. It will be a pretty one-sided conversation with me only trying to provide points to spring off. &quot;So tell me about when you did x&quot;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pair Programming&lt;/p&gt;

&lt;p&gt;I want to get a sense of how you use a computer and act under mentorship. So I do one of two things, depending on how work has been the last week. If there&#39;s been a pull request which seem small and contained enough from our team on one of our apps, I will pair on re-creating the pull request from scratch, without letting it be known that the PR had already been built and accepted. If there isn&#39;t, we&#39;ll take a pre-built broken app and fix it.&lt;/p&gt;

&lt;p&gt;I want to see things like; do you use Xcode shortcuts? Can you explain the code you&#39;re looking at? If I offer some advice, do you use it? Can you present ideas when we&#39;re figuring out an abstraction? Can you identify where problematic behaviour lies?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn you a thing&lt;/p&gt;

&lt;p&gt;Alright, so I&#39;ve been building up the applicant&#39;s confidence and now it&#39;s time to bring that all down. Sorry. I have been paying attention to finding out what the applicant doesn&#39;t know. Then I start asking questions about this. It doesn&#39;t really matter what the topic is, it could be threading, view controller lifecycle, code coupling, dynamic vs static dispatch, whatever. The point is that I want to understand how someone learns during a discussion. So the conversation tends to switch around, where-in I lead a conversation on the topic - try to lay foundations then experiment with questions that should require an understanding of the topic.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Here&#39;s &lt;a href=&quot;https://medium.com/@jon.lazar/my-approach-to-learning-ios-fccf943aead#.ei4yvc38k&quot;&gt;a long writeup&lt;/a&gt;, with a lot of depth (and places to jump off from) from someone who has just come out of a mock interview with me. Thanks Jon.&lt;/p&gt;

&lt;p&gt;None of this process aims to be adversarial, if someone has got this far, I really want to have a sense of how much time and attention will be required to give them some independence. I think a lot of interviewing techniques are created organically, so it&#39;s hard to provide a lot of context.&lt;/p&gt;

&lt;h3&gt;On References&lt;/h3&gt;

&lt;p&gt;References are important to everyone. When you&#39;re trying to get a sense of what someone&#39;s like on the long-term, asking their friends is a great idea. Colleagues tend to be the next best thing. We tend to ask for someone you reported to, someone who was a colleague and if you had reports one of them.&lt;/p&gt;

&lt;p&gt;Artsy puts a lot of priority on references,  Check out &lt;a href=&quot;https://www.zamiang.com/posts/post/2015/07/05/learning-from-artsy-how-to-hire-awesome-engineers/&quot;&gt;Brennan Moore&#39;s article&lt;/a&gt; on this, a lot of the behind the scenes emails afterwards uses quotes taken from references as examples of why someone should be hired. I don&#39;t think this will be unique to Artsy. References should be your cheerleaders. In an ideal world you should be looking for references like the ones we got for Maxim:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;However, if I had to fire people gradually, I&#39;d fire her last. her skill-set is so valuable, and so scarce that it&#39;s super valuable. I&#39;d fire me before her.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;She was the glue that held the team together - could talk at a different level to each contributor. Great intuition, could put in a room with anyone and they could understand how to get their bits done.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I respect that no-one is in control of other people, so yes, references are a bit of a wild card from a junior&#39;s perspective. However, hopefully you&#39;ve had a collection of positive interactions with people who can talk about that. It&#39;s not about your programming prowess at this point, it&#39;s about how you work with others and character reference. Consider listing professors, advisers or supervisors from other jobs.&lt;/p&gt;

&lt;h3&gt;About that thanks&lt;/h3&gt;

&lt;p&gt;Sending an email to say thanks for your interview seems to be the ettiquette in the US. I don&#39;t recall doing it for my interviews, and not every person I&#39;ve interviewed at Artsy has done it. When I brought up the concept recently, people mostly felt like another chore in the process. So, I&#39;d recommend doing it - but do it with a purpose. Provide a link to something you talked about during the interview and make it feel like an email with a reason to exist.&lt;/p&gt;

&lt;h3&gt;On the Aftermath&lt;/h3&gt;

&lt;p&gt;So, interviews are over. What is happening behind the scenes? After your interviews are done, there will be a flurry of behind the scenes emails. From my experience at Artsy, it probably takes a few days to get enough of a consensus around a yay/nay. Someone should be keeping the applicant up to date, even if it&#39;s a matter of &quot;not yet, but we&#39;re talking.&quot;&lt;/p&gt;

&lt;p&gt;This bit is hard, because you&#39;re in limbo, and it can take a while. I think with Sarah this took about a week and a half, from her final interviews to being able to send her an offer. Which I&#39;m sure for her weren&#39;t great, she could be so close to an offer - or weeks wasted on moving towards another. Sending &quot;How&#39;s it going?&quot; emails is totally fine if you&#39;ve not heard back in a week. It&#39;s not cool for a company to not get back to you if you have interviewed.&lt;/p&gt;

&lt;h3&gt;On the Launch Pad&lt;/h3&gt;

&lt;p&gt;OK, so you&#39;ve been given an offer. If it&#39;s a startup, you might be offered equity. If you don&#39;t know this world, that&#39;s OK, it&#39;s hard to give advice here - but &lt;a href=&quot;https://github.com/jlevy/og-equity-compensation&quot;&gt;this&lt;/a&gt; seems to be the most comprehensive resource, and this seems to be the &lt;a href=&quot;http://jvns.ca/blog/2015/12/30/do-the-math-on-your-stock-options/&quot;&gt;best starter&lt;/a&gt;. I started with no knowledge, and eventually got a reasonable understanding. If you want one sentence from me, &quot;equity is a risk, be damn sure you think the company is going to go somewhere.&quot; I opted for a chunk of equity in Artsy, but I&#39;ve worked at places where I&#39;ve taken the minimum option.&lt;/p&gt;

&lt;p&gt;Ideally you are presented with a great offer, I&#39;ve never negotiated salary and we don&#39;t do it at Artsy as it &lt;a href=&quot;https://en.wikipedia.org/wiki/Gender_pay_gap_in_the_United_States#Negotiating_salaries&quot;&gt;introduces bias&lt;/a&gt;, so I can&#39;t offer much there. But I have recieved &lt;a href=&quot;https://github.com/artsy/artsy.github.io/pull/205#discussion_r51386447&quot;&gt;some good&lt;/a&gt; advice I&#39;ll paraphrase.&lt;/p&gt;

&lt;p&gt;It&#39;s up to you whether to negotiate. In order to negotiate, you need to have an understanding of what people in similar companies/positions are. Ask people in the industry, friends and mentors. Talk in pay-ranges if that&#39;s easier. Note: The type of company, it&#39;s/your location, benefits, equity and the economy are all things that will move those ranges.&lt;/p&gt;

&lt;h3&gt;OK, so, while I have your attention, what else can I recommend?&lt;/h3&gt;

&lt;p&gt;The way in which you present yourself online will attract similar people. If you are always being negative, and it sure is easy, expect to end up surrounded with people who are similar. &lt;a href=&quot;https://realm.io/news/altconf-orta-therox-being-nice-in-open-source/&quot;&gt;Being nice is nice&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have a blog, and it&#39;s on medium, look into making/editing your own blog. &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; is the defacto go-to in that space, but I know people have enjoyed using &lt;a href=&quot;https://middlemanapp.com&quot;&gt;middleman&lt;/a&gt; and &lt;a href=&quot;http://gohugo.io&quot;&gt;hugo&lt;/a&gt;. Do not use Octopress, vanilla Jekyll will do you just fine.&lt;/p&gt;

&lt;p&gt;If you&#39;re not active on Twitter, you should start trying. Every time you think of something worth saying to someone next to you, say it to them, then say it to twitter. Show off pictures of what you&#39;re working on, reply to people with more followers than you when they ask questions, talk about code. It took me 4 years to hit my first thousand followers, hopefully you can be more interesting &lt;a href=&quot;https://twitter.com/orta/status/13912101&quot;&gt;than I was&lt;/a&gt; for a while.&lt;/p&gt;

&lt;p&gt;This article covers &lt;a href=&quot;http://blog.leif.me/2013/11/how-software-developers-use-twitter/&quot;&gt;how developers in general use twitter&lt;/a&gt; it&#39;s an interesting read. You can get a lot of value by following developers whose work you rely on, or whose &lt;a href=&quot;https://twitter.com/orta&quot;&gt;blog posts you think are awesome&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When people say GitHub is your resume, they are right and they are wrong. GitHub can help get you through the door, but you can&#39;t rely on that in your interviews. Check out the advice at the &lt;a href=&quot;http://code.dblock.org/2011/07/14/github-is-your-new-resume.html&quot;&gt;end of this post&lt;/a&gt; on how to make your GitHub look good for people looking at whether to interview you.&lt;/p&gt;

&lt;p&gt;However you can &lt;a href=&quot;https://ma.tt/2016/02/getting-a-job-after-coding-bootcamp/&quot;&gt;distinguish yourself by contributing to Open Source&lt;/a&gt;. &lt;a href=&quot;https://github.com/alloy/lowdown/pull/8&quot;&gt;Fix READMEs&lt;/a&gt;, &lt;a href=&quot;https://github.com/supermarin/ObjectiveSugar/pull/20&quot;&gt;improve documentation &lt;/a&gt; or &lt;a href=&quot;http://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen/&quot;&gt;the Pods you use&lt;/a&gt;. These slides go &lt;a href=&quot;https://speakerdeck.com/orta/contributing-to-open-source-doesnt-require-changing-the-world&quot;&gt;into other ways&lt;/a&gt; to contribute.&quot;&lt;/p&gt;

&lt;h4&gt;Some links for further reading&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://geekfeminism.wikia.com/wiki/Male_Programmer_Privilege_Checklist&quot;&gt;Male Programmers Privilege&lt;/a&gt; - The geek feminism wiki is a great resource for understand some of the  less positive aspects of a male-dominated culture.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.testdouble.com/posts/2014-12-02-the-social-coding-contract.html&quot;&gt;The Social Coding Contract&lt;/a&gt; - I&#39;d recommend this to anyone on any topic, regardless of what they were really asking.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.testdouble.com/posts/2016-01-25-an-empathetic-guide-to-git-conflicts.html&quot;&gt;Git Conflicts and Empathy&lt;/a&gt; - Understanding that a git conflict is that two people really want to do something positive.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.testdouble.com/posts/2015-06-08-finding-joy-at-work.html&quot;&gt;Finding Joy at Work&lt;/a&gt; - On the risks of being in a small company.&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;This blog&#39;s best-of for Juniors:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://artsy.github.io/blog/2016/01/13/OSS-Expectations/&quot;&gt;OSS Expectations&lt;/a&gt; - On how to talk the talk when thinking about Open Source.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen/&quot;&gt;Being a good OSS citizen&lt;/a&gt; - On how to walk the walk when contributing back.&lt;/li&gt;
&lt;li&gt;Video code-reviews: &lt;a href=&quot;http://artsy.github.io/blog/2016/01/14/eidolon-code-review/&quot;&gt;Eidolon&lt;/a&gt; / &lt;a href=&quot;http://artsy.github.io/blog/2015/11/05/Emergence-Code-Review/&quot;&gt;Emergence&lt;/a&gt; - On the gestalt of an app.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://artsy.github.io/blog/2015/09/01/Cocoa-Architecture-Dropped-Design-Patterns/&quot;&gt;Dropped Design Patterns&lt;/a&gt; - On understanding that technical decisions aren&#39;t permanent.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://artsy.github.io/blog/2015/07/06/how-to-write-unit-tests-like-a-brood-parasite/&quot;&gt;How To Write Unit Tests Like a Brood Parasite&lt;/a&gt; - On using metaphors to understand complex ideas.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://artsy.github.io/blog/2015/04/03/artsy-engineering-compensation-framework/&quot;&gt;Artsy&#39;s Engineering Compensation Framework&lt;/a&gt; - On ways in which you can rank yourself.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://artsy.github.io/blog/2015/03/31/the-culture-of-openness-artsy-mobile/&quot;&gt;The Culture of Openness in the Artsy Mobile Team&lt;/a&gt; - On how a team talks about it&#39;s culture.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://artsy.github.io/blog/2014/06/17/building-the-xcode-plugin-snapshots/&quot;&gt;Building the Xcode Plugin Snapshots&lt;/a&gt; - On how your tools can be improved, and how easy it is to get started.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://artsy.github.io/blog/2015/09/24/mvvm-in-swift/&quot;&gt;MVVM in Swift&lt;/a&gt; - On understanding that there is more than one way to skin a cat.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 30 Jan 2016 11:09:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/01/30/iOS-Junior-Interviews/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/01/30/iOS-Junior-Interviews/</guid>
        
        
        <category>interviewing</category>
        
        <category>ios</category>
        
        <category>juniors</category>
        
        <category>mobile</category>
        
      </item>
    
      <item>
        <title>Being a Good OSS Citizen</title>
        <description>&lt;p&gt;Let&#39;s take a look at the day in the life of an open source citizen: me. On our app, I was given &lt;a href=&quot;https://github.com/artsy/eigen/issues/971&quot;&gt;an issue&lt;/a&gt; that would allow users to refine what kinds of sale artworks they were looking at, and it included this &lt;em&gt;awesome&lt;/em&gt; slider control so they could set min/max price ranges.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/2016-01-28-being-a-good-open-source-citizen/design.png&#39;&gt;&lt;img src=&quot;/images/2016-01-28-being-a-good-open-source-citizen/design.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;Nice.&lt;/p&gt;

&lt;p&gt;But iOS doesn&#39;t have a slider like that built into UIKit, so I headed to &lt;a href=&quot;https://cocoapods.org&quot;&gt;CocoaPods.org&lt;/a&gt; to find something that would work for me. Searching for &quot;range slider&quot; yielded a bunch of results, and I looked through three or four of them.&lt;/p&gt;

&lt;p&gt;I picked &lt;a href=&quot;https://cocoapods.org/pods/MARKRangeSlider&quot;&gt;this one&lt;/a&gt; because it did &lt;em&gt;almost exactly&lt;/em&gt; what I needed, provided a reasonable level of customization, and had a history of development leading up to a recent v1.0.&lt;/p&gt;

&lt;p&gt;But I said it did &quot;almost exactly&quot; what I needed, which meant I&#39;d have to modify it. At this point, many developers either look for a different library or abandon the idea of using an existing library altogether and invent one themselves. That&#39;s a shame, because it&#39;s almost always faster and easier to improve an existing library than it is to build your own.&lt;/p&gt;

&lt;p&gt;So let&#39;s step through what I did to modify this library for my needs. First, I checked to see if there was an issue for my feature already opened on the repository; maybe someone else had tried this, and I could benefit from their experience! That wasn&#39;t the case, so I forked the library to my personal account and cloned my fork locally. Now I can modify the library&#39;s code and commit it to my fork.&lt;/p&gt;

&lt;p&gt;Next I add the library to my &lt;code&gt;Podfile&lt;/code&gt;, but I&#39;m clever about it.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;rb&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;MARKRangeSlider&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;../MARKRangeSlider&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This tells CocoaPods that I&#39;m &lt;em&gt;working&lt;/em&gt; on the pod, and, it is stored in a local directory (the one where I cloned my fork). This makes it a &quot;development pod&quot;, so that the files in Xcode are actually the ones I&#39;ve cloned locally.&lt;/p&gt;

&lt;p&gt;This is a really important, but subtle point. Normally, CocoaPods downloads copies of the files and stores those copies, but in this case, it refers to the existing files. It doesn&#39;t copy them at all: any changes I make to the library while working on my app are to the files I cloned. That means they can be easily committed and pushed up to my fork.&lt;/p&gt;

&lt;p&gt;That&#39;s exactly what I did. I made my changes from within the app until I was satisfied, and &lt;a href=&quot;https://github.com/ashfurrow/MARKRangeSlider/commit/aefbeb181b62c8c257a7d0ada1e75834489b1909&quot;&gt;pushed them to my fork&lt;/a&gt;, then pointed the &lt;code&gt;Podfile&lt;/code&gt; to my fork of the pod.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;rb&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;MARKRangeSlider&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://github.com/ashfurrow/MARKRangeSlider.git&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Nice. At this point, I continued on as a developer, running a &lt;code&gt;pod install&lt;/code&gt; to download the forked library with my commits as usual. I finished building the feature and &lt;a href=&quot;https://github.com/artsy/eigen/pull/1075&quot;&gt;PR&#39;d it using my fork&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-01-28-being-a-good-open-source-citizen/done.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I could&#39;ve stopped here, but that&#39;d be a shame. Someone else might want the same changes I made, and I should submit them back. I &lt;a href=&quot;https://github.com/vadymmarkov/MARKRangeSlider/pull/22&quot;&gt;opened a PR&lt;/a&gt; on the library to contribute my changes back, and I made sure to explain &lt;em&gt;why&lt;/em&gt; my changes were necessary. Because our app is open source, I was even able to link to &lt;em&gt;our&lt;/em&gt; PR to show the library author how their work was being used.&lt;/p&gt;

&lt;p&gt;The next morning, I woke up to find my PR had been merged, and after the author pushed an updated version of the library (including my changes), I updated our app&#39;s &lt;code&gt;Podfile&lt;/code&gt; once more.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;rb&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;MARKRangeSlider&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Then ran &lt;code&gt;pod update MARKRangeSlider&lt;/code&gt; so it would update &lt;em&gt;just&lt;/em&gt; that pod, and point it to the new release. I re-ran the unit tests to make sure I hadn&#39;t broken anything, and &lt;a href=&quot;https://github.com/artsy/eigen/pull/1077&quot;&gt;PR&#39;d the change&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This sounds like a lot, and having written it all out, I guess it is. But it&#39;s a series of small steps, not big ones, and I&#39;ve worked like this long enough that it&#39;s second-nature to me now.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I believe that using existing open source libraries is almost always better than writing your own, and I believe that improvements made to open source ought to be shared. Those beliefs shape my behaviour as a developer, and as a person.&lt;/p&gt;

&lt;p&gt;Making your first contribution to a project may seem scary, but we all &lt;a href=&quot;https://github.com/B-Sides/ELCSlider/pull/1&quot;&gt;start somewhere&lt;/a&gt;. It gets easier, and in time, you will become a paragon of open source citizenry.&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen/</guid>
        
        
        <category>code</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>oss</category>
        
        <category>swift</category>
        
      </item>
    
      <item>
        <title>Teaching Swift at Artsy</title>
        <description>&lt;p&gt;While the Artsy engineering team includes many disciplines, tech stacks, and personalities, we all share a few things in common: a respect for each other, an appreciation of art-meets-science, and a celebration of learning. These are actually traits shared with our entire company, even non-engineers. So last Summer when Orta and I had some down time, it occurred to us how we could do something super-productive that was congruent with our values: we could teach the company Swift.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;Like most project ideas, the first step was to create a &lt;a href=&quot;https://github.com/orta/Swift-at-Artsy&quot;&gt;GitHub repo&lt;/a&gt;. We made it open source because &lt;a href=&quot;http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html&quot;&gt;why not&lt;/a&gt;. Orta and I chatted and realized that to teach the company Swift, we would need two tracks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A track for newcomers who may have never programmed before.&lt;/li&gt;
&lt;li&gt;A track for anyone who could explain what &quot;object-oriented programming&quot; meant.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It was really important to us to include beginners who had no exposure to programming – the digital marketing and genoming teams specifically were keen to learn how to program.&lt;/p&gt;

&lt;p&gt;I&#39;m a big believer in using &quot;newcomer&quot; and &quot;informed&quot; to describe the two groups of developers – it helps prevent newcomers from feeling inadequate and better describes the expectations for students.&lt;/p&gt;

&lt;p&gt;We also focused on Swift-only, no iOS. That allowed us to focus on the language – which was fun because it let us focus on us learning new stuff, too – and we kept the course to five one-hour sessions (per track).&lt;/p&gt;

&lt;p&gt;Next step was obviously to create a Slack chatroom. We re-purposed the oft-neglected room dedicated to Taylor Swift and turned it into a place where anyone could ask questions and share resources. It&#39;s also a helpful place to @channel everyone to remind them about the classes.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/2016-01-26-swift-at-artsy/chatroom.png&#39;&gt;&lt;img src=&quot;/images/2016-01-26-swift-at-artsy/chatroom.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;Orta taught the beginner course and I TA&#39;d it, answering questions as he instructed and offering suggestions when I felt something should be clarified (kind of like pair-programming except for teaching). We switched roles for the informed class. Preparing course materials was done through GitHub pull requests, which integrated well into our existing workflow on the mobile team.&lt;/p&gt;

&lt;p&gt;We ran into some troubles in the first classes of both tracks: Swift 2 was in beta, and getting everyone on the correct versions of Xcode proved... difficult. Keeping them up-to-date as Xcode betas continued to be released over five weeks was also challenging. This was a problem in both tracks, but some problems were track-specific.&lt;/p&gt;

&lt;p&gt;Explaining fundamental concepts like variables and for-loops to beginners is challenging. It reminded me of when I TA&#39;d intro-to-Java courses in University (while the code then was obviously much uglier, &lt;code&gt;javac&lt;/code&gt; is arguably more user-friendly than Xcode). Having the pair-programming approach worked well to help explain these concepts.&lt;/p&gt;

&lt;p&gt;The biggest challenge with the informed class was rounding everyone up to actually attend the classes. Engineers are addicted to being busy, and like most side-projects, everyone was initially very excited about the course, but that interest dropped off quickly. Orta would help by physically going to our colleagues&#39; desks and gently reminding them.&lt;/p&gt;

&lt;p&gt;Regardless of the challenges, the course had a significant impact, both within Artsy and in the larger Swift community. Some of the course materials have been &lt;a href=&quot;https://github.com/orta/Swift-at-Artsy/blob/master/Beginners/Lesson%20One/README_ZH.md&quot;&gt;translated into Chinese&lt;/a&gt; and we regularly received suggestions (and occasionally corrections) about our content. Newcomers to programming gained insights into &lt;em&gt;what exactly engineers do&lt;/em&gt; and why bugs happen, while informed colleagues saw parallels between Swift and their own favourite languages (most often Scala). The course materials have also helped other mobile team members (who usually write only Objective-C) get started with Swift.&lt;/p&gt;

&lt;p&gt;The beginner students really appreciated &lt;a href=&quot;https://github.com/orta/Swift-at-Artsy/tree/master/Beginners/Lesson%20Three&quot;&gt;lesson three&lt;/a&gt; because we used real-world (scaled down) data structures that Artsy actually uses. We presented problems to solve – problems our colleagues were familiar with from their day-to-day work – and we showed how they can be solved with programming. &lt;a href=&quot;https://github.com/orta/Swift-at-Artsy/tree/master/Beginners/Lesson%20Four&quot;&gt;Lesson four &lt;/a&gt; was the most well-received lesson as it featured some concrete &quot;making the computer do cool stuff&quot; material.&lt;/p&gt;

&lt;p&gt;Finally, there was just a great sense of accomplishment. Orta and I had taken time during a downtime in engineering work and turned it into something that helped the company and helped the community. We got thanked internally and externally, and that felt great; helping others has a lot of tangible benefits, but feeling good about it is one of my favourites.&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/01/26/swift-at-artsy/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/01/26/swift-at-artsy/</guid>
        
        
        <category>code</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>oss</category>
        
        <category>review</category>
        
        <category>swift</category>
        
        <category>teaching</category>
        
        <category>video</category>
        
      </item>
    
      <item>
        <title>Code Review: Eidolon</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/artsy/eidolon&quot;&gt;Eidolon&lt;/a&gt; is the third app from Artsy&#39;s mobile team, and it was the &lt;a href=&quot;http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&quot;&gt;first to be developed totally in the open&lt;/a&gt;. It&#39;s often used as a reference for what an app written in Swift, or written using FRP, should look like. Given how interested the community seems to be around the app, it&#39;s about time we did a walkthrough of the code.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;This was done as a part of the engineering team&#39;s weekly lunch and learn sessions, where we get together and share what we&#39;ve been working on. Since most of you aren&#39;t Artsy engineers, and so you can&#39;t ask questions in-person, please feel free to &lt;a href=&quot;https://github.com/artsy/eidolon/issues/new&quot;&gt;open an issue&lt;/a&gt; to ask for any clarifications.&lt;/p&gt;

&lt;p&gt;Jump &lt;a href=&quot;https://www.youtube.com/watch?v=LAAMk7oLrmg&quot;&gt;to YouTube&lt;/a&gt; for the video, or click more for a smaller inline preview.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;iframe width=&#39;100%&#39; height=&#39;600&#39; src=&#39;https://www.youtube.com/embed/LAAMk7oLrmg &#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/01/14/eidolon-code-review/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/01/14/eidolon-code-review/</guid>
        
        
        <category>code</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>oss</category>
        
        <category>review</category>
        
        <category>swift</category>
        
        <category>video</category>
        
      </item>
    
  </channel>
</rss>
