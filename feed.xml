<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artsy Engineering</title>
    <description></description>
    <link>http://artsy.github.io/</link>
    <atom:link href="http://artsy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 23 Mar 2019 16:15:03 +0000</pubDate>
    <lastBuildDate>Sat, 23 Mar 2019 16:15:03 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>So You Want to Be an Engineer</title>
        <description>&lt;p&gt;First of all, that&#39;s very exciting! Software engineering is pretty darn cool—you get to learn lots of new things,
understand the technology you use every day better, and contribute to the mysterious maw known as &quot;the internet&quot;.&lt;/p&gt;

&lt;p&gt;Last February, I also decided that I wanted to pursue computer engineering. I&#39;d been at Artsy for a bit less than
two years at that point, first as a marketing intern working on SEO and then as a coordinator on the CRM (read:
email) team. I&#39;d consistently been working on small technical projects; first doing
&lt;a href=&quot;https://github.com/artsy/positron/commit/3176282a3ea94c626e9d851b7c0dd27a1bb0fcb4&quot;&gt;some work&lt;/a&gt; on a tool for SEO
optimization for our Editorial team, then building
&lt;a href=&quot;http://artsy.github.io/blog/2018/11/19/mjml/&quot;&gt;emails with MJML&lt;/a&gt;, and a few other bits and bobs. But I didn&#39;t think
of it as a serious pursuit.&lt;/p&gt;

&lt;p&gt;Mostly, that was due to my experience programming in the past—I did about half a CS major in undergrad. At the
time, I felt that programming wasn&#39;t right for me, and I dropped the major during my third year.&lt;/p&gt;

&lt;p&gt;It was Artsy&#39;s Engineering team that convinced me that programming was something that I both wanted to and could
do. Our engineers have always welcomed learners and been happy to answer questions and empower other teams to do
technical work. I eventually realized that the parts of my work where I was coding were the parts I enjoyed the
most, and that I would likely feel more fulfilled if I made programming my full-time occupation.&lt;/p&gt;

&lt;p&gt;Here&#39;s what that journey looked like. Hopefully my experience proves helpful to you as you begin (or finish) yours!&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Step.One:.Tell.People.What.You.Want&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Step One: Tell People What You Want&lt;/h1&gt;

&lt;p&gt;This might&#39;ve been the single biggest learning I took away from this experience: &lt;em&gt;if you tell people you want
something, you might just get it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That may sound super obvious. It wasn&#39;t for me. I&#39;ve usually been very passive in my career decisions, taking the
path of least resistance and considering myself lucky when I was able to keep progressing. In this case, I was
making a substantial departure from that idea by being proactive about what it was I wanted.
&lt;a href=&quot;https://engineering.gusto.com/i-didnt-want-to-be-a-manager-anymore-and-the-world-didnt-end/&quot;&gt;This post&lt;/a&gt; by
&lt;a href=&quot;https://twitter.com/NoaElad&quot;&gt;Noa Elad&lt;/a&gt; does a great job with this topic and is certainly worth a read.&lt;/p&gt;

&lt;p&gt;The first person I told at Artsy was &lt;a href=&quot;https://twitter.com/orta&quot;&gt;Orta&lt;/a&gt;. He&#39;d often encouraged me to develop my
technical skills, and since he knows Artsy&#39;s engineering team and stack better than just about anyone, I figured
he&#39;d be able to point me in the right direction when it came to learning resources and navigating company politics
to get to my eventual goal.&lt;/p&gt;

&lt;p&gt;The second person I told was my manager on the CRM team. I fortunately had a very good relationship with my manager
and was confident that she would help me if she could. And by telling her early, I was giving her more opportunity
to advocate for me and making it easier for her to replace me in the event that I was able to switch teams.&lt;/p&gt;

&lt;p&gt;The third person I told was Artsy&#39;s CTO, &lt;a href=&quot;https://www.dblock.org/&quot;&gt;dB&lt;/a&gt;. This was Orta&#39;s recommendation—dB would be
able to tell me if and when a move might be possible, and he could suggest things I should do to improve my chances
of making the switch.&lt;/p&gt;

&lt;p&gt;I also didn&#39;t keep it a secret from the rest of my team or the company. I didn&#39;t show up wearing a shirt that said
&quot;ENGINEER&quot; on it, but I told people, &quot;I&#39;m working on becoming an engineer. I&#39;m really hoping to stay at Artsy, but
if there&#39;s not a role open for me, that&#39;s fine—I&#39;ll search elsewhere.&quot;&lt;/p&gt;

&lt;p&gt;The net outcome of these conversations was that there wasn&#39;t a role open right then (and that I still had lot to
learn before I&#39;d be ready when one became available), but I also left with a better idea of what I should learn and
what I could expect from the coming months.&lt;/p&gt;

&lt;a name=&quot;Step.Two:.Figure.Out.What.You.Want.to.Learn&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Step Two: Figure Out What You Want to Learn&lt;/h1&gt;

&lt;p&gt;The answer to that question really depends on who you are, where you work, and where you &lt;em&gt;want&lt;/em&gt; to work.&lt;/p&gt;

&lt;p&gt;I wanted to work at Artsy, and I felt that I was most interested in front-end work. So I asked a few of our
engineers to help me understand our stack and to recommend frameworks/languages I should learn.&lt;/p&gt;

&lt;p&gt;If you&#39;re interested in changing companies as well as careers, it&#39;s worth seeing if your target company or
companies have open source code you can check out. See if you can find them on &lt;a href=&quot;https://www.github.com&quot;&gt;GitHub&lt;/a&gt; and
look at some of their recently updated repos. If you already have some coding experience, see if you can contribute
a little bit—even fixing small bugs or typos is a good place to start, since you&#39;re both contributing to their
codebase (which will help you if you land an interview) and learning more about their stack. dB recommended that I
do this with Artsy&#39;s code.&lt;/p&gt;

&lt;p&gt;As with most companies that have been around for more than a year or two, Artsy is home to projects with many
different stacks. However, most of our newer front-end stuff—things that are recently updated or currently in
development—is built on React using TypeScript. So my first question was &quot;what do I need to know in order to write
TypeScript code in a React framework?&quot;&lt;/p&gt;

&lt;p&gt;Fortunately, a lot of other people have the same question.&lt;/p&gt;

&lt;a name=&quot;Step.Three:.Decide.How.You.Want.to.Learn.It&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Step Three: Decide How You Want to Learn It&lt;/h1&gt;

&lt;p&gt;First: &lt;strong&gt;there is no wrong way to go about learning to code&lt;/strong&gt;. Whether it takes you 6 months or 6 years, whether
you learn one language or a dozen, whether you ask for a lot of help or do it all yourself, &lt;strong&gt;you are learning and
that is valuable&lt;/strong&gt;. Learning to code is not a magical skill. Like just about everything, it&#39;s a matter of putting
in time. Just keep trying, even small things, and you &lt;em&gt;will&lt;/em&gt; make progress.&lt;/p&gt;

&lt;p&gt;Lots of people who want to become engineers go to coding bootcamps like &lt;a href=&quot;https://flatironschool.com/&quot;&gt;Flatiron&lt;/a&gt; or
&lt;a href=&quot;https://generalassemb.ly/&quot;&gt;General Assembly&lt;/a&gt;. That&#39;s a very reasonable thing to do! I had a decent grounding in CS
fundamentals thanks to my experience in undergrad, and as a result, I initially decided I wouldn&#39;t do a coding
bootcamp—I felt I had enough experience to benefit from the multitude of online courses and open source projects
out there.&lt;/p&gt;

&lt;p&gt;However, there are definitely real and significant benefits do doing a bootcamp. Here are three that I can think
of:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clear curriculum. At times, I was overwhelmed by the possible ways to proceed and stopped making progress as a
result. Bootcamps take the guesswork out.&lt;/li&gt;
&lt;li&gt;Timeline. Because I didn&#39;t have a hard date set for a transition or interview, it was up to me to determine how
fast/slow I worked on things, and I stagnated at times as a result.&lt;/li&gt;
&lt;li&gt;Community. While the open source community is very much a real thing, and you can find lovely people on the
internet who want to help learners like yourself, it&#39;s not the same as having multiple people learning the same
thing at the same time in the same physical space.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The downsides, of course, are that coding bootcamps are expensive and time-consuming. Most of us don&#39;t have the
luxury to leave a job, pay $10K – $15K in fees, and spend a couple months at a full-time bootcamp with no income.
There are other models, such as online-only bootcamps or after-hours classes, but those come with challenges of
their own.&lt;/p&gt;

&lt;p&gt;I&#39;d say that If you can afford a bootcamp and have the time, it&#39;s a great way to jumpstart a coding career, but you
don&#39;t have to attend one to become a good engineer.&lt;/p&gt;

&lt;p&gt;If you decide to go the non-bootcamp route, you also have a lot of good options. I did courses through
&lt;a href=&quot;https://www.udemy.com&quot;&gt;Udemy&lt;/a&gt;, which has a lot of courses that are literally always on sale for $10 - $20. There
are many other similar services out there as well, like &lt;a href=&quot;https://www.udacity.com&quot;&gt;Udacity&lt;/a&gt;,
&lt;a href=&quot;https://www.codecademy.com/&quot;&gt;Codecademy&lt;/a&gt;, and &lt;a href=&quot;https://teamtreehouse.com/&quot;&gt;Treehouse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also highly recommend attending IRL meetups, because that&#39;s where you can make connections and learn from others
most easily. I&#39;m a semi-regular attendee at the &lt;a href=&quot;https://www.meetup.com/CocoaPods-NYC/&quot;&gt;CocoaPods meetup&lt;/a&gt; hosted by
&lt;a href=&quot;https://twitter.com/ashfurrow&quot;&gt;Ash&lt;/a&gt; and Orta at Artsy HQ, and &lt;a href=&quot;https://www.meetup.com/find/tech/&quot;&gt;meetup.com&lt;/a&gt; and
&lt;a href=&quot;https://peerlab.community/&quot;&gt;peerlab.community&lt;/a&gt; are great places to find other events.&lt;/p&gt;

&lt;a name=&quot;Step.Four:.Get.Comfortable.Not.Knowing.Things&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Step Four: Get Comfortable Not Knowing Things&lt;/h1&gt;

&lt;p&gt;When learning engineering concepts (and practicalities), there&#39;s a lot you&#39;re not going to know.&lt;/p&gt;

&lt;p&gt;This piece of advice is important both when learning and once you actually land an engineering job (it&#39;s been one
of the hardest parts of my first ~3 months on Artsy engineering).&lt;/p&gt;

&lt;p&gt;Part of what makes engineering so cool is that you are always challenged to learn new things and solve new
problems. But especially at first, the mental toolbox you have is pretty limited. When you don&#39;t know a language or
framework, it&#39;s very hard to solve problems using it—your first problems are likely to be syntax errors and
misunderstandings.&lt;/p&gt;

&lt;p&gt;One of the best things you can do is learn how to ask good questions and then ask them. You might be asking them on
a forum, in GitHub issues, in meetings, or in conversation with your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Rubber_duck_debugging&quot;&gt;favorite rubber duck&lt;/a&gt;. Regardless, just asking them will
help, and asking lots of questions is one of the best way to learn things fast—but it takes humility and
self-awareness. &lt;a href=&quot;https://twitter.com/b0rk&quot;&gt;Julia Evans&lt;/a&gt; has a &lt;a href=&quot;https://jvns.ca/wizard-zine.pdf&quot;&gt;great zine&lt;/a&gt; that
has good advice on asking questions, among many other things. For a few more fun and helpful resources, see
&lt;a href=&quot;https://github.com/artsy/README/blob/master/resources/tech-learning.md&quot;&gt;Artsy&#39;s README&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;Step.Five:.Recognize.What.You.Bring.to.the.Table&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Step Five: Recognize What You Bring to the Table&lt;/h1&gt;

&lt;p&gt;Ok, so you&#39;re reconciled to the fact that you have a lot to learn—but what about all the things you already know?
Those are important too!&lt;/p&gt;

&lt;p&gt;Even if your past work and/or life experience has nothing to do with computers or programming, it can still have
value as you work towards engineering (and after you become an engineer). That value can take a lot of different
forms, and since everyone&#39;s experiences are different, I can&#39;t say for sure what impact your prior knowledge will
have.&lt;/p&gt;

&lt;p&gt;For me, there are a few experiences I brought to engineering that were particularly helpful. Because I was
transitioning from one team at Artsy to another (Marketing → Engineering), I brought with me a broad understanding
of Artsy&#39;s goals and needs, which helps with day-to-day prioritization. And when I&#39;m in a sprint planning meeting
or a product review and someone has a question about email or marketing, I can often answer—or at least I know who
to talk to to get to the bottom of the issue quickly. Plus if at some point my team needs to code emails, my
&lt;a href=&quot;http://artsy.github.io/blog/2018/11/19/mjml/&quot;&gt;past experience&lt;/a&gt; will come in very handy.&lt;/p&gt;

&lt;p&gt;There are also life experiences that serve me well on the Engineering team. My work as a server and bartender made
me good at clear communication with stakeholders. Cooking for big groups of friends has made me better at
estimating how long I&#39;ll need for tasks. Don&#39;t underestimate the power of &quot;soft skills&quot;—even companies like Google
&lt;a href=&quot;https://www.washingtonpost.com/news/answer-sheet/wp/2017/12/20/the-surprising-thing-google-learned-about-its-employees-and-what-it-means-for-todays-students&quot;&gt;have come to recognize&lt;/a&gt;
that it&#39;s often the non-technical skills that separate good engineers from great ones.&lt;/p&gt;

&lt;p&gt;————&lt;/p&gt;

&lt;p&gt;Moving to engineering has been a tricky process, but one I&#39;m very grateful to have experienced. I&#39;m lucky to work
at an organization where moving from email marketing to engineering is possible, and I&#39;m even luckier to have had
the support of engineers, friends, and engineer-friends in making the move. If you end up pursuing this course as
well, I wish you the best of luck!&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/03/12/so-you-want-to-be-an-engineer/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/03/12/so-you-want-to-be-an-engineer/</guid>
        
        
        <category>artsy</category>
        
        <category>beginners</category>
        
        <category>culture</category>
        
        <category>engineering</category>
        
        <category>people</category>
        
        <category>team</category>
        
      </item>
    
      <item>
        <title>The Anatomy of an Editorial Feature</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://files.artsy.net/images/2018-visual-culture-screengrab.gif&quot; title=&quot;The Year in Visual Culture 2018&quot; alt=&quot;The Year in Visual Culture 2018&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On select occasions since 2015, Artsy Editorial has created a number of custom, one-off articles featuring unique layouts, styles and experiences. After trying a number of implementations, the &lt;a href=&quot;https://github.com/artsy/reaction/tree/master/src/Components/Publishing/EditorialFeature&quot;&gt;&lt;code&gt;EditorialFeature&lt;/code&gt;&lt;/a&gt; component was introduced to the process during Artsy’s 2018 year-in-review projects.&lt;/p&gt;

&lt;p&gt;By moving the implementation of custom articles to Artsy’s component library, we were able to remove some of the friction and time investment necessary for engineers to spin up these articles, and enable bespoke layouts to be housed in Artsy.net’s Article domain rather than a custom Express app. Acting essentially as a wrapper to accept article data, any component can be rendered as a child of the &lt;code&gt;EditorialFeature&lt;/code&gt; component, allowing for flexible combinations of new and existing features, and for minimal or maximal interventions.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;For a light-weight customization, a developer might add props for unique text or background colors. Medium-touch could involve wrapping an existing layout in a styled-component declaring further css interventions to font-size, borders, margins or other layout properties. The space is an open canvas, so the option is available to build every element from scratch, introduce JS interactivity, and to interact with any data saved to the article model in a completely new way. The scale of a project can vary widely, but determined by weighing priorities of editorial intent, proposed designs, engineering capabilities/availability, and budget.&lt;/p&gt;

&lt;p&gt;Some examples of articles created with the &lt;code&gt;EditorialFeature&lt;/code&gt; component include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Most Influential Artists of 2018 - &lt;a href=&quot;https://github.com/artsy/reaction/tree/master/src/Components/Publishing/EditorialFeature/Components/Eoy2018Artists&quot;&gt;Components&lt;/a&gt; | &lt;a href=&quot;https://www.artsy.net/article/artsy-editorial-influential-artists-2018&quot;&gt;Article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The Year in Visual Culture 2018 - &lt;a href=&quot;https://github.com/artsy/reaction/blob/master/src/Components/Publishing/EditorialFeature/Components/Eoy2018Culture.tsx&quot;&gt;Components&lt;/a&gt; | &lt;a href=&quot;https://www.artsy.net/article/artsy-editorial-people-defined-visual-culture-2018&quot;&gt;Article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Custom.articles.by.domain:&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Custom articles by domain:&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;a href=&quot;https://github.com/artsy/force&quot;&gt;In Force (Artsy.net)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Whether an article requires a custom layout is determined in Force’s &lt;a href=&quot;https://github.com/artsy/force/blob/master/src/desktop/apps/article/routes.ts&quot;&gt;article routing&lt;/a&gt;. This is achieved by passing the prop &lt;code&gt;customEditorial&lt;/code&gt;-- a string shorthand for a specific article-- to Reaction’s top-level &lt;code&gt;Article&lt;/code&gt; component. The &lt;code&gt;customEditorial&lt;/code&gt; prop is pulled from Force’s editorial feature &quot;&lt;a href=&quot;https://github.com/artsy/force/blob/master/src/desktop/apps/article/editorial_features.ts&quot;&gt;master list&lt;/a&gt;&quot;, which ties an &lt;code&gt;article._id&lt;/code&gt; to a communicative string that will be received by Reaction. In addition to data saved to an article model, the component will also receive all data displayed in the footer including related articles and display ads. Custom articles are rendered as a standalone page, meaning they are excluded from infinite scroll and do not render the main site header.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;2. &lt;a href=&quot;https://github.com/artsy/reaction&quot;&gt;In Reaction (Artsy’s component library)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In Reaction’s top-level &lt;a href=&quot;https://github.com/artsy/reaction/blob/master/src/Components/Publishing/Article.tsx&quot;&gt;&lt;code&gt;Article&lt;/code&gt;&lt;/a&gt; component, the presence of a &lt;code&gt;customEditoral&lt;/code&gt; prop routes an article to the &lt;a href=&quot;https://github.com/artsy/reaction/blob/master/src/Components/Publishing/Layouts/ArticleWithFullScreen.tsx&quot;&gt;&lt;code&gt;ArticleWithFullScreen&lt;/code&gt;&lt;/a&gt; component. From here, the article is given context for image slideshows and tooltip helpers, and the  &lt;code&gt;EditorialFeature&lt;/code&gt; component is rendered rather than the component designated by the article’s specified layout. A &lt;code&gt;FeatureLayout&lt;/code&gt; is displayed by default, but any article can be converted into a custom feature, regardless of the &lt;code&gt;article.layout&lt;/code&gt; value. Inside the &lt;code&gt;EditorialFeature&lt;/code&gt; component, a switch statement is used to associate the string variable for the feature with its affiliated top-level component.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;3. &lt;a href=&quot;https://github.com/artsy/positron&quot;&gt;In Writer/Positron (CMS &amp;amp; API for articles)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Because &lt;code&gt;EditorialFeature&lt;/code&gt; accepts an article data-model, it can be edited using the Writer CMS. However it is important to note that a custom layout is rendered by Force only. While editing, what users see is dicated by the &lt;code&gt;article.layout&lt;/code&gt; property. Writer&#39;s features are exposed based on this property, so a particular custom article’s layout should be determined by the features most suited to the content and design.  For example, if you need a header-image or video, a feature article would be a logical choice because that content can easily be created and edited in Writer. If the article relies heavily on content from related articles, you might choose to customize a series article instead.&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Creating.a.custom.feature&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Creating a custom feature&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://files.artsy.net/images/2018-influentual-artists-screengrab.gif&quot; title=&quot;The Most Influential Artists of 2018&quot; alt=&quot;The Most Influential Artists of 2018&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A custom layout is enabled via three steps:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a new object to the &lt;code&gt;customEditorialArticles&lt;/code&gt; &lt;a href=&quot;https://github.com/artsy/force/blob/master/src/desktop/apps/article/editorial_features.ts&quot;&gt;master list&lt;/a&gt;, indicating the &lt;code&gt;article._id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;. Names are usually a shorthand for the content, and used because they are descriptive (unlike an &lt;code&gt;_id&lt;/code&gt;), and will not change over time like a title or slug has potential to do.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;MY_CUSTOM_FEATURE&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;12345&amp;quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// mongo _id&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Create your custom component in the &lt;code&gt;EditorialFeature/Components&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;Add your &lt;code&gt;customEditorial&lt;/code&gt; string to &lt;code&gt;EditorialFeature&lt;/code&gt;’s switch statement to enable rendering custom component&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;MY_CUSTOM_FEATURE&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyCustomFeature&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Although these features historically receive high traffic via search and other channels, they usually have little internal visibility a few months after they are published. For this reason it is recommended that, in addition to any unit tests, developers create a snapshot of the custom article so that unexpected regressions are flagged in a test failure.&lt;/p&gt;

&lt;a name=&quot;History..amp..Context&quot;&gt;&lt;/a&gt;
&lt;h1&gt;History &amp;amp; Context&lt;/h1&gt;

&lt;p&gt;Previously we have used multiple strategies to implement these features, using two sometimes overlapping concepts: Curations and SuperArticles.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://files.artsy.net/images/2017-gender-equality-screengrab.gif&quot; title=&quot;Artists for Gender Equality&quot; alt=&quot;Artists for Gender Equality&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Curations:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://github.com/artsy/positron/tree/master/src/api/apps/curations&quot;&gt;Curation&lt;/a&gt; is a model in Positron’s API that has no schema-- meaning it accepts any data shape. This can be a handy solution for content that does not conform to the existing article model. However, this strategy comes with significant overhead and a few quirks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href=&quot;https://github.com/artsy/positron/tree/master/src/client/apps/settings/client/curations&quot;&gt;custom edit UI must be created&lt;/a&gt; and maintained indefinitely&lt;/li&gt;
&lt;li&gt;A custom Express app is required by Force to render the content&lt;/li&gt;
&lt;li&gt;Because data is in a unique shape, components often must be fully custom&lt;/li&gt;
&lt;li&gt;It is difficult to track visual changes over time&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Despite these pitfalls, Curations remain useful for special cases, especially those which involve interactive navigation through content.&lt;/p&gt;

&lt;p&gt;Published examples of custom articles that use curations are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/gender-equality&quot;&gt;Artists for Gender Equality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/venice-biennale&quot;&gt;Inside the Biennale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/2016-year-in-art&quot;&gt;The Year in Art 2016&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;em&gt;See &lt;a href=&quot;http://artsy.github.io/blog/2017/02/01/year-in-art/&quot;&gt;previous blog post&lt;/a&gt; on creating The Year in Art 2016.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SuperArticles:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An article where the &lt;code&gt;is_super_article&lt;/code&gt; field is set to true includes the ability to attach related articles and sponsor-related fields to an article. It also exempts an article from the infinite scroll feed, and renders a custom header (in place of the main site navigation) and footer. The SuperArticle &lt;a href=&quot;https://github.com/artsy/force/blob/master/src/desktop/components/article/templates/super_article_sticky_header.jade&quot;&gt;header&lt;/a&gt; and &lt;a href=&quot;https://github.com/artsy/force/blob/master/src/desktop/components/article/templates/super_article_footer.jade&quot;&gt;footer&lt;/a&gt; both include navigation options to view and visit related, aka sub-article, content.&lt;/p&gt;

&lt;p&gt;The first SuperArticle was also the &lt;a href=&quot;https://www.artsy.net/2015-year-in-art&quot;&gt;first custom feature&lt;/a&gt;, and its attributes were made available to all articles when launched. However, its weakness lies in a conflation of a series and a sponsor as a single concept. In practice we have seen that they are not mutually exclusive. Additionally, support for this feature was built in Backbone, and hasn’t always behaved as expected when inserted into our React-heavy ecosystem. Since the SuperArticle was created, we have extended the ability for any article to accept either or both sponsor and related article data, and we are currently in the process of deprecating this concept.&lt;/p&gt;

&lt;p&gt;Existing SuperArticles include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/2016-year-in-art&quot;&gt;The Year in Art 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/2015-year-in-art&quot;&gt;The Year In Art 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/article/artsy-editorial-the-100-most-expensive-artists&quot;&gt;The 100 Most Expensive Artists at Auction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Takeaways.for.developers&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Takeaways for developers&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;We try to work with our editorial and design teams to ensure new editorial content maps as closely to our existing article data-model and CMS features as possible. That way, we can have an upfront conversation about the constraints our systems might impose on designs.&lt;/li&gt;
&lt;li&gt;Relying heavily on existing article and system components ensures that system-wide changes (for example, changes to breakpoints) will be inherited&lt;/li&gt;
&lt;li&gt;Always create snapshot tests to monitor how an article changes over time&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/03/05/custom-editorial-features/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/03/05/custom-editorial-features/</guid>
        
        
        <category>javascript</category>
        
        <category>publishing</category>
        
        <category>reaction</category>
        
      </item>
    
      <item>
        <title>Why We Run Our Own Blog</title>
        <description>&lt;p&gt;This blog just passed the 7 year mark from our initial &lt;a href=&quot;/blog/2012/01/05/hello-world/&quot;&gt;&quot;Hello World&quot;&lt;/a&gt; post. We&#39;ve always built and hosted our
own blog, initially &lt;a href=&quot;/blog/2012/01/18/octopress-and-jekyll/&quot;&gt;using OctoPress&lt;/a&gt; but eventually migrating to just plain old Jekyll.&lt;/p&gt;

&lt;p&gt;Artsy uses 3 separate editorial platforms now, we built our own for &lt;a href=&quot;https://www.artsy.net/articles&quot;&gt;Artsy Magazine&lt;/a&gt;, use Medium for our &lt;a href=&quot;https://www.artsy.net/life-at-artsy&quot;&gt;Life
at Artsy blog&lt;/a&gt; and Jekyll for the engineering blog. There was a healthy debate about whether we would migrate
to one, or two systems, but I had pretty strong opinions on migrating the engineering blog to Medium and nipped
that in the bud pretty quickly.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;https://m.signalvnoise.com/signal-v-noise-exits-medium/&quot;&gt;Signal vs Noise&lt;/a&gt; being a high profile of a example of migrating to Medium and back again, I thought it&#39;s
worth taking the time to examine our reasoning for doing it ourselves.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Dependencies&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Dependencies&lt;/h2&gt;

&lt;p&gt;In programming, the process of creation rely on you depending on others. That ranges from operating systems, to
system dependencies like SQLite or VSCode to app level dependencies from CocoaPods/Node/Whatever. For this blog,
that we rely on GitHub&#39;s static site hosting, RubyGems + Bundler and Jekyll. Luckily for us, there are powerful
incentives for those projects to continue long into the future.&lt;/p&gt;

&lt;p&gt;That&#39;s not even too much of a worry either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If GitHub pages stop being a priority, we can switch Netlify or plain S3 in an hour (we already ship to netlify
for post draft previews)&lt;/li&gt;
&lt;li&gt;If RubyGems or Jekyll goes down, we can switch to another static site builder in another language,&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Because the code is some markdown, some HTML and CSS - that&#39;s all portable to whatever we want.&lt;/p&gt;

&lt;p&gt;We call the process of making sure you understand and vet the full stack your dependencies &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#own-your-dependencies&quot;&gt;&quot;Owning your
Dependencies&quot;&lt;/a&gt;, and in this case we&#39;re sitting on a long-lived and mature set of dependencies.&lt;/p&gt;

&lt;p&gt;To switch from our mature set of dependencies to a start-up which still hasn&#39;t found out how it can make money
greatly increases the long-term risks.&lt;/p&gt;

&lt;p&gt;Medium is totally incentivized to get your post in front of as many people as possible, and that&#39;s awesome.
However, as a business they&#39;ve not found a way to be profitable, and have taken a lot of &lt;a href=&quot;https://www.crunchbase.com/organization/medium&quot;&gt;VC cash&lt;/a&gt; which
eventually needs to be paid back. (Artsy has too, so yeah, that&#39;s kinda hypocritical, but we&#39;re not aiming to
disrupt &amp;amp; replace the existing &quot;writing online&quot; market we&#39;re &lt;a href=&quot;https://www.theverge.com/2017/7/18/15983712/artsy-fine-art-galleries-online-auction-sales&quot;&gt;augmenting&lt;/a&gt; the existing Art Industry.)&lt;/p&gt;

&lt;p&gt;When newspapers like &lt;a href=&quot;https://www.forbes.com/sites/theodorecasey/2017/08/14/why-medium-doesnt-matter-anymore/#1fea7cdf49ad&quot;&gt;Forbes&lt;/a&gt; and &lt;a href=&quot;https://www.bloomberg.com/opinion/articles/2017-01-05/why-medium-failed-to-disrupt-the-media&quot;&gt;Bloomberg&lt;/a&gt; are worried about the Medium business model, then
it doesn&#39;t look great for the longevity of your companies blog. For example, today Medium &lt;a href=&quot;https://write.as/blog/ending-our-medium-integration&quot;&gt;removed the developer
API&lt;/a&gt; for your posts. Folks who used Medium to make money have &lt;a href=&quot;http://www.niemanlab.org/2018/05/medium-abruptly-cancels-the-membership-programs-of-its-21-remaining-publisher-partners/&quot;&gt;found themselves surprised&lt;/a&gt; time
and time again when that changes.&lt;/p&gt;

&lt;p&gt;It&#39;s important to note here that I think a lot of this churn is reasonable, they are a start-up and that is
literally what start-ups do. Start-ups iterate through business plan ideas until they find one that scales in a way
that they want and that process takes time. It&#39;s when that ambiguity about what a company does or doesn&#39;t do with
your writing which makes it a dependency which doesn&#39;t pay its weight.&lt;/p&gt;

&lt;a name=&quot;L.branding&quot;&gt;&lt;/a&gt;
&lt;h2&gt;#branding&lt;/h2&gt;

&lt;p&gt;&lt;/article&gt;
&lt;a href=&#39;/images/hosting-our-own-blog/1.png&#39; style=&quot;&quot;&gt;
  &lt;img src=&quot;/images/hosting-our-own-blog/1.png&quot; alt=&quot;Screenshots&quot; style=&quot;&quot;&gt;
&lt;/a&gt;
&lt;article class=&quot;post&quot;&gt;&lt;/p&gt;

&lt;p&gt;I consider our blog, and the rest of the site, to be the canonical representation of the Artsy Engineering team
online. We&#39;ve carefully grown an Artsy Engineering aesthetic around it.&lt;/p&gt;

&lt;p&gt;In contrast, had we chosen to host on Medium, we&#39;d get a few templates and a highlight color. For example, check
out: &lt;a href=&quot;https://medium.com/airbnb-engineering&quot;&gt;AirBnB&lt;/a&gt;, &lt;a href=&quot;https://medium.com/harrys-engineering&quot;&gt;Harrys&lt;/a&gt;,
&lt;a href=&quot;https://medium.com/@Pinterest_Engineering&quot;&gt;Pintrest&lt;/a&gt;, &lt;a href=&quot;https://medium.com/vimeo-engineering-blog&quot;&gt;Vimeo&lt;/a&gt; or
&lt;a href=&quot;https://eng.lyft.com&quot;&gt;Lyft&lt;/a&gt;&#39;s pages.&lt;/p&gt;

&lt;p&gt;Not memorable at all, because you can&#39;t really work with the design constraints to do anything creative other than
a banner image and a color.&lt;/p&gt;

&lt;p&gt;These constrains become worse on a post page, where you completely lose any sense of connection with the company,
and the team the moment someone scrolls an inch until the footer. Your team&#39;s writing becomes just &quot;a medium post&quot;
at that point. You&#39;ve got limited options for attaching images, and no ability to use HTML/JS to showcase
&lt;a href=&quot;/blog/2017/07/06/React-Native-for-iOS-devs/#React&quot;&gt;problems&lt;/a&gt; &lt;a href=&quot;/blog/2018/03/18/ar/&quot;&gt;interactively&lt;/a&gt; or explore &lt;a href=&quot;http://artsy.github.io/blog/2019/01/23/artsy-engineering-hiring/&quot;&gt;new post styles&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These aren&#39;t blockers in any way, most of our posts don&#39;t do that - but the constraints mean you will never think
to try and explain something outside of those constraints.&lt;/p&gt;

&lt;p&gt;Then at the bottom of your post, readers are redirected to other posts from other teams. For example, when I opened
a post on Vimeo&#39;s announcement of &lt;a href=&quot;https://medium.com/vimeo-engineering-blog/announcing-psalm-v3-76ec78e312ce&quot;&gt;Psalm v3&lt;/a&gt; (a cool looking PHP dev tool), there were three recommended
posts: one was about missiles being fired in Syria, another was a beginners guide to PHP and then a third was how
to set up Docker to work with a PHP framework. They&#39;re not that related, maybe they all have the keyword of PHP
behind the scenes?&lt;/p&gt;

&lt;p&gt;&lt;/article&gt;
&lt;a href=&#39;/images/hosting-our-own-blog/3.jpg&#39; style=&quot;&quot;&gt;
  &lt;img src=&quot;/images/hosting-our-own-blog/3.jpg&quot; alt=&quot;Artsy x React Native&quot; style=&quot;&quot;&gt;
&lt;/a&gt;
&lt;article class=&quot;post&quot;&gt;&lt;/p&gt;

&lt;p&gt;Writing takes a lot of time, and provides so much value. It should be presented as &lt;a href=&quot;https://github.com/artsy/README/blob/cb73cb/culture/what-is-artsy.md#quality-worthy-of-art&quot;&gt;quality worthy of art&lt;/a&gt;.
By using to a generic platform for your writing, you&#39;re trading that simplicity for building your team&#39;s online
presence.&lt;/p&gt;

&lt;a name=&quot;Breaking.the.Sandbox&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Breaking the Sandbox&lt;/h2&gt;

&lt;p&gt;We&#39;ve grown to need to showcase quite a few different types of posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Small posts that with only a few paragraphs&lt;/li&gt;
&lt;li&gt;Long-form posts that take forever to read&lt;/li&gt;
&lt;li&gt;Long-form interview style posts for many contributors&lt;/li&gt;
&lt;li&gt;Sequential posts, in the form of a series&lt;/li&gt;
&lt;li&gt;YouTube embed posts&lt;/li&gt;
&lt;li&gt;Announcements&lt;/li&gt;
&lt;li&gt;Guest Posts&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;None of these need to be treated the same, and since we created the blog, we&#39;ve added:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Category pages - &lt;a href=&quot;/blog/categories/graphql/&quot;&gt;GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Author pages - &lt;a href=&quot;/author/orta/&quot;&gt;mine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Site series - &lt;a href=&quot;/series/react-native-at-artsy/&quot;&gt;React Native at Artsy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/artsy.github.io/tree/9f65b5/_layouts&quot;&gt;4 separate post layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Multi-author posts - &lt;a href=&quot;/blog/2018/10/19/pair-programming/&quot;&gt;Pair Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/2017/07/15/Comments-are-on/&quot;&gt;GitHub Issue Powered Comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Real-time &lt;a href=&quot;https://github.com/artsy/artsy.github.io/pull/332&quot;&gt;search&lt;/a&gt; on our static pages&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When we&#39;ve wanted to add a new feature to the blog to fit a particular post, we added the feature. This gave us the
chance to not constrain ourselves in ideas. For example, we&#39;ve explored &lt;a href=&quot;https://github.com/artsy/artsy.github.io/issues/355#issuecomment-315605280&quot;&gt;building a podcast&lt;/a&gt; into our blog
treating it as a first class feature in ways that no-one would ever build if it was a platform. Or we&#39;re interested
in making a way to highlight useful links for the&lt;/p&gt;

&lt;p&gt;All of those features were made by people whose background was iOS development, which gave us the chance to expand
the horizons of our engineers knowledge.&lt;/p&gt;

&lt;a name=&quot;Blog.as.Code&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Blog as Code&lt;/h2&gt;

&lt;p&gt;Because our &lt;a href=&quot;https://github.com/artsy/artsy.github.io/tree/9f65b5/_posts&quot;&gt;blog posts&lt;/a&gt; are markdown in a &lt;a href=&quot;https://github.com/artsy/artsy.github.io&quot;&gt;GitHub repo&lt;/a&gt;, we don&#39;t treat a review for a blog post any
different than a normal pull request for code. It means our &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/peril.md&quot;&gt;company Peril rules&lt;/a&gt; will run, and all of
engineering has the ability to contribute to the review process.&lt;/p&gt;

&lt;p&gt;Having a static site in a GitHub repo means we don&#39;t have to special case our writing in comparison to every-day
work.&lt;/p&gt;

&lt;a name=&quot;Call.to.Action&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Call to Action&lt;/h2&gt;

&lt;p&gt;Using Medium is a very reasonable call if you are just trying to get some writing out and online as fast as
possible. If you want to be scrappy and announce something - do it. If you want to do something more serious
though, you should really consider owning your engineering blog and identity. Giving that away to Medium in
exchange for hosting your content and getting more eyeballs isn&#39;t a great trade.&lt;/p&gt;

&lt;p&gt;There aren&#39;t many shortcuts for getting folks to visit your blog, and relying on Mediums&#39; recommendations or SEO
isn&#39;t a good path compared to say Twitter adverts or just writing interesting stuff and letting folks know via a
mailing list.&lt;/p&gt;

&lt;p&gt;If self-hosting is an issue, Medium is not the only payer in eco-system, &lt;a href=&quot;https://wordpress.com&quot;&gt;Wordpress&lt;/a&gt;&#39;s company
&lt;a href=&quot;https://automattic.com&quot;&gt;Automattic&lt;/a&gt; has been profitable for years and hosts all sorts of really big blogs. It&#39;s not going anywhere,
and you have the ability to customize it to your style and use a whole massive marketplace of plugins (free and
paid for) - it&#39;s a really great choice.&lt;/p&gt;

&lt;p&gt;However, it&#39;s really worth noting how low the barrier to entry it is now to create a blog using a static site
generator:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; - Ruby, the default for GitHub pages and lowest barrier to entry.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;gem install jekyll bundler
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;jekyll new myblog
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myblog
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.org&quot;&gt;Gatsby&lt;/a&gt; - JS, the project we regularly consider moving our blog to. JS folks have such a great focus on
developer experience, and the abstraction of having an in-direction layer for your content via an internal
GraphQL API for your static site is a very, very smart abstraction which will take them a long way.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;npx gatsby new myblog https://github.com/gatsbyjs/gatsby-starter-blog
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myblog
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;yarn dev
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gohugo.io&quot;&gt;Hugo&lt;/a&gt; - Go, looks pretty reasonable if you have strong opinions against the others somehow&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;brew install hugo
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;hugo new site myblog
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myblog
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;git init
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;theme = &amp;quot;ananke&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; config.toml
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;hugo new posts/my-first-post.md
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;hugo server -D
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;All of these come with some sort of theme or templating support so getting started could probably take about an
hour to get a static site up and running using a host like &lt;a href=&quot;https://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt;, &lt;a href=&quot;https://www.netlify.com&quot;&gt;Netlify&lt;/a&gt; or &lt;a href=&quot;https://zeit.co/now&quot;&gt;Now&lt;/a&gt;.
All three of these you can set up automatic hosting from GitHub in about 10-15m.&lt;/p&gt;

&lt;!-- prettier-ignore-start --&gt;


&lt;!-- prettier-ignore-end --&gt;

</description>
        <pubDate>Wed, 30 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/01/30/why-we-run-our-blog/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/01/30/why-we-run-our-blog/</guid>
        
        
        <category>dependencies</category>
        
        <category>tooling</category>
        
      </item>
    
      <item>
        <title>From TSLint to ESLint, or How I Learned to Lint GraphQL Code</title>
        <description>&lt;p&gt;At the beginning of January we discovered an interesting note in &lt;a href=&quot;https://github.com/Microsoft/TypeScript/issues/29288&quot;&gt;TypeScript&#39;s roadmap&lt;/a&gt; about linting:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In a survey we ran in VS Code a few months back, the most frequent theme we heard from users was that the linting
experience left much to be desired. Since part of our team is dedicated to editing experiences in JavaScript, our
editor team set out to add support for both TSLint and ESLint. However, we noticed that there were a few
architectural issues with the way TSLint rules operate that impacted performance. Fixing TSLint to operate more
efficiently would require a different API which would break existing rules (unless an interop API was built like
what wotan provides).&lt;/p&gt;

&lt;p&gt;Meanwhile, ESLint already has the more-performant architecture we&#39;re looking for from a linter. Additionally,
different communities of users often have lint rules (e.g. rules for React Hooks or Vue) that are built for
ESLint, but not TSLint.&lt;/p&gt;

&lt;p&gt;Given this, our editor team will be focusing on leveraging ESLint rather than duplicating work. For scenarios
that ESLint currently doesn&#39;t cover (e.g. semantic linting or program-wide linting), we&#39;ll be working on sending
contributions to bring ESLint&#39;s TypeScript support to parity with TSLint. As an initial testbed of how this works
in practice, we&#39;ll be switching the TypeScript repository over to using ESLint, and sending any new rules
upstream.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;At Artsy we&#39;ve been using TSLint for a few years now; it&#39;s worked well for us, and we&#39;ve even written our own
&lt;a href=&quot;https://github.com/relay-tools/tslint-plugin-relay&quot;&gt;custom rules&lt;/a&gt;. However, given the vastness of the JS ecosystem
and how fast it moves, it&#39;s easy to recognize this announcement as an exciting moment for tooling simplicity.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;To give an example, anyone who has built a culture around Airbnb&#39;s
&lt;a href=&quot;https://github.com/airbnb/javascript&quot;&gt;JavaScript style guide&lt;/a&gt; will instantly recognize the conundrum they&#39;re in
when migrating to TypeScript:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;100%&quot; alt=&quot;a reddit user discovers their linting rules no longer work&quot; src=&quot;https://user-images.githubusercontent.com/236943/51884369-d845b380-233b-11e9-9d2f-102cc8a3a78b.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;This means that teams maintaining legacy JavaScript codebases will no longer have to &lt;em&gt;also&lt;/em&gt; maintain
&lt;a href=&quot;https://github.com/palantir/tslint-react&quot;&gt;two&lt;/a&gt; &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react&quot;&gt;versions&lt;/a&gt; of often nearly &lt;a href=&quot;https://github.com/prettier/tslint-plugin-prettier&quot;&gt;identical&lt;/a&gt;
&lt;a href=&quot;https://github.com/prettier/prettier-eslint&quot;&gt;rule-sets&lt;/a&gt;. All of the aggregate culture that builds up around linting can now be shared in a
forward and backward facing way, making the often-daunting process of migrating a codebase from JavaScript to
TypeScript a much easier sell.&lt;/p&gt;

&lt;p&gt;With this in mind we wanted to give the new officially-sanctioned &lt;a href=&quot;https://github.com/typescript-eslint/typescript-eslint&quot;&gt;typescript-eslint&lt;/a&gt; project a
spin and document our findings.&lt;/p&gt;

&lt;a name=&quot;Setup&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Setup&lt;/h3&gt;

&lt;p&gt;To get started, install the necessary dependencies:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yarn install -D eslint typescript @typescript-eslint/eslint-plugin
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Then create a new &lt;code&gt;.eslintrc.js&lt;/code&gt; and add a bit of setup:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;@typescript-eslint/parser&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;@typescript-eslint&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;eslint:recommended&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;plugin:@typescript-eslint/recommended&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;parserOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;ecmaVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./tsconfig.json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;sourceType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;module&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Note that &lt;code&gt;parserOptions.project&lt;/code&gt; points to your &lt;code&gt;tsconfig.json&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;json&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;compilerOptions&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Next, add a bit of TypeScript to a file&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;export const foo: any = &amp;#39;bar&amp;#39;&amp;quot;&lt;/span&gt; &amp;gt; index.ts
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;and run the linter:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yarn eslint . --ext .ts,.tsx
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;~/index.ts
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  1:12  warning  Unexpected any. Specify a different &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;  @typescript-eslint/no-explicit-any
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;✖ &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; problem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; errors, &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; warnings&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Very nice!&lt;/p&gt;

&lt;p&gt;Now lets expand the example a bit and add something more sophisticated, which in Artsy&#39;s use-case is commonly
GraphQL:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yarn add -D eslint-plugin-graphql graphql-tag apollo
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Update &lt;code&gt;tsconfig.json&lt;/code&gt; and let it know we&#39;ll be using &lt;code&gt;node&lt;/code&gt; for imports:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;json&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;compilerOptions&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;moduleResolution&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;node&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;In &lt;code&gt;.eslintrc.js&lt;/code&gt; add these rules (while noting the addition of &lt;code&gt;graphql&lt;/code&gt; to &lt;code&gt;plugins&lt;/code&gt; and
&lt;code&gt;graphql/template-strings&lt;/code&gt; under &lt;code&gt;rules&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;@typescript-eslint/parser&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;@typescript-eslint&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;graphql&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;eslint:recommended&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;plugin:@typescript-eslint/recommended&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;parserOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;ecmaVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./tsconfig.json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;sourceType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;module&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;graphql/template-strings&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;s2&quot;&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;schemaJsonFilepath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./schema.json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;graphql&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;For GraphQL to know what to lint, we&#39;ll need a schema. Thankfully the
&lt;a href=&quot;https://etmdb.com/graphql&quot;&gt;Ethiopian Movie Database&lt;/a&gt; has our back :)&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yarn apollo service:download --endpoint https://etmdb.com/graphql
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  ✔ Loading Apollo Project
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  ✔ Saving schema to schema.json
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;✨  Done in 2.18s.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Back in &lt;code&gt;index.ts&lt;/code&gt;, add this bit of code:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graphql&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;graphql-tag&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MovieQuery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graphql&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MoveQuery&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;allCinemaDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2017-10-04&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2010-01-01&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;edges&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;nodez&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;nx&quot;&gt;slug&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;nx&quot;&gt;hallName&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;And run the linter:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yarn eslint . --ext .ts,.tsx
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;~/index.ts
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  7:9  error  Cannot query field &lt;span class=&quot;s2&quot;&gt;&amp;quot;nodez&amp;quot;&lt;/span&gt; on &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;CinemaDetailNodeEdge&amp;quot;&lt;/span&gt;. Did you mean &lt;span class=&quot;s2&quot;&gt;&amp;quot;node&amp;quot;&lt;/span&gt;?  graphql/template-strings
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;✖ &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; problem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; error, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; warnings&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Ahh yes, I meant &lt;a href=&quot;https://i.redd.it/tfugj4n3l6ez.png&quot;&gt;&lt;code&gt;node&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;Bonus:.VSCode.Integration&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Bonus: VSCode Integration&lt;/h3&gt;

&lt;p&gt;As developers, we like our tools to work for us, and in 2019 the tool that &lt;em&gt;seems&lt;/em&gt; to do that best just happens to
be a brilliant open source product from Microsoft. There were a couple unexpected configuration issues when we were
setting this up, but thankfully they&#39;re easy fixes.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir .vscode &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; touch .vscode/settings.json
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Then add a couple settings:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;json&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;editor.formatOnSave&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;eslint.autoFixOnSave&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;eslint.validate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;language&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;autoFix&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;language&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;javascriptreact&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;autoFix&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;language&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;typescript&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;autoFix&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;language&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;typescriptreact&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;autoFix&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;tslint.enable&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Format on save, fix on save, &lt;em&gt;autofix&lt;/em&gt; on save, tell ESLint to recognize &lt;code&gt;.ts&lt;/code&gt; (and &lt;code&gt;.tsx&lt;/code&gt;, for the React folks)
then disable &lt;code&gt;tslint&lt;/code&gt; so that &lt;code&gt;eslint&lt;/code&gt; can do its thing:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;698&quot; alt=&quot;eslint displaying graphql error in VSCode IDE&quot; src=&quot;https://user-images.githubusercontent.com/236943/51884366-d380ff80-233b-11e9-8128-6c39e210dd31.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;Now ESLint will show you right where your GraphQL error is from within VSCode. Pretty sweet.&lt;/p&gt;

&lt;p&gt;Be sure to read &lt;a href=&quot;https://eslint.org/blog/2019/01/future-typescript-eslint&quot;&gt;The future of TypeScript on ESLint&lt;/a&gt; for more details.&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/01/29/from-tslint-to-eslint/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/01/29/from-tslint-to-eslint/</guid>
        
        
        <category>eslint</category>
        
        <category>graphql</category>
        
        <category>tslint</category>
        
        <category>typescript</category>
        
      </item>
    
      <item>
        <title>How Artsy Hires Engineers</title>
        <description>&lt;p&gt;Interviewing is hard. Interviewers want to make sure they&#39;re hiring the person who will add the most value to their
team; candidates want to make sure they&#39;re joining a company that aligns with their goals and perspectives.&lt;/p&gt;

&lt;p&gt;Recent trends in hiring are white-boarding sessions, trivia questions, and hours of take-home assignments. At
Artsy, we don&#39;t use any of these. We often get asked why not - and how we assess technical skill without them.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;We think our interview process at Artsy is unique, but we also think our interview process is great. We&#39;d love to
see the tech community examine its hiring practices, and hopefully to adopt some of what&#39;s made our hiring process
successful. Focusing on knowledge and facts that are already acquired is one way to approach hiring; we prefer to
look at how a person can fill a gap in our team and help us grow.&lt;/p&gt;

&lt;p&gt;&lt;aside&gt;
  &lt;div class=&quot;question&quot;&gt;
    &lt;h3&gt;What surprised you about the hiring process at Artsy while you were a candidate?&lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/ash.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Ash Furrow says...&lt;/p&gt;
    &lt;p&gt;What most surprised me at the time was &lt;em&gt;who&lt;/em&gt; was interviewing me. I had a teleconference screening with Artsy&#39;s now-CTO before moving on to in-person interviews. Since I was living in Amsterdam at the time, Artsy flew me to its nascent London office to meet two interviewers: a data engineer and a member of (what was then) the Arts team.&lt;/p&gt;
    &lt;p&gt;I was surprised, but encouraged, to be speaking with someone who wasn&#39;t an engineer. They asked me questions to find out what motivated me, to evaluate how well those motivations would help Artsy achieve its mission. It was a natural fit!&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/lily.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Lily Pace says...&lt;/p&gt;
    &lt;p&gt;Everything. I was pleasantly surprised by how different the interview process at Artsy was from my previous experiences, which felt more like standardized tests than conversations. The underlying presumption with &quot;traditional&quot; tech hiring practices is that candidates are somehow trying to trick their way into positions they aren’t qualified for. It&#39;s no wonder that impostor syndrome is so prevalent in underrepresented groups when the interview process is set up like an interrogation.&lt;/p&gt;
    &lt;p&gt;I felt like the interviewers at Artsy had read my resume and cv and taken it at face value, so the interview was spent diving deeper into my skill-set and personality and determining compatibility, instead of trying to identify gaps in my knowledge.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/steve.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Steve Hicks says...&lt;/p&gt;
    &lt;p&gt;With 20 years (!!!) of experience as a software engineer, I&#39;ve seen my share of interviews - from both sides. On the hiring side, I&#39;ve said for years that technical interviews are unnecessary. If I can get a 30 minute conversation with a candidate, I feel like I can learn enough about them to know if they can do the job from a technical perspective. It&#39;s much less about knowing trivia or syntax, and much more about having the personality to solve problems.&lt;/p&gt;
    &lt;p&gt;I&#39;d never experienced that on the candidate side, though. When I did, I definitely felt like Artsy had forgotten part of the interview. Where was the whiteboard? The homework? People looking over my shoulder while I coded an anagram-checker? A technical challenge has been a part of every interview I&#39;ve done as a candidate - until Artsy.&lt;/p&gt;
  &lt;/div&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;Artsy&#39;s process of hiring new engineers was created and is maintained &lt;em&gt;by&lt;/em&gt; our current engineers. It has evolved
over time as we learn new lessons and new perspectives join our team. Our process has always been driven by a
top-down culture of respect for candidates, which aligns with
&lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#artsy-values&quot;&gt;our company values&lt;/a&gt;. Our team
currently has 36 engineers, and we refreshed our hiring practices last year to support our team&#39;s growth; we hired
a dozen engineers in 2018. We don&#39;t use recruiters (though we did to hire our recent VP of Engineering).&lt;/p&gt;

&lt;p&gt;Our former Director of Web Engineering has a blog post where he
&lt;a href=&quot;https://www.zamiang.com/post/learning-from-artsy-how-to-hire-awesome-engineers&quot;&gt;describes Artsy&#39;s hiring process&lt;/a&gt;.
Though some specifics have since changed, the foundations remain the same.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If Artsy has a secret sauce, it is how it hires. All else falls from the assumption that they have hired the best
people who want to work together to achieve Artsy’s mission.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Our hiring process starts with an informational, where candidates are met for a coffee or over a teleconference
call. We have &lt;a href=&quot;https://github.com/artsy/README/blob/master/playbooks/informationals.md&quot;&gt;public documentation&lt;/a&gt; so
candidates can know what to expect. We do a lot of these and move candidates who we think would succeed at Artsy on
to in-person interviews. The interviews last 3 hours and are split across four 45-minute
&lt;a href=&quot;https://www.livecareer.com/career/advice/interview/behavioral-interviewing&quot;&gt;behavioral interviews&lt;/a&gt;, conducted by
engineers and other colleagues, ranging from gallery liaisons to product managers to editorial writers. Artsy
generally, and Engineering specifically, have both significantly invested in helping interviewers be effective and
consistent; this includes documentation, question banks, and &lt;a href=&quot;https://managingbias.fb.com&quot;&gt;unconscious bias&lt;/a&gt;
training.&lt;/p&gt;

&lt;p&gt;Each interviewer is given key areas to focus on, based on the candidate&#39;s background. We have documentation
specifying how to evaluate each of these areas, including example questions. These areas include, but aren&#39;t
limited to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Comprehension of Artsy&lt;/li&gt;
&lt;li&gt;Artsy company values alignment&lt;/li&gt;
&lt;li&gt;Ability to communicate complex ideas&lt;/li&gt;
&lt;li&gt;Learning and adaptation&lt;/li&gt;
&lt;li&gt;Self-learning and drive&lt;/li&gt;
&lt;li&gt;Independence and teamwork&lt;/li&gt;
&lt;li&gt;Systems development&lt;/li&gt;
&lt;li&gt;Product knowledge&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;After the interview, feedback is written up as quickly as possible. To limit bias, interviewers can&#39;t see each
other&#39;s feedback until after they write up their own. The write-up includes a recommendation: do you think we
should move on to reference checks? Answers are either &quot;strong yes&quot;, &quot;yes&quot;, &quot;no&quot;, or &quot;strong no&quot;; after everyone
has completed their write-ups, the interviewers debrief and reflect on how to do a better job next time. Their
feedback is used by the hiring manager to decide whether to move on to reference checks.&lt;/p&gt;

&lt;p&gt;Quoting again from our former Director of Web&#39;s blog post:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Artsy believes that &#39;references are not a defense against hiring poorly, they are a way to hire great people&#39;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Artsy&#39;s reference checks are in-depth and deserve their own blog post; they are &lt;em&gt;key&lt;/em&gt; to our hiring process. We
know that job interviewers only evaluate how good someone is at interviewing, so we put a larger emphasis than most
companies on references. The most accurate predictor of future job performance is past job performance, not how
well someone can perform in an interview.&lt;/p&gt;

&lt;p&gt;If we decide to hire the candidate, we make them a job offer. Artsy offers what we think is a fair wage based on
the local market and the candidate; we do not low-ball candidates and we don&#39;t negotiate on compensation.&lt;/p&gt;

&lt;a name=&quot;What.s.wrong.with.typical.hiring.practices.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What&#39;s wrong with typical hiring practices?&lt;/h2&gt;

&lt;p&gt;There are many tactics for assessing a candidate&#39;s technical abilities, but we&#39;ve found that many are unfair to the
candidate. Some strategies put unnecessary pressure on the candidate. Some select against qualified candidates who
have competing responsibilities outside work. Some unwittingly weed out underrepresented applicants, even at a time
when companies are trying to diversify their teams.&lt;/p&gt;

&lt;a name=&quot;In-person.coding.challenges&quot;&gt;&lt;/a&gt;
&lt;h3&gt;In-person coding challenges&lt;/h3&gt;

&lt;p&gt;The intention of in-person coding challenges is to verify that the engineer can &quot;actually write code.&quot; This
strategy puts excessive pressure on the candidate to perform in front of an audience. This is usually not a good
reflection of what the candidate would be doing if they were hired. Sometimes it &lt;strong&gt;is&lt;/strong&gt; a reflection of the
stressful conditions on the team, and the act of applying pressure to the candidate is intentional, to measure
their ability to handle it. In either case, we don&#39;t feel like this is how we want to measure engineers; it just
doesn&#39;t reflect reality.&lt;/p&gt;

&lt;a name=&quot;Whiteboard.interviews&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Whiteboard interviews&lt;/h3&gt;

&lt;p&gt;One intention of whiteboard interviews is to reduce the stress on the candidate, because they don&#39;t have to worry
about code syntax while under a microscope. These types of interviews still lead to
&lt;a href=&quot;https://code.dblock.org/2012/12/08/five-ways-to-torture-candidates-in-a-technical-interview.html&quot;&gt;stressful conditions&lt;/a&gt;,
though, and they don&#39;t provide a good measure of what makes a great teammate or even a great developer. Again,
sometimes the pressure is intentional, to see how the candidate reacts.&lt;/p&gt;

&lt;p&gt;It can be very difficult to find a problem that is succinct enough for a whiteboard exercise but still reflective
of the work the candidate will actually be doing on the job. The ability to write an algorithm to search a binary
tree might be reflective of whether a candidate has a traditional Computer Science degree, but doesn&#39;t necessarily
speak to their ability to build complex interfaces or streamline performance. More importantly, whether or not they
can write a binary search tree from scratch on a whiteboard doesn&#39;t even necessarily speak to their ability to
&lt;em&gt;use&lt;/em&gt; search trees in day-to-day work. Questions like this can eliminate excellent developers who took a
non-traditional approach to their knowledge building but are still highly capable.&lt;/p&gt;

&lt;a name=&quot;Sample.code&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Sample code&lt;/h3&gt;

&lt;p&gt;Sometimes a company will request a code sample from candidates - after all, what shows off their ability to code
better than their actual code? The downfall of this strategy is that it eliminates developers who don&#39;t have code
they can share. Many great engineers work for closed-source companies; many great engineers have family
responsibilities that prevent them from contributing to open-source at night.&lt;/p&gt;

&lt;p&gt;It is also important to consider the insularity and biases that exist in the open source community that can make
contributing more difficult for developers from underrepresented groups. A study published in the PeerJ Computer
Science journal found that women’s contributions to open source projects were accepted more frequently than men’s
contributions when the gender of the contributor was unknown. However, when the gender of the contributor was
apparent, men&#39;s contributions were
&lt;a href=&quot;https://code.likeagirl.io/gender-bias-in-open-source-d1deda7dec28&quot;&gt;accepted more frequently than women&#39;s&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;Take-home.challenges&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Take-home challenges&lt;/h3&gt;

&lt;p&gt;The most recent trend in hiring is the take-home exercise. The goal is honorable - have the candidate produce code
on their own time, so they aren&#39;t overwhelmed with the pressure of an audience. We’ve found that requiring this
early in the process is unfair, and including it later in the process is uninformative; by the time a take-home
challenge would be appropriate, we have already evaluated the candidate&#39;s technical skills to our satisfaction
(more on that later).&lt;/p&gt;

&lt;p&gt;This strategy also assumes the candidate has time to work on homework. Many single parents do not for example, nor
do engineers who care for family members. There can also be misalignment on the expected time to complete a
take-home challenge. While the exercise might take a current engineer at the company 2 hours to complete, that
doesn&#39;t consider several factors: (1) a candidate might not be familiar with all technologies requested, and can
easily lose time to research and learning; (2) the candidate wants to look good, so they&#39;re likely to work longer
than you expect; and (3) the candidate might be interviewing for several companies at once, and have multiple
competing assignments to work on.&lt;/p&gt;

&lt;p&gt;Many companies use take-home challenges early in the hiring process to shift the burden of evaluation from the
company on to the candidates themselves. This unfairly excludes lots of potentially amazing colleagues.&lt;/p&gt;

&lt;p&gt;&lt;aside&gt;
  &lt;div class=&quot;question&quot;&gt;
    &lt;h3&gt;Why do you think these kinds of bad hiring practices are so common in the tech industry? And what sets hiring practices in tech apart from hiring in other industries?&lt;/h3&gt;
  &lt;/div&gt;
    &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/steve.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Steve Hicks says...&lt;/p&gt;
    &lt;p&gt;We are very logical people in the tech industry. We want to create algorithms or heuristics for everything, including hiring. Using a yardstick like &quot;Fizz Buzz&quot; or trivia questions allows us to easily narrow down the candidate pool. It&#39;s a simple, intentional form of gate-keeping. The hiring algorithm is much easier to write when it&#39;s &quot;Oh, you don&#39;t know what a closure is? Sorry, we&#39;re not interested.&quot; It&#39;s much harder to write a hiring algorithm that respects nuance: &quot;well...it depends. Maybe you have different experiences than I do. It&#39;ll take some digging to find out if our experiences will complement each other.&quot;&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/lily.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Lily Pace says...&lt;/p&gt;
    &lt;p&gt;I think the tech industry has an elitism problem, and this is reflected in the way candidates are evaluated. There’s a general feeling in some parts of the industry that what we do is different and somehow elevated from other professions, that engineering is a skill that only a select few are capable of, not something that anyone can learn with the right training and enthusiasm. Making candidates go through a gauntlet of challenges during the interview process reinforces this idea.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/ash.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Ash Furrow says...&lt;/p&gt;
    &lt;p&gt;I think when looking at the current state of the computer programming industry, and its hiring practices, we need to pay special attention to its history. The original computer programmers of the twentieth century were women, but they were &lt;a href=&quot;https://www.theguardian.com/careers/2017/aug/10/how-the-tech-industry-wrote-women-out-of-history&quot;&gt;systematically pushed out of the industry&lt;/a&gt;. One way they were pushed out was through discriminatory hiring practices, especially interview questions and techniques specifically designed to exclude non-white, non-male applicants. Sadly, these hiring practices persist, even if their original motivations have been obscured by time.&lt;/p&gt;
  &lt;/div&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;a name=&quot;What.we.do.instead&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What we do instead&lt;/h2&gt;

&lt;p&gt;In addition to the above strategies not being fair, we&#39;ve found that they measure things that are secondary to what
we&#39;re looking for.&lt;/p&gt;

&lt;p&gt;Artsy is more complicated than FizzBuzz. Too complicated for any one engineer to build, in fact. Individual
engineers working alone can’t build the software Artsy needs to succeed – they must work together. So the skills we
evaluate for are things like empathy, communication, and kindness. Not that technical skills aren’t important, but
the ability to communicate and learn is more important.&lt;/p&gt;

&lt;p&gt;Engineers who excel at empathy, communication, and kindness can pick up the technical stuff once they&#39;re hired;
personal and interpersonal skills are harder to teach. Adding a colleague to the team who lacks these skills could
harm the culture we&#39;ve built.&lt;/p&gt;

&lt;p&gt;When you interview with Artsy as an engineer, you won&#39;t just meet other engineers and a manager. You&#39;ll meet with
people from other departments too. If you&#39;re hired as an Artsy engineer, you&#39;re going to work with folks from all
across the company - we want to make sure you can communicate with them because that&#39;s something we do every day.&lt;/p&gt;

&lt;p&gt;&lt;aside&gt;
  &lt;div class=&quot;question&quot;&gt;
    &lt;h3&gt;How has this impacted your day-to-day work at Artsy so far?&lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/lily.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Lily Pace says...&lt;/p&gt;
    &lt;p&gt;I had a negative experience in the past with a coworker who lacked empathy and boundaries and made me feel unwelcome and othered as the only woman on the team and someone from a non-traditional background. It made me afraid to ask for help and stifled my progress. This experience made me hesitant to open up to new coworkers, especially when I needed assistance. Because Artsy evaluates candidates based on empathy, communication, and kindness, I arrived with a &lt;a href=&quot;https://medium.com/artsy-blog/what-it-feels-like-to-work-in-a-supportive-environment-for-female-engineers-3c994a001007&quot;&gt;level of trust in my new coworkers&lt;/a&gt; that usually takes weeks or months to develop. &lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/steve.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Steve Hicks says...&lt;/p&gt;
    &lt;p&gt;In most of my previous jobs, it&#39;s taken me a while to learn who I can be vulnerable around and who I can&#39;t. At Artsy I have quickly learned that I don&#39;t need to worry about it. I feel an incredible sense of psychological safety with the Artsy team. I can be vocal about not understanding something, and I can ask for help without feeling like a burden or fool.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/ash.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Ash Furrow says...&lt;/p&gt;
    &lt;p&gt;I&#39;m a sensitive person. I don&#39;t like pointless or inflammatory conflict – I find it distracting and counterproductive. However, I can relax and let my guard down at Artsy. My sensitivity to how others are feeling is a part of my contributions to the team, and I&#39;m able to fold the emotional wellbeing that &lt;strong&gt;I&lt;/strong&gt; get from everyone back into our team: a sort of constantly-accelerating feedback loop of good feelings.&lt;/p&gt;
  &lt;/div&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;a name=&quot;But.we.still.evaluate.technical.aptitude&quot;&gt;&lt;/a&gt;
&lt;h2&gt;But we still evaluate technical aptitude&lt;/h2&gt;

&lt;p&gt;Technical aptitude is less important to us than interpersonal skills, but it is still important. Note that we said
&quot;aptitude,&quot; not &quot;skills&quot;: we don&#39;t expect our engineers to already know everything about the tech stack we&#39;re
using. Instead, we expect them to have a strong ability to learn our stack and use it effectively once they have.
(This is touched on in our docs on
&lt;a href=&quot;https://github.com/artsy/README/blob/master/careers/juniors.md&quot;&gt;what we look for in junior engineers&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;So if we skip all the usual tactics for evaluating technical aptitude, how do we do it? &lt;strong&gt;By talking to people&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We learn a lot about candidates in their interviews. We&#39;ll have a conversation with them about technology. Instead
of white-boarding, we ask them to describe what they like about their favorite library, or what they wish they
could change. We ask them to describe some legacy code they’ve worked with, and ask them how they think it got that
way. We’re looking for a mix of technical skills as well as empathy and an ability to communicate nuanced ideas.&lt;/p&gt;

&lt;a name=&quot;References.are.important.to.us&quot;&gt;&lt;/a&gt;
&lt;h2&gt;References are important to us&lt;/h2&gt;

&lt;p&gt;We also learn a lot through reference checks. Our reference checks aren&#39;t simply validation of your employment
history - they are a 30 minute-long conversation with each of your three references that go into detail about your
work history and career growth. It&#39;s quite an in-depth conversation, with questions structured to dig into
specifics about the candidate&#39;s behavior.&lt;/p&gt;

&lt;p&gt;An Artsy reference call might include the following structured questions:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In your capacity as [relationship to the candidate], how many people have you worked with in the candidate&#39;s
role?&lt;/p&gt;

&lt;p&gt;Okay, in &lt;em&gt;just&lt;/em&gt; terms of job performance, how you rank the candidate out of that [X] many people?&lt;/p&gt;

&lt;p&gt;Okay, finally, what&#39;s the difference between [the candidate&#39;s rank] and number one? How would the candidate need
to grow to get to number one?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The first question establishes the context for the reference. The second question primes the reference to use that
context when answering the next question. The third question is what we&#39;re &lt;em&gt;actually&lt;/em&gt; interested in. These aren&#39;t
easy or comfortable questions, but they give us an insight into the candidate&#39;s career, history, and areas to grow.&lt;/p&gt;

&lt;p&gt;Fully half of our decision to make an offer or not is based on our reference checks. Artsy Engineering candidates
go through the same reference check process as anyone applying for a job at Artsy, with Engineers sitting in on the
call with Artsy&#39;s hiring staff.&lt;/p&gt;

&lt;a name=&quot;But.seriously..we.really.care.about.the.personal.side&quot;&gt;&lt;/a&gt;
&lt;h3&gt;But seriously, we really care about the personal side&lt;/h3&gt;

&lt;p&gt;We also make sure every interview ends amicably. No candidate should feel bad after interviewing with Artsy, even
if we don&#39;t give them an offer. This seems self-evident to us, given our values, but it makes a lot of business
sense to maintain our reputation as an engineering team.&lt;/p&gt;

&lt;a name=&quot;Our.hiring.practice.philosophy&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Our hiring practice philosophy&lt;/h2&gt;

&lt;p&gt;One of our core values at Artsy is that
&lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#people-are-paramount&quot;&gt;People Are Paramount&lt;/a&gt;.
We like to think that our interview process was built to reflect this.&lt;/p&gt;

&lt;p&gt;We see the interview process as an opportunity to build a relationship with a candidate. We talk to them to find
out if they&#39;re a good fit for Artsy, and we help them decide if Artsy is a good fit for them. Our hiring process
focuses more on human skills than most processes do. It&#39;s not perfect, but it has served us well.&lt;/p&gt;

&lt;p&gt;&lt;aside&gt;
  &lt;div class=&quot;question&quot;&gt;
    &lt;h3&gt;Where do you still think Artsy has to grow, in terms of how it hires engineers?&lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/lily.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Lily Pace says...&lt;/p&gt;
    &lt;p&gt;I think Artsy is really unique and innovative in how it evaluates candidates and I think the more we can express this in our job postings the better. Stressing alignment with our values and an ability to learn and posting fewer hard requirements are some simple ways to convey to potential applicants that we evaluate differently.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/ash.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Ash Furrow says...&lt;/p&gt;
    &lt;p&gt;I think one area we&#39;ve historically struggled with, and still do, is sourcing candidates from a wide range of backgrounds. Artsy Engineering&#39;s hiring pool still draws heavily from the professional networks of existing Artsy staff; while this has a lot of benefits, it also has the potential to exclude groups who aren&#39;t already represented on our team.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/steve.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Steve Hicks says...&lt;/p&gt;
    &lt;p&gt;I agree with Ash. I think all companies hire based on their employees&#39; networks, because that&#39;s the easiest way to find people. &lt;a href=&quot;https://twitter.com/seldo/&quot;&gt;Laurie Voss&lt;/a&gt; talked about this recently on &lt;a href=&quot;https://reactpodcast.simplecast.fm/33&quot;&gt;the React Podcast&lt;/a&gt;. He pointed out that diversity at NPM has been better than average since the company started; and that the ratios of diversity have been consistent from the beginning, as a result of hiring from their own networks. I&#39;d love to see Artsy hire beyond our networks (and as a result expand our networks).&lt;/p&gt;
  &lt;/div&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;Our hiring process will never be &quot;finished&quot; because we&#39;re always improving on it. Some recent improvements are
inward-facing to help &lt;em&gt;us&lt;/em&gt; get better, like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a #dev-ersity Slack channel for talking about how to diversify our team and the industry at large.&lt;/li&gt;
&lt;li&gt;Integrating hiring updates into our weekly standup.&lt;/li&gt;
&lt;li&gt;Creating a Slack bot for engineers to monitor our hiring pipeline.&lt;/li&gt;
&lt;li&gt;Periodically rotating hiring managers to spread institutional knowledge and get new perspectives.&lt;/li&gt;
&lt;li&gt;Many, many docs written on guiding the process.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Artsy engineers, guided by our company values, created the hiring process for new engineers. Combined with an
iterative process and a desire to constantly improve, we&#39;ve created a hiring process that is fair, effective, and
respectful. This kind of engineering-led approach is gaining popularity; for example, Microsoft recently
&lt;a href=&quot;https://blog.usejournal.com/rethinking-how-we-interview-in-microsofts-developer-division-8f404cfd075a&quot;&gt;revamped its hiring process&lt;/a&gt;
with this approach.&lt;/p&gt;

&lt;p&gt;We hope this catches on.&lt;/p&gt;

&lt;p&gt;So what can &lt;em&gt;you&lt;/em&gt; do? A great first step is to send this post to your HR rep. Another great step is to open source
your hiring documentation; you&#39;d be surprised how motivating this can be, and it&#39;s a great opportunity to get
feedback from other companies. Leave a comment below, let&#39;s brainstorm on other ways to improve the state of hiring
in software engineering!&lt;/p&gt;

&lt;p&gt;And remember: while &lt;em&gt;you&lt;/em&gt; might be motivated based on what feels &quot;right&quot;, businesses are motivated by bottom lines.
Fortunately for us, the evidence is on our side: this is a better way to hire, for everyone.&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/01/23/artsy-engineering-hiring/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/01/23/artsy-engineering-hiring/</guid>
        
        
        <category>best practices</category>
        
        <category>culture</category>
        
        <category>hiring</category>
        
        <category>people</category>
        
        <category>process</category>
        
        <category>team</category>
        
      </item>
    
      <item>
        <title>GraphQL: Union vs. Interface</title>
        <description>&lt;p&gt;At Artsy we’ve been moving towards GraphQL for all of our new services. Acknowledging GraphQL is a relatively new
technology, we faced some challenging questions as we were developing one our most recent services.&lt;/p&gt;

&lt;p&gt;Naively as my first attempt to define GraphQL types and schemas, I naturally tried to map our database models to
GraphQL types. While this may work for lot of cases, we may not be utilizing some of the useful features that come
with GraphQL that can make the consuming our data a lot easier.&lt;/p&gt;

&lt;a name=&quot;GraphQL:.Interface.or.Union.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;GraphQL: Interface or Union?&lt;/h2&gt;

&lt;p&gt;Think of the case where we are trying to expose search functionality and the result of our search can be either a
&lt;code&gt;Book&lt;/code&gt; , &lt;code&gt;Movie&lt;/code&gt; or &lt;code&gt;Album&lt;/code&gt;. One way to think about this is to have our search query return something like:&lt;/p&gt;

&lt;!-- more --&gt;




&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;something&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;books&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;movies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;director&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;albums&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;While ☝️ works, we can’t rank the result based on relevance in one result set. Ideally, we would return one result
set that can have different types in it. A naive approach for this could be to only return one type in the results:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;something&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// when a book&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;director&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// when a movie&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// when a movie/book&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;We could have a single object that has all these values as optional properties:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;c1&quot;&gt;// All of the optional data, available as nullable types&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;director&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;But returning these Result objects would be very messy on the server and for clients, plus it would undermine using
GraphQL&#39;s type system.&lt;/p&gt;

&lt;p&gt;There are two main solutions in the GraphQL toolkit for this problem:
&lt;a href=&quot;https://graphql.org/learn/schema/#union-types&quot;&gt;Unions&lt;/a&gt; and
&lt;a href=&quot;https://graphql.org/learn/schema/#interfaces&quot;&gt;Interfaces&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;Union&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Union&lt;/h3&gt;

&lt;p&gt;GraphQL interfaces are useful to solve problems like above where we want to have the returned type possibly from
different types.&lt;/p&gt;

&lt;p&gt;For this to work, we can define a &lt;code&gt;Union&lt;/code&gt; type that can resolve to either one of &lt;code&gt;Book&lt;/code&gt;, &lt;code&gt;Movie&lt;/code&gt; or &lt;code&gt;Album&lt;/code&gt; and
then each type can have its own set of fields.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;graphql-ruby&lt;/code&gt; you can define Unions with:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Movie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BaseObject&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:director&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BaseObject&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Album&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BaseObject&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SearchResultUnionType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BaseUnion&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Represents either a Movie, Book or Album&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;possible_types&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Movie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Album&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resolve_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Movie&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Movie&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Book&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Album&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Album&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Unknown search result type&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;With the above change you can now query for search results and use specific fragments for different result type:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;something&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Movie&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;__typename&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;__typename&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Album&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;__typename&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;




&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;json&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;__typename&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Movie&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Close-Up&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;__typename&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Album&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Dark Side Of The Moon&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;a name=&quot;Interface&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Interface&lt;/h3&gt;

&lt;p&gt;Unions are useful when we are trying to group different types together in one field. Now let’s think of the case
where we are trying to expose models of the same Type that can have different fields populated.&lt;/p&gt;

&lt;p&gt;For example a music &lt;code&gt;Instrument&lt;/code&gt; can have strings or not. If it has strings we want to mention how many strings it
has in &lt;code&gt;numberOfStrings&lt;/code&gt; field. For any non-string instrument this field would be &lt;code&gt;null&lt;/code&gt; in the database.&lt;/p&gt;

&lt;p&gt;One way to do this is to have the &lt;code&gt;Instrument&lt;/code&gt; Type always have &lt;code&gt;numberOfStrings&lt;/code&gt; and in the case of non-string
instruments return &lt;code&gt;nil&lt;/code&gt;. Sample result for this would be:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;json&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Guitar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;numberOfStrings&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Drums&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;numberOfStrings&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;The above solution would work, but it will add extra work on the clients to decide if &lt;code&gt;numberOfStrings&lt;/code&gt; is even
applicable to this current instrument or not.&lt;/p&gt;

&lt;p&gt;The more GraphQL approach for this would be to use an &lt;code&gt;Interface&lt;/code&gt;. We can define a generic &lt;code&gt;Instrument&lt;/code&gt; interface and
have all the common fields between all instruments defined there. Then we can have each specific category of
instruments define its own special fields and then access those specific fields using fragments.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;graphql-ruby&lt;/code&gt; you can define an Interface with:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Types::InstrumentInterface&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BaseInterface&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;A Musical Instrument&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;graphql_name&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Musical Instrument&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;definition_methods&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolve_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;StringInstrument&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;drums&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DrumInstrument&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Unknown instrument type&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Then we can have our specific types implementing this interface.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;StringInstrument&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BaseObject&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;InstrumentInterface&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:number_of_strings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;For types that don’t have any extra field, they can just reuse everything from interface.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DrumInstrument&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BaseObject&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;InstrumentInterface&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This way the query for getting instruments can look like&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;instruments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StringInstrument&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;       &lt;span class=&quot;n&quot;&gt;numberOfStrings&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Sample response can look like&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;json&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Guitar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;category&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;StringInstrument&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;numberOfStrings&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Drums&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;category&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;StringInstrument&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;One issue we found after doing the above was, since this way we don’t reference &lt;code&gt;StringInstrument&lt;/code&gt; and &lt;code&gt;DrumInstrument&lt;/code&gt;
types anywhere in our schema, they actually don’t end up showing in the generated schema. For them to show up we
have to add them as &lt;code&gt;orphan_types&lt;/code&gt; in the interface. So the interface definition will look like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Types::InstrumentInterface&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BaseInterface&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;A Music Album&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;graphql_name&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Album&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;c1&quot;&gt;## Changes&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;orphan_types&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;StringInstrument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DrumInstrument&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;definition_methods&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolve_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;StringInstrument&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;drums&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DrumInstrument&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Unknown instrument type&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;a name=&quot;Conclusion&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The biggest learning experience for us was to realize that with GraphQL we have the option to decouple our database
modeling with how the data is exposed to consumers. This way when designing our persistence layer, we can focus on
the needs of that layer and then separately think about whats the best way to expose the data to the outside world.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/01/14/graphql-union-vs-interface/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/01/14/graphql-union-vs-interface/</guid>
        
        
        <category>graphql</category>
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Automation Encourages More Automation</title>
        <description>&lt;p&gt;Last year, &lt;a href=&quot;http://artsy.github.io/blog/2018/05/07/fully-automated-standups/&quot;&gt;I wrote about the process of fully automating our weekly engineering-wide standup&lt;/a&gt;. One of
the benefits of automating what &lt;em&gt;was&lt;/em&gt; a meeting run by a single person to a meeting run by everyone is that we
removed a &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_point_of_failure&quot;&gt;single point of failure&lt;/a&gt;. However, I may have fibbed just slightly when I called our standups
&lt;em&gt;fully&lt;/em&gt; automated.&lt;/p&gt;

&lt;p&gt;This blog post is going to cover how (and more importantly, &lt;em&gt;why&lt;/em&gt;) I finally automated the last 5% of our weekly
standups. Let&#39;s go!&lt;/p&gt;

&lt;!-- more --&gt;


&lt;hr /&gt;

&lt;p&gt;Our weekly standup process is a finely tuned machine. The meeting is run every Monday morning by a different pair
of engineers, based on our &lt;a href=&quot;http://artsy.github.io/blog/2018/05/25/support-process/&quot;&gt;on-call rotation&lt;/a&gt;. The process is &lt;a href=&quot;https://github.com/artsy/README/blob/eb2f23c835983223877a6031475153db93e98e8c/events/open-standup.md&quot;&gt;documented&lt;/a&gt; in the open, and we
improve it over time. I&#39;m really proud of it! But there&#39;s just one problem... someone needs to make sure that the
people responsible for the meeting &lt;em&gt;know&lt;/em&gt; about that responsibility.&lt;/p&gt;

&lt;p&gt;So for the past 8 months, I&#39;ve begun every week by sending Slack DMs to the responsible engineers to remind them to
run the standup, including a link to the docs. This made me a single point of failure: when I was out of the
office, I always made sure to ask someone else to remind them about the meeting. What if I had forgot? Or I was
sick that day? What would happen to our finely-tuned machine?!&lt;/p&gt;

&lt;p&gt;Okay, so what would probably happen is that people would remember anyway or someone would post to Slack &quot;hey who is
running standup today?&quot; Automating this reminder was a pretty small priority, but it was a gap in our process, and
I wanted to patch it.&lt;/p&gt;

&lt;p&gt;When I discussed all of this with my colleagues, it wasn&#39;t long before someone brought up &lt;a href=&quot;https://xkcd.com/1319/&quot;&gt;the xkcd comic on
automation&lt;/a&gt;. Oh, you know the one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://xkcd.com/1319/&quot;&gt;&lt;center&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/automation.png&quot; srcset=&quot;//imgs.xkcd.com/comics/automation_2x.png 2x&quot; alt=&quot;xkcd comic about automation&quot; title=&quot;I wonder if people would read the hover text of an xkcd comic linked to from a different site, just out of habit? I probably would.&quot; /&gt;&lt;/center&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The comic observes that, often, the work necessary to automate a task often exceeds the amount of work necessary to
just do the task manually. Pretty funny! You could be forgiven for taking the logical leap to say that automating
tasks isn&#39;t worth it, generally, based on this observation. But that analysis would be incomplete because it
focuses entirely on saving &lt;em&gt;time&lt;/em&gt;. In my experience, automating a task often yields far more value than it costs in
time.&lt;/p&gt;

&lt;p&gt;Let&#39;s take the task of sending the on-call engineers their Monday morning standup reminder. How would we even
automate that?&lt;/p&gt;

&lt;p&gt;Well, first I think about how &lt;em&gt;I&lt;/em&gt; do this task. First I look at the on-call schedule, shared in Google Calendar.
Then I open a DM in Slack with the engineers. I copy the pre-composed message from my recurring OmniFocus task and
send it in the DM.&lt;/p&gt;

&lt;p&gt;Okay so how would I automate that? &lt;a href=&quot;http://artsy.github.io/blog/2017/09/04/Introducing-Peril/&quot;&gt;Artsy uses Peril already&lt;/a&gt; to automate reminders about open RFCs, so I
piggy-backed on that existing automation. This is key: I&#39;m not starting from scratch, I&#39;m building upon the
existing automation infrastructure that we&#39;ve already built.&lt;/p&gt;

&lt;p&gt;Next, I find out how to access the Google Calendar API using a &lt;a href=&quot;https://cloud.google.com/iam/docs/understanding-service-accounts&quot;&gt;Google Services Account&lt;/a&gt;. It has an
authentication method purpose-built for server-to-server communication, which is perfect for our needs. I write
some code to pick the correct calendar events based on the current time, extract the email addresses of those
events&#39; attendees, and handle an edge case. Then I look up the &lt;a href=&quot;https://github.com/slackapi/node-slack-sdk#features&quot;&gt;Slack API&lt;/a&gt; for Peril&#39;s platform, learn how
to authenticate with it properly from a server, and lookup Slack user IDs based on those email addresses. Finally,
compose the message and use some previously written code to post it to our #dev channel.&lt;/p&gt;

&lt;p&gt;Boom. &lt;a href=&quot;https://github.com/artsy/peril-settings/pull/87&quot;&gt;Open a PR&lt;/a&gt;. Add some unit tests. Done.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;screenshot of the peril task working in Slack&quot; src=&quot;/images/2019-01-08-automation-encourages-more-automation/success.png&quot;  /&gt;&lt;/p&gt;

&lt;p&gt;I spent about four hours automating this and by my calculations, I&#39;ll recoup that time by... July 2020. But like I
said, there&#39;s more value to this than the time I saved.&lt;/p&gt;

&lt;p&gt;In the process of automating this, I learned how to use &lt;em&gt;two&lt;/em&gt; new APIs &lt;em&gt;and&lt;/em&gt; I created infrastructure in our &lt;a href=&quot;https://github.com/artsy/peril-settings&quot;&gt;Peril
installation&lt;/a&gt; to access them. Not only did I build &lt;em&gt;upon&lt;/em&gt; the existing automation framework,
but I &lt;em&gt;contributed&lt;/em&gt; to it so it&#39;s easier for the next person. I even &lt;a href=&quot;https://github.com/danger/peril/pull/407&quot;&gt;fixed a Peril bug&lt;/a&gt; in the process.&lt;/p&gt;

&lt;p&gt;Automation encourages automation. Every time you automate a task, it gets easier to automate the next one. With
sufficient infrastructure, a sort of exponential takeoff happens: all of a sudden you&#39;re not just automating
&lt;em&gt;existing&lt;/em&gt; tasks, you&#39;re using that infrastructure for &lt;em&gt;new&lt;/em&gt; tasks. Tasks that add value to your team, like
&lt;a href=&quot;https://github.com/artsy/peril-settings/blob/master/org/mergeOnGreen.ts&quot;&gt;merge-on-green&lt;/a&gt; or &lt;a href=&quot;https://github.com/artsy/peril-settings/blob/master/tasks/compareSchemas.ts&quot;&gt;notifying engineers of recent API changes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a consequence of the nature of engineering, we often consider ideas in only terms of constraints. We define
what&#39;s possible by what we can already accomplish. Automation is a way to hack around that habit; it encourages
engineers to think outside the box by giving us a larger box. Simple, but effective!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So. Four hours of work. Was it worth it?&lt;/p&gt;

&lt;p&gt;Well, let&#39;s evaluate this in terms of &lt;em&gt;impact&lt;/em&gt;. Those four hours could have kept our standups running until next
July, or they could have automated that task &lt;em&gt;and&lt;/em&gt; further enhanced our automation infrastructure. And, personally,
it was very satisfying.&lt;/p&gt;

&lt;p&gt;I would say that&#39;s &lt;em&gt;definitely&lt;/em&gt; worth it.&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/01/08/automation-encourages-more-automation/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/01/08/automation-encourages-more-automation/</guid>
        
        
        <category>automation</category>
        
        <category>peril</category>
        
        <category>roads and bridges</category>
        
      </item>
    
      <item>
        <title>It&#39;s time to use Swift Package Manager</title>
        <description>&lt;p&gt;It&#39;s been three years, and &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;Swift Package Manager&lt;/a&gt; (SPM) is at a point where it can be useful for iOS
projects. It&#39;ll take a bit of sacrifice and a little bit of community spirit to fix some holes probably but &lt;strong&gt;in my
opinion, it&#39;s time for teams to start adopting SPM for their 3rd party dev tools&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; You should be using SPM for 3rd party dev tools like: &lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;SwiftLint&lt;/a&gt;, &lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat&quot;&gt;SwiftFormat&lt;/a&gt;, &lt;a href=&quot;https://danger.systems/swift/&quot;&gt;Danger&lt;/a&gt;,
&lt;a href=&quot;https://github.com/krzysztofzablocki/Sourcery&quot;&gt;Sourcery&lt;/a&gt;, &lt;a href=&quot;https://github.com/SwiftGen/SwiftGen/&quot;&gt;SwiftGen&lt;/a&gt; and &lt;a href=&quot;https://github.com/orta/Komondor&quot;&gt;Git Hook management&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post covers: What made it feasible to use SPM now? What are the downsides of the status quo? Why use SPM at
all? What are the downsides to using SPM?&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;What.changed.to.make.SPM.usable.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;What changed to make SPM usable?&lt;/h3&gt;

&lt;p&gt;From my perspective, David Hart&#39;s &lt;a href=&quot;https://github.com/apple/swift-package-manager/pull/1187&quot;&gt;addition of &lt;code&gt;swift run&lt;/code&gt;&lt;/a&gt; to SPM which shipped with Swift 4.0 is what
pushed the project over the finish line to being useful for iOS developers. &lt;code&gt;swift run&lt;/code&gt; is contextually the same as
&lt;code&gt;bundle exec&lt;/code&gt; in that it will run a locally bundled version of your executable.&lt;/p&gt;

&lt;p&gt;This means you can run &lt;code&gt;swift run swiftlint&lt;/code&gt; and reliably get the same results as your CI and fellow developers.&lt;/p&gt;

&lt;p&gt;Second, all of the big third party tools support SPM already. So, you probably don&#39;t need to send any upstream PRs.&lt;/p&gt;

&lt;a name=&quot;What.are.the.downsides.of.the.status.quo&quot;&gt;&lt;/a&gt;
&lt;h3&gt;What are the downsides of the status quo&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Using Homebrew&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Right now, a lot of folks use &lt;a href=&quot;https://brew.sh&quot;&gt;homebrew&lt;/a&gt; to manage these types of dependencies. Homebrew is useful for rarely
updated tools (like unix-y CLI apps) but it does not handle having different versions of tool available. This is a
totally reasonable call from Homebrew&#39;s perspective but it makes homebrew a bad choice for your &lt;strong&gt;project&lt;/strong&gt;
dependencies - because it only installs things globally.&lt;/p&gt;

&lt;p&gt;This means a developer (or your CI) would get the most recent version of that tool when they last installed the
tool. This isn&#39;t a problem for many projects (for example, check out their &lt;a href=&quot;https://formulae.brew.sh/analytics/install/90d/&quot;&gt;most installed&lt;/a&gt; formulas to
see that it&#39;s lot of system libraries, languages and global tools like &lt;code&gt;node&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;python&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using CocoaPods&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can hijack CocoaPod&#39;s dependency resolver, and locking system mixed with consistent dependency paths to handle
your tools. This is better than using Homebrew, because everyone has the same version - and so you could reliably
run SwiftLint via &lt;code&gt;./Pods/SwiftLint/swiftlint&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a great hack, and CocoaPods is smart here - because these dependencies don&#39;t ship any code for your app for
compiling it won&#39;t set up a library or framework for you. You can even use CocoaPods to set up &lt;a href=&quot;https://guides.cocoapods.org/syntax/podfile.html#script_phase&quot;&gt;a build
phase&lt;/a&gt; for you too (I have feelings on this but we&#39;ll get to those later.)&lt;/p&gt;

&lt;p&gt;I don&#39;t really have much of a &quot;you shouldn&#39;t do this&quot; for using hacking CocoaPods for your tools, outside of SPM
it&#39;s probably the right way to do it.&lt;/p&gt;

&lt;a name=&quot;Why.Use.SwiftPM.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Why Use SwiftPM?&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;SPM works&lt;/li&gt;
&lt;li&gt;SPM can lock your dependencies correctly. &lt;code&gt;:tada:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The primary tools used in our ecosystem already support it, so you don&#39;t need to do any extra work&lt;/li&gt;
&lt;li&gt;Easy to cache (everything lives in &lt;code&gt;.build&lt;/code&gt;) which means fast CI builds&lt;/li&gt;
&lt;li&gt;You&#39;re using Swift&#39;s tools to manage tools built in Swift, promoting and encouraging the ecosystem you want to
thrive&lt;/li&gt;
&lt;li&gt;Your team can get used to how SPM works now, because it should be useful for code dependencies some day&lt;/li&gt;
&lt;li&gt;SPM is still in a pretty early phase for usage like this, maybe you can find features to add once you&#39;ve got
started and contribute back&lt;/li&gt;
&lt;/ol&gt;


&lt;a name=&quot;What.are.the.downsides.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;What are the downsides?&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Running a tool will compile it the first time you use &lt;code&gt;swift run&lt;/code&gt;. Running &lt;code&gt;swift run danger-swift&lt;/code&gt; would first
build &lt;code&gt;danger-swift&lt;/code&gt; from source and then it would run the executable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SPM&#39;s dependency resolution step is very naive, and will clone all the dependencies in the tree - even if you
don&#39;t need them. So, the dependencies of your dependencies (a.k.a transitive dependencies) will have full clones
locally - e.g. the test runner for SwiftLint has to be fully cloned locally in &lt;code&gt;.build&lt;/code&gt; if you use SPM for
SwiftLint. I&#39;m hoping &lt;a href=&quot;https://github.com/apple/swift-package-manager/pull/1918&quot;&gt;this PR&lt;/a&gt; and subsequent
improvements will fix this.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You need to reference a single Swift file in your project to make this work. SPM today does not support a
dependencies only project (it won&#39;t build), so you&#39;ll need to reference one Swift file in your codebase.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;All of these are fixable, and the first two can be worked around on CI, by caching the &lt;code&gt;.build&lt;/code&gt; directory. Locally
these actions normally only happens once when you install, or update.&lt;/p&gt;

&lt;a name=&quot;Show.me.it.in.action&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Show me it in action&lt;/h3&gt;

&lt;p&gt;What would this look like for a project? IMO, for a reasonably complex Swift app, I think you should have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;SwiftLint&lt;/a&gt; for catching potential code issues&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nicklockwood/SwiftFormat&quot;&gt;SwiftFormat&lt;/a&gt; so you don&#39;t argue about code style&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/orta/Komondor&quot;&gt;Komondor&lt;/a&gt; to automate the above tools, so people don&#39;t have to remember to run the tools&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://danger.systems/swift/&quot;&gt;Danger Swift&lt;/a&gt; to handle cultural rules for PRs like &quot;Please add Changelogs entries&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;You would write a &lt;code&gt;Package.swift&lt;/code&gt; file like this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;31&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;32&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;33&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;34&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// swift-tools-version:4.2&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PackageDescription&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Eigen&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nl&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://github.com/danger/swift.git&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://github.com/nicklockwood/SwiftFormat&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.35.8&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://github.com/Realm/SwiftLint&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.28.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://github.com/orta/Komondor&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nl&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;c1&quot;&gt;// This is just an arbitrary Swift file in the app, that has&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;c1&quot;&gt;// no dependencies outside of Foundation, the dependencies section&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;eigen&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Artsy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Stringify.swift&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// The settings for the git hooks for our repo&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;cp&quot;&gt;#if canImport(PackageConfig)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PackageConfig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PackageConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;s&quot;&gt;&amp;quot;komondor&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;c1&quot;&gt;// When someone has run `git commit`, first run&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;c1&quot;&gt;// run SwiftFormat and the auto-correcter for SwiftLint&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;s&quot;&gt;&amp;quot;pre-commit&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                &lt;span class=&quot;s&quot;&gt;&amp;quot;swift run swiftformat .&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                &lt;span class=&quot;s&quot;&gt;&amp;quot;swift run swiftlint autocorrect --path Artsy/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                &lt;span class=&quot;s&quot;&gt;&amp;quot;git add .&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Which gives you access to the following commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;swift run komondor install&lt;/code&gt; - to set up your repo&#39;s git hooks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swift run swiftformat .&lt;/code&gt; - to run SwiftFormat over your project&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swift run swiftlint --autocorrect&lt;/code&gt; - to highlight your linter issues&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swift run danger-swift ci&lt;/code&gt; - to run Danger Swift on your CI&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Because you can reliably run both SwiftFormat and SwiftLint via Komondor on a git hook, you can remove build phase
steps that run these tools.&lt;/p&gt;

&lt;p&gt;An iOS app&#39;s compile and run cycle already takes on the order of seconds, so you should avoid adding extra build
steps in Xcode. I realise that people are only doing this due to the (unreasonably) limited extension support in
Xcode, but the build steps are critical path code. When your build and run cycle is already on the order of many
seconds that iteration cycle has to be as tight as possible.&lt;/p&gt;

&lt;p&gt;This setup gives you version-locked access to common linting/formating tools (with the ability to use komondor to
add extra checks if needed) in a self-contained &lt;code&gt;Package.swift&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We&#39;ve started migrating our Artsy projects to use this setup when we work on our native codebases. With our main
iOS app Eigen already using this pattern for Danger Swift, but we don&#39;t created/modify enough &lt;code&gt;*.swift&lt;/code&gt; files to
warrant linters/formatters yet.&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/01/05/its-time-to-use-spm/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/01/05/its-time-to-use-spm/</guid>
        
        
        <category>build tools</category>
        
        <category>package-management</category>
        
        <category>roads and bridges</category>
        
        <category>swift</category>
        
      </item>
    
      <item>
        <title>Migrating to PR Label based Continuous Deployment</title>
        <description>&lt;p&gt;In the JavaScript world, the idea of deploying your libraries on every PR is pretty common. As someone who runs a
dependency manager but comes from a native background, it&#39;s easy for me to cringe and imagine the strain this puts
on NPM&#39;s servers. However, that is where the ecosystem is and &lt;a href=&quot;https://github.com/artsy/reaction/issues/388&quot;&gt;continuous deployment&lt;/a&gt; can be really useful. So,
about a year ago &lt;a href=&quot;https://github.com/artsy/reaction/pull/521&quot;&gt;we started&lt;/a&gt; moving a lot of our libraries to do this at Artsy too. Starting with our most
critical dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/reaction#readme&quot;&gt;Reaction&lt;/a&gt; (our React components used in many of our web apps)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/palette#readme&quot;&gt;Palette&lt;/a&gt; (our &lt;a href=&quot;https://palette.artsy.net&quot;&gt;design system&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We started off using a commit message based workflow, but have just finished the migrating to a GitHub Label based
workflow that is less workload on individual contributors. This post will cover how, and why.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Why.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Why?&lt;/h2&gt;

&lt;p&gt;We started using &lt;a href=&quot;https://semantic-release.gitbook.io/semantic-release/&quot;&gt;semantic-release&lt;/a&gt; to handle commit message based deploys. The way semantic-release works
is you would add a specially formatted commit that included a version prefix indicating you wanted a deploy. For
example, &lt;code&gt;[PATCH artwork] Fix safari mail issue&lt;/code&gt; would mean that by merging a PR with this commit into master
should trigger a patch release.&lt;/p&gt;

&lt;p&gt;This is their ideal flow, but the reality for us is that a lot of people would forget to do this, or write commits
like: &lt;code&gt;[PATCH] bumpity bump&lt;/code&gt;. Even worse, these kind of commits were the perfect reason for pushing to master and
skipping code review to speed things up.&lt;/p&gt;

&lt;p&gt;We could have added a pre-commit hooks that enforced the messaging on commits, but that&#39;s not very &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#minimal-viable-process&quot;&gt;Minimum Viable
Process&lt;/a&gt; - where we try to map new tool/process improvements to existing behavior instead of regimenting new
behavior when possible.&lt;/p&gt;

&lt;p&gt;The problem felt like the idea of declaring your version changes at commit time felt like a disconnect from how
people thought about deploys. The code unit for a review is a Pull Request, not per-commit. To try improve on our
deployment, we re-grouped and discussed what could be a better mapping to our existing workflow. Our answer was: PR
Label based deploys.&lt;/p&gt;

&lt;p&gt;The idea is: You write a PR exactly as you used to, when you create a new PR then you apply a label saying whether
it is a major, minor, patch or trivial PR and when it is merged then deploy could be made for you.&lt;/p&gt;

&lt;p&gt;To match our existing behavior completely, we would automatically add the &quot;patch&quot; label to any PR which doesn&#39;t
declare what type of deployment it is up-front.&lt;/p&gt;

&lt;p&gt;I summarized our ideal state, and turned it into an RFC on our Reaction repo: &lt;a href=&quot;https://github.com/artsy/reaction/issues/1095&quot;&gt;&quot;Change rules around automatic
deploys, and add a CHANGELOG&quot;&lt;/a&gt; .&lt;/p&gt;

&lt;a name=&quot;How.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;How?&lt;/h2&gt;

&lt;a name=&quot;Deployment&quot;&gt;&lt;/a&gt;
&lt;h4&gt;Deployment&lt;/h4&gt;

&lt;p&gt;We started building this infrastructure inside &lt;a href=&quot;https://github.com/artsy/reaction/pull/1407&quot;&gt;our app Reaction&lt;/a&gt;. Our implementation was a PR that lasted a
few months. It was a hard project to prioritize, and didn&#39;t really seem to have an end in sight. This changed last
week when we discovered the work going on over at &lt;a href=&quot;https://github.com/intuit/auto-release#readme&quot;&gt;auto-release&lt;/a&gt; by the team at &lt;a href=&quot;https://github.com/intuit/&quot;&gt;Intuit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The team at Intuit had taken the same problem and worked to apply it generically, making it a useful tool for
everyone rather than just for one type of project. Perfect.&lt;/p&gt;

&lt;p&gt;To try it out, I set it up on our upcoming CLI for the &lt;a href=&quot;https://github.com/omakase-js/omakase#readme&quot;&gt;Artsy Omakase&lt;/a&gt; JS stack - which is a &lt;a href=&quot;https://github.com/lerna/lerna#readme&quot;&gt;Lerna&lt;/a&gt;
mono-repo. This means it&#39;s a single repo for many JS packages, which makes it a bit more complex than a normal repo
for a node project.&lt;/p&gt;

&lt;p&gt;Auto-release handled this setup out-of-the-box, &lt;code&gt;10/10&lt;/code&gt; - so it was likely to handle our simpler repos. In the
process we made a bunch of PRs back and were quickly iterating on making it work well for Artsy also. Collaborating
on projects like this is our &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#own-your-dependencies&quot;&gt;bread and butter&lt;/a&gt;, it means we don&#39;t have to build tools from scratch and
can improve upon great work by others.&lt;/p&gt;

&lt;p&gt;To use it, we needed to set up two environment variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NPM_TOKEN&lt;/code&gt; - used to deploy your package to NPM&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GH_TOKEN&lt;/code&gt; - used to create GitHub releases&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;and you need to make sure your CI has write access to your repo, so it can push tags and the CHANGELOG entries back
to your repo.&lt;/p&gt;

&lt;a name=&quot;Downsides.to.Continuous.Deployment&quot;&gt;&lt;/a&gt;
&lt;h4&gt;Downsides to Continuous Deployment&lt;/h4&gt;

&lt;p&gt;Both the commit message and PR label based continuous deployment structure comes with one annoying flaw, if you&#39;re
merging many PRs at once - then you can get into trouble with versioning. We&#39;ve been discussing ideas around this
in the [auto-release issues][ar_iss]. We already had this flaw, so it just propagated to the new technique. We&#39;ve
been wondering if deploying via &lt;a href=&quot;https://github.com/features/actions&quot;&gt;GitHub actions&lt;/a&gt; may fix this.&lt;/p&gt;

&lt;a name=&quot;Peril&quot;&gt;&lt;/a&gt;
&lt;h4&gt;Peril&lt;/h4&gt;

&lt;p&gt;With auto-release you can have set an option to treat having no release label on your PR as a being a &quot;patch&quot;
release. This is a great setting, but an ideal workflow for us is to showcase what is happening every time. This
makes the understanding of our deployments explicit, and is a good reminder to highlight that you might want to
change the type of deployment. You can see this happening to me &lt;a href=&quot;https://github.com/artsy/reaction/pull/1787&quot;&gt;in this PR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We&#39;re currently at &lt;code&gt;9.1.59&lt;/code&gt; - meaning 58 patches in a row, so it&#39;s pretty rare for a minor or major. By making it
obvious how to change that during the PR (by highlighting that it&#39;s classed as a patch each time) we can maybe make
the version number change a bit closer to &lt;em&gt;some form&lt;/em&gt; of &quot;semantic reality&quot;.&lt;/p&gt;

&lt;p&gt;We wanted to first roll this out on one repo, so we scoped &lt;a href=&quot;https://github.com/artsy/peril-settings/pull/88&quot;&gt;our Artsy Peril changes&lt;/a&gt; to just the
&lt;code&gt;artsy/reaction&lt;/code&gt; repo&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;diff&#39;&gt;&lt;span class=&#39;line&#39;&gt;{
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &amp;quot;rules&amp;quot;: {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    // Keep a list of all deployments in slack
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &amp;quot;create (ref_type == tag)&amp;quot;: &amp;quot;org/newRelease.ts&amp;quot;,
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    ...
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  },
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &amp;quot;repos&amp;quot;: {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &amp;quot;artsy/reaction&amp;quot;: {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &amp;quot;pull_request&amp;quot;: &amp;quot;danger/pr.ts&amp;quot;,
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+     &amp;quot;pull_request.opened&amp;quot;: &amp;quot;artsy/peril-settings@repos/reaction/addPatchLabel.ts&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    },
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &amp;quot;artsy/force&amp;quot;: {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &amp;quot;pull_request&amp;quot;: &amp;quot;dangerfile.ts&amp;quot;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    },
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    ...
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  },
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;The simplest implementation for adding the label is this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;31&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// repos/reaction/addPatchLabel.ts&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;danger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pr&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patchLabelName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Version: Patch&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requiredPrefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Version: &amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;c1&quot;&gt;// Someone&amp;#39;s already made a decision on the version&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hasAlreadyGotLabel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;danger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;issue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requiredPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasAlreadyGotLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Skipping&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setting&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patch&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;because&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PR&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;already&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;c1&quot;&gt;// Create or add the label if it&amp;#39;s not being used&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patchLabelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;247A38&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Indicates that you want this PR to trigger a patch release&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;repo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Adding the label:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;danger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;utils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createOrAddLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This will dynamically add your label if it doesn&#39;t exist on the repo yet. Our &lt;a href=&quot;https://github.com/artsy/peril-settings/blob/db492b5f9213faee3e5d8659c55b84c635240f0c/repos/reaction/addPatchLabel.ts&quot;&gt;production
implementation&lt;/a&gt; is a bit more complicated because it will create all of the different labels too. This
means as we roll out the PR Label based workflow to other repos, the labels will be consistent.&lt;/p&gt;

&lt;p&gt;Introducing auto-release meant introducing our first automatically generated changelog (something I&#39;m not sold on,
I see changelogs as consumer-facing. Most PR title/descriptions aren&#39;t aimed at downstream consumers, but I&#39;m open
to giving this a shot as today the consumers are also contributors to the repo) which broke one of our global Peril
rules. This rule would detect a if a repo has a changelog, and ask you to update it if you&#39;ve made any app changes.
We &lt;a href=&quot;https://github.com/artsy/peril-settings/pull/89&quot;&gt;amended that rule&lt;/a&gt; to detect auto-release on the repo first.&lt;/p&gt;

&lt;a name=&quot;So..how.do.I.get.this.set.up.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;So, how do I get this set up?&lt;/h2&gt;

&lt;p&gt;For the automatic deployment:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install auto: &lt;code&gt;yarn add -D auto-release-cli&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;yarn auto init&lt;/code&gt; and go through the questions&lt;/li&gt;
&lt;li&gt;Add a &lt;code&gt;release&lt;/code&gt; script to your &lt;code&gt;package.json&lt;/code&gt;: &lt;code&gt;&quot;release&quot;: &quot;auto shipit&quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In your CI, set both &lt;code&gt;NPM_TOKEN&lt;/code&gt; and &lt;code&gt;GH_TOKEN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;echo &quot;//registry.npmjs.org/:_authToken=$NPM_TOKEN&quot; &amp;gt;&amp;gt; ~/.npmrc&lt;/code&gt; to &quot;log in&quot; to NPM in our deploy steps&lt;/li&gt;
&lt;li&gt;In your deployment phase run: &lt;code&gt;yarn release&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;For the Peril rule:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add &lt;code&gt;&quot;pull_request.opened&quot;: &quot;artsy/peril-settings@repos/reaction/addPatchLabel.ts&quot;&lt;/code&gt; to your
&lt;code&gt;peril.settings.json&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This is a little bit risky, because we can change our implementation anytime. If that&#39;s an issue, implement it
yourself in your settings repo. You got this.&lt;/p&gt;

&lt;p&gt;You can get the full details for &lt;a href=&quot;https://intuit.github.io/auto-release/&quot;&gt;auto-release in their docs&lt;/a&gt;, and you can use both &lt;a href=&quot;https://github.com/artsy/reaction#readme&quot;&gt;&lt;code&gt;artsy/reaction&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://github.com/omakase-js/omakase#readme&quot;&gt;&lt;code&gt;omakase/omakase-js&lt;/code&gt;&lt;/a&gt; as references for how to set it up with Circle CI 2.0.&lt;/p&gt;

&lt;p&gt;To wrap this up, I specifically want to call out &lt;a href=&quot;https://github.com/hipstersmoothie&quot;&gt;@hipstersmoothie&lt;/a&gt; for their great work on auto-release (and
&lt;a href=&quot;https://github.com/oliver-moran/jimp&quot;&gt;jimp&lt;/a&gt;.) It&#39;s been really easy to get started and already covered nearly all the cases we needed. You did great
work here.&lt;/p&gt;

&lt;!-- prettier-ignore-start --&gt;


&lt;!-- prettier-ignore-end --&gt;



</description>
        <pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/01/03/label-based-prs/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/01/03/label-based-prs/</guid>
        
        
        <category>build tools</category>
        
        <category>deployment</category>
        
        <category>road and bridges</category>
        
      </item>
    
      <item>
        <title>Why is the Swift Package Manager taking so long?</title>
        <description>&lt;p&gt;Last month I was chatting at a bar with an engineer working on the Swift team, and we welcomed someone to our
conversation where they opened with the question: &lt;em&gt;&quot;When can I stop using CocoaPods and switch to Swift PM?&quot;&lt;/em&gt; I
chuckled, because I get this a lot (I have been helping to maintain CocoaPods for about 6 years now) but they had
made mistake of asking an Apple employee about something which sounds even remotely like a future product question.
So, it didn&#39;t go anywhere.&lt;/p&gt;

&lt;p&gt;Well, &lt;em&gt;person whose name I don&#39;t remember&lt;/em&gt;, let me try to re-frame that question into something I can take a
reasonable stab at: &lt;strong&gt;&quot;Why are we all still using CocoaPods now instead of Swift PM for iOS apps three years after
its release?&quot;&lt;/strong&gt;&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;Three years ago in December 2015, Swift became open source. Inside the source code was a &lt;a href=&quot;https://twitter.com/orta/status/672436829250052102&quot;&gt;pleasant
surprise&lt;/a&gt; that Apple were going to start making their own package manager. Great, CocoaPods was
&lt;a href=&quot;https://www.urbandictionary.com/define.php?term=sherlocked&quot;&gt;sherlocked&lt;/a&gt;, but Apple had control of Xcode and the entire toolchain so they could integrate it natively. I
thought this was pretty cool, and wrote the following about Swift PM in my annual write-up that year:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;[On the Swift PM team] They’re actively talking with the community and us, finding ways to share work and to
promote collaboration. It’s eased a lot of the friction I had been feeling. Apple has a fresh start in a way we
could not, and will be able to do things much better than the CocoaPods team could.&lt;/p&gt;

&lt;p&gt;All in all, when people have been asking what I want to do in the next year, I’m feeling pretty done on the
&quot;lowering the barrier to entry&quot; space, this year it became less fun.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Fun fact: This is what gave me the space to start working on &lt;a href=&quot;https://danger.systems/&quot;&gt;Danger&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The announcement of Swift PM came out to some fan-fare as the &quot;end of CocoaPods&quot; from the iOS community, and I was
also pretty happy to get some time back to work on other problems. However, a few years down the line it&#39;s not
really turned out that way. What gives?&lt;/p&gt;

&lt;a name=&quot;Why.Swift.PM.exists&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Why Swift PM exists&lt;/h1&gt;

&lt;p&gt;Before Swift PM, you couldn&#39;t reasonably manage Swift projects in Linux. Apple have exclusively been building dev
tools for macOS because that&#39;s what they own, and so, all their dev-tools customers (internal and external) have to
use Macs to make their software. It&#39;s not particularly unreasonable.&lt;/p&gt;

&lt;p&gt;However, to make Swift a language with a larger scope than &quot;making iOS and macOS apps&quot; and it&#39;s usage being limited
to just the Cocoa community: they would need to support running and compiling Swift apps on Linux.&lt;/p&gt;

&lt;p&gt;It&#39;s safe to say Apple probably has no plans to port Xcode to Linux, (though look at what Microsoft achieved when
they decided that they needed to support Visual Studio on macOS &lt;a href=&quot;https://code.visualstudio.com&quot;&gt;somehow&lt;/a&gt;) but what&#39;s more important here
is the underlying tooling &lt;strong&gt;above&lt;/strong&gt; the compiler but &lt;strong&gt;below&lt;/strong&gt; Xcode: &lt;code&gt;xcodebuild&lt;/code&gt;, wouldn&#39;t make any sense in that
context. It&#39;s deeply macOS and Cocoa specific.&lt;/p&gt;

&lt;p&gt;So, Apple needed something to handle the following problems if you were working in a Xcode-less Swift project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handling build dependencies&lt;/li&gt;
&lt;li&gt;Linking to existing code&lt;/li&gt;
&lt;li&gt;Creating library abstractions&lt;/li&gt;
&lt;li&gt;Creating executable for the language&lt;/li&gt;
&lt;li&gt;Handling sharing code between projects&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Roughly in that order of precedence too. In short, they needed a build system first, and then a dependency manager
to support remote packages.&lt;/p&gt;

&lt;p&gt;There are a few big existing build systems: &lt;a href=&quot;https://www.github.com/facebook/buck&quot;&gt;Buck&lt;/a&gt; and &lt;a href=&quot;https://ninja-build.org&quot;&gt;Ninja&lt;/a&gt; are the biggest players in the game,
but they aim to be language agnostic build tools. This makes them a bit too abstract to be useful as the main way
to build a modular system for building projects in a language. So, each language from Swift&#39;s generation of &lt;em&gt;&quot;As
fast as C, but safe&quot;&lt;/em&gt; like Rust, Go and D all implement a build system unique to their language.&lt;/p&gt;

&lt;a name=&quot;llbuild&quot;&gt;&lt;/a&gt;
&lt;h1&gt;llbuild&lt;/h1&gt;

&lt;p&gt;Apple&#39;s approach to building a build system is smart. Instead of from scratch creating a build tool for Swift, they
created an abstraction which makes it feasible to build complex builds systems quicker. That&#39;s &lt;a href=&quot;https://www.github.com/apple/swift-llbuild&quot;&gt;llbuild&lt;/a&gt;, a
low-level build system. This was used to create the Swift build system. Then, llbuild was re-used to create
&lt;a href=&quot;https://lists.swift.org/pipermail/swift-build-dev/Week-of-Mon-20170605/001019.html&quot;&gt;Xcode&#39;s build system&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The new build system for Xcode came out in 2017 with Xcode 9, and became the default in 2018 with Xcode 10. What&#39;s
impressive about the new build system is how much it was just like the last, but better, to quote &lt;a href=&quot;https://jamesdempsey.net/2017/06/13/new-xcode-build-system-and-buildsettingextractor/&quot;&gt;James
Dempsey&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;New build system. Same build settings&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Which is impressive, because the existing system is &lt;a href=&quot;https://pewpewthespells.com/blog/xcode_build_system.html&quot;&gt;complex&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;Build.System....Package.Manager&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Build System != Package Manager&lt;/h1&gt;

&lt;p&gt;CocoaPods was &quot;useful&quot; for Cocoa development very quickly in comparison (roughly a month from initial commit to
supporting a few existing libraries in an app back in 2011), this was because CocoaPods completely skipped the
build tool stage. There was no need, Xcode has a working build system and you can control it via &lt;code&gt;.xcodeproj&lt;/code&gt;
files. This meant that the key output for CocoaPods is to reliably support generating xcode projects and the
underlying abstractions making it actually compile is left to the Xcode team.&lt;/p&gt;

&lt;p&gt;The Swift PM team couldn&#39;t do this without making it deeply dependent on Xcode. CocoaPods can be in-different to
something like Linux support (fun fact: last month &lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/pull/8189&quot;&gt;Windows support&lt;/a&gt; was added) because no-one is writing
Cocoa apps on Linux, and it&#39;s only concern is shipping those Xcode project files to your project&#39;s file system.&lt;/p&gt;

&lt;p&gt;This difference in abstraction level allowed CocoaPods to work on comprehensive support of the existing library
ecosystem considerably sooner. The config options were already set, the types of projects were known they had to
map to whatever Xcode supported rather than the more mundane task of actually figuring out how to make a project
build, compile and scale.&lt;/p&gt;

&lt;p&gt;CocoaPods got focus on more user-facing issues that a dependency manager has considerably quicker, and could focus
on building the most used features first then moving to more niche features (which could be the abstractions those
popular feature relied on) when someone needed it. This meant that the user-facing, and interesting to me, work was
feasible considerably earlier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Discovery of packages&lt;/li&gt;
&lt;li&gt;A lot of documentation&lt;/li&gt;
&lt;li&gt;Access rights for owners&lt;/li&gt;
&lt;li&gt;Creating plugin systems giving hooks for all sorts of projects to be built&lt;/li&gt;
&lt;li&gt;Support for esoteric compiler features&lt;/li&gt;
&lt;li&gt;Support for esoteric Xcode features&lt;/li&gt;
&lt;li&gt;Providing useful metrics on quality/usage&lt;/li&gt;
&lt;li&gt;Cool stickers&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Which generally speaking are problems that Swift PM will eventually have to hit, but instead of jumping straight to
it, the team has to first build the foundations before making the decorations.&lt;/p&gt;

&lt;a name=&quot;The.cost&quot;&gt;&lt;/a&gt;
&lt;h1&gt;The cost&lt;/h1&gt;

&lt;p&gt;These choices came with a cost though, right now there&#39;s only 1 or 2 contexts where Swift PM is useful, the most
prominent is Swift on a Server. It&#39;s likely that Swift on a server probably isn&#39;t as widely adopted as Apple hoped
it would be by the programming community on whole. Unless you are an iOS developer with existing skills, Swift
probably doesn&#39;t even register as being a language you would consider building your web API/apps in. Yes, I know
there are a &lt;a href=&quot;https://www.pointfree.co&quot;&gt;few&lt;/a&gt; &lt;a href=&quot;https://talk.objc.io/collections/server-side-swift&quot;&gt;good&lt;/a&gt; exceptions, but they come from the iOS community.&lt;/p&gt;

&lt;p&gt;Which probably hasn&#39;t helped with resourcing Swift PM at Apple, where the user-facing team has
&lt;a href=&quot;https://github.com/apple/swift-package-manager/graphs/contributors&quot;&gt;basically&lt;/a&gt; been a one-man operation for about a year and a half. From my external perspective,
this is lower than I&#39;d like. It&#39;s a problem close to my heart though.&lt;/p&gt;

&lt;p&gt;Given that we&#39;re talking about Apple, you shouldn&#39;t judge activity entirely from their open source contributions,
but given the project isn&#39;t useful for most people who could contribute, they don&#39;t. I started working on CocoaPods
because it was fixing a really hard problem that I had, and I knew that working on this would fix it for everyone
else in the industry too, making it worth my time. So, external contributions outside Apple are pretty low.&lt;/p&gt;

&lt;p&gt;Build systems are a hard problem, and the Swift PM team very reasonably needs to work on that first, but is
basically doing it pretty much solo. I think this is one of those &quot;&lt;a href=&quot;https://ryanparman.com/posts/2011/skating-to-where-the-puck-will-be/&quot;&gt;skate where the puck will be&lt;/a&gt;&quot;
situations, instead of where it is, which CocoaPods&#39; aimed for. This means it&#39;s going to take a much longer time to
be useful and widely adopted. While I don&#39;t really know where Swift PM aims to be in the long-term, I think Xcode
integration will probably be the major adoption turning point but in the meantime I&#39;ve got an idea for a smaller
way to make Swift PM useful to the iOS community. That, however, is another blog post.&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Dec 2018 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2018/12/21/why-is-swiftpm-taking-so-long/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2018/12/21/why-is-swiftpm-taking-so-long/</guid>
        
        
        <category>build tools</category>
        
        <category>package-management</category>
        
        <category>swift</category>
        
      </item>
    
  </channel>
</rss>
