<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artsy Engineering</title>
    <description></description>
    <link>http://artsy.github.io/</link>
    <atom:link href="http://artsy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 12 Apr 2019 01:57:30 +0000</pubDate>
    <lastBuildDate>Fri, 12 Apr 2019 01:57:30 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Why we added an RFC process to Artsy</title>
        <description>&lt;p&gt;Growth is tricky. Whether in terms of raw headcount or people&#39;s evolving career stages. As a team you want to
provide ways in which members can experiment with new ideas, and provide tools to help them offer new perspectives.
One of our greatest tools for instituting change at Artsy is our RFC process.&lt;/p&gt;

&lt;p&gt;An RFC is a Request For Comments, and it is a structured document (in the form of GitHub issue normally) which
offers a change to something. The format is used in large open source projects like: React
(&lt;a href=&quot;https://github.com/reactjs/rfcs/blob/master/README.md&quot;&gt;Overview&lt;/a&gt;,
&lt;a href=&quot;https://github.com/reactjs/rfcs/blob/master/0000-template.md&quot;&gt;Template&lt;/a&gt;), Swift
(&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/process.md#how-to-propose-a-change&quot;&gt;Overview&lt;/a&gt;,
&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/0000-template.md&quot;&gt;Template&lt;/a&gt;) and Rust
(&lt;a href=&quot;https://github.com/rust-lang/rfcs#rust-rfcs&quot;&gt;Overview&lt;/a&gt;,
&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/0000-template.md&quot;&gt;Template&lt;/a&gt;). To give core &amp;amp; non-core contributors a
chance to propose an idea to everyone before implementing a change.&lt;/p&gt;

&lt;p&gt;We &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#own-your-dependencies&quot;&gt;took&lt;/a&gt; this idea and applied to the process of making any cultural change in the company. Read on to find out
why we needed it, how we refined it, some of the tooling we built around it, and what other options are available.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Why.did.we.create.an.RFC.process.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Why did we create an RFC process?&lt;/h2&gt;

&lt;p&gt;We created the RFC process in parallel with &lt;a href=&quot;https://github.com/danger/peril&quot;&gt;Peril&lt;/a&gt; being &lt;a href=&quot;/blog/2017/09/04/Introducing-Peril/&quot;&gt;introduced at Artsy&lt;/a&gt;. Prior to
Peril, most changes to culture were localised in different teams. However, once Peril gave us the ability to create
cultural rules across all engineering repos in GitHub we also needed a way to let people know and provide feedback
about these changes.&lt;/p&gt;

&lt;p&gt;We started with the &lt;a href=&quot;https://github.com/artsy/peril-settings/pull/4&quot;&gt;smallest possible implementation&lt;/a&gt; of an RFC and a &lt;a href=&quot;https://artsy.slack.com/archives/C02BC3HEJ/p1503690782000372&quot;&gt;notification service&lt;/a&gt;ðŸ”’. You
would write an issue with this template:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;&#39;&gt;&lt;span class=&#39;line&#39;&gt;Title: &quot;RFC: Add an emoji for when a node package is version bumped&quot;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;Proposal: If the repo has a `package.json`, we should look to see if its version has
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          changed and then submit a tada emoji.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;Reasoning: A release is important, we should cherish them.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;Exceptions: None&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This RFC came with a Peril rule that would post a notification into slack about an RFC being created:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intro-rfcs/first-rfc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Which meant everyone had the chance to know in-advance that a change was being discussed because it crossed team
communication boundaries. Here&#39;s &lt;a href=&quot;https://github.com/artsy/artsy-danger/issues/5&quot;&gt;the first RFC&lt;/a&gt; used at Artsy.&lt;/p&gt;

&lt;p&gt;This was specifically built to be the minimum possible to get an idea of what we actually wanted from an RFC
process for cultural changes.&lt;/p&gt;

&lt;a name=&quot;How.did.it.evolve.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;How did it evolve?&lt;/h2&gt;

&lt;p&gt;Version 2 of our RFC process is what we&#39;ve stuck with for the last 2 years. The second version expanded the scope
from just making Peril changes to being comprehensive enough to cover most cultural changes we wanted.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;&#39;&gt;&lt;span class=&#39;line&#39;&gt;Title: &quot;RFC: Add a Markdown Spell Checker to all Markdown docs in PR&quot;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;## Proposal:
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;Apply a spell checker to every markdown document that appears in a PR.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;## Reasoning
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;We want to have polished documents, both internally and externally. Having a spellcheck
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;happening without any effort on a developers part means that we&#39;ll get a second look at
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;any documentation improvements on any repo.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;## Exceptions:
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;This won&#39;t be perfect, but it is better to get something working than to not have it at all.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;I added the ability to ignore files: so CHANGELOGs which tend to be really jargon heavy will
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;be avoided in every repo.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;Other than that, we can continue to build up a global list of words to ignore.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;## Additional Context:
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;You can see our discussion [in slack here](/link/to/slack.com)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This version also came with a recommendation on how to resolve the RFC, after a week you would add a comment and
close the issue:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;&#39;&gt;&lt;span class=&#39;line&#39;&gt;## Resolution
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;We decided to do it.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;## Level of Support
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;3: Majority acceptance, with conflicting feedback.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;#### Additional Context:
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;Some people were in favor of it, but some people said they didn&#39;t want to do it for project X.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;## Next Steps
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;We will implement it.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;#### Exceptions
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;We will not implement it on project X. We will revisit the decision in 1 year.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;We&#39;ve evolved the closing an RFC process since then:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To &lt;a href=&quot;https://github.com/artsy/README/issues/162&quot;&gt;be more specific on how/when to close an RFC&lt;/a&gt;. Which introduces a stalled state. Turns out some
discussions take longer to resolve than a week&lt;/li&gt;
&lt;li&gt;Peril would post &lt;a href=&quot;https://github.com/artsy/peril-settings/pull/46&quot;&gt;multiple notifications&lt;/a&gt; over the course of a week to make sure people don&#39;t miss the
chance to contribute&lt;/li&gt;
&lt;li&gt;We added a weekly summary of open RFCs into Slack for our &lt;a href=&quot;https://github.com/artsy/README/blob/master/events/open-standup.md#during-standup&quot;&gt;team standup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img src=&quot;/images/intro-rfcs/summary.png&quot; alt=&quot;/images/intro-rfcs/summary.png&quot; /&gt;&lt;/p&gt;

&lt;a name=&quot;What.are.the.alternatives.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What are the alternatives?&lt;/h2&gt;

&lt;p&gt;This RFC process is not without it&#39;s trade-offs.&lt;/p&gt;

&lt;p&gt;An RFC is built with an action in mind, and it explicitly defaults towards this. This process purposely bakes in
silence as positive indifference from observers. When being used as a consensus device, an RFC process really isn&#39;t
that great. It&#39;s an asynchronous, flat conversation, which makes it hard to discuss all avenues with many
simultaneous voices and can sometimes feel like whoever posts the most often kinda wins.&lt;/p&gt;

&lt;p&gt;For consensus tools you really are better off with a meeting. There are all sorts of structured meetings which do a
great job of finding agreement across many opinions.&lt;/p&gt;

&lt;p&gt;For example, we wanted to try and get consensus on how to build APIs at Artsy. The RFC for that would probably have
been something like &quot;Move to use GraphQL in all new APIs&quot;, which is a nuanced technical mandate that would require
buy in from many people. While it does have an direct action, trying to feel like everyone agrees and will work
this way in the future would have probably not worked out in a single-threaded long-form issue. Instead, we opted
to use a &lt;a href=&quot;https://en.wikipedia.org/wiki/Town_hall_meeting&quot;&gt;town-hall style&lt;/a&gt; meeting, where people who had strong opinions would have time to present them - then
at the end all developers would have the chance for feedback.&lt;/p&gt;

&lt;a name=&quot;Where.does.it.work.best.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Where does it work best?&lt;/h2&gt;

&lt;p&gt;This RFC process is good for &quot;I would like to improve this, does that make sense?&quot; - and it&#39;s a really great case
of &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#minimal-viable-process&quot;&gt;Minimum Viable Process&lt;/a&gt; where one issue can spark a great team discussion. Here&#39;s some of my favourite
ones from Artsy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/171&quot;&gt;Provide explicit recommendations when PDDE should take time off &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/131&quot;&gt;Document the rationale for why Artsy&#39;s various closed source repositories aren&#39;t open&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/86&quot;&gt;Relaunch the Platform practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/76&quot;&gt;New Hire Buddies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/31&quot;&gt;All GraphQL API servers have a root &lt;code&gt;_schema.graphql&lt;/code&gt; file &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/117&quot;&gt;New dependencies to Emission/Reaction go through the RFC process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/108&quot;&gt;Creating a public facing status page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/130&quot;&gt;Updates to On-Call Process: Jira Ops + Status Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README/issues/10&quot;&gt;Rename the Artsy Omakase to [Something]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We sometimes have RFCs which we don&#39;t want to discuss in public, for those we use our private version of README
called potential. That said, our notification system works on any repo, so if it makes sense to have an RFC on a
repo specifically, that&#39;s no problem too.&lt;/p&gt;

&lt;p&gt;You can see all of our &lt;a href=&quot;https://github.com/search?q=org%3Aartsy+is%3Aissue+label%3ARFC+is%3Aopen&quot;&gt;current open RFCs on the Artsy org here&lt;/a&gt;, and I&#39;ve opened comments for folks
to talk below about whether they&#39;ve enacted something similar - would love to see how this can be improved.&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/04/11/on-an-rfcs-process/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/04/11/on-an-rfcs-process/</guid>
        
        
        <category>culture</category>
        
        <category>mvp</category>
        
        <category>process</category>
        
      </item>
    
      <item>
        <title>Why does Artsy use Relay?</title>
        <description>&lt;p&gt;When the mobile team at Artsy considered &lt;a href=&quot;/blog/2016/08/15/React-Native-at-Artsy/&quot;&gt;moving to React Native&lt;/a&gt; back in 2016, one of the most compelling
cases for making that jump was Relay. This, it seems, is a dependency that is rarely used in the JS community and
we often find ourselves re-explaining this decision to new engineers during onboarding, and to the public at large.&lt;/p&gt;

&lt;p&gt;Which makes this a perfect blog post topic, so let&#39;s have a deep dive into what makes Relay compelling for Artsy&#39;s
engineering team.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;What.problem.does.Relay.solve.&quot;&gt;&lt;/a&gt;
&lt;h1&gt;What problem does Relay solve?&lt;/h1&gt;

&lt;p&gt;Relay is an API client for GraphQL, it comes in two parts: a compiler and a set of front-end components. Relay aims
to provide a really tight binding between your GraphQL API and your view hierarchy. When you build data-driven
apps, Relay removes a whole suite of non-business logic from your application.&lt;/p&gt;

&lt;p&gt;Relay handles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data binding (API â†’ props)&lt;/li&gt;
&lt;li&gt;Cache management (invalidation, re-render live components with data updates, etc)&lt;/li&gt;
&lt;li&gt;Consistent abstractions for bi-directional pagination&lt;/li&gt;
&lt;li&gt;Multiple query consolidation (e.g. consolidate all API requests to one request)&lt;/li&gt;
&lt;li&gt;UI best practices baked in (e.g. optimistic response rendering)&lt;/li&gt;
&lt;li&gt;Declarative data mutation (describe how data should change, instead of doing it)&lt;/li&gt;
&lt;li&gt;Compile-time query generation (removing runtime overhead and allowing you to persist queries)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;By taking the responsibilities of the grunt work for most complex apps and moving it into Relay you get
Facebook-scale best-practices and can build on top of that.&lt;/p&gt;

&lt;a name=&quot;How.does.it.work.&quot;&gt;&lt;/a&gt;
&lt;h1&gt;How does it work?&lt;/h1&gt;

&lt;p&gt;You write a set of Relay components, you always start with a &lt;a href=&quot;https://facebook.github.io/relay/docs/en/query-renderer.html&quot;&gt;&lt;code&gt;QueryRenderer&lt;/code&gt;&lt;/a&gt; and a tree of either
&lt;a href=&quot;https://facebook.github.io/relay/docs/en/fragment-container.html&quot;&gt;&lt;code&gt;FragmentContainer&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://facebook.github.io/relay/docs/en/refetch-container.html&quot;&gt;&lt;code&gt;RefetchContainer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://facebook.github.io/relay/docs/en/pagination-container.html&quot;&gt;&lt;code&gt;PaginationContainer&lt;/code&gt;&lt;/a&gt;s. You mostly use
&lt;code&gt;FragmentContainer&lt;/code&gt;s, so I&#39;ll focus on that here.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;FragmentContainer&lt;/code&gt; is based on a &lt;a href=&quot;https://graphql.org/learn/queries/#fragments&quot;&gt;GraphQL fragment&lt;/a&gt;. If you&#39;ve never used a fragment, they are an
abstraction that lets you declare shared field-selections on a specific GraphQL type to reduce duplication in your
queries. For example:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;&#39;&gt;&lt;span class=&#39;line&#39;&gt;query GetPopularArtistAndFeaturedArtist {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  featuredArtist {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    id
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    name
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    bio
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  }
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  popularArtist {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    id
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    name
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    bio
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  }
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;To move this query to use fragments:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;&#39;&gt;&lt;span class=&#39;line&#39;&gt;query GetPopularArtistAndFeaturedArtist {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  featuredArtist {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    ...ArtistMetadata
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  }
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  popularArtist {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    ...ArtistMetadata
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  }
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;}
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;fragment ArtistMetadata on Artist {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  id
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  name
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  bio
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;It&#39;s a tiny bit longer, but you have a guarantee that the data is consistent across both artists. Now that you have
a rough idea of what a GraphQL fragment is, let&#39;s look at what a &lt;code&gt;FragmentContainer&lt;/code&gt; looks like. Here&#39;s a
simplified &lt;a href=&quot;https://github.com/artsy/emission/blob/892af2621eef455388e074701cca747330de3b3f/src/lib/Scenes/Settings/MyProfile.tsx#L95&quot;&gt;profile page&lt;/a&gt; from the Artsy iOS app:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;31&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;32&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;33&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;34&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;35&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;36&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;37&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;38&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;39&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;40&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;41&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ts&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;react&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createFragmentContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graphql&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;react-relay&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyProfile_me&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;__generated__/MyProfile_me.graphql&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Props&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ViewProperties&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;MyProfile_me&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyProfile&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;render() {&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProfilePhoto&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Subheading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/Subheading&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/Header&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ButtonSection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProfileButton&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Selling&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Sell works from your collection&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;onPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startSubmission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProfileButton&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Account Details&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Email, password reset, profile&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;onPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;goToUserSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/ButtonSection&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/View&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createFragmentContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyProfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;graphql&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;fragment&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyProfile_me&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Me&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;initials&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;There are three moving parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The TypeScript interface &lt;code&gt;MyProfile_me&lt;/code&gt;, generated by the compiler, which ensures we can only use fields that
were selected in the fragment&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;MyProfile&lt;/code&gt; component, which is a vanilla React component&lt;/li&gt;
&lt;li&gt;The exported &lt;code&gt;createFragmentContainer&lt;/code&gt; which returns a higher-order component that wraps &lt;code&gt;MyProfile&lt;/code&gt; and ties it
to a fragment on a &lt;code&gt;Me&lt;/code&gt; type in GraphQL&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Isolation&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Isolation&lt;/h2&gt;

&lt;p&gt;The React component &lt;code&gt;MyProfile&lt;/code&gt; will be passed in props that directly tie to the fragment that was requested. In
Relay terms, this is called &lt;a href=&quot;https://facebook.github.io/relay/docs/en/thinking-in-relay.html#data-masking&quot;&gt;data masking&lt;/a&gt; and it is one of the first hurdles for someone new to Relay to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Grok&quot;&gt;grok&lt;/a&gt;. In REST clients, and GraphQL API clients like Apollo Client, you make a request and that request is
passed through the React tree. E.g.&lt;/p&gt;

&lt;p&gt;&lt;/article&gt;
&lt;a href=&#39;/images/omakase-relay/tree.png&#39; style=&quot;&quot;&gt;
  &lt;img src=&quot;/images/omakase-relay/tree.png&quot; alt=&quot;REST inspired props&quot; style=&quot;width:100%;&quot;&gt;
&lt;/a&gt;
&lt;article class=&quot;post&quot;&gt;&lt;/p&gt;

&lt;p&gt;This means most components know more about the request than it probably needs, as it may be needed to pass on to
the component&#39;s children. This can lead to over-fetching, or even worse, not knowing if you can delete or refactor
a component.&lt;/p&gt;

&lt;p&gt;Data masking solves this by hiding data that the component didn&#39;t request. I&#39;ve still yet to find the right visual
abstraction, but I feel this just about pays for itself.&lt;/p&gt;

&lt;p&gt;&lt;/article&gt;
&lt;a href=&#39;/images/omakase-relay/isolation.png&#39; style=&quot;&quot;&gt;
  &lt;img src=&quot;/images/omakase-relay/isolation.png&quot; alt=&quot;Relay isolation tree&quot; style=&quot;width:100%;&quot;&gt;
&lt;/a&gt;
&lt;article class=&quot;post&quot;&gt;&lt;/p&gt;

&lt;p&gt;You let Relay be responsible for consolidating all your fragments into a query via the &lt;code&gt;QueryRenderer&lt;/code&gt;, causing the
network request, and your response data to be passed your through your component hierarchy. This means Relay
powered components can be safely changed and drastically reduces the chance for unintended consequences elsewhere.&lt;/p&gt;

&lt;p&gt;This isolation gives Artsy engineers the safety to work on projects with tens of contributors which regularly
change over time. Providing a guarantee that you can safely work in isolated parts of the codebase without accruing
technical debt.&lt;/p&gt;

&lt;p&gt;Relay&#39;s container components mean that the components we create are nearly all focused only on the data-driven
aspects of rendering a subset of that GraphQL response into views. It&#39;s very powerful.&lt;/p&gt;

&lt;a name=&quot;Co-location&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Co-location&lt;/h2&gt;

&lt;p&gt;Relay helped us move to one file representing everything a component needed. Effectively a single file now handles
the styles, the actual view content hierarchy, and the exact parts of the API it needs to render itself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/omakase-relay/co-location.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;In roughly that proportion too, though our most modern code uses the Artsy design system &lt;a href=&quot;https://github.com/artsy/palette&quot;&gt;Palette&lt;/a&gt; which
drastically reduces the need for style in our components.&lt;/p&gt;

&lt;p&gt;Co-location&#39;s biggest selling point is reducing &lt;a href=&quot;https://en.wikipedia.org/wiki/Cognitive_load&quot;&gt;cognitive load&lt;/a&gt;,
having everything you need in one place makes it easier to understand how a component works. This makes code review
simpler, and lowers the barrier to understanding the entire systems at scale.&lt;/p&gt;

&lt;a name=&quot;Community&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Community&lt;/h2&gt;

&lt;p&gt;When we adopted Relay, there was no competition - we&#39;d have just used the &lt;code&gt;fetch&lt;/code&gt; API. Over time, &lt;a href=&quot;https://www.apollographql.com&quot;&gt;the Apollo
team&lt;/a&gt; came up and really put a considerable amount of effort into lowering the barriers to entry, and
making it feasible to build complex apps easily.&lt;/p&gt;

&lt;p&gt;As we hired a set of new engineers, the &quot;Apollo vs Relay&quot; debate came up. Interested in whether we would still
start with Relay today, we ran an audit last year of what it would take to re-create a lot of the infrastructure we
love in Relay atop of the (much more popular) Apollo GraphQL eco-system and saw it was reasonably feasible but
would require a considerable amount of work across many different plugins and tools. With Relay that&#39;s all packaged
into one tool, works consistently and has been proven with Facebook having tens of thousands of Relay components in
production.&lt;/p&gt;

&lt;p&gt;It&#39;s worth highlighting the core difference in community engagement for Apollo vs Relay. Engineers working on
Apollo have great incentives to do user support, and improve the tools for the community - that&#39;s their businesses
value. Relay on the other hand is used in many places at Facebook, and the engineers on the team support internal
issues first. IMO, this is reasonable: Relay is an opinionated batteries-included framework for building user
interfaces, and ensuring it works with the baffling amount of JavaScript at Facebook is more or less all the team
has time for.&lt;/p&gt;

&lt;p&gt;That leaves space for the OSS community to own their own problems. Notably there&#39;s been quite a lot of work going
on in the community-managed &lt;a href=&quot;https://github.com/relay-tools&quot;&gt;relay-tools&lt;/a&gt; GitHub organization.&lt;/p&gt;

&lt;a name=&quot;Scale.Safety&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Scale Safety&lt;/h2&gt;

&lt;p&gt;Relay puts a lot of emphasis on ahead-of-time safety. The Relay compiler validates your queries against your
GraphQL schema, it emits Flow types for your fragmentâ€™s field selectionsâ€“which weâ€™ve extended to emit TypeScript
types instead, and there are strict naming systems enforced by the compiler. All of these help guide engineers to
build scalable codebases.&lt;/p&gt;

&lt;p&gt;How this works in practice is that whenever you need to change the data a component requires, you edit the
fragment, the Relay compiler verifies your query, if successful then your TypeScript types are updated and you can
use the new property in your React component above. See below for a &lt;a href=&quot;/images/omakase-relay/relay-process-720.mov&quot;&gt;quick video&lt;/a&gt; showing the Relay compiler
in action:&lt;/p&gt;

&lt;p&gt;&lt;/article&gt;&lt;/p&gt;

&lt;div&gt;
&lt;video controls style=&quot;margin: auto 20px; width:100%;&quot;&gt;
  &lt;source src=&quot;/images/omakase-relay/relay-process-720.mov&quot; type=&quot;video/mp4&quot;&gt;
  Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;


&lt;p&gt;&lt;article class=&quot;post&quot;&gt;&lt;/p&gt;

&lt;p&gt;Moving all of these checks to be during dev-time means we can feel more confident in our deploys. This is
especially an issue in an iOS native codebase, when any deploy requires a review from Apple and roll-backs are
impossible.&lt;/p&gt;

&lt;a name=&quot;Cultural.Fit&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Cultural Fit&lt;/h2&gt;

&lt;p&gt;Relay fit well into our team because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We had engineers who were interested in contributing back and extending Relay to work for our cases&lt;/li&gt;
&lt;li&gt;We had engineers that were used to the benefits of ahead-of-time error validation tools that compilers offer&lt;/li&gt;
&lt;li&gt;We saw a lot of value in a tightly coupling our view structure to our user interface&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Relay is not without its shortcomings to users outside of Facebook, but Relay has definitely paid for its initial
and occasional complexity for the tightness of our codebases many years down the line.&lt;/p&gt;

&lt;!-- prettier-ignore-start --&gt;


&lt;!-- prettier-ignore-end --&gt;



</description>
        <pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/04/10/omakase-relay/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/04/10/omakase-relay/</guid>
        
        
        <category>community</category>
        
        <category>omakase</category>
        
        <category>relay</category>
        
      </item>
    
      <item>
        <title>What is TypeScript?</title>
        <description>&lt;p&gt;TypeScript is a language from Microsoft which builds on JavaScript. This post is a non-technical overview of what
JavaScript is, how TypeScript extends JavaScript and why we choose to adopt TypeScript at Artsy.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;What.is.JavaScript.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What is JavaScript?&lt;/h2&gt;

&lt;p&gt;First up, you can&#39;t describe TypeScript without talking about JavaScript. To create a website (and a bunch of other
types of things) you work in three languages: HTML, CSS and JavaScript (JS). Broadly speaking: HTML defines the
content that will appear on the page, CSS defines the visual style of the page, and JS defines the interactive
behaviours of the page.&lt;/p&gt;

&lt;p&gt;We describe having these sets of skills as being a &quot;front-end&quot; developer. You have to understand those three
languages to present anything inside a web browser like Safari, Firefox or Chrome. So, given how popular the web
is, there is a massive demand for people who are good at using these three languages.&lt;/p&gt;

&lt;p&gt;There is also the set of skills for the &quot;back-end&quot; developers, which are to create computer services that
communicate either to a web browser (by passing it HTML/CSS/JS) or to another service (by sending a raw data.) You
don&#39;t need to use HTML, CSS or JS to write this type of code, but it&#39;s usually an end-product of your work. We
mostly build our back-ends in Ruby or JavaScript at Artsy.&lt;/p&gt;

&lt;a name=&quot;What.do.Programming.Languages.do.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;What do Programming Languages do?&lt;/h3&gt;

&lt;p&gt;Programming languages are an interesting problem to solve. People read code many, many multiples of times more than
they write it - so developers create languages which are good at solving particular problems with a small amount of
code. Here&#39;s an example using JavaScript:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;The first line makes a variable (a kind of box you can keep things in) and then the second line outputs text to the
console (think DOS, or the terminal) &lt;code&gt;&quot;Hello, Danger&quot;&lt;/code&gt;. JavaScript is designed to work as a scripting language,
which means the code starts at the top of the file and then goes through line by line. To provide some contrast,
here is the &lt;a href=&quot;https://repl.it/repls/VioletredGlisteningInfo&quot;&gt;same behavior&lt;/a&gt; in Java, which is built with different
language constraints:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;java&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;blockquote&gt;&lt;p&gt;Note: if you find the naming of Java and JavaScript confusing, it is (they are two completely separate
programming languages, no link at all.) JavaScript was &lt;a href=&quot;https://medium.com/@benastontweet/lesson-1a-the-history-of-javascript-8c1ce3bffb17&quot;&gt;named that way&lt;/a&gt; because Java was looking to be
really the next hot language (it did turn out that way for a decade or two, but now JavaScript is usually the
first language people have heard of.)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Aside from having a lot more lines, the Java version comes with a lot of words that aren&#39;t necessarily about
telling the computer exactly what to do, e.g. &lt;code&gt;class Main {&lt;/code&gt;, &lt;code&gt;public static void main(String[] args) {&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt; and
&lt;code&gt;}&lt;/code&gt; again. It also has semi-colons at the end of some lines. Java is aimed at building different things from
JavaScript, and these extra bits of code make sense within the constraints of building a Java app.&lt;/p&gt;

&lt;p&gt;To get to my main point though, there is one standout line I&#39;d like us to compare:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;java&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// JavaScript&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Java&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Both of these lines declare variables called &lt;code&gt;name&lt;/code&gt; which contain the value &lt;code&gt;&quot;Danger&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In JavaScript you use the abbreviation &lt;code&gt;var&lt;/code&gt; to declare a variable. Meanwhile, in Java you need to say &lt;em&gt;what kind
of data&lt;/em&gt; the variable contains. In this case the variable contains a &lt;code&gt;String&lt;/code&gt;. (A string is a programming term for
a collection of characters. They &lt;code&gt;&quot;look like this&quot;&lt;/code&gt;. This &lt;a href=&quot;https://www.youtube.com/watch?v=czTWbdwbt7E&quot;&gt;5m video&lt;/a&gt;
is a good primer if you want to learn more.)&lt;/p&gt;

&lt;p&gt;Both of these variables contain a string, but the difference is that in Java the variable can &lt;em&gt;only&lt;/em&gt; ever contain a
&lt;em&gt;string&lt;/em&gt;, because that&#39;s what we said when we created the variable. In JS the variable can change to be &lt;em&gt;anything&lt;/em&gt;,
like a number, or a list of dates.&lt;/p&gt;

&lt;p&gt;To illustrate:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Before in JS&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Also OK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;2018-02-03&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2019-01-12&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Before in Java&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Not OK, the code wouldn&amp;#39;t be accepted by Java&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;2018-02-03&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2019-01-12&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;These trade-offs make sense in the context for which these languages were built back in 1995. JavaScript was
originally designed to be a small programming language which handled simple interactions on websites. Java on the
other hand was built specifically to make big apps which could run on any computer. Their needs had different
scales, so the language required programmers write different types of code.&lt;/p&gt;

&lt;p&gt;Java required programmers to be more explicit with the values of their variables because the programs they expected
people to build were more complex. While JavaScript opted for ease of reading, and aimed to do less.&lt;/p&gt;

&lt;a name=&quot;What.is.TypeScript.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;What is TypeScript?&lt;/h3&gt;

&lt;p&gt;TypeScript is a programming language - it contains all of JavaScript, and then a bit more. Using our example above,
let&#39;s compare the scripts for &quot;Hello, Danger&quot; in JavaScript vs TypeScript:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// JavaScript&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// TypeScript&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Yep, you&amp;#39;re not missing something, there&amp;#39;s no difference&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Due to TypeScript&#39;s aim to only &lt;em&gt;extend&lt;/em&gt; JavaScript, your normal JavaScript code should work fine with TypeScript.
The things TypeScript adds to JavaScript are intended to help you be more explicit about what kinds of data are
used in your code, a bit like Java.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;diff&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gd&quot;&gt;- var name = &amp;quot;Danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ var name: string = &amp;quot;Danger&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;console.log(&amp;quot;Hello, &amp;quot; + danger)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This extra &lt;code&gt;: string&lt;/code&gt; allow the reader to be certain that &lt;code&gt;name&lt;/code&gt; will only be a string. Annotating your variables
also gives TypeScript the chance to verify this for you. This is &lt;em&gt;very&lt;/em&gt; useful because keeping track of changes
like the type of value in a variable seems easy when it&#39;s one or two, but once it starts hitting the hundreds,
that&#39;s a lot to keep track of. Types help programmers be more confident about their code because types catch
mistakes.&lt;/p&gt;

&lt;p&gt;Simply speaking, we call these annotations &quot;Types&quot;. Hence the name &lt;i&gt;Type&lt;/i&gt;Script. The tag-line for TypeScript
is &quot;JavaScript which scales&quot; which is a statement that these extra type annotations allows you to work on bigger
projects. This is because you can verify up-front how correct your code is. This means you have less need to
understand how every change affects the rest of the program.&lt;/p&gt;

&lt;p&gt;In the 90s, and maybe until a 5-10 years ago the trade-off for not having types in your JavaScript application was
fine because the size and complexities of the programs being built were constrained to just the front-end pff
websites. Today though, JavaScript is being used everywhere:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apps like Slack, or Spotify for your computer are built in mostly JavaScript&lt;/li&gt;
&lt;li&gt;Some iOS apps, including Artsy&#39;s are mostly JavaScript&lt;/li&gt;
&lt;li&gt;The back-end and front-end of Artsy.net are JavaScript&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These are all considerably more complicated to build and understand, adding types drastically reduces the
complexity of making improvements to those programs.&lt;/p&gt;

&lt;a name=&quot;Why.does.Artsy.use.TypeScript.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Why does Artsy use TypeScript?&lt;/h3&gt;

&lt;p&gt;Artsy definitely isn&#39;t the size of Microsoft! Artsy is about 30 engineers, and Microsoft are about 60,000. However,
some of our problems are the same. Developers at Artsy build apps which are made up of thousands of files. A change
to one individual file can affect the behaviour of any number of other files, like throwing a pebble into a pond
and causing ripples to spread out to the bank.&lt;/p&gt;

&lt;p&gt;Typically, the need to ensure there are no bugs is less of a problem for people building websites. Websites are
easy to make changes to, because if you change the site - everyone gets the update instantly. We also build our iOS
app with JavaScript, but a change to our app requires Apple to review the changes and for users to download the new
version from the App Store.&lt;/p&gt;

&lt;p&gt;This means that the iOS team needs to have more checks that everything is OK before shipping the app to the world.
Using TypeScript gives our team the ability to feel good that the changes we have made are only the changes we
want.&lt;/p&gt;

&lt;p&gt;TypeScript isn&#39;t the only programming language to tackle the problem of making JavaScript code safer, but it&#39;s the
one with the biggest community, allows people to re-use their JavaScript knowledge, can be added in small steps,
and has really good tools to help developers work faster.&lt;/p&gt;

&lt;p&gt;These qualities made it worth adding an extra tool to our developers&#39; toolbelt, and we&#39;re not the only ones because
TypeScript is growing to be &lt;a href=&quot;https://www.wired.com/story/typescript-microsoft-javascript-alternative-most-popular&quot;&gt;one of the most popular programming languages in the world&lt;/a&gt; with almost 6
million downloads a week.&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/04/05/omakase-typescript/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/04/05/omakase-typescript/</guid>
        
        
        <category>community</category>
        
        <category>javascript</category>
        
        <category>roads and bridges</category>
        
        <category>typescript</category>
        
      </item>
    
      <item>
        <title>Peril Architecture Deep Dive</title>
        <description>&lt;p&gt;For the &lt;a href=&quot;/blog/2017/09/04/Introducing-Peril/&quot;&gt;last two years&lt;/a&gt;, we&#39;ve used &lt;a href=&quot;https://github.com/danger/peril&quot;&gt;Peril&lt;/a&gt; to automate quite a lot of process at Artsy. You can see
a full overview of what &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/peril.md&quot;&gt;we automate in &lt;code&gt;artsy/README&lt;/code&gt;&lt;/a&gt;. As a service, Peril is a bit of an iceberg
of complexity, most tooling-y developers at Artsy have &lt;a href=&quot;https://github.com/artsy/peril-settings/graphs/contributors&quot;&gt;contributed&lt;/a&gt; to our user-land Dangerfiles
but very few have touched the server itself.&lt;/p&gt;

&lt;p&gt;To lower that barrier, I gave our Engineering team a run through of how the server works and how a lot of the
pieces come together. Jump &lt;a href=&quot;https://www.youtube.com/watch?v=3HNmiNHCvdA&quot;&gt;to YouTube&lt;/a&gt; for the video, or click more
for a smaller inline preview.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;iframe width=&#39;100%&#39; height=&#39;600&#39; src=&#39;https://www.youtube.com/embed/3HNmiNHCvdA &#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/04/04/peril-architecture-deep-dive/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/04/04/peril-architecture-deep-dive/</guid>
        
        
        <category>community</category>
        
        <category>ios</category>
        
        <category>reactnative</category>
        
        <category>roads and bridges</category>
        
      </item>
    
      <item>
        <title>React Native at Artsy, 3 years later</title>
        <description>&lt;p&gt;On Valentine&#39;s day in 2014, @alloy made our first commit moving the Artsy Mobile team to JavaScript, and paving the
way to the &lt;a href=&quot;https://www.youtube.com/watch?v=1Z3loALSVQM&quot;&gt;shared Omakase JavaScript stack across web + iOS&lt;/a&gt;. We&#39;ve done a write-up at &lt;a href=&quot;/blog/2016/08/15/React-Native-at-Artsy/&quot;&gt;6 months&lt;/a&gt;, &lt;a href=&quot;/blog/2017/02/05/Retrospective-Swift-at-Artsy/&quot;&gt;1 year&lt;/a&gt;,
&lt;a href=&quot;/blog/2018/03/17/two-years-of-react-native/&quot;&gt;2 years&lt;/a&gt; and at 2.5 years we collaborated on a React Native conference with Facebook which features a &lt;a href=&quot;http://artsy.net/x-react-native&quot;&gt;very long
Q&amp;amp;A&lt;/a&gt; session with the people who worked on, and with our React Native stack.&lt;/p&gt;

&lt;p&gt;Our experience has been really positive building a single platform data-driven app. We&#39;ve been able to drastically
increase the number of contributors to the codebase and with minimal guidance, web-developers are able to be
productive and ship features to our iOS apps.&lt;/p&gt;

&lt;p&gt;That said, for this 3 year anniversary, I want to dive deeper into some of the less positive aspects of our
transition. We think these trade-offs are worth it, and that this may be what a successful cultural transition
eventually looks like for some companies.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;De-nativification&quot;&gt;&lt;/a&gt;
&lt;h2&gt;De-nativification&lt;/h2&gt;

&lt;p&gt;When adopting React Native, we de-emphasized iOS as a unique platform for Artsy.&lt;/p&gt;

&lt;p&gt;From an engineering team&#39;s perspective, we think of it as skill &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#de-silo-engineers&quot;&gt;de-siloing&lt;/a&gt;. Prior to the move, if you
were on the mobile team you only worked on the iOS apps. This meant you had a limited scope to make change at
Artsy. This comes from two factors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Skills in Obj-C and Swift are only useful in the context of Apple&#39;s platforms.&lt;/li&gt;
&lt;li&gt;Internally and externally, Artsy is considered a website first.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Within 2 years we had de-siloed mobile engineering completely. We started with a team of 5 experienced native iOS
developers and by the end everyone had very solid skills across the board in JavaScript, React, GraphQL and the
build tools we&#39;d need to make it all come together. These engineers kept their native skills, but they became
frozen in time.&lt;/p&gt;

&lt;p&gt;With time, we redistributed the native engineers across many teams, with the native Engineers effectively acting as
a conduit for ensuring that we keep quality high and providing guidance to the rest of that team on how to make it
feel right. A simple way to think of it, is that the native engineer&#39;s job was to make sure we still conformed to
the &lt;a href=&quot;https://developer.apple.com/design/human-interface-guidelines/&quot;&gt;Apple Human Interface Guidelines&lt;/a&gt; to ensure
the user experience is consistent with the platform and the userâ€™s expectations.&lt;/p&gt;

&lt;p&gt;We&#39;re reasonably lucky here too, the mobile team at Artsy has pre-dominantly hired folks interested in improving
behind-the-scenes (&lt;a href=&quot;https://www.fordfoundation.org/about/library/reports-and-studies/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure/&quot;&gt;Roads and Bridges&lt;/a&gt; style) infrastructure. Once we had wrapped up the move, we effectively
took all of our native product developers and moved them into JavaScript platform infrastructure roles.&lt;/p&gt;

&lt;p&gt;This was one of the major blocking points for AirBnB&#39;s adoption of React Native, specifically their native teams
felt uncomfortable at the introduction of JavaScript and a whole new toolchain inside their apps. There are people
who really love being a product developer in a native codebase, and React Native as a technology will de-value that
as more work would happen in JavaScript.&lt;/p&gt;

&lt;p&gt;(Note: this is a gross simplification, and me reading between the lines, you should read from the horseâ€™s mouth and
check out &lt;a href=&quot;https://medium.com/airbnb-engineering/react-native-at-airbnb-f95aa460be1c&quot;&gt;Airbnbâ€™s posts&lt;/a&gt; (and &lt;a href=&quot;https://ashfurrow.com/blog/airbnb-and-react-native-expectations/&quot;&gt;Ash&#39;s continuation&lt;/a&gt; on the subject ))&lt;/p&gt;

&lt;p&gt;After a year of adopting React Native, the ex-mobile team used to joke that no-one enjoyed working in the native
codebase anymore. They still did. Three years down the line, with most screens now in React Native, that&#39;s not a
joke anymore.&lt;/p&gt;

&lt;p&gt;This has consequences.&lt;/p&gt;

&lt;a name=&quot;Platform.Concerns&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Platform Concerns&lt;/h2&gt;

&lt;p&gt;De-siloing our mobile team obviously wasn&#39;t without its risk. In expanding the scope of our mobile engineering
team, and opening up the iOS app for contributions to the rest of the company we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Moved the engineers with a native focus to act more like platform engineers vs product engineers.&lt;/li&gt;
&lt;li&gt;Had iOS native platform engineers with the skills to now also work on the web&#39;s platform.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is what started to make our third year tricky. In Artsy, web is the &lt;a href=&quot;https://en.wikipedia.org/wiki/The_squeaky_wheel_gets_the_grease&quot;&gt;squeaky wheel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After figuring out the JavaScript infrastructure for React Native on iOS, we replicated that infrastructure on the
web to consolidate tooling and ideas across all of Artsy. We call that infrastructure for both &lt;a href=&quot;https://www.youtube.com/watch?v=1Z3loALSVQM&quot;&gt;the Artsy
Omakase&lt;/a&gt;. Maintaining, and keeping the infrastructure up-to-date on the web side is a much bigger task and
requires a lot more engineering time.&lt;/p&gt;

&lt;p&gt;The web-aspect of the Omakase has more client consumers (1 iOS app vs 3 large websites), and its corresponding repo
has more than double the number of commits per day on average. The web team has its own people running and
improving infrastructure, which affects the iOS side too.&lt;/p&gt;

&lt;p&gt;We explicitly worked towards shared common infrastructure across all front-end at Artsy. It wasn&#39;t surprising when
the aspect with the most company focus became much larger and more complex. What creates tricky constraints are
that the few people with the interest and skills to work on our React Native infrastructure also happen to have the
skills to work on the web problems too.&lt;/p&gt;

&lt;p&gt;Those web problems tend to be a lot more valuable to the business.&lt;/p&gt;

&lt;p&gt;There&#39;s some work that can be done to benefit both, but in the last year it has been hard to prioritise
iOS-specific platform work. For example, it took almost a year to get around to upgrading our version of React
Native. This is a pretty risky place to be for a platform which we care about.&lt;/p&gt;

&lt;p&gt;At the end of 2018, we came to the conclusion that this was something we wanted to work to improve. So, we
specifically brought back an explicit iOS-specific culture to Artsy - when we split our front-end practice into web
and &lt;a href=&quot;https://github.com/artsy/README/commit/95c9b93ab966ed269b5ebd9f0bdec8d2434bab52#diff-342d3433f36fbedadc5a8f167985fdf3&quot;&gt;iOS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Maybe this is a small admission of failure to the idea of a purely de-silo&#39;d team, but realistically while product
work across the two front-ends teams is consistent - the platform concerns just aren&#39;t.&lt;/p&gt;

&lt;a name=&quot;Keeping.up.with.the.Jobs.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Keeping up with the Jobs&#39;&lt;/h2&gt;

&lt;p&gt;As individual developers, it&#39;s much less important for us to keep up to date with the latest Apple developer news.
WWDCs and iOS releases just kinda happen, and we keep moving independently. We still write native code to make use
of any iOS API available when we need to, but right now we donâ€™t go out of our way to try to make use of all the
shiny new things when they are released.&lt;/p&gt;

&lt;p&gt;This is a side-effect to the openness of the JavaScript toolchain, and our ability to contribute and fix a lot of
our own problems at JavaScript level instead of needing to dive deeper into the native side to work on problems. We
still support iOS 9, and have very little incentive to bump it - new APIs from Apple just aren&#39;t that interesting
anymore.&lt;/p&gt;

&lt;p&gt;Without a focused iOS team, it&#39;s not easy to pitch for iOS specific projects. This means that features like moving
to Apple&#39;s new app store review API or using iOS features which don&#39;t exist on web get spoken about in meetings,
but never started. This lack of a focused team makes it really hard to implement fixes to e.g. bad App Store
reviews.&lt;/p&gt;

&lt;p&gt;That said, in the last year we did manage to ship a pretty hefty &lt;a href=&quot;/blog/2018/03/18/ar/&quot;&gt;ARKit feature&lt;/a&gt; - which is a positive
example of an iOS-specific feature which is both forward-thinking tech and a super great fit for Artsy&#39;s product.
React Native basically played no part in that.&lt;/p&gt;

&lt;a name=&quot;Community.Disconnection&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Community Disconnection&lt;/h2&gt;

&lt;p&gt;There are maybe four communities at play if you&#39;re doing React Native:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript (Babel/TypeScript/Storybooks/VSCode)&lt;/li&gt;
&lt;li&gt;React (Relay/Styled Components)&lt;/li&gt;
&lt;li&gt;React Native (Mostly people creating cross-platform tools)&lt;/li&gt;
&lt;li&gt;Native (Obj-C/Swift/CocoaPods/fastlane etc)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It&#39;s hard to keep on-top of any one community, and it&#39;s very hard to keep on track of four. Realistically, if you
want to be writing apps at the level of quality we want to - you need to, though.&lt;/p&gt;

&lt;p&gt;Artsy&#39;s principal of &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#own-your-dependencies&quot;&gt;owning our dependencies&lt;/a&gt; means involved in all of these communities, however it&#39;s
hard to engage in the native community with too much excitement anymore. Most of their problems aren&#39;t the same as
ours anymore, and the dependencies we want to improve live in the JavaScript realms.&lt;/p&gt;

&lt;a name=&quot;Universal.Issues.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Universal Issues?&lt;/h2&gt;

&lt;p&gt;Are these the kind of problems most teams would have? It depends, with React Native at Artsy our focus on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Offering a consistent way to write code across web and iOS, which doesnâ€™t water down either platform.&lt;/li&gt;
&lt;li&gt;Ensuring we are able to meaningfully own our dependencies across the stacks.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Means that we took on some technical and cultural debt, specifically around the platform aspect of our native
codebase. There are a few levers we can use to fix some of these issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let iOS be a bit more webby, by using more JavaScript instead of enforcing stricter platform standards.&lt;/li&gt;
&lt;li&gt;Use more of the React Native communityâ€™s infra-structure, we generally don&#39;t use React Native JavaScript
dependencies. These dependencies usually are cross-platform on Android and iOS which tends to mean making
compromises per-platform. Often we are forcing ourselves into extra work to ensure platform consistency.&lt;/li&gt;
&lt;li&gt;Find a way to ensure clearer engineering and product ownership for iOS at Artsy.&lt;/li&gt;
&lt;li&gt;Hire more iOS infrastructure engineers to allow for a better mix of native infra vs JavaScript product engineers.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;How and if we&#39;ll tweak these levers will make for an interesting retrospective. Till then, I&#39;d like to finish with
a showcase of some of the React Native work we shipped over the course of the last 4 months:&lt;/p&gt;

&lt;p&gt;&lt;/article&gt;
&lt;a href=&#39;/images/react-native-3/rn_3_1.jpg&#39; style=&quot;&quot;&gt;
  &lt;img src=&quot;/images/react-native-3/rn_3_1.jpg&quot; alt=&quot;&quot; style=&quot;width:100%;&quot;&gt;
&lt;/a&gt;
&lt;article class=&quot;post&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/article&gt;
&lt;a href=&#39;/images/react-native-3/rn_3_2.jpg&#39; style=&quot;&quot;&gt;
  &lt;img src=&quot;/images/react-native-3/rn_3_2.jpg&quot; alt=&quot;&quot; style=&quot;width:100%;&quot;&gt;
&lt;/a&gt;
&lt;article class=&quot;post&quot;&gt;&lt;/p&gt;

&lt;p&gt;We wouldn&#39;t have been able to ship this without React Native.&lt;/p&gt;

&lt;!-- prettier-ignore-start --&gt;


&lt;!-- prettier-ignore-end --&gt;

</description>
        <pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/03/17/three-years-of-react-native/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/03/17/three-years-of-react-native/</guid>
        
        
        <category>community</category>
        
        <category>ios</category>
        
        <category>reactnative</category>
        
        <category>roads and bridges</category>
        
      </item>
    
      <item>
        <title>So You Want to Be an Engineer</title>
        <description>&lt;p&gt;First of all, that&#39;s very exciting! Software engineering is pretty darn coolâ€”you get to learn lots of new things,
understand the technology you use every day better, and contribute to the mysterious maw known as &quot;the internet&quot;.&lt;/p&gt;

&lt;p&gt;Last February, I also decided that I wanted to pursue computer engineering. I&#39;d been at Artsy for a bit less than
two years at that point, first as a marketing intern working on SEO and then as a coordinator on the CRM (read:
email) team. I&#39;d consistently been working on small technical projects; first doing
&lt;a href=&quot;https://github.com/artsy/positron/commit/3176282a3ea94c626e9d851b7c0dd27a1bb0fcb4&quot;&gt;some work&lt;/a&gt; on a tool for SEO
optimization for our Editorial team, then building
&lt;a href=&quot;http://artsy.github.io/blog/2018/11/19/mjml/&quot;&gt;emails with MJML&lt;/a&gt;, and a few other bits and bobs. But I didn&#39;t think
of it as a serious pursuit.&lt;/p&gt;

&lt;p&gt;Mostly, that was due to my experience programming in the pastâ€”I did about half a CS major in undergrad. At the
time, I felt that programming wasn&#39;t right for me, and I dropped the major during my third year.&lt;/p&gt;

&lt;p&gt;It was Artsy&#39;s Engineering team that convinced me that programming was something that I both wanted to and could
do. Our engineers have always welcomed learners and been happy to answer questions and empower other teams to do
technical work. I eventually realized that the parts of my work where I was coding were the parts I enjoyed the
most, and that I would likely feel more fulfilled if I made programming my full-time occupation.&lt;/p&gt;

&lt;p&gt;Here&#39;s what that journey looked like. Hopefully my experience proves helpful to you as you begin (or finish) yours!&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Step.One:.Tell.People.What.You.Want&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Step One: Tell People What You Want&lt;/h1&gt;

&lt;p&gt;This might&#39;ve been the single biggest learning I took away from this experience: &lt;em&gt;if you tell people you want
something, you might just get it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That may sound super obvious. It wasn&#39;t for me. I&#39;ve usually been very passive in my career decisions, taking the
path of least resistance and considering myself lucky when I was able to keep progressing. In this case, I was
making a substantial departure from that idea by being proactive about what it was I wanted.
&lt;a href=&quot;https://engineering.gusto.com/i-didnt-want-to-be-a-manager-anymore-and-the-world-didnt-end/&quot;&gt;This post&lt;/a&gt; by
&lt;a href=&quot;https://twitter.com/NoaElad&quot;&gt;Noa Elad&lt;/a&gt; does a great job with this topic and is certainly worth a read.&lt;/p&gt;

&lt;p&gt;The first person I told at Artsy was &lt;a href=&quot;https://twitter.com/orta&quot;&gt;Orta&lt;/a&gt;. He&#39;d often encouraged me to develop my
technical skills, and since he knows Artsy&#39;s engineering team and stack better than just about anyone, I figured
he&#39;d be able to point me in the right direction when it came to learning resources and navigating company politics
to get to my eventual goal.&lt;/p&gt;

&lt;p&gt;The second person I told was my manager on the CRM team. I fortunately had a very good relationship with my manager
and was confident that she would help me if she could. And by telling her early, I was giving her more opportunity
to advocate for me and making it easier for her to replace me in the event that I was able to switch teams.&lt;/p&gt;

&lt;p&gt;The third person I told was Artsy&#39;s CTO, &lt;a href=&quot;https://www.dblock.org/&quot;&gt;dB&lt;/a&gt;. This was Orta&#39;s recommendationâ€”dB would be
able to tell me if and when a move might be possible, and he could suggest things I should do to improve my chances
of making the switch.&lt;/p&gt;

&lt;p&gt;I also didn&#39;t keep it a secret from the rest of my team or the company. I didn&#39;t show up wearing a shirt that said
&quot;ENGINEER&quot; on it, but I told people, &quot;I&#39;m working on becoming an engineer. I&#39;m really hoping to stay at Artsy, but
if there&#39;s not a role open for me, that&#39;s fineâ€”I&#39;ll search elsewhere.&quot;&lt;/p&gt;

&lt;p&gt;The net outcome of these conversations was that there wasn&#39;t a role open right then (and that I still had lot to
learn before I&#39;d be ready when one became available), but I also left with a better idea of what I should learn and
what I could expect from the coming months.&lt;/p&gt;

&lt;a name=&quot;Step.Two:.Figure.Out.What.You.Want.to.Learn&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Step Two: Figure Out What You Want to Learn&lt;/h1&gt;

&lt;p&gt;The answer to that question really depends on who you are, where you work, and where you &lt;em&gt;want&lt;/em&gt; to work.&lt;/p&gt;

&lt;p&gt;I wanted to work at Artsy, and I felt that I was most interested in front-end work. So I asked a few of our
engineers to help me understand our stack and to recommend frameworks/languages I should learn.&lt;/p&gt;

&lt;p&gt;If you&#39;re interested in changing companies as well as careers, it&#39;s worth seeing if your target company or
companies have open source code you can check out. See if you can find them on &lt;a href=&quot;https://www.github.com&quot;&gt;GitHub&lt;/a&gt; and
look at some of their recently updated repos. If you already have some coding experience, see if you can contribute
a little bitâ€”even fixing small bugs or typos is a good place to start, since you&#39;re both contributing to their
codebase (which will help you if you land an interview) and learning more about their stack. dB recommended that I
do this with Artsy&#39;s code.&lt;/p&gt;

&lt;p&gt;As with most companies that have been around for more than a year or two, Artsy is home to projects with many
different stacks. However, most of our newer front-end stuffâ€”things that are recently updated or currently in
developmentâ€”is built on React using TypeScript. So my first question was &quot;what do I need to know in order to write
TypeScript code in a React framework?&quot;&lt;/p&gt;

&lt;p&gt;Fortunately, a lot of other people have the same question.&lt;/p&gt;

&lt;a name=&quot;Step.Three:.Decide.How.You.Want.to.Learn.It&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Step Three: Decide How You Want to Learn It&lt;/h1&gt;

&lt;p&gt;First: &lt;strong&gt;there is no wrong way to go about learning to code&lt;/strong&gt;. Whether it takes you 6 months or 6 years, whether
you learn one language or a dozen, whether you ask for a lot of help or do it all yourself, &lt;strong&gt;you are learning and
that is valuable&lt;/strong&gt;. Learning to code is not a magical skill. Like just about everything, it&#39;s a matter of putting
in time. Just keep trying, even small things, and you &lt;em&gt;will&lt;/em&gt; make progress.&lt;/p&gt;

&lt;p&gt;Lots of people who want to become engineers go to coding bootcamps like &lt;a href=&quot;https://flatironschool.com/&quot;&gt;Flatiron&lt;/a&gt; or
&lt;a href=&quot;https://generalassemb.ly/&quot;&gt;General Assembly&lt;/a&gt;. That&#39;s a very reasonable thing to do! I had a decent grounding in CS
fundamentals thanks to my experience in undergrad, and as a result, I initially decided I wouldn&#39;t do a coding
bootcampâ€”I felt I had enough experience to benefit from the multitude of online courses and open source projects
out there.&lt;/p&gt;

&lt;p&gt;However, there are definitely real and significant benefits do doing a bootcamp. Here are three that I can think
of:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clear curriculum. At times, I was overwhelmed by the possible ways to proceed and stopped making progress as a
result. Bootcamps take the guesswork out.&lt;/li&gt;
&lt;li&gt;Timeline. Because I didn&#39;t have a hard date set for a transition or interview, it was up to me to determine how
fast/slow I worked on things, and I stagnated at times as a result.&lt;/li&gt;
&lt;li&gt;Community. While the open source community is very much a real thing, and you can find lovely people on the
internet who want to help learners like yourself, it&#39;s not the same as having multiple people learning the same
thing at the same time in the same physical space.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The downsides, of course, are that coding bootcamps are expensive and time-consuming. Most of us don&#39;t have the
luxury to leave a job, pay $10K â€“ $15K in fees, and spend a couple months at a full-time bootcamp with no income.
There are other models, such as online-only bootcamps or after-hours classes, but those come with challenges of
their own.&lt;/p&gt;

&lt;p&gt;I&#39;d say that If you can afford a bootcamp and have the time, it&#39;s a great way to jumpstart a coding career, but you
don&#39;t have to attend one to become a good engineer.&lt;/p&gt;

&lt;p&gt;If you decide to go the non-bootcamp route, you also have a lot of good options. I did courses through
&lt;a href=&quot;https://www.udemy.com&quot;&gt;Udemy&lt;/a&gt;, which has a lot of courses that are literally always on sale for $10 - $20. There
are many other similar services out there as well, like &lt;a href=&quot;https://www.udacity.com&quot;&gt;Udacity&lt;/a&gt;,
&lt;a href=&quot;https://www.codecademy.com/&quot;&gt;Codecademy&lt;/a&gt;, and &lt;a href=&quot;https://teamtreehouse.com/&quot;&gt;Treehouse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also highly recommend attending IRL meetups, because that&#39;s where you can make connections and learn from others
most easily. I&#39;m a semi-regular attendee at the &lt;a href=&quot;https://www.meetup.com/CocoaPods-NYC/&quot;&gt;CocoaPods meetup&lt;/a&gt; hosted by
&lt;a href=&quot;https://twitter.com/ashfurrow&quot;&gt;Ash&lt;/a&gt; and Orta at Artsy HQ, and &lt;a href=&quot;https://www.meetup.com/find/tech/&quot;&gt;meetup.com&lt;/a&gt; and
&lt;a href=&quot;https://peerlab.community/&quot;&gt;peerlab.community&lt;/a&gt; are great places to find other events.&lt;/p&gt;

&lt;a name=&quot;Step.Four:.Get.Comfortable.Not.Knowing.Things&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Step Four: Get Comfortable Not Knowing Things&lt;/h1&gt;

&lt;p&gt;When learning engineering concepts (and practicalities), there&#39;s a lot you&#39;re not going to know.&lt;/p&gt;

&lt;p&gt;This piece of advice is important both when learning and once you actually land an engineering job (it&#39;s been one
of the hardest parts of my first ~3 months on Artsy engineering).&lt;/p&gt;

&lt;p&gt;Part of what makes engineering so cool is that you are always challenged to learn new things and solve new
problems. But especially at first, the mental toolbox you have is pretty limited. When you don&#39;t know a language or
framework, it&#39;s very hard to solve problems using itâ€”your first problems are likely to be syntax errors and
misunderstandings.&lt;/p&gt;

&lt;p&gt;One of the best things you can do is learn how to ask good questions and then ask them. You might be asking them on
a forum, in GitHub issues, in meetings, or in conversation with your
&lt;a href=&quot;https://en.wikipedia.org/wiki/Rubber_duck_debugging&quot;&gt;favorite rubber duck&lt;/a&gt;. Regardless, just asking them will
help, and asking lots of questions is one of the best way to learn things fastâ€”but it takes humility and
self-awareness. &lt;a href=&quot;https://twitter.com/b0rk&quot;&gt;Julia Evans&lt;/a&gt; has a &lt;a href=&quot;https://jvns.ca/wizard-zine.pdf&quot;&gt;great zine&lt;/a&gt; that
has good advice on asking questions, among many other things. For a few more fun and helpful resources, see
&lt;a href=&quot;https://github.com/artsy/README/blob/master/resources/tech-learning.md&quot;&gt;Artsy&#39;s README&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;Step.Five:.Recognize.What.You.Bring.to.the.Table&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Step Five: Recognize What You Bring to the Table&lt;/h1&gt;

&lt;p&gt;Ok, so you&#39;re reconciled to the fact that you have a lot to learnâ€”but what about all the things you already know?
Those are important too!&lt;/p&gt;

&lt;p&gt;Even if your past work and/or life experience has nothing to do with computers or programming, it can still have
value as you work towards engineering (and after you become an engineer). That value can take a lot of different
forms, and since everyone&#39;s experiences are different, I can&#39;t say for sure what impact your prior knowledge will
have.&lt;/p&gt;

&lt;p&gt;For me, there are a few experiences I brought to engineering that were particularly helpful. Because I was
transitioning from one team at Artsy to another (Marketing â†’ Engineering), I brought with me a broad understanding
of Artsy&#39;s goals and needs, which helps with day-to-day prioritization. And when I&#39;m in a sprint planning meeting
or a product review and someone has a question about email or marketing, I can often answerâ€”or at least I know who
to talk to to get to the bottom of the issue quickly. Plus if at some point my team needs to code emails, my
&lt;a href=&quot;http://artsy.github.io/blog/2018/11/19/mjml/&quot;&gt;past experience&lt;/a&gt; will come in very handy.&lt;/p&gt;

&lt;p&gt;There are also life experiences that serve me well on the Engineering team. My work as a server and bartender made
me good at clear communication with stakeholders. Cooking for big groups of friends has made me better at
estimating how long I&#39;ll need for tasks. Don&#39;t underestimate the power of &quot;soft skills&quot;â€”even companies like Google
&lt;a href=&quot;https://www.washingtonpost.com/news/answer-sheet/wp/2017/12/20/the-surprising-thing-google-learned-about-its-employees-and-what-it-means-for-todays-students&quot;&gt;have come to recognize&lt;/a&gt;
that it&#39;s often the non-technical skills that separate good engineers from great ones.&lt;/p&gt;

&lt;p&gt;â€”â€”â€”â€”&lt;/p&gt;

&lt;p&gt;Moving to engineering has been a tricky process, but one I&#39;m very grateful to have experienced. I&#39;m lucky to work
at an organization where moving from email marketing to engineering is possible, and I&#39;m even luckier to have had
the support of engineers, friends, and engineer-friends in making the move. If you end up pursuing this course as
well, I wish you the best of luck!&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/03/12/so-you-want-to-be-an-engineer/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/03/12/so-you-want-to-be-an-engineer/</guid>
        
        
        <category>artsy</category>
        
        <category>beginners</category>
        
        <category>culture</category>
        
        <category>engineering</category>
        
        <category>people</category>
        
        <category>team</category>
        
      </item>
    
      <item>
        <title>The Anatomy of an Editorial Feature</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://files.artsy.net/images/2018-visual-culture-screengrab.gif&quot; title=&quot;The Year in Visual Culture 2018&quot; alt=&quot;The Year in Visual Culture 2018&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On select occasions since 2015, Artsy Editorial has created a number of custom, one-off articles featuring unique layouts, styles and experiences. After trying a number of implementations, the &lt;a href=&quot;https://github.com/artsy/reaction/tree/master/src/Components/Publishing/EditorialFeature&quot;&gt;&lt;code&gt;EditorialFeature&lt;/code&gt;&lt;/a&gt; component was introduced to the process during Artsyâ€™s 2018 year-in-review projects.&lt;/p&gt;

&lt;p&gt;By moving the implementation of custom articles to Artsyâ€™s component library, we were able to remove some of the friction and time investment necessary for engineers to spin up these articles, and enable bespoke layouts to be housed in Artsy.netâ€™s Article domain rather than a custom Express app. Acting essentially as a wrapper to accept article data, any component can be rendered as a child of the &lt;code&gt;EditorialFeature&lt;/code&gt; component, allowing for flexible combinations of new and existing features, and for minimal or maximal interventions.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;For a light-weight customization, a developer might add props for unique text or background colors. Medium-touch could involve wrapping an existing layout in a styled-component declaring further css interventions to font-size, borders, margins or other layout properties. The space is an open canvas, so the option is available to build every element from scratch, introduce JS interactivity, and to interact with any data saved to the article model in a completely new way. The scale of a project can vary widely, but determined by weighing priorities of editorial intent, proposed designs, engineering capabilities/availability, and budget.&lt;/p&gt;

&lt;p&gt;Some examples of articles created with the &lt;code&gt;EditorialFeature&lt;/code&gt; component include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Most Influential Artists of 2018 - &lt;a href=&quot;https://github.com/artsy/reaction/tree/master/src/Components/Publishing/EditorialFeature/Components/Eoy2018Artists&quot;&gt;Components&lt;/a&gt; | &lt;a href=&quot;https://www.artsy.net/article/artsy-editorial-influential-artists-2018&quot;&gt;Article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The Year in Visual Culture 2018 - &lt;a href=&quot;https://github.com/artsy/reaction/blob/master/src/Components/Publishing/EditorialFeature/Components/Eoy2018Culture.tsx&quot;&gt;Components&lt;/a&gt; | &lt;a href=&quot;https://www.artsy.net/article/artsy-editorial-people-defined-visual-culture-2018&quot;&gt;Article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Custom.articles.by.domain:&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Custom articles by domain:&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;a href=&quot;https://github.com/artsy/force&quot;&gt;In Force (Artsy.net)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Whether an article requires a custom layout is determined in Forceâ€™s &lt;a href=&quot;https://github.com/artsy/force/blob/master/src/desktop/apps/article/routes.ts&quot;&gt;article routing&lt;/a&gt;. This is achieved by passing the prop &lt;code&gt;customEditorial&lt;/code&gt;-- a string shorthand for a specific article-- to Reactionâ€™s top-level &lt;code&gt;Article&lt;/code&gt; component. The &lt;code&gt;customEditorial&lt;/code&gt; prop is pulled from Forceâ€™s editorial feature &quot;&lt;a href=&quot;https://github.com/artsy/force/blob/master/src/desktop/apps/article/editorial_features.ts&quot;&gt;master list&lt;/a&gt;&quot;, which ties an &lt;code&gt;article._id&lt;/code&gt; to a communicative string that will be received by Reaction. In addition to data saved to an article model, the component will also receive all data displayed in the footer including related articles and display ads. Custom articles are rendered as a standalone page, meaning they are excluded from infinite scroll and do not render the main site header.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;2. &lt;a href=&quot;https://github.com/artsy/reaction&quot;&gt;In Reaction (Artsyâ€™s component library)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In Reactionâ€™s top-level &lt;a href=&quot;https://github.com/artsy/reaction/blob/master/src/Components/Publishing/Article.tsx&quot;&gt;&lt;code&gt;Article&lt;/code&gt;&lt;/a&gt; component, the presence of a &lt;code&gt;customEditoral&lt;/code&gt; prop routes an article to the &lt;a href=&quot;https://github.com/artsy/reaction/blob/master/src/Components/Publishing/Layouts/ArticleWithFullScreen.tsx&quot;&gt;&lt;code&gt;ArticleWithFullScreen&lt;/code&gt;&lt;/a&gt; component. From here, the article is given context for image slideshows and tooltip helpers, and the  &lt;code&gt;EditorialFeature&lt;/code&gt; component is rendered rather than the component designated by the articleâ€™s specified layout. A &lt;code&gt;FeatureLayout&lt;/code&gt; is displayed by default, but any article can be converted into a custom feature, regardless of the &lt;code&gt;article.layout&lt;/code&gt; value. Inside the &lt;code&gt;EditorialFeature&lt;/code&gt; component, a switch statement is used to associate the string variable for the feature with its affiliated top-level component.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;3. &lt;a href=&quot;https://github.com/artsy/positron&quot;&gt;In Writer/Positron (CMS &amp;amp; API for articles)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Because &lt;code&gt;EditorialFeature&lt;/code&gt; accepts an article data-model, it can be edited using the Writer CMS. However it is important to note that a custom layout is rendered by Force only. While editing, what users see is dicated by the &lt;code&gt;article.layout&lt;/code&gt; property. Writer&#39;s features are exposed based on this property, so a particular custom articleâ€™s layout should be determined by the features most suited to the content and design.  For example, if you need a header-image or video, a feature article would be a logical choice because that content can easily be created and edited in Writer. If the article relies heavily on content from related articles, you might choose to customize a series article instead.&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Creating.a.custom.feature&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Creating a custom feature&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://files.artsy.net/images/2018-influentual-artists-screengrab.gif&quot; title=&quot;The Most Influential Artists of 2018&quot; alt=&quot;The Most Influential Artists of 2018&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A custom layout is enabled via three steps:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a new object to the &lt;code&gt;customEditorialArticles&lt;/code&gt; &lt;a href=&quot;https://github.com/artsy/force/blob/master/src/desktop/apps/article/editorial_features.ts&quot;&gt;master list&lt;/a&gt;, indicating the &lt;code&gt;article._id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;. Names are usually a shorthand for the content, and used because they are descriptive (unlike an &lt;code&gt;_id&lt;/code&gt;), and will not change over time like a title or slug has potential to do.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;MY_CUSTOM_FEATURE&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;12345&amp;quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// mongo _id&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Create your custom component in the &lt;code&gt;EditorialFeature/Components&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;Add your &lt;code&gt;customEditorial&lt;/code&gt; string to &lt;code&gt;EditorialFeature&lt;/code&gt;â€™s switch statement to enable rendering custom component&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;MY_CUSTOM_FEATURE&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyCustomFeature&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Although these features historically receive high traffic via search and other channels, they usually have little internal visibility a few months after they are published. For this reason it is recommended that, in addition to any unit tests, developers create a snapshot of the custom article so that unexpected regressions are flagged in a test failure.&lt;/p&gt;

&lt;a name=&quot;History..amp..Context&quot;&gt;&lt;/a&gt;
&lt;h1&gt;History &amp;amp; Context&lt;/h1&gt;

&lt;p&gt;Previously we have used multiple strategies to implement these features, using two sometimes overlapping concepts: Curations and SuperArticles.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://files.artsy.net/images/2017-gender-equality-screengrab.gif&quot; title=&quot;Artists for Gender Equality&quot; alt=&quot;Artists for Gender Equality&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Curations:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://github.com/artsy/positron/tree/master/src/api/apps/curations&quot;&gt;Curation&lt;/a&gt; is a model in Positronâ€™s API that has no schema-- meaning it accepts any data shape. This can be a handy solution for content that does not conform to the existing article model. However, this strategy comes with significant overhead and a few quirks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href=&quot;https://github.com/artsy/positron/tree/master/src/client/apps/settings/client/curations&quot;&gt;custom edit UI must be created&lt;/a&gt; and maintained indefinitely&lt;/li&gt;
&lt;li&gt;A custom Express app is required by Force to render the content&lt;/li&gt;
&lt;li&gt;Because data is in a unique shape, components often must be fully custom&lt;/li&gt;
&lt;li&gt;It is difficult to track visual changes over time&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Despite these pitfalls, Curations remain useful for special cases, especially those which involve interactive navigation through content.&lt;/p&gt;

&lt;p&gt;Published examples of custom articles that use curations are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/gender-equality&quot;&gt;Artists for Gender Equality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/venice-biennale&quot;&gt;Inside the Biennale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/2016-year-in-art&quot;&gt;The Year in Art 2016&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;em&gt;See &lt;a href=&quot;http://artsy.github.io/blog/2017/02/01/year-in-art/&quot;&gt;previous blog post&lt;/a&gt; on creating The Year in Art 2016.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SuperArticles:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An article where the &lt;code&gt;is_super_article&lt;/code&gt; field is set to true includes the ability to attach related articles and sponsor-related fields to an article. It also exempts an article from the infinite scroll feed, and renders a custom header (in place of the main site navigation) and footer. The SuperArticle &lt;a href=&quot;https://github.com/artsy/force/blob/master/src/desktop/components/article/templates/super_article_sticky_header.jade&quot;&gt;header&lt;/a&gt; and &lt;a href=&quot;https://github.com/artsy/force/blob/master/src/desktop/components/article/templates/super_article_footer.jade&quot;&gt;footer&lt;/a&gt; both include navigation options to view and visit related, aka sub-article, content.&lt;/p&gt;

&lt;p&gt;The first SuperArticle was also the &lt;a href=&quot;https://www.artsy.net/2015-year-in-art&quot;&gt;first custom feature&lt;/a&gt;, and its attributes were made available to all articles when launched. However, its weakness lies in a conflation of a series and a sponsor as a single concept. In practice we have seen that they are not mutually exclusive. Additionally, support for this feature was built in Backbone, and hasnâ€™t always behaved as expected when inserted into our React-heavy ecosystem. Since the SuperArticle was created, we have extended the ability for any article to accept either or both sponsor and related article data, and we are currently in the process of deprecating this concept.&lt;/p&gt;

&lt;p&gt;Existing SuperArticles include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/2016-year-in-art&quot;&gt;The Year in Art 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/2015-year-in-art&quot;&gt;The Year In Art 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/article/artsy-editorial-the-100-most-expensive-artists&quot;&gt;The 100 Most Expensive Artists at Auction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Takeaways.for.developers&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Takeaways for developers&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;We try to work with our editorial and design teams to ensure new editorial content maps as closely to our existing article data-model and CMS features as possible. That way, we can have an upfront conversation about the constraints our systems might impose on designs.&lt;/li&gt;
&lt;li&gt;Relying heavily on existing article and system components ensures that system-wide changes (for example, changes to breakpoints) will be inherited&lt;/li&gt;
&lt;li&gt;Always create snapshot tests to monitor how an article changes over time&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/03/05/custom-editorial-features/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/03/05/custom-editorial-features/</guid>
        
        
        <category>javascript</category>
        
        <category>publishing</category>
        
        <category>reaction</category>
        
      </item>
    
      <item>
        <title>Why We Run Our Own Blog</title>
        <description>&lt;p&gt;This blog just passed the 7 year mark from our initial &lt;a href=&quot;/blog/2012/01/05/hello-world/&quot;&gt;&quot;Hello World&quot;&lt;/a&gt; post. We&#39;ve always built and hosted our
own blog, initially &lt;a href=&quot;/blog/2012/01/18/octopress-and-jekyll/&quot;&gt;using OctoPress&lt;/a&gt; but eventually migrating to just plain old Jekyll.&lt;/p&gt;

&lt;p&gt;Artsy uses 3 separate editorial platforms now, we built our own for &lt;a href=&quot;https://www.artsy.net/articles&quot;&gt;Artsy Magazine&lt;/a&gt;, use Medium for our &lt;a href=&quot;https://www.artsy.net/life-at-artsy&quot;&gt;Life
at Artsy blog&lt;/a&gt; and Jekyll for the engineering blog. There was a healthy debate about whether we would migrate
to one, or two systems, but I had pretty strong opinions on migrating the engineering blog to Medium and nipped
that in the bud pretty quickly.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;https://m.signalvnoise.com/signal-v-noise-exits-medium/&quot;&gt;Signal vs Noise&lt;/a&gt; being a high profile of a example of migrating to Medium and back again, I thought it&#39;s
worth taking the time to examine our reasoning for doing it ourselves.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Dependencies&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Dependencies&lt;/h2&gt;

&lt;p&gt;In programming, the process of creation rely on you depending on others. That ranges from operating systems, to
system dependencies like SQLite or VSCode to app level dependencies from CocoaPods/Node/Whatever. For this blog,
that we rely on GitHub&#39;s static site hosting, RubyGems + Bundler and Jekyll. Luckily for us, there are powerful
incentives for those projects to continue long into the future.&lt;/p&gt;

&lt;p&gt;That&#39;s not even too much of a worry either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If GitHub pages stop being a priority, we can switch Netlify or plain S3 in an hour (we already ship to netlify
for post draft previews)&lt;/li&gt;
&lt;li&gt;If RubyGems or Jekyll goes down, we can switch to another static site builder in another language,&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Because the code is some markdown, some HTML and CSS - that&#39;s all portable to whatever we want.&lt;/p&gt;

&lt;p&gt;We call the process of making sure you understand and vet the full stack your dependencies &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#own-your-dependencies&quot;&gt;&quot;Owning your
Dependencies&quot;&lt;/a&gt;, and in this case we&#39;re sitting on a long-lived and mature set of dependencies.&lt;/p&gt;

&lt;p&gt;To switch from our mature set of dependencies to a start-up which still hasn&#39;t found out how it can make money
greatly increases the long-term risks.&lt;/p&gt;

&lt;p&gt;Medium is totally incentivized to get your post in front of as many people as possible, and that&#39;s awesome.
However, as a business they&#39;ve not found a way to be profitable, and have taken a lot of &lt;a href=&quot;https://www.crunchbase.com/organization/medium&quot;&gt;VC cash&lt;/a&gt; which
eventually needs to be paid back. (Artsy has too, so yeah, that&#39;s kinda hypocritical, but we&#39;re not aiming to
disrupt &amp;amp; replace the existing &quot;writing online&quot; market we&#39;re &lt;a href=&quot;https://www.theverge.com/2017/7/18/15983712/artsy-fine-art-galleries-online-auction-sales&quot;&gt;augmenting&lt;/a&gt; the existing Art Industry.)&lt;/p&gt;

&lt;p&gt;When newspapers like &lt;a href=&quot;https://www.forbes.com/sites/theodorecasey/2017/08/14/why-medium-doesnt-matter-anymore/#1fea7cdf49ad&quot;&gt;Forbes&lt;/a&gt; and &lt;a href=&quot;https://www.bloomberg.com/opinion/articles/2017-01-05/why-medium-failed-to-disrupt-the-media&quot;&gt;Bloomberg&lt;/a&gt; are worried about the Medium business model, then
it doesn&#39;t look great for the longevity of your companies blog. For example, today Medium &lt;a href=&quot;https://write.as/blog/ending-our-medium-integration&quot;&gt;removed the developer
API&lt;/a&gt; for your posts. Folks who used Medium to make money have &lt;a href=&quot;http://www.niemanlab.org/2018/05/medium-abruptly-cancels-the-membership-programs-of-its-21-remaining-publisher-partners/&quot;&gt;found themselves surprised&lt;/a&gt; time
and time again when that changes.&lt;/p&gt;

&lt;p&gt;It&#39;s important to note here that I think a lot of this churn is reasonable, they are a start-up and that is
literally what start-ups do. Start-ups iterate through business plan ideas until they find one that scales in a way
that they want and that process takes time. It&#39;s when that ambiguity about what a company does or doesn&#39;t do with
your writing which makes it a dependency which doesn&#39;t pay its weight.&lt;/p&gt;

&lt;a name=&quot;L.branding&quot;&gt;&lt;/a&gt;
&lt;h2&gt;#branding&lt;/h2&gt;

&lt;p&gt;&lt;/article&gt;
&lt;a href=&#39;/images/hosting-our-own-blog/1.png&#39; style=&quot;&quot;&gt;
  &lt;img src=&quot;/images/hosting-our-own-blog/1.png&quot; alt=&quot;Screenshots&quot; style=&quot;&quot;&gt;
&lt;/a&gt;
&lt;article class=&quot;post&quot;&gt;&lt;/p&gt;

&lt;p&gt;I consider our blog, and the rest of the site, to be the canonical representation of the Artsy Engineering team
online. We&#39;ve carefully grown an Artsy Engineering aesthetic around it.&lt;/p&gt;

&lt;p&gt;In contrast, had we chosen to host on Medium, we&#39;d get a few templates and a highlight color. For example, check
out: &lt;a href=&quot;https://medium.com/airbnb-engineering&quot;&gt;AirBnB&lt;/a&gt;, &lt;a href=&quot;https://medium.com/harrys-engineering&quot;&gt;Harrys&lt;/a&gt;,
&lt;a href=&quot;https://medium.com/@Pinterest_Engineering&quot;&gt;Pintrest&lt;/a&gt;, &lt;a href=&quot;https://medium.com/vimeo-engineering-blog&quot;&gt;Vimeo&lt;/a&gt; or
&lt;a href=&quot;https://eng.lyft.com&quot;&gt;Lyft&lt;/a&gt;&#39;s pages.&lt;/p&gt;

&lt;p&gt;Not memorable at all, because you can&#39;t really work with the design constraints to do anything creative other than
a banner image and a color.&lt;/p&gt;

&lt;p&gt;These constrains become worse on a post page, where you completely lose any sense of connection with the company,
and the team the moment someone scrolls an inch until the footer. Your team&#39;s writing becomes just &quot;a medium post&quot;
at that point. You&#39;ve got limited options for attaching images, and no ability to use HTML/JS to showcase
&lt;a href=&quot;/blog/2017/07/06/React-Native-for-iOS-devs/#React&quot;&gt;problems&lt;/a&gt; &lt;a href=&quot;/blog/2018/03/18/ar/&quot;&gt;interactively&lt;/a&gt; or explore &lt;a href=&quot;http://artsy.github.io/blog/2019/01/23/artsy-engineering-hiring/&quot;&gt;new post styles&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These aren&#39;t blockers in any way, most of our posts don&#39;t do that - but the constraints mean you will never think
to try and explain something outside of those constraints.&lt;/p&gt;

&lt;p&gt;Then at the bottom of your post, readers are redirected to other posts from other teams. For example, when I opened
a post on Vimeo&#39;s announcement of &lt;a href=&quot;https://medium.com/vimeo-engineering-blog/announcing-psalm-v3-76ec78e312ce&quot;&gt;Psalm v3&lt;/a&gt; (a cool looking PHP dev tool), there were three recommended
posts: one was about missiles being fired in Syria, another was a beginners guide to PHP and then a third was how
to set up Docker to work with a PHP framework. They&#39;re not that related, maybe they all have the keyword of PHP
behind the scenes?&lt;/p&gt;

&lt;p&gt;&lt;/article&gt;
&lt;a href=&#39;/images/hosting-our-own-blog/3.jpg&#39; style=&quot;&quot;&gt;
  &lt;img src=&quot;/images/hosting-our-own-blog/3.jpg&quot; alt=&quot;Artsy x React Native&quot; style=&quot;&quot;&gt;
&lt;/a&gt;
&lt;article class=&quot;post&quot;&gt;&lt;/p&gt;

&lt;p&gt;Writing takes a lot of time, and provides so much value. It should be presented as &lt;a href=&quot;https://github.com/artsy/README/blob/cb73cb/culture/what-is-artsy.md#quality-worthy-of-art&quot;&gt;quality worthy of art&lt;/a&gt;.
By using to a generic platform for your writing, you&#39;re trading that simplicity for building your team&#39;s online
presence.&lt;/p&gt;

&lt;a name=&quot;Breaking.the.Sandbox&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Breaking the Sandbox&lt;/h2&gt;

&lt;p&gt;We&#39;ve grown to need to showcase quite a few different types of posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Small posts that with only a few paragraphs&lt;/li&gt;
&lt;li&gt;Long-form posts that take forever to read&lt;/li&gt;
&lt;li&gt;Long-form interview style posts for many contributors&lt;/li&gt;
&lt;li&gt;Sequential posts, in the form of a series&lt;/li&gt;
&lt;li&gt;YouTube embed posts&lt;/li&gt;
&lt;li&gt;Announcements&lt;/li&gt;
&lt;li&gt;Guest Posts&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;None of these need to be treated the same, and since we created the blog, we&#39;ve added:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Category pages - &lt;a href=&quot;/blog/categories/graphql/&quot;&gt;GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Author pages - &lt;a href=&quot;/author/orta/&quot;&gt;mine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Site series - &lt;a href=&quot;/series/react-native-at-artsy/&quot;&gt;React Native at Artsy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/artsy.github.io/tree/9f65b5/_layouts&quot;&gt;4 separate post layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Multi-author posts - &lt;a href=&quot;/blog/2018/10/19/pair-programming/&quot;&gt;Pair Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/2017/07/15/Comments-are-on/&quot;&gt;GitHub Issue Powered Comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Real-time &lt;a href=&quot;https://github.com/artsy/artsy.github.io/pull/332&quot;&gt;search&lt;/a&gt; on our static pages&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When we&#39;ve wanted to add a new feature to the blog to fit a particular post, we added the feature. This gave us the
chance to not constrain ourselves in ideas. For example, we&#39;ve explored &lt;a href=&quot;https://github.com/artsy/artsy.github.io/issues/355#issuecomment-315605280&quot;&gt;building a podcast&lt;/a&gt; into our blog
treating it as a first class feature in ways that no-one would ever build if it was a platform. Or we&#39;re interested
in making a way to highlight useful links for the&lt;/p&gt;

&lt;p&gt;All of those features were made by people whose background was iOS development, which gave us the chance to expand
the horizons of our engineers knowledge.&lt;/p&gt;

&lt;a name=&quot;Blog.as.Code&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Blog as Code&lt;/h2&gt;

&lt;p&gt;Because our &lt;a href=&quot;https://github.com/artsy/artsy.github.io/tree/9f65b5/_posts&quot;&gt;blog posts&lt;/a&gt; are markdown in a &lt;a href=&quot;https://github.com/artsy/artsy.github.io&quot;&gt;GitHub repo&lt;/a&gt;, we don&#39;t treat a review for a blog post any
different than a normal pull request for code. It means our &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/peril.md&quot;&gt;company Peril rules&lt;/a&gt; will run, and all of
engineering has the ability to contribute to the review process.&lt;/p&gt;

&lt;p&gt;Having a static site in a GitHub repo means we don&#39;t have to special case our writing in comparison to every-day
work.&lt;/p&gt;

&lt;a name=&quot;Call.to.Action&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Call to Action&lt;/h2&gt;

&lt;p&gt;Using Medium is a very reasonable call if you are just trying to get some writing out and online as fast as
possible. If you want to be scrappy and announce something - do it. If you want to do something more serious
though, you should really consider owning your engineering blog and identity. Giving that away to Medium in
exchange for hosting your content and getting more eyeballs isn&#39;t a great trade.&lt;/p&gt;

&lt;p&gt;There aren&#39;t many shortcuts for getting folks to visit your blog, and relying on Mediums&#39; recommendations or SEO
isn&#39;t a good path compared to say Twitter adverts or just writing interesting stuff and letting folks know via a
mailing list.&lt;/p&gt;

&lt;p&gt;If self-hosting is an issue, Medium is not the only payer in eco-system, &lt;a href=&quot;https://wordpress.com&quot;&gt;Wordpress&lt;/a&gt;&#39;s company
&lt;a href=&quot;https://automattic.com&quot;&gt;Automattic&lt;/a&gt; has been profitable for years and hosts all sorts of really big blogs. It&#39;s not going anywhere,
and you have the ability to customize it to your style and use a whole massive marketplace of plugins (free and
paid for) - it&#39;s a really great choice.&lt;/p&gt;

&lt;p&gt;However, it&#39;s really worth noting how low the barrier to entry it is now to create a blog using a static site
generator:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; - Ruby, the default for GitHub pages and lowest barrier to entry.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;gem install jekyll bundler
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;jekyll new myblog
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myblog
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.org&quot;&gt;Gatsby&lt;/a&gt; - JS, the project we regularly consider moving our blog to. JS folks have such a great focus on
developer experience, and the abstraction of having an in-direction layer for your content via an internal
GraphQL API for your static site is a very, very smart abstraction which will take them a long way.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;npx gatsby new myblog https://github.com/gatsbyjs/gatsby-starter-blog
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myblog
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;yarn dev
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gohugo.io&quot;&gt;Hugo&lt;/a&gt; - Go, looks pretty reasonable if you have strong opinions against the others somehow&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;brew install hugo
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;hugo new site myblog
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myblog
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;git init
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;theme = &amp;quot;ananke&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; config.toml
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;hugo new posts/my-first-post.md
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;hugo server -D
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;All of these come with some sort of theme or templating support so getting started could probably take about an
hour to get a static site up and running using a host like &lt;a href=&quot;https://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt;, &lt;a href=&quot;https://www.netlify.com&quot;&gt;Netlify&lt;/a&gt; or &lt;a href=&quot;https://zeit.co/now&quot;&gt;Now&lt;/a&gt;.
All three of these you can set up automatic hosting from GitHub in about 10-15m.&lt;/p&gt;

&lt;!-- prettier-ignore-start --&gt;


&lt;!-- prettier-ignore-end --&gt;

</description>
        <pubDate>Wed, 30 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/01/30/why-we-run-our-blog/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/01/30/why-we-run-our-blog/</guid>
        
        
        <category>dependencies</category>
        
        <category>tooling</category>
        
      </item>
    
      <item>
        <title>From TSLint to ESLint, or How I Learned to Lint GraphQL Code</title>
        <description>&lt;p&gt;At the beginning of January we discovered an interesting note in &lt;a href=&quot;https://github.com/Microsoft/TypeScript/issues/29288&quot;&gt;TypeScript&#39;s roadmap&lt;/a&gt; about linting:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In a survey we ran in VS Code a few months back, the most frequent theme we heard from users was that the linting
experience left much to be desired. Since part of our team is dedicated to editing experiences in JavaScript, our
editor team set out to add support for both TSLint and ESLint. However, we noticed that there were a few
architectural issues with the way TSLint rules operate that impacted performance. Fixing TSLint to operate more
efficiently would require a different API which would break existing rules (unless an interop API was built like
what wotan provides).&lt;/p&gt;

&lt;p&gt;Meanwhile, ESLint already has the more-performant architecture we&#39;re looking for from a linter. Additionally,
different communities of users often have lint rules (e.g. rules for React Hooks or Vue) that are built for
ESLint, but not TSLint.&lt;/p&gt;

&lt;p&gt;Given this, our editor team will be focusing on leveraging ESLint rather than duplicating work. For scenarios
that ESLint currently doesn&#39;t cover (e.g. semantic linting or program-wide linting), we&#39;ll be working on sending
contributions to bring ESLint&#39;s TypeScript support to parity with TSLint. As an initial testbed of how this works
in practice, we&#39;ll be switching the TypeScript repository over to using ESLint, and sending any new rules
upstream.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;At Artsy we&#39;ve been using TSLint for a few years now; it&#39;s worked well for us, and we&#39;ve even written our own
&lt;a href=&quot;https://github.com/relay-tools/tslint-plugin-relay&quot;&gt;custom rules&lt;/a&gt;. However, given the vastness of the JS ecosystem
and how fast it moves, it&#39;s easy to recognize this announcement as an exciting moment for tooling simplicity.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;To give an example, anyone who has built a culture around Airbnb&#39;s
&lt;a href=&quot;https://github.com/airbnb/javascript&quot;&gt;JavaScript style guide&lt;/a&gt; will instantly recognize the conundrum they&#39;re in
when migrating to TypeScript:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;100%&quot; alt=&quot;a reddit user discovers their linting rules no longer work&quot; src=&quot;https://user-images.githubusercontent.com/236943/51884369-d845b380-233b-11e9-9d2f-102cc8a3a78b.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;This means that teams maintaining legacy JavaScript codebases will no longer have to &lt;em&gt;also&lt;/em&gt; maintain
&lt;a href=&quot;https://github.com/palantir/tslint-react&quot;&gt;two&lt;/a&gt; &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react&quot;&gt;versions&lt;/a&gt; of often nearly &lt;a href=&quot;https://github.com/prettier/tslint-plugin-prettier&quot;&gt;identical&lt;/a&gt;
&lt;a href=&quot;https://github.com/prettier/prettier-eslint&quot;&gt;rule-sets&lt;/a&gt;. All of the aggregate culture that builds up around linting can now be shared in a
forward and backward facing way, making the often-daunting process of migrating a codebase from JavaScript to
TypeScript a much easier sell.&lt;/p&gt;

&lt;p&gt;With this in mind we wanted to give the new officially-sanctioned &lt;a href=&quot;https://github.com/typescript-eslint/typescript-eslint&quot;&gt;typescript-eslint&lt;/a&gt; project a
spin and document our findings.&lt;/p&gt;

&lt;a name=&quot;Setup&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Setup&lt;/h3&gt;

&lt;p&gt;To get started, install the necessary dependencies:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yarn install -D eslint typescript @typescript-eslint/eslint-plugin
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Then create a new &lt;code&gt;.eslintrc.js&lt;/code&gt; and add a bit of setup:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;@typescript-eslint/parser&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;@typescript-eslint&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;eslint:recommended&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;plugin:@typescript-eslint/recommended&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;parserOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;ecmaVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./tsconfig.json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;sourceType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;module&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Note that &lt;code&gt;parserOptions.project&lt;/code&gt; points to your &lt;code&gt;tsconfig.json&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;json&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;compilerOptions&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Next, add a bit of TypeScript to a file&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;export const foo: any = &amp;#39;bar&amp;#39;&amp;quot;&lt;/span&gt; &amp;gt; index.ts
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;and run the linter:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yarn eslint . --ext .ts,.tsx
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;~/index.ts
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  1:12  warning  Unexpected any. Specify a different &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;  @typescript-eslint/no-explicit-any
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;âœ– &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; problem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; errors, &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; warnings&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Very nice!&lt;/p&gt;

&lt;p&gt;Now lets expand the example a bit and add something more sophisticated, which in Artsy&#39;s use-case is commonly
GraphQL:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yarn add -D eslint-plugin-graphql graphql-tag apollo
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Update &lt;code&gt;tsconfig.json&lt;/code&gt; and let it know we&#39;ll be using &lt;code&gt;node&lt;/code&gt; for imports:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;json&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;compilerOptions&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;moduleResolution&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;node&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;In &lt;code&gt;.eslintrc.js&lt;/code&gt; add these rules (while noting the addition of &lt;code&gt;graphql&lt;/code&gt; to &lt;code&gt;plugins&lt;/code&gt; and
&lt;code&gt;graphql/template-strings&lt;/code&gt; under &lt;code&gt;rules&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;@typescript-eslint/parser&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;@typescript-eslint&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;graphql&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;eslint:recommended&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;plugin:@typescript-eslint/recommended&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;parserOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;ecmaVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./tsconfig.json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;sourceType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;module&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;s2&quot;&gt;&amp;quot;graphql/template-strings&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;s2&quot;&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;schemaJsonFilepath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./schema.json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;graphql&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;For GraphQL to know what to lint, we&#39;ll need a schema. Thankfully the
&lt;a href=&quot;https://etmdb.com/graphql&quot;&gt;Ethiopian Movie Database&lt;/a&gt; has our back :)&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yarn apollo service:download --endpoint https://etmdb.com/graphql
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  âœ” Loading Apollo Project
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  âœ” Saving schema to schema.json
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;âœ¨  Done in 2.18s.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Back in &lt;code&gt;index.ts&lt;/code&gt;, add this bit of code:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graphql&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;graphql-tag&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MovieQuery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graphql&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MoveQuery&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;allCinemaDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2017-10-04&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2010-01-01&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;edges&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;nodez&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;nx&quot;&gt;slug&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;nx&quot;&gt;hallName&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;And run the linter:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yarn eslint . --ext .ts,.tsx
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;~/index.ts
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  7:9  error  Cannot query field &lt;span class=&quot;s2&quot;&gt;&amp;quot;nodez&amp;quot;&lt;/span&gt; on &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;CinemaDetailNodeEdge&amp;quot;&lt;/span&gt;. Did you mean &lt;span class=&quot;s2&quot;&gt;&amp;quot;node&amp;quot;&lt;/span&gt;?  graphql/template-strings
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;âœ– &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; problem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; error, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; warnings&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Ahh yes, I meant &lt;a href=&quot;https://i.redd.it/tfugj4n3l6ez.png&quot;&gt;&lt;code&gt;node&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;Bonus:.VSCode.Integration&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Bonus: VSCode Integration&lt;/h3&gt;

&lt;p&gt;As developers, we like our tools to work for us, and in 2019 the tool that &lt;em&gt;seems&lt;/em&gt; to do that best just happens to
be a brilliant open source product from Microsoft. There were a couple unexpected configuration issues when we were
setting this up, but thankfully they&#39;re easy fixes.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir .vscode &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; touch .vscode/settings.json
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Then add a couple settings:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;json&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;editor.formatOnSave&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;eslint.autoFixOnSave&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;eslint.validate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;language&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;autoFix&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;language&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;javascriptreact&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;autoFix&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;language&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;typescript&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;autoFix&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;language&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;typescriptreact&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;autoFix&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;tslint.enable&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Format on save, fix on save, &lt;em&gt;autofix&lt;/em&gt; on save, tell ESLint to recognize &lt;code&gt;.ts&lt;/code&gt; (and &lt;code&gt;.tsx&lt;/code&gt;, for the React folks)
then disable &lt;code&gt;tslint&lt;/code&gt; so that &lt;code&gt;eslint&lt;/code&gt; can do its thing:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;698&quot; alt=&quot;eslint displaying graphql error in VSCode IDE&quot; src=&quot;https://user-images.githubusercontent.com/236943/51884366-d380ff80-233b-11e9-8128-6c39e210dd31.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;Now ESLint will show you right where your GraphQL error is from within VSCode. Pretty sweet.&lt;/p&gt;

&lt;p&gt;Be sure to read &lt;a href=&quot;https://eslint.org/blog/2019/01/future-typescript-eslint&quot;&gt;The future of TypeScript on ESLint&lt;/a&gt; for more details.&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/01/29/from-tslint-to-eslint/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/01/29/from-tslint-to-eslint/</guid>
        
        
        <category>eslint</category>
        
        <category>graphql</category>
        
        <category>tslint</category>
        
        <category>typescript</category>
        
      </item>
    
      <item>
        <title>How Artsy Hires Engineers</title>
        <description>&lt;p&gt;Interviewing is hard. Interviewers want to make sure they&#39;re hiring the person who will add the most value to their
team; candidates want to make sure they&#39;re joining a company that aligns with their goals and perspectives.&lt;/p&gt;

&lt;p&gt;Recent trends in hiring are white-boarding sessions, trivia questions, and hours of take-home assignments. At
Artsy, we don&#39;t use any of these. We often get asked why not - and how we assess technical skill without them.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;We think our interview process at Artsy is unique, but we also think our interview process is great. We&#39;d love to
see the tech community examine its hiring practices, and hopefully to adopt some of what&#39;s made our hiring process
successful. Focusing on knowledge and facts that are already acquired is one way to approach hiring; we prefer to
look at how a person can fill a gap in our team and help us grow.&lt;/p&gt;

&lt;p&gt;&lt;aside&gt;
  &lt;div class=&quot;question&quot;&gt;
    &lt;h3&gt;What surprised you about the hiring process at Artsy while you were a candidate?&lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/ash.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Ash Furrow says...&lt;/p&gt;
    &lt;p&gt;What most surprised me at the time was &lt;em&gt;who&lt;/em&gt; was interviewing me. I had a teleconference screening with Artsy&#39;s now-CTO before moving on to in-person interviews. Since I was living in Amsterdam at the time, Artsy flew me to its nascent London office to meet two interviewers: a data engineer and a member of (what was then) the Arts team.&lt;/p&gt;
    &lt;p&gt;I was surprised, but encouraged, to be speaking with someone who wasn&#39;t an engineer. They asked me questions to find out what motivated me, to evaluate how well those motivations would help Artsy achieve its mission. It was a natural fit!&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/lily.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Lily Pace says...&lt;/p&gt;
    &lt;p&gt;Everything. I was pleasantly surprised by how different the interview process at Artsy was from my previous experiences, which felt more like standardized tests than conversations. The underlying presumption with &quot;traditional&quot; tech hiring practices is that candidates are somehow trying to trick their way into positions they arenâ€™t qualified for. It&#39;s no wonder that impostor syndrome is so prevalent in underrepresented groups when the interview process is set up like an interrogation.&lt;/p&gt;
    &lt;p&gt;I felt like the interviewers at Artsy had read my resume and cv and taken it at face value, so the interview was spent diving deeper into my skill-set and personality and determining compatibility, instead of trying to identify gaps in my knowledge.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/steve.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Steve Hicks says...&lt;/p&gt;
    &lt;p&gt;With 20 years (!!!) of experience as a software engineer, I&#39;ve seen my share of interviews - from both sides. On the hiring side, I&#39;ve said for years that technical interviews are unnecessary. If I can get a 30 minute conversation with a candidate, I feel like I can learn enough about them to know if they can do the job from a technical perspective. It&#39;s much less about knowing trivia or syntax, and much more about having the personality to solve problems.&lt;/p&gt;
    &lt;p&gt;I&#39;d never experienced that on the candidate side, though. When I did, I definitely felt like Artsy had forgotten part of the interview. Where was the whiteboard? The homework? People looking over my shoulder while I coded an anagram-checker? A technical challenge has been a part of every interview I&#39;ve done as a candidate - until Artsy.&lt;/p&gt;
  &lt;/div&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;Artsy&#39;s process of hiring new engineers was created and is maintained &lt;em&gt;by&lt;/em&gt; our current engineers. It has evolved
over time as we learn new lessons and new perspectives join our team. Our process has always been driven by a
top-down culture of respect for candidates, which aligns with
&lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#artsy-values&quot;&gt;our company values&lt;/a&gt;. Our team
currently has 36 engineers, and we refreshed our hiring practices last year to support our team&#39;s growth; we hired
a dozen engineers in 2018. We don&#39;t use recruiters (though we did to hire our recent VP of Engineering).&lt;/p&gt;

&lt;p&gt;Our former Director of Web Engineering has a blog post where he
&lt;a href=&quot;https://www.zamiang.com/post/learning-from-artsy-how-to-hire-awesome-engineers&quot;&gt;describes Artsy&#39;s hiring process&lt;/a&gt;.
Though some specifics have since changed, the foundations remain the same.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If Artsy has a secret sauce, it is how it hires. All else falls from the assumption that they have hired the best
people who want to work together to achieve Artsyâ€™s mission.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Our hiring process starts with an informational, where candidates are met for a coffee or over a teleconference
call. We have &lt;a href=&quot;https://github.com/artsy/README/blob/master/playbooks/informationals.md&quot;&gt;public documentation&lt;/a&gt; so
candidates can know what to expect. We do a lot of these and move candidates who we think would succeed at Artsy on
to in-person interviews. The interviews last 3 hours and are split across four 45-minute
&lt;a href=&quot;https://www.livecareer.com/career/advice/interview/behavioral-interviewing&quot;&gt;behavioral interviews&lt;/a&gt;, conducted by
engineers and other colleagues, ranging from gallery liaisons to product managers to editorial writers. Artsy
generally, and Engineering specifically, have both significantly invested in helping interviewers be effective and
consistent; this includes documentation, question banks, and &lt;a href=&quot;https://managingbias.fb.com&quot;&gt;unconscious bias&lt;/a&gt;
training.&lt;/p&gt;

&lt;p&gt;Each interviewer is given key areas to focus on, based on the candidate&#39;s background. We have documentation
specifying how to evaluate each of these areas, including example questions. These areas include, but aren&#39;t
limited to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Comprehension of Artsy&lt;/li&gt;
&lt;li&gt;Artsy company values alignment&lt;/li&gt;
&lt;li&gt;Ability to communicate complex ideas&lt;/li&gt;
&lt;li&gt;Learning and adaptation&lt;/li&gt;
&lt;li&gt;Self-learning and drive&lt;/li&gt;
&lt;li&gt;Independence and teamwork&lt;/li&gt;
&lt;li&gt;Systems development&lt;/li&gt;
&lt;li&gt;Product knowledge&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;After the interview, feedback is written up as quickly as possible. To limit bias, interviewers can&#39;t see each
other&#39;s feedback until after they write up their own. The write-up includes a recommendation: do you think we
should move on to reference checks? Answers are either &quot;strong yes&quot;, &quot;yes&quot;, &quot;no&quot;, or &quot;strong no&quot;; after everyone
has completed their write-ups, the interviewers debrief and reflect on how to do a better job next time. Their
feedback is used by the hiring manager to decide whether to move on to reference checks.&lt;/p&gt;

&lt;p&gt;Quoting again from our former Director of Web&#39;s blog post:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Artsy believes that &#39;references are not a defense against hiring poorly, they are a way to hire great people&#39;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Artsy&#39;s reference checks are in-depth and deserve their own blog post; they are &lt;em&gt;key&lt;/em&gt; to our hiring process. We
know that job interviewers only evaluate how good someone is at interviewing, so we put a larger emphasis than most
companies on references. The most accurate predictor of future job performance is past job performance, not how
well someone can perform in an interview.&lt;/p&gt;

&lt;p&gt;If we decide to hire the candidate, we make them a job offer. Artsy offers what we think is a fair wage based on
the local market and the candidate; we do not low-ball candidates and we don&#39;t negotiate on compensation.&lt;/p&gt;

&lt;a name=&quot;What.s.wrong.with.typical.hiring.practices.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What&#39;s wrong with typical hiring practices?&lt;/h2&gt;

&lt;p&gt;There are many tactics for assessing a candidate&#39;s technical abilities, but we&#39;ve found that many are unfair to the
candidate. Some strategies put unnecessary pressure on the candidate. Some select against qualified candidates who
have competing responsibilities outside work. Some unwittingly weed out underrepresented applicants, even at a time
when companies are trying to diversify their teams.&lt;/p&gt;

&lt;a name=&quot;In-person.coding.challenges&quot;&gt;&lt;/a&gt;
&lt;h3&gt;In-person coding challenges&lt;/h3&gt;

&lt;p&gt;The intention of in-person coding challenges is to verify that the engineer can &quot;actually write code.&quot; This
strategy puts excessive pressure on the candidate to perform in front of an audience. This is usually not a good
reflection of what the candidate would be doing if they were hired. Sometimes it &lt;strong&gt;is&lt;/strong&gt; a reflection of the
stressful conditions on the team, and the act of applying pressure to the candidate is intentional, to measure
their ability to handle it. In either case, we don&#39;t feel like this is how we want to measure engineers; it just
doesn&#39;t reflect reality.&lt;/p&gt;

&lt;a name=&quot;Whiteboard.interviews&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Whiteboard interviews&lt;/h3&gt;

&lt;p&gt;One intention of whiteboard interviews is to reduce the stress on the candidate, because they don&#39;t have to worry
about code syntax while under a microscope. These types of interviews still lead to
&lt;a href=&quot;https://code.dblock.org/2012/12/08/five-ways-to-torture-candidates-in-a-technical-interview.html&quot;&gt;stressful conditions&lt;/a&gt;,
though, and they don&#39;t provide a good measure of what makes a great teammate or even a great developer. Again,
sometimes the pressure is intentional, to see how the candidate reacts.&lt;/p&gt;

&lt;p&gt;It can be very difficult to find a problem that is succinct enough for a whiteboard exercise but still reflective
of the work the candidate will actually be doing on the job. The ability to write an algorithm to search a binary
tree might be reflective of whether a candidate has a traditional Computer Science degree, but doesn&#39;t necessarily
speak to their ability to build complex interfaces or streamline performance. More importantly, whether or not they
can write a binary search tree from scratch on a whiteboard doesn&#39;t even necessarily speak to their ability to
&lt;em&gt;use&lt;/em&gt; search trees in day-to-day work. Questions like this can eliminate excellent developers who took a
non-traditional approach to their knowledge building but are still highly capable.&lt;/p&gt;

&lt;a name=&quot;Sample.code&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Sample code&lt;/h3&gt;

&lt;p&gt;Sometimes a company will request a code sample from candidates - after all, what shows off their ability to code
better than their actual code? The downfall of this strategy is that it eliminates developers who don&#39;t have code
they can share. Many great engineers work for closed-source companies; many great engineers have family
responsibilities that prevent them from contributing to open-source at night.&lt;/p&gt;

&lt;p&gt;It is also important to consider the insularity and biases that exist in the open source community that can make
contributing more difficult for developers from underrepresented groups. A study published in the PeerJ Computer
Science journal found that womenâ€™s contributions to open source projects were accepted more frequently than menâ€™s
contributions when the gender of the contributor was unknown. However, when the gender of the contributor was
apparent, men&#39;s contributions were
&lt;a href=&quot;https://code.likeagirl.io/gender-bias-in-open-source-d1deda7dec28&quot;&gt;accepted more frequently than women&#39;s&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;Take-home.challenges&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Take-home challenges&lt;/h3&gt;

&lt;p&gt;The most recent trend in hiring is the take-home exercise. The goal is honorable - have the candidate produce code
on their own time, so they aren&#39;t overwhelmed with the pressure of an audience. Weâ€™ve found that requiring this
early in the process is unfair, and including it later in the process is uninformative; by the time a take-home
challenge would be appropriate, we have already evaluated the candidate&#39;s technical skills to our satisfaction
(more on that later).&lt;/p&gt;

&lt;p&gt;This strategy also assumes the candidate has time to work on homework. Many single parents do not for example, nor
do engineers who care for family members. There can also be misalignment on the expected time to complete a
take-home challenge. While the exercise might take a current engineer at the company 2 hours to complete, that
doesn&#39;t consider several factors: (1) a candidate might not be familiar with all technologies requested, and can
easily lose time to research and learning; (2) the candidate wants to look good, so they&#39;re likely to work longer
than you expect; and (3) the candidate might be interviewing for several companies at once, and have multiple
competing assignments to work on.&lt;/p&gt;

&lt;p&gt;Many companies use take-home challenges early in the hiring process to shift the burden of evaluation from the
company on to the candidates themselves. This unfairly excludes lots of potentially amazing colleagues.&lt;/p&gt;

&lt;p&gt;&lt;aside&gt;
  &lt;div class=&quot;question&quot;&gt;
    &lt;h3&gt;Why do you think these kinds of bad hiring practices are so common in the tech industry? And what sets hiring practices in tech apart from hiring in other industries?&lt;/h3&gt;
  &lt;/div&gt;
    &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/steve.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Steve Hicks says...&lt;/p&gt;
    &lt;p&gt;We are very logical people in the tech industry. We want to create algorithms or heuristics for everything, including hiring. Using a yardstick like &quot;Fizz Buzz&quot; or trivia questions allows us to easily narrow down the candidate pool. It&#39;s a simple, intentional form of gate-keeping. The hiring algorithm is much easier to write when it&#39;s &quot;Oh, you don&#39;t know what a closure is? Sorry, we&#39;re not interested.&quot; It&#39;s much harder to write a hiring algorithm that respects nuance: &quot;well...it depends. Maybe you have different experiences than I do. It&#39;ll take some digging to find out if our experiences will complement each other.&quot;&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/lily.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Lily Pace says...&lt;/p&gt;
    &lt;p&gt;I think the tech industry has an elitism problem, and this is reflected in the way candidates are evaluated. Thereâ€™s a general feeling in some parts of the industry that what we do is different and somehow elevated from other professions, that engineering is a skill that only a select few are capable of, not something that anyone can learn with the right training and enthusiasm. Making candidates go through a gauntlet of challenges during the interview process reinforces this idea.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/ash.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Ash Furrow says...&lt;/p&gt;
    &lt;p&gt;I think when looking at the current state of the computer programming industry, and its hiring practices, we need to pay special attention to its history. The original computer programmers of the twentieth century were women, but they were &lt;a href=&quot;https://www.theguardian.com/careers/2017/aug/10/how-the-tech-industry-wrote-women-out-of-history&quot;&gt;systematically pushed out of the industry&lt;/a&gt;. One way they were pushed out was through discriminatory hiring practices, especially interview questions and techniques specifically designed to exclude non-white, non-male applicants. Sadly, these hiring practices persist, even if their original motivations have been obscured by time.&lt;/p&gt;
  &lt;/div&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;a name=&quot;What.we.do.instead&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What we do instead&lt;/h2&gt;

&lt;p&gt;In addition to the above strategies not being fair, we&#39;ve found that they measure things that are secondary to what
we&#39;re looking for.&lt;/p&gt;

&lt;p&gt;Artsy is more complicated than FizzBuzz. Too complicated for any one engineer to build, in fact. Individual
engineers working alone canâ€™t build the software Artsy needs to succeed â€“ they must work together. So the skills we
evaluate for are things like empathy, communication, and kindness. Not that technical skills arenâ€™t important, but
the ability to communicate and learn is more important.&lt;/p&gt;

&lt;p&gt;Engineers who excel at empathy, communication, and kindness can pick up the technical stuff once they&#39;re hired;
personal and interpersonal skills are harder to teach. Adding a colleague to the team who lacks these skills could
harm the culture we&#39;ve built.&lt;/p&gt;

&lt;p&gt;When you interview with Artsy as an engineer, you won&#39;t just meet other engineers and a manager. You&#39;ll meet with
people from other departments too. If you&#39;re hired as an Artsy engineer, you&#39;re going to work with folks from all
across the company - we want to make sure you can communicate with them because that&#39;s something we do every day.&lt;/p&gt;

&lt;p&gt;&lt;aside&gt;
  &lt;div class=&quot;question&quot;&gt;
    &lt;h3&gt;How has this impacted your day-to-day work at Artsy so far?&lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/lily.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Lily Pace says...&lt;/p&gt;
    &lt;p&gt;I had a negative experience in the past with a coworker who lacked empathy and boundaries and made me feel unwelcome and othered as the only woman on the team and someone from a non-traditional background. It made me afraid to ask for help and stifled my progress. This experience made me hesitant to open up to new coworkers, especially when I needed assistance. Because Artsy evaluates candidates based on empathy, communication, and kindness, I arrived with a &lt;a href=&quot;https://medium.com/artsy-blog/what-it-feels-like-to-work-in-a-supportive-environment-for-female-engineers-3c994a001007&quot;&gt;level of trust in my new coworkers&lt;/a&gt; that usually takes weeks or months to develop. &lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/steve.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Steve Hicks says...&lt;/p&gt;
    &lt;p&gt;In most of my previous jobs, it&#39;s taken me a while to learn who I can be vulnerable around and who I can&#39;t. At Artsy I have quickly learned that I don&#39;t need to worry about it. I feel an incredible sense of psychological safety with the Artsy team. I can be vocal about not understanding something, and I can ask for help without feeling like a burden or fool.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/ash.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Ash Furrow says...&lt;/p&gt;
    &lt;p&gt;I&#39;m a sensitive person. I don&#39;t like pointless or inflammatory conflict â€“ I find it distracting and counterproductive. However, I can relax and let my guard down at Artsy. My sensitivity to how others are feeling is a part of my contributions to the team, and I&#39;m able to fold the emotional wellbeing that &lt;strong&gt;I&lt;/strong&gt; get from everyone back into our team: a sort of constantly-accelerating feedback loop of good feelings.&lt;/p&gt;
  &lt;/div&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;a name=&quot;But.we.still.evaluate.technical.aptitude&quot;&gt;&lt;/a&gt;
&lt;h2&gt;But we still evaluate technical aptitude&lt;/h2&gt;

&lt;p&gt;Technical aptitude is less important to us than interpersonal skills, but it is still important. Note that we said
&quot;aptitude,&quot; not &quot;skills&quot;: we don&#39;t expect our engineers to already know everything about the tech stack we&#39;re
using. Instead, we expect them to have a strong ability to learn our stack and use it effectively once they have.
(This is touched on in our docs on
&lt;a href=&quot;https://github.com/artsy/README/blob/master/careers/juniors.md&quot;&gt;what we look for in junior engineers&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;So if we skip all the usual tactics for evaluating technical aptitude, how do we do it? &lt;strong&gt;By talking to people&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We learn a lot about candidates in their interviews. We&#39;ll have a conversation with them about technology. Instead
of white-boarding, we ask them to describe what they like about their favorite library, or what they wish they
could change. We ask them to describe some legacy code theyâ€™ve worked with, and ask them how they think it got that
way. Weâ€™re looking for a mix of technical skills as well as empathy and an ability to communicate nuanced ideas.&lt;/p&gt;

&lt;a name=&quot;References.are.important.to.us&quot;&gt;&lt;/a&gt;
&lt;h2&gt;References are important to us&lt;/h2&gt;

&lt;p&gt;We also learn a lot through reference checks. Our reference checks aren&#39;t simply validation of your employment
history - they are a 30 minute-long conversation with each of your three references that go into detail about your
work history and career growth. It&#39;s quite an in-depth conversation, with questions structured to dig into
specifics about the candidate&#39;s behavior.&lt;/p&gt;

&lt;p&gt;An Artsy reference call might include the following structured questions:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In your capacity as [relationship to the candidate], how many people have you worked with in the candidate&#39;s
role?&lt;/p&gt;

&lt;p&gt;Okay, in &lt;em&gt;just&lt;/em&gt; terms of job performance, how you rank the candidate out of that [X] many people?&lt;/p&gt;

&lt;p&gt;Okay, finally, what&#39;s the difference between [the candidate&#39;s rank] and number one? How would the candidate need
to grow to get to number one?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The first question establishes the context for the reference. The second question primes the reference to use that
context when answering the next question. The third question is what we&#39;re &lt;em&gt;actually&lt;/em&gt; interested in. These aren&#39;t
easy or comfortable questions, but they give us an insight into the candidate&#39;s career, history, and areas to grow.&lt;/p&gt;

&lt;p&gt;Fully half of our decision to make an offer or not is based on our reference checks. Artsy Engineering candidates
go through the same reference check process as anyone applying for a job at Artsy, with Engineers sitting in on the
call with Artsy&#39;s hiring staff.&lt;/p&gt;

&lt;a name=&quot;But.seriously..we.really.care.about.the.personal.side&quot;&gt;&lt;/a&gt;
&lt;h3&gt;But seriously, we really care about the personal side&lt;/h3&gt;

&lt;p&gt;We also make sure every interview ends amicably. No candidate should feel bad after interviewing with Artsy, even
if we don&#39;t give them an offer. This seems self-evident to us, given our values, but it makes a lot of business
sense to maintain our reputation as an engineering team.&lt;/p&gt;

&lt;a name=&quot;Our.hiring.practice.philosophy&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Our hiring practice philosophy&lt;/h2&gt;

&lt;p&gt;One of our core values at Artsy is that
&lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#people-are-paramount&quot;&gt;People Are Paramount&lt;/a&gt;.
We like to think that our interview process was built to reflect this.&lt;/p&gt;

&lt;p&gt;We see the interview process as an opportunity to build a relationship with a candidate. We talk to them to find
out if they&#39;re a good fit for Artsy, and we help them decide if Artsy is a good fit for them. Our hiring process
focuses more on human skills than most processes do. It&#39;s not perfect, but it has served us well.&lt;/p&gt;

&lt;p&gt;&lt;aside&gt;
  &lt;div class=&quot;question&quot;&gt;
    &lt;h3&gt;Where do you still think Artsy has to grow, in terms of how it hires engineers?&lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/lily.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Lily Pace says...&lt;/p&gt;
    &lt;p&gt;I think Artsy is really unique and innovative in how it evaluates candidates and I think the more we can express this in our job postings the better. Stressing alignment with our values and an ability to learn and posting fewer hard requirements are some simple ways to convey to potential applicants that we evaluate differently.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/ash.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Ash Furrow says...&lt;/p&gt;
    &lt;p&gt;I think one area we&#39;ve historically struggled with, and still do, is sourcing candidates from a wide range of backgrounds. Artsy Engineering&#39;s hiring pool still draws heavily from the professional networks of existing Artsy staff; while this has a lot of benefits, it also has the potential to exclude groups who aren&#39;t already represented on our team.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/artsy-engineering-hiring/steve.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Steve Hicks says...&lt;/p&gt;
    &lt;p&gt;I agree with Ash. I think all companies hire based on their employees&#39; networks, because that&#39;s the easiest way to find people. &lt;a href=&quot;https://twitter.com/seldo/&quot;&gt;Laurie Voss&lt;/a&gt; talked about this recently on &lt;a href=&quot;https://reactpodcast.simplecast.fm/33&quot;&gt;the React Podcast&lt;/a&gt;. He pointed out that diversity at NPM has been better than average since the company started; and that the ratios of diversity have been consistent from the beginning, as a result of hiring from their own networks. I&#39;d love to see Artsy hire beyond our networks (and as a result expand our networks).&lt;/p&gt;
  &lt;/div&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;Our hiring process will never be &quot;finished&quot; because we&#39;re always improving on it. Some recent improvements are
inward-facing to help &lt;em&gt;us&lt;/em&gt; get better, like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a #dev-ersity Slack channel for talking about how to diversify our team and the industry at large.&lt;/li&gt;
&lt;li&gt;Integrating hiring updates into our weekly standup.&lt;/li&gt;
&lt;li&gt;Creating a Slack bot for engineers to monitor our hiring pipeline.&lt;/li&gt;
&lt;li&gt;Periodically rotating hiring managers to spread institutional knowledge and get new perspectives.&lt;/li&gt;
&lt;li&gt;Many, many docs written on guiding the process.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Artsy engineers, guided by our company values, created the hiring process for new engineers. Combined with an
iterative process and a desire to constantly improve, we&#39;ve created a hiring process that is fair, effective, and
respectful. This kind of engineering-led approach is gaining popularity; for example, Microsoft recently
&lt;a href=&quot;https://blog.usejournal.com/rethinking-how-we-interview-in-microsofts-developer-division-8f404cfd075a&quot;&gt;revamped its hiring process&lt;/a&gt;
with this approach.&lt;/p&gt;

&lt;p&gt;We hope this catches on.&lt;/p&gt;

&lt;p&gt;So what can &lt;em&gt;you&lt;/em&gt; do? A great first step is to send this post to your HR rep. Another great step is to open source
your hiring documentation; you&#39;d be surprised how motivating this can be, and it&#39;s a great opportunity to get
feedback from other companies. Leave a comment below, let&#39;s brainstorm on other ways to improve the state of hiring
in software engineering!&lt;/p&gt;

&lt;p&gt;And remember: while &lt;em&gt;you&lt;/em&gt; might be motivated based on what feels &quot;right&quot;, businesses are motivated by bottom lines.
Fortunately for us, the evidence is on our side: this is a better way to hire, for everyone.&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/01/23/artsy-engineering-hiring/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/01/23/artsy-engineering-hiring/</guid>
        
        
        <category>best practices</category>
        
        <category>culture</category>
        
        <category>hiring</category>
        
        <category>people</category>
        
        <category>process</category>
        
        <category>team</category>
        
      </item>
    
  </channel>
</rss>
