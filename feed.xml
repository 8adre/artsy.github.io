<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artsy Engineering</title>
    <description></description>
    <link>http://artsy.github.io/</link>
    <atom:link href="http://artsy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 19 Aug 2016 19:01:34 +0000</pubDate>
    <lastBuildDate>Fri, 19 Aug 2016 19:01:34 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Learn Swift at Artsy, Beginners Lesson One</title>
        <description>&lt;p&gt;Last August, Orta and I &lt;a href=&quot;http://artsy.github.io/blog/2016/01/26/swift-at-artsy/&quot;&gt;led a course at Artsy&lt;/a&gt; to teach our colleagues Swift. There were two parallel groups of learners: a &quot;beginners&quot; group who had never coded before, and an &quot;informed&quot; group who already knew how to code. This year, we&#39;re leading the course again with a slight twist: we&#39;re repeating the course for absolute beginners, and we&#39;re introduce a new course for anyone who completed last year&#39;s beginner course.&lt;/p&gt;

&lt;p&gt;We&#39;re really excited both to help new colleagues take their first steps into programming, and to help returning colleagues continue their journey.&lt;/p&gt;

&lt;p&gt;Today was lesson one of the beginner group, and I have a &lt;a href=&quot;https://youtu.be/OLdSg0XpFqA&quot;&gt;screen recording&lt;/a&gt; of my walkthrough of &lt;a href=&quot;https://github.com/artsy/Swift-at-Artsy/tree/master/Beginners/Lesson%20One&quot;&gt;lesson one&#39;s material&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;iframe width=&#39;100%&#39; height=&#39;600&#39; src=&#39;https://www.youtube.com/embed/OLdSg0XpFqA &#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Aug 2016 21:18:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/08/15/swift-at-artsy-beginners-lesson-one/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/08/15/swift-at-artsy-beginners-lesson-one/</guid>
        
        
        <category>code</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>oss</category>
        
        <category>swift</category>
        
        <category>teaching</category>
        
        <category>video</category>
        
      </item>
    
      <item>
        <title>React Native at Artsy</title>
        <description>&lt;center&gt;
&lt;img src=&quot;/images/react-native/artsy_react_logo.svg&quot; style=&quot;width:300px;&quot;&gt;
&lt;/center&gt;


&lt;p&gt;As &lt;a href=&quot;https://github.com/artsy/eigen&quot;&gt;the Artsy iOS app&lt;/a&gt; grew larger, we started hitting pain
points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We want to support other future platforms such as Android without creating more teams.&lt;/li&gt;
&lt;li&gt;We want different business teams to work on the app without disrupting each other.&lt;/li&gt;
&lt;li&gt;We want our architecture to evolve in order to increase programmer efficiency.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It took us &lt;a href=&quot;https://github.com/artsy/mobile/issues/22&quot;&gt;about a year&lt;/a&gt; to start resolving these issues.
Ideally, we wanted to find a solution to our architectural issues that would also improve the user
experience. Notably we wanted more efficient networking, due to mobile device constraints.&lt;/p&gt;

&lt;p&gt;It would have been an easy leap to start using Swift and, as a matter of fact, we do use Swift in parts of
our flagship application and entirely in &lt;a href=&quot;http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&quot;&gt;2 other apps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, while Swift is a great language, it’s also just that: &lt;em&gt;another&lt;/em&gt; language. It does not do much in terms of new
paradigms that solved our architectural needs, it does not help in terms of cross-platform - as most of our code is
building views and thus very framework specific, and it did not really offer anything in terms of more efficient network
data fetching.&lt;/p&gt;

&lt;p&gt;We&#39;ve seen that the web teams integrate React in their projects with really great results. We&#39;ve been
&lt;a href=&quot;https://github.com/artsy/mobile/issues/22&quot;&gt;paying attention&lt;/a&gt; to React Native since it came out; the solutions provided
by the React ecosystem ticked all of our boxes.&lt;/p&gt;

&lt;p&gt;Six months ago we took the plunge, and last month we formalized that this is the direction we want to go.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;h1&gt;Cons&lt;/h1&gt;

&lt;p&gt;So you decided to read the full post and the first thing you got confronted with is a list of cons… &lt;em&gt;boo&lt;/em&gt;. Let’s just get
these out of the way first, it will only get better afterwards.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Dependencies, dependencies, dependencies, both in libraries and tooling. Once you open this can, you’ll have worms
&lt;em&gt;everywhere&lt;/em&gt; in no time; 593 packages to be exactly, at the time of writing, for a new React Native project. Good luck
maintaining that.&lt;/p&gt;

&lt;p&gt;Having created &lt;a href=&quot;https://cocoapods.org&quot;&gt;a dependency manager&lt;/a&gt;, I’m not afraid of some dependencies and don’t subscribe
to NIH, but the JavaScript community has gone &lt;em&gt;way&lt;/em&gt; overboard for my taste. If, like me, you subscribe to the idea
that dependencies are &lt;em&gt;part&lt;/em&gt; of your application and you want to be able to know what packages are being pulled in so
you can maintain them, then you probably won’t like this aspect very much either.&lt;/p&gt;

&lt;p&gt;I’m not quite sure yet how I feel about this in the long run and what we can do about it, short of trying to get the
maintainers of the packages we directly depend on to accept changes that simplify their dependency graphs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As is often the case, error reporting does not always receive the attention it should get. With the amount of tools
and libs that make up the full stack you need to work with, this lack in attention to failure resolution can quickly
cascade into deep rabbit holes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React Native is still very young and fast moving. If you don’t like living on the edge (i.e. lots of updating and
dealing with breaking changes) nor have an interest in shaping an unfinished framework, this currently is not for you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All Facebook open-source code is made to solve the problems that Facebook has first, thus with young projects you may
well need to put in a bunch of time to make it work for your problem set. React Native provides a lot of basic view
building blocks, but you do lose a lot that you would get with UIKit for free, e.g. &lt;code&gt;UICollectionView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, it is important to note that this is only a heads-up for those that might think they can solve any problem
out-of-the-box; in terms of open-source code I prefer code used in production over other code &lt;em&gt;any&lt;/em&gt; day.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are currently many more people trying to get help, with often arguably simple questions in the context of iOS
development, compared to those willing to spend time on answering questions. Most forums I’ve seen suffer from the
tragedy of the commons problem, which can be a real problem if you have incidental framework specific questions, but
jumping to React-Native probably is a complete disaster if you know very little about iOS development yet.&lt;/p&gt;

&lt;p&gt;If you’re not already knowledgable about iOS development, are not motivated to put in the time to learn about the
platform specific details, and think making rich iOS applications with React Native will be a breeze, you’ll
&lt;a href=&quot;http://www.dwotd.nl/2008/06/443-van-een-kouwe-kermis-thuiskomen.html&quot;&gt;come home from a very cold fair&lt;/a&gt; indeed.&lt;/p&gt;

&lt;p&gt;While you can definitely make applications that way, in my experience those often end up not feeling like proper
citizens of the platform they inhibit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Due to React Natives immaturity, you will not be able to find nuanced post-mortems on the subject. The project
is only at the beginning of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Hype_cycle&quot;&gt;hype cycle&lt;/a&gt;, meaning there is a lot
to gain in writing about how great it is, but less incentive to discuss where it doesn&#39;t work out well.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Pros, why we wanted to use React Native&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;From &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;the React website&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;React will efficiently update and render just the right components when your data changes.
Build encapsulated components that manage their own state, then compose them to make complex UIs.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The functional model that React introduces that allows you to reason about the state of your views in much simpler
ways has for us been a welcome change that should make it much easier to write decoupled code going forward.&lt;/p&gt;

&lt;p&gt;I’m by no means a functional programming purist, nor do I really care for being one. I found the React/React Native
communities to be very welcome to functional enthusiasts and pragmatists alike, a healthy mix that I find leads to
more productive outcomes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Relay. From &lt;a href=&quot;https://facebook.github.io/relay/&quot;&gt;its website&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Queries live next to the views that rely on them, so you can easily reason about your app.
Relay aggregates queries into efficient network requests to fetch only what you need.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The clarity this brings to the view codebase - coupled with its smart caching, networking is just ground-breaking.
No more multiple levels of model code in your application that you need to trace, just a single file with
&lt;a href=&quot;https://github.com/artsy/emission/blob/a2e4dbdb/lib/components/artist/header.js#L87&quot;&gt;the view component&lt;/a&gt; &lt;em&gt;and&lt;/em&gt;
&lt;a href=&quot;https://github.com/artsy/emission/blob/a2e4dbdb/lib/components/artist/header.js#L143-L144&quot;&gt;the data it needs&lt;/a&gt;. Neat.&lt;/p&gt;

&lt;p&gt;We do still have ‘view models’, however, those now pretty much all live in
&lt;a href=&quot;http://artsy.github.io/blog/2016/06/19/graphql-for-mobile/&quot;&gt;our GraphQL service&lt;/a&gt;. The added benefit here is that we
share that model logic with Artsy’s other (web) clients.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“Learn once, write anywhere.” is the neo-cross-platform slogan deployed by React, which is a play on the tried
“Write once, run anywhere.” slogan of yesteryear. The difference being that you can use the same paradigms to create
products on various platforms, rather than pure code-reuse.&lt;/p&gt;

&lt;p&gt;While we haven’t put this to the test yet at Artsy, we do plan to team up people across platforms to implement single
features on each respective platform, rather than having multiple people implement the same feature &lt;em&gt;on their own&lt;/em&gt;.
The hope is that this will lead to better understanding of features and thus the implementations thereof, while still
taking each platform’s unique nature into account. The added benefit would be that people learn to understand and
appreciate those unique platform traits, thus making them more well-rounded engineers.&lt;/p&gt;

&lt;p&gt;In the long run, we hope to extend this way of working as we start work on a React Native Android client.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While Auto Layout is a great step up from manual frame calculation, most of our views don’t need the granularity that
Auto Layout offers. React Native ditches Auto Layout and instead uses
&lt;a href=&quot;https://en.wikipedia.org/wiki/CSS_Flex_Box_Layout&quot;&gt;flexbox&lt;/a&gt; for its layout. While my head has never been able to
fully wrap around classic CSS, I find that flexbox is an abstraction that nicely fits most of our needs.&lt;/p&gt;

&lt;p&gt;I can definitely imagine situations in which more granularity would be required, however, in those cases we can always
decide to ‘drop down’ to native view code, so I don’t really worry too much about that.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Layout calculations are performed on a background thread, the so-called ‘shadow’ thread. This can make a big
difference when e.g. scrolling through a large complex list view.&lt;/p&gt;

&lt;p&gt;Granted, you &lt;em&gt;can&lt;/em&gt; do this with &lt;code&gt;UIView&lt;/code&gt;, but the pattern is not as ingrained in UIKit thus usually leading to more holistic
replacements such as &lt;a href=&quot;http://asyncdisplaykit.org&quot;&gt;AsyncDisplayKit&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Great separation of declarative view layout (JS, single-threaded) and technical details (native code, multi-threaded).
Because of the hard constraint of having a JS/native bridge, there really is no way to take shortcuts (e.g. spaghetti
code) that in the long run would only lead to technical debt. Constraints are great.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because there’s very little code that needs to be compiled and how the isolated component nature of React makes it
it very easy to reload code in-process, development velocity lies much higher than with your typical native UIKit-based
development.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While, as mentioned above, there are definitely issues with the tooling and libs, on the flip-side it is all
open-source software and you &lt;em&gt;can&lt;/em&gt; (officially) dive in and figure it out, unlike e.g. Xcode and UIKit. (Granted, you
still need to deal with these when using React Native, but it can be kept to a minimal surface.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because React Native is still young, fast moving, and open-source, this is a great time to help shape the framework
you’d &lt;em&gt;want&lt;/em&gt; to use.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Things we learned&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When we started out with React Native, I didn&#39;t want to have to re-write our application in order to take advantage of
the technology. To address this I worked within our existing application structure. We consider the App to
&lt;a href=&quot;https://artsy.github.io/blog/2015/08/24/Cocoa-Architecture-Hybrid-Apps/&quot;&gt;be a browser&lt;/a&gt; of native and web view controllers. So,
we added routes &lt;a href=&quot;http://artsy.github.io/blog/2015/08/19/Cocoa-Architecture-Switchboard-Pattern/&quot;&gt;to our SwitchBoard&lt;/a&gt; for
view controllers which are created in React Native. To the rest of the app, there is no difference between a Swift view controller,
or one with React Native inside.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All of the React Native code is kept in a completely separate repo, &lt;a href=&quot;https://github.com/artsy/emission&quot;&gt;Emission&lt;/a&gt;, which
when deployed generates a minified version of the JavaScript. This means to build the Artsy iOS app you do not need to have
a JavaScript development environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We reused a lot of our existing native views, starting with loading indicators and native switch views.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We used new native classes to improve integration, for example the &lt;code&gt;&amp;lt;OpaqueImageView&amp;gt;&lt;/code&gt;
&lt;a href=&quot;https://github.com/artsy/emission/blob/master/lib/components/opaque_image_view.js&quot;&gt;component&lt;/a&gt; is a
&lt;a href=&quot;https://github.com/artsy/emission/tree/master/Pod/Classes/OpaqueImageViewComponent&quot;&gt;native&lt;/a&gt; &lt;code&gt;UIImageView&lt;/code&gt;
subclass that works with our application-wide &lt;a href=&quot;https://cocoapods.org/pods/SDWebImage&quot;&gt;SDWebImage&lt;/a&gt; image cache.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;To really shine with React Native, you need native experience. JavaScript has not eaten everything yet. However,
you don&#39;t need a team of native experts. For example, we expect to be able to get quite far with Android support based on
our work in React Native, but to make it amazing, we will need someone with history and context in the space.&lt;/p&gt;

&lt;p&gt;This frees up our engineers to widen their &lt;a href=&quot;https://artsy.github.io/blog/2016/01/30/iOS-Junior-Interviews/&quot;&gt;T-shaped skills&lt;/a&gt;,
and to help remove the idea that the mobile team has to be a completely separate team with foreign tools and ideas.&lt;/p&gt;

&lt;p&gt;This is only the tip of the iceberg for our writings about React Native. Follow &lt;a href=&quot;https://twitter.com/orta&quot;&gt;@ArtsyOpenSource&lt;/a&gt;
to stay up to date.&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Aug 2016 21:17:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/08/15/React-Native-at-Artsy/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/08/15/React-Native-at-Artsy/</guid>
        
        
        <category>mobile</category>
        
        <category>react</category>
        
      </item>
    
      <item>
        <title>Using VS Code for JavaScript</title>
        <description>&lt;center&gt;
 &lt;img src=&quot;/images/vscode/vscode_logo_artsy.svg&quot; style=&quot;width:300px;&quot;&gt;
&lt;/center&gt;


&lt;p&gt;I&#39;m an old school TextMate user, who has also been using Xcode for the last decade. These two sit at a very opposite ends of an &quot;editor&quot; spectrum.&lt;/p&gt;

&lt;p&gt;TextMate is extremely bare bones at the core, but introduced the idea of bundles as plugins. Making it really easy for others to build their own plugins for their own contexts. Xcode on the other-hand includes a 3D scene editor, the best interface builder I&#39;ve seen, super rich debugging tools and close to zero support for improving it yourself.&lt;/p&gt;

&lt;p&gt;As we agreed on moving to React Native, we needed to decide what the team should use for &lt;a href=&quot;https://github.com/artsy/emission/blob/master/docs/vscode.md&quot;&gt;working in that environment&lt;/a&gt;. After experimentation with many editors, we decided on Microsoft&#39;s &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We wanted to keep a lot of the best features from Xcode, while working in a completely JavaScript environment. For example: debuggers, inline errors, auto-complete, symbol mapping and to ideally have them all inside a single editor.&lt;/p&gt;

&lt;p&gt;Let&#39;s dig into the principals of how Visual Studio Code works, what makes it a better option for us, and what parts of it really shine.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;hr /&gt;

&lt;h3&gt;What is Visual Studio Code?&lt;/h3&gt;

&lt;p&gt;Visual Studio Code (VS Code) is &lt;em&gt;yet another&lt;/em&gt;, JavaScript-based text editor. It&#39;s built atop of GitHub&#39;s &lt;a href=&quot;http://electron.atom.io&quot;&gt;Electron&lt;/a&gt;. Electron is a framework for writing native apps as easy as building websites. It started as a web component for some Microsoft web-service, and eventually evolved into a fully-fledged text editor.&lt;/p&gt;

&lt;h4&gt;IDE - Editor hybrid&lt;/h4&gt;

&lt;p&gt;Visual Studio Code (VS Code) believes that the sweet-spot between and IDE and a plain Text Editor, is somewhere a little bit closer to the IDE side.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/vscode/editors.png&#39;&gt;&lt;img src=&quot;/images/vscode/editors.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;This means instead of the Text-Editor style folder based approach, VS Code expects to set up a project structure per-project to start supporting from of the more useful IDE-like features.&lt;/p&gt;

&lt;p&gt;It supports TextMate style plugins (called Extensions) through a controlled, but expanding &lt;a href=&quot;https://code.visualstudio.com/docs/extensions/overview&quot;&gt;extension API&lt;/a&gt;. The extension API work takes an &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingXPCServices.html&quot;&gt;Apple-like&lt;/a&gt; approach to ensuring stability by having all extensions run outside of the host process. &lt;a href=&quot;https://code.visualstudio.com/docs/extensions/our-approach&quot;&gt;This approach&lt;/a&gt; ensures any extension crash does not take down the editor.&lt;/p&gt;

&lt;p&gt;It&#39;s also smart about deciding when to load an extension, for example, my &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Orta.vscode-danger&quot;&gt;Danger&lt;/a&gt; extension will &lt;a href=&quot;https://github.com/orta/vscode-danger/blob/a21ccc101b2b1c1be595b10565bca9c88242fb6f/package.json#L18-L20&quot;&gt;only load&lt;/a&gt; if there is a &lt;code&gt;Dangerfile&lt;/code&gt; in the root of the workspace.&lt;/p&gt;

&lt;p&gt;These two approaches to extensions are specifically aimed at &lt;a href=&quot;https://discuss.atom.io/t/why-is-atom-so-slow/11376&quot;&gt;addressing issues&lt;/a&gt; seen inside Atom, where any user actions can be / are blocked by extensions, and extensions have full-reign to make any change they want. Even on my Mac Pro, there is a noticable lag. I initially assumed this was the &quot;JavaScript tax&quot; for all Electron apps, but VS Code is fast.&lt;/p&gt;

&lt;h3&gt;Making Intellisense&lt;/h3&gt;

&lt;p&gt;By default a JavaScript project does not have a way to provide auto-completion, or in VS Code&#39;s terminology: Intellisense. Trying to make auto-complete based on a &lt;a href=&quot;https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop&quot;&gt;REPL&lt;/a&gt; can only get you so far, because it has to be wary against functions with side-effects. Other alternatives are to build an &lt;a href=&quot;http://jointjs.com/demos/javascript-ast&quot;&gt;AST&lt;/a&gt; from the code, and then introspect that.&lt;/p&gt;

&lt;p&gt;In Xcode the auto-complete tools are powered by the type systems of Objective-C and Swift. This means that you can know the structure of an object, without having to dig inside it, potentially breaking it in the process. Vanilla JavaScript does not have a type system. There are a few root classes though: String, Object, Number etc.&lt;/p&gt;

&lt;p&gt;To work around this problem, VS Code uses &lt;a href=&quot;http://www.typescriptlang.org&quot;&gt;TypeScript&lt;/a&gt; behind the scenes. TypeScript is a language that compiles down to JavaScript which provides a typing structure on top of JavaScript. This is a similar approach to how &lt;a href=&quot;https://flowtype.org&quot;&gt;Flow works&lt;/a&gt; too, which is the language &lt;a href=&quot;https://github.com/artsy/emission/pull/220&quot;&gt;we write React Native&lt;/a&gt; in.&lt;/p&gt;

&lt;p&gt;This can work out really well for your own classes if you are declaring your types, but the npm ecosystem is &lt;em&gt;full&lt;/em&gt; of untyped JavaScript, and a lot of your work is about sitting atop those abstractions. The fix for this is offered via &lt;a href=&quot;http://definitelytyped.org&quot;&gt;DefinitelyTyped&lt;/a&gt; which provides type definitions for popular npm modules. For example here is &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/redux/redux.d.ts&quot;&gt;one for Redux&lt;/a&gt; - these act like &lt;a href=&quot;https://github.com/artsy/eigen/blob/master/Artsy/App/ARSwitchBoard.h&quot;&gt;header files in Objective-C&lt;/a&gt; - offering inline documentation, and the shape of the object.&lt;/p&gt;

&lt;p&gt;I use an extension to keep these up to date and to have them installed in every project I work in: &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=jvitor83.types-autoinstaller&quot;&gt;Types auto installer&lt;/a&gt;. Here&#39;s an example of auto-complete for &lt;a href=&quot;http://redux.js.org/docs/api/Store.html&quot;&gt;a Redux store&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/vscode/redux.png&#39;&gt;&lt;img src=&quot;/images/vscode/redux.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;It&#39;ll also provide information about the parameters, which is a life-saver for me. Having grown up with &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html&quot;&gt;named&lt;/a&gt; &lt;a href=&quot;https://robots.thoughtbot.com/ruby-2-keyword-arguments&quot;&gt;parameters&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/vscode/redux-params.png&#39;&gt;&lt;img src=&quot;/images/vscode/redux-params.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;h3&gt;Runtime&lt;/h3&gt;

&lt;p&gt;Using console logs to debug isn&#39;t an acceptable answer when debugging for me anymore. &lt;a href=&quot;http://blog.cleancoder.com/uncle-bob/2016/07/27/TheChurn.html&quot;&gt;That&#39;s churn&lt;/a&gt; that I&#39;m not willing to lose time to. Luckily for me, VS Code supports debugging across many languages.&lt;/p&gt;

&lt;p&gt;It does this by having a generic VS Code &lt;a href=&quot;https://code.visualstudio.com/docs/extensions/example-debuggers&quot;&gt;Debug Protocol&lt;/a&gt; which lets extensions use their own processes to run the debugger. So the ruby debugger runs on the &lt;a href=&quot;https://github.com/rubyide/vscode-ruby#debugger&quot;&gt;&lt;code&gt;ruby-debug-ide&lt;/code&gt;&lt;/a&gt; gem, and for node-based projects it uses the debugger built into node.&lt;/p&gt;

&lt;p&gt;So, here is a common case. I want to start up my web-server, so I need to run &lt;code&gt;npm dev&lt;/code&gt;. I can run this from VS Code:&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/vscode/start.png&#39;&gt;&lt;img src=&quot;/images/vscode/start.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;Once that&#39;s running - I can attach a debugger. This is listing all of the available node processes on my computer:&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/vscode/attatch.png&#39;&gt;&lt;img src=&quot;/images/vscode/attatch.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;Then I can add a breakpoint, and when it is triggered, I have a full stack trace and REPL. The REPL is very barebones, for example - there&#39;s no auto-complete. However, it&#39;s good for quick exploration. I keep &lt;a href=&quot;https://www.objc.io/issues/19-debugging/lldb-debugging/#printing-objects&quot;&gt;accidentally prefixing&lt;/a&gt; my REPL code with &lt;code&gt;po&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/vscode/debug.png&#39;&gt;&lt;img src=&quot;/images/vscode/debug.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;The breakpoint works through a &lt;a href=&quot;http://blog.teamtreehouse.com/introduction-source-maps&quot;&gt;source map&lt;/a&gt;, and so the line you expect is the one that you&#39;re working in. That stuff is all pretty magic to me. Good on Microsoft, and the node community for pulling that off.&lt;/p&gt;

&lt;h3&gt;Wrapup&lt;/h3&gt;

&lt;p&gt;I still feel a little bit uncomfortable in JavaScript projects, as a long-time native developer. However feel like VS Code is a nice mix of the freeform &quot;just do something&quot; style of Text Editors, which work across a lot of systems and the tight-knit IDEs that are bound to a specific domain. It can be a bridge between worlds.&lt;/p&gt;

&lt;p&gt;VS Code has become my main editor in Ruby and JavaScript, due to having great support for the projects and being an OSS project which I feel like I can contribute to. No more being &lt;a href=&quot;https://github.com/alcatraz/Alcatraz/issues/475&quot;&gt;locked out&lt;/a&gt; of improving my editor. Awesome!&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Aug 2016 12:17:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/08/15/vscode/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/08/15/vscode/</guid>
        
        
        <category>danger</category>
        
        <category>node</category>
        
        <category>reactnative</category>
        
        <category>tooling</category>
        
      </item>
    
      <item>
        <title>Dev Interviews: Craig Spaeth</title>
        <description>&lt;p&gt;Hello everyone! Orta here, over the summer I&#39;ve started a series of interviews with the entire development team at Artsy. They&#39;re all on different topics, notably around technical and cultural issues. I&#39;ve recorded a few of them already, and will be sporadically releasing them. I&#39;m still getting the hang of editing and recording side of this, so give me some slack.&lt;/p&gt;

&lt;p&gt;Anyway, I&#39;m pumped to introduce the first in the series - &lt;a href=&quot;http://craigspaeth.com/&quot;&gt;Craig Spaeth&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Craig has been at Artsy for 6 years, moving from the first on-site developer to Director of Web. Our interview covered how Artsy&#39;s development team has adapted over time to the changing demands of a growing company. When he joined, Artsy was 6 people, we&#39;re now at ~145 people, ~20 developers and 3 businesses.&lt;/p&gt;

&lt;p&gt;Jump &lt;a href=&quot;https://www.youtube.com/watch?v=-0WK1Ebis3M&quot;&gt;to YouTube&lt;/a&gt; for the video, or click more for a inline video.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;iframe width=&#39;100%&#39; height=&#39;600&#39; src=&#39;https://www.youtube.com/embed/-0WK1Ebis3M &#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Aug 2016 12:11:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/08/09/Dev-Interview-Craig-Spaeth/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/08/09/Dev-Interview-Craig-Spaeth/</guid>
        
        
        <category>culture</category>
        
        <category>interview</category>
        
        <category>video</category>
        
      </item>
    
      <item>
        <title>The Tech Behind Live Auction Integration</title>
        <description>&lt;p&gt;In late June, the &lt;a href=&quot;https://www.artsy.net/auctions/&quot;&gt;Artsy auctions&lt;/a&gt; team launched our Live Auction Integration (LAI) product. It allows people to participate online in live sales held at auction houses &lt;a href=&quot;https://www.artsy.net/auction-partnerships&quot;&gt;that partner with Artsy&lt;/a&gt;. It was a big project, begun in December, involving both brand new software and extensive integration work with the rest of our systems. This is the first in what will be a series of blog posts discussing the engineering work we did to get a complex product from inception to launch in such a brief time window, with a go-live deadline set in stone weeks in advance. In this, I’ll dig into what we shipped on a high level, as well as some of the overarching technical decisions.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;LAI raised challenges that were novel to our engineering team. The product is a real-time experience from the perspectives of the bidder and the auction house. Producing that experience requires a complex human + computer system. There are two main flows of information: from auction house to bidder, and vice versa. These are mediated by our systems and staff as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As bids occur in the auction house sale room, an Artsy operator working on-site inputs that activity into a web interface so that online participants can keep track of what’s happening.&lt;/li&gt;
&lt;li&gt;As online participants place bids, our system records those as “prospective bids”, and an Artsy bidding clerk on site at the auction house bids on their behalf in the auction house. As those bids are recognized, they are reflected back to all participants, through the prior flow.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;To make this easier to visualize:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-09-the-tech-behind-live-auction-integration/Artsy%20Live%20Auction%20Integration%20flow.png&quot; alt=&quot;Artsy Live Auction Integration Flow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This needs to happen in a tight loop to allow online bidders to be competitive with those in the room and via auction house phone clerks. The architecture and UX of the LAI product were optimized for that goal. In addition, we built the system to integrate with live events hosted by our partners. As the events are outside our direct control, there are many, many ways things can deviate from this idealized flow. We had to carefully account for these situations.&lt;/p&gt;

&lt;p&gt;Where possible, we leveraged our existing auctions technology. But we took the opportunity to upgrade that technology in some places and chose new approaches in others. Meanwhile, we were running the busiest Artsy auction season to date, and we had to ensure that we weren’t disrupting our existing stack. Below, I discuss the pieces of the end-to-end product.&lt;/p&gt;

&lt;h1&gt;The Live user experience&lt;/h1&gt;

&lt;p&gt;When the live auction actually begins, participants and Artsy staff interact with the system with front-end software developed from scratch. Web users (desktop and mobile) and staff use a new, dedicated Artsy Live web application, which is implemented in a project we call Prediction. iOS Artsy App users can also participate with newly developed UX within that app.&lt;/p&gt;

&lt;h2&gt;The web app: Prediction&lt;/h2&gt;

&lt;p&gt;Our bidder and operator web interfaces are implemented in an application we call Prediction, a &lt;a href=&quot;https://medium.com/@mjackson/universal-javascript-4761051b7ae9#.ev1yd3juy&quot;&gt;universal&lt;/a&gt; &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;+&lt;a href=&quot;http://redux.js.org/&quot;&gt;Redux&lt;/a&gt; Javascript app, served from an &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt; server. Using React allowed us to completely share our view layer code for prerendering in the server and making updates in the client.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-09-the-tech-behind-live-auction-integration/Prediction%20Bidder%20Screenshot.png&quot; alt=&quot;Prediction Bidder UI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Keeping our state management and transition code organized with Redux allowed us to achieve a massive amount of reuse of model and controller code between our web interfaces. To solve Redux&#39;s &lt;a href=&quot;http://stackoverflow.com/q/34570758/807674&quot;&gt;async&lt;/a&gt; and &lt;a href=&quot;http://stackoverflow.com/q/34299460/807674&quot;&gt;data conveyance&lt;/a&gt; “problems&quot;, we built an integration layer for React and Redux called &lt;a href=&quot;https://github.com/artsy/react-redux-controller&quot;&gt;React Redux Controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-09-the-tech-behind-live-auction-integration/Prediction%20Operator%20Screenshot.png&quot; alt=&quot;Prediction Operator UI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We found the React+Redux approach to model-view-controller app development to be a major win in what it gave us for maintainability, code reuse, easy testability, and the ability to reason about our code.&lt;/p&gt;

&lt;h2&gt;The iOS native app: Eigen&lt;/h2&gt;

&lt;p&gt;For users of the Artsy iOS app, known to our engineering team as &lt;a href=&quot;https://github.com/artsy/eigen&quot;&gt;Eigen&lt;/a&gt;, a touch-optimized LAI experience was coded in Swift. It shares the same app with existing Objective-C code as well as &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;React Native&lt;/a&gt; code used for other aspects of the iOS experience. We considered using React Native for this, but we decided to go with more familiar technology to contain the risk.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-09-the-tech-behind-live-auction-integration/Eigen%20Bidder%20Screenshot.png&quot; alt=&quot;Eigen Bidder UI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Both of these applications interact with our central Artsy back-end service to pull in artist, artwork, and sale metadata when the user enters the auction. These queries are mediated by a &lt;a href=&quot;http://graphql.org/&quot;&gt;GraphQL&lt;/a&gt; middleware service we call &lt;a href=&quot;https://github.com/artsy/metaphysics&quot;&gt;Metaphysics&lt;/a&gt; (also discussed &lt;a href=&quot;/blog/2016/06/19/graphql-for-mobile/&quot;&gt;here&lt;/a&gt;), which vastly simplified the fetching process in the front-end services. But from that point forward, the apps interact with a brand new auction state management system over a bidirectional &lt;a href=&quot;https://en.wikipedia.org/wiki/WebSocket&quot;&gt;WebSocket&lt;/a&gt; API for live updating.&lt;/p&gt;

&lt;h1&gt;The auction state management service: Causality&lt;/h1&gt;

&lt;p&gt;The other recently launched piece of software delivered for LAI was a new auction state management system we call Causality. It processes bids and other auction events, computes the derived state of a sale, and hosts the bidirectional WebSocket API.&lt;/p&gt;

&lt;p&gt;Causality was developed in Scala, using the &lt;a href=&quot;http://doc.akka.io/docs/akka/current/intro/what-is-akka.html&quot;&gt;Akka&lt;/a&gt; technology suite for distributed computing. At its core is an append-only storage engine, based on &lt;a href=&quot;http://doc.akka.io/docs/akka/current/scala/persistence.html&quot;&gt;Akka Persistence&lt;/a&gt;, with a small library we developed called &lt;a href=&quot;https://github.com/artsy/atomic-store&quot;&gt;Atomic Store&lt;/a&gt; that allowed us to achieve strict consistency, at the cost of maximal throughput -- a trade-off that is explored in the readme of that project.&lt;/p&gt;

&lt;p&gt;Lastly, Causality has an &lt;a href=&quot;http://doc.akka.io/docs/akka/current/scala/http/introduction.html&quot;&gt;Akka HTTP&lt;/a&gt;-based API layer, with a WebSocket server implemented using &lt;a href=&quot;http://doc.akka.io/docs/akka/current/scala/stream/stream-introduction.html&quot;&gt;Akka Streams&lt;/a&gt;. Asynchronous updates generated in the event processing logic are published across the cluster using &lt;a href=&quot;http://doc.akka.io/docs/akka/current/scala/distributed-pub-sub.html&quot;&gt;Akka Distributed Pub/Sub&lt;/a&gt;, and they are merged into the WebSocket outflow.&lt;/p&gt;

&lt;h1&gt;Pre-bidding, tooling, and other concerns&lt;/h1&gt;

&lt;p&gt;In addition to accepting bids placed during a live sale, we also allow users to place bids before the event begins. In practice, this is almost the same workflow as our existing timed auction experience. For this reason, we chose to leverage all of our existing technology. The work of preparing our preexisting tech for LAI involved widespread modifications to our front-end UI, messaging services, admin tooling, and monitoring to make them appropriate for a live sale, as well as a reliable handoff of responsibility from these preexisting front- and back-end services to the new ones at the time the sale goes live.&lt;/p&gt;

&lt;p&gt;We relied on our automated test suites, as well as thorough manual testing by the entire Artsy auctions team, to ensure that this handoff functioned smoothly under various circumstances. We will eventually eliminate this duplication. But this will require delicate refactoring of our preexisting tooling, which we will take on, even as we execute a fall auction season significantly busier than the last.&lt;/p&gt;

&lt;h1&gt;Reflection&lt;/h1&gt;

&lt;p&gt;In the process of architecting our LAI product, we had to make some tough decisions in the face of new challenges. Chief among these were the decisions on where on the spectrum of bleeding-edge technology versus tried-and-true choices to land, for many of our subcomponents. Bleeding-edge tech often offers more elegant and performant solutions, but at the cost of learning curve and risk of immaturity. We also had to carefully prioritize functionality. Choosing wisely througout the process was critical to shipping on time. The rationale behind these decisions and their outcomes will be the result of future pieces.&lt;/p&gt;

&lt;p&gt;To close, I want to express huge thanks to the auctions product &amp;amp; engineering team for putting in long hours to design, implement, and troubleshoot the software; the auctions arts team for providing the domain knowledge and operational feedback; and our broader Artsy engineering team, at least half of whom directly contributed code to this effort.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Aug 2016 11:30:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/08/09/the-tech-behind-live-auction-integration/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/08/09/the-tech-behind-live-auction-integration/</guid>
        
        
        <category>akka</category>
        
        <category>architecture</category>
        
        <category>auctions</category>
        
        <category>engineering</category>
        
        <category>javascript</category>
        
        <category>launch</category>
        
        <category>lifecycle</category>
        
        <category>react</category>
        
        <category>redux</category>
        
        <category>scala</category>
        
        <category>swift</category>
        
      </item>
    
      <item>
        <title>Handling Large OSS Projects Defensively</title>
        <description>&lt;p&gt;I help maintain big OSS projects: from a third-party &lt;a href=&quot;https://cocoapods.org&quot;&gt;dependency manager&lt;/a&gt; used in most iOS apps (&lt;a href=&quot;https://github.com/CocoaPods/cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt;), to the most popular Objective-C &lt;a href=&quot;http://cocoapods.org/pods/Specta&quot;&gt;testing framework&lt;/a&gt; and the most popular Swift &lt;a href=&quot;http://cocoapods.org/pods/Moya&quot;&gt;networking API client&lt;/a&gt;. I&#39;ve been doing this for years.&lt;/p&gt;

&lt;p&gt;Projects with this much impact are big time-sinks. This time comes from ensuring infrastructure continues to work, support tickets need replies, new code needs reviewing and releases need coordinating.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-07-03-big-oss/danger_logo_black@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Last September, almost a year ago, I started work on a new project, &lt;a href=&quot;https://github.com/danger/danger/&quot;&gt;Danger&lt;/a&gt;. Danger fixes a problem we were seeing in the Artsy mobile team around adding &quot;&lt;a href=&quot;https://github.com/artsy/mobile/issues/31&quot;&gt;process&lt;/a&gt;&quot; to our team.&lt;/p&gt;

&lt;p&gt;As a part of discussing Danger internally, I&#39;ve referenced that building CocoaPods has greatly influenced Danger. This blog post is about the way I&#39;ve built Danger, knowing fully well that I cannot afford the level of time to maintain it at the scale it may get to.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;hr /&gt;

&lt;p&gt;Danger is a project that could end up with a lot more users than CocoaPods. So I want to be cautious about how I create the community around Danger. If you&#39;re interested in some of the baseline setup required to run a popular project, the post &quot;&lt;a href=&quot;https://ashfurrow.com/blog/building-popular-projects/&quot;&gt;Building Popular Projects&lt;/a&gt;&quot; by &lt;a href=&quot;/author/ash&quot;&gt;Ash&lt;/a&gt; is a great place to start, this builds on that.&lt;/p&gt;

&lt;p&gt;My maintenance time on CocoaPods resolves around:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handling new issues&lt;/li&gt;
&lt;li&gt;Keeping infrastructure running&lt;/li&gt;
&lt;li&gt;Requests around user data&lt;/li&gt;
&lt;li&gt;Keeping disparate communities together&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Issues&lt;/h2&gt;

&lt;p&gt;From the ground up, Danger could not end up as complex as CocoaPods, the domain they cover is different and CocoaPods sits atop of an annually moving (and &lt;em&gt;somewhat&lt;/em&gt; hostile) &lt;a href=&quot;https://developer.apple.com/news/&quot;&gt;platform&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, get enough people using a product and you end up with three types of issues: Bug Reports, How Do I X? and Feature Requests.&lt;/p&gt;

&lt;p&gt;I wanted to keep bug-reports down, as much as possible, and so I built a system wherein the default error reporting system would also search GitHub issues &lt;a href=&quot;https://github.com/orta/gh_inspector&quot;&gt;for similar problems&lt;/a&gt;. Knowing this was a generic problem, I built it with &lt;a href=&quot;https://github.com/fastlane/fastlane/releases/tag/1.96.0&quot;&gt;other&lt;/a&gt; &lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/pull/5421&quot;&gt;large&lt;/a&gt; ruby projects in mind too.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;How do I X?&lt;/code&gt; are issues that haven&#39;t appeared much on Danger. For CocoaPods we request people use the CocoaPods tag on StackOverflow. That saves us from 5 to 6 issues a day, and provides others a great place to get internet points by responding instead.&lt;/p&gt;

&lt;p&gt;Feature Requests issues are always fascinating, it gives you a chance to really see the difference between what you imagined a project&#39;s scope is, and how others perceive it. One thing that helps here is that Danger has a &lt;a href=&quot;https://github.com/danger/danger/blob/master/VISION.md&quot;&gt;VISION.md&lt;/a&gt; file. This helped vocalise a lot of internal discussion, and let contributors understand the roadmap:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The core concept is that the Danger project itself creates a system that is extremely easy to build upon. The codebase for Danger should resolve specifically around systems for CI, communication with Peer Review tools and providing APIs to Source Control changes. For example: Travis CI - GitHub - git.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As well as providing a heuristic for determining whether something should be added to Danger:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This means that decisions on new code integrated into Danger should ask &quot;is this valid for every CI provider, every review system and source control type?&quot; by making this domain so big, we can keep the core of Danger small.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;Infrastructure&lt;/h3&gt;

&lt;p&gt;CocoaPods has about 6 web properties, 3 of which are critical. The others can go down, or be behind the Xcode update schedules and people&#39;s projects will work fine. The 3 the critical projects are all simple, focused projects: &lt;a href=&quot;https://github.com/CocoaPods/trunk.cocoapods.org&quot;&gt;trunk&lt;/a&gt; (provide auth, and submitting new libraries) &lt;a href=&quot;https://github.com/CocoaPods/cocoapods.org&quot;&gt;cocoapods.org&lt;/a&gt;, and &lt;a href=&quot;https://github.com/CocoaPods/search.cocoapods.org&quot;&gt;search&lt;/a&gt;. We control everything there.&lt;/p&gt;

&lt;p&gt;Meanwhile the less critical ones like &lt;a href=&quot;https://github.com/CocoaPods/cocoadocs.org&quot;&gt;cocoadocs.org&lt;/a&gt; have dependencies all over the show: AppleDoc, CLOC, Xcode, Carthage, Jazzy - every one of these can, and has, been a source of unreliability for infrastructure that I maintain.&lt;/p&gt;

&lt;p&gt;With Danger, I wanted to avoid building any infrastructure that does not sit on top of solid, mature projects. The website is statically created in &lt;a href=&quot;https://middlemanapp.com&quot;&gt;Middleman&lt;/a&gt;, using &lt;a href=&quot;https://rubygems.org/gems/slim&quot;&gt;boring&lt;/a&gt; &lt;a href=&quot;https://rubygems.org/gems/sass&quot;&gt;old&lt;/a&gt; technology, this means no server to host.&lt;/p&gt;

&lt;p&gt;To support dynamic content on the website, I have a rake command to use &lt;a href=&quot;https://rubygems.org/gems/yard/versions&quot;&gt;a decade old&lt;/a&gt; documentation formatter to pull content from a &lt;a href=&quot;https://en.wikipedia.org/wiki/RubyGems&quot;&gt;13 year old&lt;/a&gt; dependency manager - that lets others describer their project&#39;s. In order to let them keep it up to date, I have a tiny 35 line web-server that allows specific projects to trigger a new CI build.&lt;/p&gt;

&lt;h3&gt;Plugins&lt;/h3&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en-gb&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Summary of every big OSS project. Monolith -&amp;gt; Plugin support.&lt;a href=&quot;https://t.co/7x4vuW4bRd&quot;&gt;https://t.co/7x4vuW4bRd&lt;/a&gt;&lt;/p&gt;&amp;mdash; Orta Therox (@orta) &lt;a href=&quot;https://twitter.com/orta/status/748561323164864512&quot;&gt;30 June 2016&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/center&gt;


&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;It&#39;s almost inevitable that once a project becomes big, maintainers have to become a lot more conservative about how they introduce new code. You become good at saying &#39;no&#39;, but a lot of people have legitimate needs. So, instead you end up converting your tool into a platform.&lt;/p&gt;

&lt;p&gt;Some of the most interesting ideas in the CocoaPods ecosystem come from plugins.&lt;/p&gt;

&lt;p&gt;I wanted plugins to be a first class citizen within Danger from day one. It&#39;s in the &lt;a href=&quot;https://github.com/danger/danger/blob/master/VISION.md&quot;&gt;VISION&lt;/a&gt; file, and it&#39;s applied into how I&#39;ve designed a lot of the user-facing site. I was &lt;a href=&quot;https://github.com/danger/danger/issues/74&quot;&gt;torn&lt;/a&gt; after a few months of development &lt;a href=&quot;https://github.com/danger/danger/pull/156#issuecomment-205907128&quot;&gt;where things&lt;/a&gt; should go. Now the core of Danger is &lt;a href=&quot;https://github.com/danger/danger/pull/227&quot;&gt;built as plugins&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Documentation&lt;/h3&gt;

&lt;p&gt;My second big project on CocoaPods was collating documentation and scoping different types of documentation. In CocoaPods I ended with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Highlight pages&lt;/strong&gt; (intro pages, app pages, team pages)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Guides&lt;/strong&gt; (tutorials, overviews, FAQs)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reference&lt;/strong&gt; (Command-line interface, APIs for developers)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These 3 buckets for documentation makes it pretty easy to separate where people should look depending on what they&#39;re looking for. This pattern I&#39;m stealing outright for Danger. Just not quite yet, it&#39;s a blocker on 1.0 though.&lt;/p&gt;

&lt;p&gt;One trick I took from CocoaPods is to have as much documentation as possible generated from the source code. With Danger, all of the work that&#39;s gone into documenting the code is turned into public API documentation for end-users. This makes it really easy to ensure it&#39;s consistent and up-to-date. The same tools used to generate documentation for Danger are used for plugins. Any improvements there helps everyone.&lt;/p&gt;

&lt;h2&gt;User Data&lt;/h2&gt;

&lt;p&gt;Not storing any, phew! Though if &lt;a href=&quot;https://github.com/danger/danger/issues/42&quot;&gt;Danger as a Service&lt;/a&gt; happens, then it will.&lt;/p&gt;

&lt;h2&gt;People&lt;/h2&gt;

&lt;p&gt;People are hard, Ash said in &lt;a href=&quot;https://ashfurrow.com/blog/building-popular-projects/&quot;&gt;Building Popular Projects&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The biggest existential threat to your library is this: you get burned out and stop working on it – and no one else contributes to it –&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Understanding motivations, encouraging ownership and accommodating multiple viewpoints are vital parts of anyone who wants to make a project bigger than themselves. There &lt;a href=&quot;https://github.com/danger/danger/graphs/contributors&quot;&gt;are lots of times&lt;/a&gt; when I&#39;m not the lead developer on Danger.&lt;/p&gt;

&lt;p&gt;I owe a lot of this to the policy Ash and I created with Moya, the wordy &quot;&lt;a href=&quot;https://github.com/Moya/contributors&quot;&gt;Moya Community Continuity Guidelines&lt;/a&gt;&quot; which define the expectations of the maintainers of a project towards contributors.&lt;/p&gt;

&lt;p&gt;It&#39;s helped let a lot of other contributors make an impact. In the future, I hope those are the people that I get to hand Danger off to. Danger is bigger than me.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Maintaining big projects is a learned activity, for most people it&#39;s a spectator sport, but it&#39;s not too hard to jump from writing issues to helping out. It&#39;s how I ended up contributing to CocoaPods.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jul 2016 12:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/07/03/handling-big-projects/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/07/03/handling-big-projects/</guid>
        
        
        <category>culture</category>
        
        <category>danger</category>
        
        <category>mobile</category>
        
        <category>oss</category>
        
      </item>
    
      <item>
        <title>Code Spelunking: Injection for Xcode Plugin</title>
        <description>&lt;p&gt;It was only three months ago that I came to the conclusion of just how much time I had wasted &lt;a href=&quot;http://artsy.github.io/blog/2016/03/05/iOS-Code-Injection/&quot;&gt;on code compilation cycles&lt;/a&gt;, once I started to play with &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode&quot;&gt;Injection for Xcode&lt;/a&gt;. I still feel guilt about the time I wasted. However, I&#39;m trying to turn that into something constructive. In order to do that, I need to have a solid understanding of the fundamentals on how Injection For Xcode works.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ashfurrow.com/&quot;&gt;Ash&lt;/a&gt; says one of the best ways to &lt;a href=&quot;https://ashfurrow.com/blog/teaching-learning/&quot;&gt;learn is to teach&lt;/a&gt;. So I&#39;m going to try take you through a guided tour of the code-base. You need some pretty reasonable Objective-C chops to get this, but anyone with an app or two under their belt should be able to &lt;a href=&quot;https://en.wikipedia.org/wiki/Grok&quot;&gt;grok&lt;/a&gt; it.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;img src=&quot;/images/2016-06-29-injection-overview/overview.png&quot; alt=&quot;Xcode Project Overview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You might find it easier to clone the repo and have Xcode open along-side this article, to quickly do that, run these commands to put it in a temporary folder via the terminal:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /tmp/
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;git clone https://github.com/johnno1962/injectionforxcode TempInjection
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;open TempInjection/InjectionPluginLite/InjectionPlugin.xcodeproj/
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;h2&gt;A note on code style&lt;/h2&gt;

&lt;p&gt;I am of the _why &lt;a href=&quot;https://www.smashingmagazine.com/2010/05/why-a-tale-of-a-post-modern-genius/#dont-be-afraid-to-take-risks&quot;&gt;camp of programming&lt;/a&gt; - the code we are spelunking through can feel foreign to modern Objective-C, and it&#39;s not got tests. &lt;a href=&quot;https://github.com/johnno1962/&quot;&gt;@Johno1962&lt;/a&gt; described it to me as being like 1997&#39;s Objective-C. The end result of all this code &lt;em&gt;is&lt;/em&gt; beautiful, whether the code is - is a matter of perspective. I&#39;m super happy it exists.&lt;/p&gt;

&lt;h2&gt;Targets&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;InjectionPlugin - The user facing Xcode plugin&lt;/li&gt;
&lt;li&gt;InjectionLoader - A Bundle used to skip patching a project for injection.&lt;/li&gt;
&lt;li&gt;iOSBundleTemplate - A folder to a reference implementation of a iOS Project&lt;/li&gt;
&lt;li&gt;OSXBundleTemplate - Same but for OSX Project&lt;/li&gt;
&lt;li&gt;unhide - A command line tool that extracts symbols from a Swift Framework&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Implementation Order&lt;/h2&gt;

&lt;p&gt;I want to go through the code-base from the perspective what happens when it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loads up inside Xcode.&lt;/li&gt;
&lt;li&gt;Recieves a call to inject.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Launch&lt;/h3&gt;

&lt;p&gt;All Xcode plugins have the exact same launch process, you &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Info.plist#L21-L22&quot;&gt;define a class&lt;/a&gt; in the info.plist, this class, &lt;code&gt;INPluginMenuController&lt;/code&gt;, gets &lt;code&gt;+ pluginDidLoad:&lt;/code&gt; called. This is where you &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginMenuController.m#L83-L94&quot;&gt;set up a shared instance&lt;/a&gt;, and can keep a reference to your bundle.&lt;/p&gt;

&lt;p&gt;This triggers the interesting stuff in &lt;code&gt;applicationDidFinishLaunching:&lt;/code&gt; this sets up the &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginMenuController.m#L131-L137&quot;&gt;user interface from a nib file&lt;/a&gt;, which &lt;a href=&quot;http://artsy.github.io/blog/2016/06/27/dependency-injection-in-swift/&quot;&gt;DIs&lt;/a&gt; in a lot of the instance variables, and will send you to get a new version of Injection if it fails. It then sets up the menu ( note: &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginMenuController.m#L151-L154&quot;&gt;interesting use of c-structs here&lt;/a&gt; ) and starts a TCP server, then registers for when a &lt;code&gt;NSWindow&lt;/code&gt; becomes active.&lt;/p&gt;

&lt;h4&gt;Server&lt;/h4&gt;

&lt;p&gt;The server is a &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginMenuController.m#L512-L535&quot;&gt;c TCP socket&lt;/a&gt;, prior to digging in here, I&#39;d never needed to see one. I see a lot of references to Android injection, so I assume the low-level choice in a socket  was so the same code can do both platforms.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;c&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startServer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;serverAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_family&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;serverAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INADDR_ANY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;serverAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INJECTION_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverSocket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Could not open service socket: %s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// skipping a bunch of error handling&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverSocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Service socket would not listen: %s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;performSelectorInBackground&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundConnectionService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;withObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Assuming everything went well, then a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bonjour_%28software%29&quot;&gt;Bonjour&lt;/a&gt; &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginMenuController.m#L539-L542&quot;&gt;service&lt;/a&gt; is created advertising the socket on the network. This then moves to a background thread and starts a infinite runloop checking for new connections on the &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginMenuController.m#L545-L557&quot;&gt;socket every 0.5 seconds&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is it &lt;a href=&quot;/images/2016-06-29-injection-overview/selected_bonjour.png&quot;&gt;running&lt;/a&gt; in &lt;a href=&quot;http://tildesoft.com&quot;&gt;Bonjour Browser&lt;/a&gt;. So, what does this server do? That&#39;s handled inside &lt;code&gt;INPluginClientController&lt;/code&gt;. It uses a MAC address so that you can have multiple non-competing services running on the same network.&lt;/p&gt;

&lt;p&gt;At its simplest, the server exists to send messages between running multiple applications and the injection plugin. We&#39;ll get back to what the server does later.&lt;/p&gt;

&lt;h4&gt;Inside Xcode&lt;/h4&gt;

&lt;p&gt;The plugin will keep track of the key editor window, &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginMenuController.m#L214-L220&quot;&gt;this is done&lt;/a&gt; by making sure the window&#39;s controller is of the class &lt;code&gt;IDEWorkspaceWindowController&lt;/code&gt; and that it has a corresponding file.&lt;/p&gt;

&lt;p&gt;That&#39;s basically everything set up for the plugin now, until a user decides to start using Injection. So we&#39;re going to move to what happens when you press &lt;code&gt;ctrl + =&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;On Preparing for Injection&lt;/h4&gt;

&lt;p&gt;The work starts at &lt;code&gt;injectSource&lt;/code&gt; &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginMenuController.m#L359&quot;&gt;from INPluginMenuController&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first thing it does is grab the current file, then saves it. It then checks what type of file it is, as only &lt;code&gt;.m, .mm, .swift or .storyboard&lt;/code&gt; can be injected.&lt;/p&gt;

&lt;p&gt;Next, it pulls out a reference to the currently running LLDB session, the console in the bottom of Xcode. It checks if the server has any active clients.&lt;/p&gt;

&lt;p&gt;OK, to understand the next bit you need to understand what &lt;em&gt;&quot;unpatched injection&quot;&lt;/em&gt; is. In order to support code injection, your app has to have some way to communicate back to the TCP server hosted in Xcode. This can be done either by &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/documentation/patching_injection.md&quot;&gt;including some source code&lt;/a&gt; in your project, or by adding it in at runtime. Including the source code, is &quot;patching&quot; your project to allow injection. It&#39;s optional because of what comes next.&lt;/p&gt;

&lt;p&gt;If there are no clients connected, then requests a pause from LLDB, allowing the plugin to send messages to the running app, it then waits a few microseconds to give the debugger chance to load. Once it&#39;s loaded &lt;code&gt;loadBundle:&lt;/code&gt; is &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginMenuController.m#L404-L415&quot;&gt;called&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Injection then sends &lt;code&gt;expr -l objc++ -O -- (void)[[NSClassFromString(@&quot;NSBundle&quot;)  bundleWithPath:@&quot;/Users/orta/Library/Application Support/Developer/Shared/Xcode/Plug-ins/InjectionPlugin.xcplugin/Contents/Resources/InjectionLoader.bundle&quot;] load]&lt;/code&gt; into the debugger. Causing the same code as the patch to exist inside your app.  This code comes from the second target from the list at the top, and is hosted inside the plugin&#39;s bundle (meta...).&lt;/p&gt;

&lt;p&gt;With that verified, it&#39;s ready to inject the source code.&lt;/p&gt;

&lt;h4&gt;Code Injection Compilation&lt;/h4&gt;

&lt;p&gt;If everything is good, and ready to go, and we&#39;ve got confirmation that a client exists, Injection starts monitoring for file changes inside your Xcodeproject.&lt;/p&gt;

&lt;p&gt;A lot of the code injection work is done inside perl scripts, another new language for me. OK, so, at the end of &lt;code&gt;injectSource&lt;/code&gt; it runs &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/injectSource.pl&quot;&gt;injectSource.pl&lt;/a&gt; with an argument of the file to inject.&lt;/p&gt;

&lt;p&gt;Note, a lot of ground-work for the perl scripts is done inside &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/common.pm&quot;&gt;common.pm&lt;/a&gt; - which is a module the other &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/injectSource.pl#L15&quot;&gt;scripts import&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is the role and responsibility of this script to setup, maintain and amend an xcodeproject that compiles just the class that has changed into a new bundle. Luckily for me this is pretty well documented &lt;code&gt;:D&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It starts out by copying a template xcodeproject (either &lt;code&gt;iOSBundleTemplate&lt;/code&gt; or &lt;code&gt;OSXBundleTemplate&lt;/code&gt;) into your current project directory. I &lt;a href=&quot;https://github.com/artsy/eigen/pull/1236/files#diff-a084b794bc0759e7a6b77810e01874f2R46&quot;&gt;add this&lt;/a&gt; to the &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next it pulls out the build settings for all these keys &lt;code&gt;FRAMEWORK_SEARCH_PATHS HEADER_SEARCH_PATHS USER_HEADER_SEARCH_PATHS GCC_VERSION ARCHS VALID_ARCHS GCC_PREPROCESSOR_DEFINITIONS GCC_ENABLE_OBJC_EXCEPTIONS&lt;/code&gt; from your project, into the sub-project.&lt;/p&gt;

&lt;p&gt;Next it determines how to handle code-signing on the app, as it supports both simulator and on-device, and you need to sign to run any code on a device.&lt;/p&gt;

&lt;p&gt;After that, if needs to understand how to compile an individual file, it gets a reference to the build log dirs for the &lt;a href=&quot;/images/2016-06-29-injection-overview/build_logs.png&quot;&gt;derived data&lt;/a&gt; for your app. They&#39;re zipped files, so it unzips them and parses the log. Here&#39;s an example of what &lt;a href=&quot;/images/2016-06-29-injection-overview/a_build_log.png&quot;&gt;compiling a single class from Eigen looks like&lt;/a&gt; (I&#39;ve highlighted the useful bits). Internally, this is called the learnt db.&lt;/p&gt;

&lt;p&gt;The learnt db is used to compile a class to be individually compiled into a &lt;code&gt;injecting_class.o&lt;/code&gt; file, I can&#39;t quite figure out where that file comes from though.&lt;/p&gt;

&lt;p&gt;To wrap up the compilation it needs to take the compiled object &lt;code&gt;injecting_class.o&lt;/code&gt; and statically link it to the bundle that is generated inside the sub-project. Here is the &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/injectSource.pl#L331-L365&quot;&gt;command line generation&lt;/a&gt;, building the script is a little bit &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/injectSource.pl#L376-L467&quot;&gt;more involved&lt;/a&gt; - but that&#39;s generally because it&#39;s trying to support a lot of user options. The main class that exists in the bundle is &lt;code&gt;BundleContents&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The compiled bundle is then renamed so that you don&#39;t have name clashes, it&#39;s just incremental integers. My current sub-project I&#39;m using for debugging looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-06-29-injection-overview/injection_subproject.png&quot; alt=&quot;Injection Subproject&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;Logs&lt;/code&gt; dir being a symlink to the derived data folder.&lt;/p&gt;

&lt;p&gt;With that done, it will &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/injectSource.pl#L487-L503&quot;&gt;include any nibs&lt;/a&gt; from compiling storyboards, and &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/injectSource.pl#L505-L512&quot;&gt;code-sign the bundle&lt;/a&gt; if it&#39;s going to a device. Finally it prints out &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/injectSource.pl#L515&quot;&gt;the new bundle path&lt;/a&gt; in so the monitoring script can work with it.&lt;/p&gt;

&lt;h4&gt;Script Monitoring&lt;/h4&gt;

&lt;p&gt;The script to create the Xcode project, amend it, and compile is done as a separate process. It&#39;s &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginClientController.m#L365&quot;&gt;done&lt;/a&gt; via the &lt;a href=&quot;http://linux.die.net/man/3/popen&quot;&gt;function&lt;/a&gt; &lt;code&gt;popen&lt;/code&gt;. This is then monitored in background, &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginClientController.m#L382&quot;&gt;listening for output lines&lt;/a&gt; that begins with &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt;. The one that we&#39;re most interested in, is the &lt;code&gt;!&lt;/code&gt; operator which tells the server the filepath of the now compiled &lt;code&gt;InjectionBundleX.bundle&lt;/code&gt;, in my most recent case, this looked like &lt;code&gt;/Users/orta/dev/ios/energy/iOSInjectionProject/build/Debug-iphonesimulator/InjectionBundle4.bundle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginClientController.m#L422-L423&quot;&gt;tells the&lt;/a&gt; server running inside Xcode that it has a file to send to the clients.&lt;/p&gt;

&lt;h4&gt;How the server works&lt;/h4&gt;

&lt;p&gt;Alright, back to &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginClientController.m&quot;&gt;the INPluginClientController&lt;/a&gt;. Skipping over the option setting &lt;code&gt;IBAction&lt;/code&gt;s and &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginClientController.m#L129-L185&quot;&gt;RTF-formatted logging&lt;/a&gt;. We come to the initial connection responder: &lt;code&gt;setConnection:&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, this is where I ended up a bit out of my comfort zone. This isn&#39;t a blog post about sockets and c though, so I&#39;ll annotate what&#39;s going on from the high level thoughout this &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginClientController.m#L189&quot;&gt;connection setup function&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Grab some the main client file from socket, then if it&#39;s is an injection message, set the Injection console&#39;s info label to that filepath, this is the &lt;code&gt;BundleContents.m&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Otherwise inject all objects from a storyboard (not too sure whats going on there TBH)&lt;/li&gt;
&lt;li&gt;The server &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginClientController.m#L216&quot;&gt;asks the client&lt;/a&gt; for the app&#39;s path e.g. &lt;code&gt;/Users/orta/Library/Developer/CoreSimulator/Devices/CDC9D8EF-AAAD-47F8-8D53-C3C69551E85A/data/Containers/Data/Application/1F636180-7113-406E-88F8-7E43EFAC13F6&quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;There&#39;s some more communication around the &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginClientController.m#L229-L230&quot;&gt;app&#39;s architecture&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The app gets a &lt;a href=&quot;/images/2016-06-29-injection-overview/badge.png&quot;&gt;badge&lt;/a&gt; with the client count on it, so you know it&#39;s working.&lt;/li&gt;
&lt;li&gt;If checks if you want the File Watcher turned on.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;From that point the server&#39;s job is mainly to pass messages and files that come out of the scripts between the client and the host doing the compilation.&lt;/p&gt;

&lt;h4&gt;File Watcher&lt;/h4&gt;

&lt;p&gt;As an option you can set in the preferences toggles a File Watcher. I found a bunch of references to this in the code, so I wanted to at least dig into that. When you turn it on, any save will trigger an injection. This is done by looking for the folder that your &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginMenuController.m#L432-L436&quot;&gt;project resides in&lt;/a&gt;, then using Apple&#39;s &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/FileWatcher.m#L31&quot;&gt;file system event stream&lt;/a&gt; to monitor for save changes. Then when a new FS event is triggered, it re-injects that file. I bet it&#39;s turned off by default as you&#39;ll see errors when it&#39;s not compilable.&lt;/p&gt;

&lt;h2&gt;Client-Side&lt;/h2&gt;

&lt;p&gt;We&#39;ve hand-waved though the client-side of the app during the patching stage of installation, but to understand both parts of the system we need to cover the client side in a bit more depth. There&#39;s two aspects to it, the initial bundle/patch and incremental bundles that contain the new compiled code.&lt;/p&gt;

&lt;h4&gt;Client Setup&lt;/h4&gt;

&lt;p&gt;To understand this, we need to grok a 1,200 LOC header file &lt;code&gt;:D&lt;/code&gt;, it has a few responsibilities though. So we can try work through those, to &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h&quot;&gt;BundleInjection.h&lt;/a&gt;. Interesting note, when you are patching your application - you&#39;re actually making a link to a copy of this file inside your &lt;code&gt;/tmp/&lt;/code&gt; dir.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;cp&quot;&gt;#ifdef DEBUG&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_inMainFilePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__FILE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_inIPAddresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;10.12.1.67&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;cp&quot;&gt;#define INJECTION_ENABLED&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;/tmp/injectionforxcode/BundleInjection.h&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;h4&gt;Client Socket Connection&lt;/h4&gt;

&lt;p&gt;Like the server, this has two responsibilities - using Bonjour to find the server, and raw socket communication. There is nothing unique about the Bonjour mutlicast work, so I&#39;m skipping that. Once the socket knows how to establish a connection between processes &lt;code&gt;+ bundleLoader&lt;/code&gt; &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L359&quot;&gt;is called&lt;/a&gt; on a background thread.&lt;/p&gt;

&lt;p&gt;So, what does &lt;code&gt;bundleLoad&lt;/code&gt; do?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It checks if it&#39;s a new Injection install in the app, &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L366-L367&quot;&gt;if so&lt;/a&gt; it sets up &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/documentation/tunable_parameters.md&quot;&gt;INParameters and INColors&lt;/a&gt; for tunable parameters.&lt;/li&gt;
&lt;li&gt;It then determines the &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L383-L400&quot;&gt;hardware architecture&lt;/a&gt; for it to be sent to the server for compilation later.&lt;/li&gt;
&lt;li&gt;Attempt to connect to the server, 5 times.&lt;/li&gt;
&lt;li&gt;If it succeeds, &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L415&quot;&gt;write the location&lt;/a&gt; of the &lt;code&gt;BundleInjection&lt;/code&gt; file to the server. Triggering the first of the socket work on the server.&lt;/li&gt;
&lt;li&gt;Expect a response of the &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L417&quot;&gt;server&#39;s&lt;/a&gt; version of &lt;code&gt;BundleInjection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the bundle is compiling storyboards on iOS, &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L424-L429&quot;&gt;swizzle some&lt;/a&gt; of the UINib init functions.&lt;/li&gt;
&lt;li&gt;Pass the &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L443&quot;&gt;home directory of the app&lt;/a&gt; to the server.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;From there the socket goes into runloop mode on it&#39;s on thread.&lt;/p&gt;

&lt;h4&gt;Client Socket Runloop&lt;/h4&gt;

&lt;p&gt;As with server monitoring, the client listens for strings that begin with special prefixes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~&lt;/code&gt; - Injects, then Re-creates the app degelate + view controller heirarchy.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; - &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L644&quot;&gt;Loads&lt;/a&gt; the bundle path that was sent in.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; - Accepts a file or directory to &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L476&quot;&gt;be sent through the socket&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; - Sends a requested file or directory to &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L492&quot;&gt;through the socket&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt; - &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L540&quot;&gt;Receives&lt;/a&gt; an &lt;code&gt;NS/UIImage&lt;/code&gt; via NSData for Tunable Parameters.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!&lt;/code&gt; - Logs to console&lt;/li&gt;
&lt;li&gt;Otherwise, assume it&#39;s another Tunable Parameter.&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;Loading the Bundle&lt;/h4&gt;

&lt;p&gt;When the new bundle is loaded &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/injectSource.pl#L303-L308&quot;&gt;it triggers&lt;/a&gt; this code:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;kt&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundleInjection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSClassFromString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;BundleInjection&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundleInjection&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;autoLoadedNotify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;injectionHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Which does the job of letting the running app know that instances have been updated with new code. Injection does three things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A global NSNotification for .&lt;/li&gt;
&lt;li&gt;Sends all instances of classes injected a message that they&#39;ve been injected.&lt;/li&gt;
&lt;li&gt;Sends all classes that have been injected a message they&#39;ve been injected.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Which is where this goes from &quot;complex&quot;, to &quot;I would need to study up to do this.&quot; Let&#39;s start of quoting the README that &lt;a href=&quot;https://github.com/johnno1962/&quot;&gt;@Johno1962&lt;/a&gt; and I worked on for a while.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It can be tough to look through all of the memory of a running application. In order to determine the classes and instances to call the injected callbacks on, Injection performs a &quot;sweep&quot; to find all objects in memory. Roughly, this involves looking at an object, then recursively looking through objects which it refers to. For example, the object&#39;s instance variables and properties.&lt;/p&gt;

&lt;p&gt;This process is seeded using the application&#39;s delegate and all windows. Once all the in-memory reference are collected, Injection will then filter these references to ones that it has compiled and injected. Then sending them the messages referenced in the callbacks section.&lt;/p&gt;

&lt;p&gt;If no references are found, Injection will look through all objects that are referred to via sharedInstance. If that fails, well, Injection couldn&#39;t find your instance. This is one way in which you may miss callbacks in your app.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4&gt;Class + Method Injections&lt;/h4&gt;

&lt;p&gt;So how does it pull that off? Calling &lt;code&gt;NSBundle&lt;/code&gt;&#39;s &lt;code&gt;- load&lt;/code&gt; &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L648&quot;&gt;here&lt;/a&gt;, calls the &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSBundle_Class/index.html#//apple_ref/occ/instm/NSBundle/load&quot;&gt;load function to call on all classes&lt;/a&gt; inside that new bundle. This triggers the load function from the &lt;code&gt;InjectionBundle&lt;/code&gt; that is auto-generated during the Injection stage. Here&#39;s what one of mine looks like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InjectionBundle3&lt;/span&gt; : &lt;span class=&quot;bp&quot;&gt;NSObject&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InjectionBundle3&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;kt&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundleInjection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSClassFromString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;BundleInjection&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundleInjection&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;autoLoadedNotify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;injectionHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This is generated from the &lt;code&gt;injectSource.pl&lt;/code&gt; script &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/injectSource.pl#L311-L315&quot;&gt;here&lt;/a&gt;] &lt;code&gt;[bundleInjection autoLoadedNotify:$flags hook:(void *)injectionHook];&lt;/code&gt; . It also comes with another function,&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;c&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;injectionHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\@&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;injectionHook():&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InjectionBundle3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;What we care about is &lt;code&gt;&amp;amp;injectionHook&lt;/code&gt; which gets passed to &lt;code&gt;autoLoadedNotify&lt;/code&gt; as a pointer to a function. Oddly enough, I&#39;m a tad confused about the fact that the injection hook contains a reference to the function that calls it, but lets roll with it for now. Perhaps it&#39;s never actually called, &lt;em&gt;I asked&lt;/em&gt; -it&#39;s for Android support, and isn&#39;t used.&lt;/p&gt;

&lt;p&gt;So, we&#39;ve had a fairly typical &lt;code&gt;NSBundle&lt;/code&gt; &lt;code&gt;- load&lt;/code&gt; load our classes into the runtime. This triggered the &lt;code&gt;InjectionBundle.bundle&lt;/code&gt; to have it&#39;s classes created, and the first thing it does is pass a reference back to the &lt;code&gt;BundleInjection&lt;/code&gt; class instance for the &lt;code&gt;injectionHook&lt;/code&gt; function that calls the &lt;code&gt;load&lt;/code&gt; on the new classes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; terminology changes here, I&#39;ve talked about a bundle, but now that the code is in the runtime, we start talking about it as a dynamic library. These bundles contain 2 files &lt;code&gt;Info.plist&lt;/code&gt;, &lt;code&gt;InjectionBundleX&lt;/code&gt; - so when I say dynamic library, I&#39;m referring to the code that is inside the bundle that is linked ar runtime (and thus dynamically linked in.)&lt;/p&gt;

&lt;p&gt;Next, Injection creates a &lt;a href=&quot;https://github.com/davetroy/astmanproxy/blob/f4b952a717b7e982b585bf0daa86398add394a88/src/include/dlfcn-compat.h#L44-L54&quot;&gt;dynamic library info&lt;/a&gt; &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L944-L946&quot;&gt;struct&lt;/a&gt; and uses &lt;a href=&quot;http://linux.die.net/man/3/dladdr&quot;&gt;dladdr&lt;/a&gt; to fill the struct, based on the function pointer. This lets Injection know where in memory the library exists. It&#39;s now safe in the knowledge that the code has been injected into the runtime. Injection will re-create the app structure, if requested - like when it receives a socket event of &lt;code&gt;~&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We&#39;re getting into Mach-O binary APIs, so put on your crash helmets. Injection is going to use the dynamic library info, and &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L959-L981&quot;&gt;ask for the Objective-C&lt;/a&gt; &lt;code&gt;__classlist&lt;/code&gt; via &lt;a href=&quot;http://www.manpagez.com/man/3/getsectdatafromheader/&quot;&gt;getsectdatafromheader&lt;/a&gt; for the new dynamic library. This works fine for Swift too, it &lt;em&gt;mostly&lt;/em&gt; has to be exposed to the Objective-C runtime. If you want to understand more about what this looks like, read &lt;a href=&quot;https://blog.zynamics.com/2010/07/02/objective-c-reversing-ii/&quot;&gt;this blog post&lt;/a&gt; from &lt;a href=&quot;https://zynamics.com&quot;&gt;Zynamics&lt;/a&gt;. Injection then loops through the classes inside the library, via the most &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L988&quot;&gt;intensely casted&lt;/a&gt; line in of code in here: &lt;code&gt;Class *classReferences = (Class *)(void *)((char *)info.dli_fbase+(uint64_t)referencesSection);&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These classes are then iterated though, and &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L836-L845&quot;&gt;new implementations of functions are swizzled&lt;/a&gt; to reference the new implementations. With Swift you have no guarantee that the methods are &lt;code&gt;dynamic&lt;/code&gt; so all their &lt;code&gt;vtable&lt;/code&gt; &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L847-L855&quot;&gt;data is switched&lt;/a&gt;. If you don&#39;t know what a vtable is check this &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_method_table&quot;&gt;page on Wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once all of the classes have had their methods switched, the &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L911-L937&quot;&gt;class table is updated&lt;/a&gt; to ensure that functions that rely on the class table ( e.g. &lt;code&gt;NSClassFromSelector&lt;/code&gt; ) return the new values.&lt;/p&gt;

&lt;p&gt;With valid class tables, and the newly injected functions added. Injection starts the memory sweep to send updated notifications.&lt;/p&gt;

&lt;h4&gt;Class + Instance Notifications&lt;/h4&gt;

&lt;p&gt;At &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L1028&quot;&gt;this point&lt;/a&gt; Injected does a run through the new class list again, if that class responds to the selector &lt;code&gt;+ injected&lt;/code&gt; it runs it. It then does a check to see if the class&#39;s instances reponds to &lt;code&gt;- injected&lt;/code&gt; if it does, it looks to see if it has any instances of the objects in it&#39;s liveObjects array. If the array hasn&#39;t been set up, then it needs to do a full memory sweep.&lt;/p&gt;

&lt;p&gt;Injection has an &lt;a href=&quot;https://github.com/johnno1962/Xprobe&quot;&gt;Xprobe&lt;/a&gt;-lite included inside it. This lives in &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/16a9b8e93b458b1c5916e95df06fe8c74cb56862/InjectionPluginLite/Classes/BundleSweeper.h&quot;&gt;BundleSweeper.h&lt;/a&gt;. The quote opening this notification section above gave the start away, BundleSweeper &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/16a9b8e93b458b1c5916e95df06fe8c74cb56862/InjectionPluginLite/Classes/BundleSweeper.h#L47&quot;&gt;looks at the app delegate&lt;/a&gt; ( or a &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/16a9b8e93b458b1c5916e95df06fe8c74cb56862/InjectionPluginLite/Classes/BundleSweeper.h#L55&quot;&gt;Cocos2D director object&lt;/a&gt;) and then starts to recursively look at every object that it&#39;s related to. This is done by adding a &lt;code&gt;bwseep&lt;/code&gt; function to &lt;code&gt;NSObject&lt;/code&gt; then individually customizing it for known container classes, and &quot;reference&quot; classes e.g &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/16a9b8e93b458b1c5916e95df06fe8c74cb56862/InjectionPluginLite/Classes/BundleSweeper.h#L228&quot;&gt;NSBlock&lt;/a&gt;, &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/16a9b8e93b458b1c5916e95df06fe8c74cb56862/InjectionPluginLite/Classes/BundleSweeper.h#L221&quot;&gt;NSData&lt;/a&gt;, NSString, NSValue etc. The &lt;code&gt;bsweep&lt;/code&gt; function adds itself to the &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/16a9b8e93b458b1c5916e95df06fe8c74cb56862/InjectionPluginLite/Classes/BundleSweeper.h#L113-L117&quot;&gt;shared list&lt;/a&gt; of &quot;objects seen&quot;, checks for an it being a &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/16a9b8e93b458b1c5916e95df06fe8c74cb56862/InjectionPluginLite/Classes/BundleSweeper.h#L119-L124&quot;&gt;private class or a transition&lt;/a&gt;, if it&#39;s not then it loops through the &lt;a href=&quot;http://stackoverflow.com/questions/16304483/debug-obtain-a-list-of-all-instance-variables-of-an-object-unknown-type&quot;&gt;IvarList&lt;/a&gt; and runs &lt;code&gt;bsweep&lt;/code&gt; on all of those. With that done, it casually tests to see if there are any weakly held objects that &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/16a9b8e93b458b1c5916e95df06fe8c74cb56862/InjectionPluginLite/Classes/BundleSweeper.h#L148-L160&quot;&gt;tend to use common selectors&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let that simmer for a bit ( I jest, it&#39;s super fast. ) and then you have &lt;em&gt;almost&lt;/em&gt; every object in your object graph being told that they&#39;ve been updated. I say almost because of the above caveat. Can&#39;t find all objects this way. Singletons that never are referenced strongly from another object inside the findable graph wouldn&#39;t get a notification this way for example.&lt;/p&gt;

&lt;p&gt;With all the fancy class an instance nofications sorted, there is a good old reliable &lt;code&gt;NSNotification&lt;/code&gt; - &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/master/InjectionPluginLite/Classes/BundleInjection.h#L1065&quot;&gt;here&lt;/a&gt;. Which is what I based my &lt;a href=&quot;https://github.com/artsy/eigen/pull/1236&quot;&gt;work on for Eigen&lt;/a&gt;, super simple, extremely reliable and great for re-use.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/49038/13548868/131cbb1e-e2c8-11e5-9f61-4acdfd10b6aa.gif&quot; alt=&quot;https://cloud.githubusercontent.com/assets/49038/13548868/131cbb1e-e2c8-11e5-9f61-4acdfd10b6aa.gif&quot; /&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Phew!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, this covered the majority of how Injection for Xcode works. It&#39;s a &lt;em&gt;really&lt;/em&gt; powerful tool, that can vastly improve your day-to-day programming. When I showed a draft of this post to &lt;a href=&quot;https://github.com/johnno1962/&quot;&gt;@Johno1962&lt;/a&gt; he reminded me that &lt;a href=&quot;https://github.com/johnno1962/Diamond&quot;&gt;Diamond&lt;/a&gt; - his Swift scripting improvement tool, had it&#39;s own version of Injector inside that, that is much &lt;a href=&quot;https://github.com/johnno1962/Diamond/blob/master/Reloader/Reloader.m&quot;&gt;simpler and a easier read&lt;/a&gt; at 120 LOC. However, can&#39;t understand the future without understanding the past.&lt;/p&gt;

&lt;p&gt;A lot of the most complicated code is around:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The client-server architecture, and about passing files/folders between the running application and the Xcode plugin.&lt;/li&gt;
&lt;li&gt;The recursive memory sweeping required to get a notification that it&#39;s done.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The actual work involved in &lt;a href=&quot;https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L807-L938&quot;&gt;doing the injection, and replacing the classes&lt;/a&gt; isn&#39;t particularly complicated, and is easy to understand without c/Mach-o domain knowledge. It&#39;s making sure the environment is set up and supporting useful features like Storyboards, Android via Apportable, ARC and no-ARC, 32bit vs 64bit and iOS vs Mac where things start to become more complex.&lt;/p&gt;

&lt;p&gt;As of Xcode 8, Xcode Plugins are on the way out, though there are hacks to work around the system to install them, doing so might not be the smartest of moves yet. It&#39;s hard to see where the future lies here. However,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://media2.giphy.com/media/VHW0X0GEQQjiU/giphy.gif&quot; alt=&quot;Giphy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we&#39;ll see in a few months.&lt;/p&gt;

&lt;p&gt;If you&#39;re interested in this kind of stuff, follow &lt;a href=&quot;https://github.com/johnno1962/&quot;&gt;@Johno1962&lt;/a&gt; on Twitter, he&#39;s &lt;a href=&quot;https://twitter.com/Injection4Xcode&quot;&gt;@Injection4Xcode&lt;/a&gt; - Chris Lattner follows him, so you know it&#39;s good stuff. He&#39;s always got some project that is pushing a boundry or two.&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Jun 2016 12:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/06/29/code-spelunking-injection/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/06/29/code-spelunking-injection/</guid>
        
        
        <category>mobile</category>
        
        <category>swift</category>
        
        <category>tooling</category>
        
        <category>xcode</category>
        
      </item>
    
      <item>
        <title>Depedency Injection in Swift</title>
        <description>&lt;p&gt;Dependency Injection (DI) is a &lt;a href=&quot;http://www.jamesshore.com/Blog/Dependency-Injection-Demystified.html&quot;&gt;$25 word for a 5¢ idea&lt;/a&gt;, but it&#39;s an idea that has become wholly foundation to how I write software. I want to take a look at some of the ways our team have been using DI in Swift.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;DI users in Swift (and Objective-C) are generally in one of a few camps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;a href=&quot;https://www.natashatherobot.com/unit-testing-swift-dependency-injection/&quot;&gt;initializer injection&lt;/a&gt; to provide objects with their dependencies.&lt;/li&gt;
&lt;li&gt;Use property injection (&lt;a href=&quot;https://ashfurrow.com/blog/lazy-property-setup-in-swift/&quot;&gt;with laziness even!&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&quot;https://github.com/Swinject/Swinject&quot;&gt;frameworks like Swinject&lt;/a&gt; to build dependency graphs at run time.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you&#39;ve used storybards or nibs before, you have probably already used property injection via IBOutlets. I actually consider initializer injection and property injection to be roughly the equivalent, just with different timing.&lt;/p&gt;

&lt;p&gt;If I had to pick a favourite, I like the initializer injection because it fits appropriately with the level of dynamism Swift offers. But Swift is still &lt;em&gt;super&lt;/em&gt; young and there&#39;re lots of programming techniques to explore, so I&#39;ve been experimenting with something new.&lt;/p&gt;

&lt;p&gt;The idea is similar to initializer injection, where you provide an instance&#39;s dependencies, but instead of providing the dependencies directly, you provide closures that return a dependency. It sounds odd, and is best explained using an example that starts without any DI at all.&lt;/p&gt;

&lt;p&gt;Okay, we&#39;ve got a network layer that communicates with an API. We&#39;re writing the class that takes the parsed data from the &lt;code&gt;NetworkProvider&lt;/code&gt; class and turns it into models consumable by the rest of the app. Right now it looks like this.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateManager&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;networkProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetworkProvider&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;n&quot;&gt;networkProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetworkProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://api.wherever.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;There are some limitations to this, specifically around testing it. It would be better to have the &lt;code&gt;networkProvider&lt;/code&gt; passed in as an argument to &lt;code&gt;init()&lt;/code&gt;. That&#39;s initializer injection, and my opposition to it is that we&#39;ve moved the responsibility for creating the &lt;code&gt;networkProvider&lt;/code&gt; up the stack.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateManager&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;networkProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetworkProvider&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;networkProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetworkProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;networkProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;networkProvider&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stateManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nl&quot;&gt;networkProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetworkProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://api.wherever.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;The thing is, now some &lt;em&gt;other&lt;/em&gt; object has to know how to do create the &lt;code&gt;NetworkProvider&lt;/code&gt;. Hrm. You can repeat this process of injecting dependencies from further up the stack until you have a general-purpose DI framework, and that&#39;s not my bag.&lt;/p&gt;

&lt;p&gt;My approach passes a closure that &lt;em&gt;returns&lt;/em&gt; a network provider instead of passing in a &lt;code&gt;networkProvider&lt;/code&gt; instance directly. The parameter can be given a default implementation, too.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateManager&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;networkProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetworkProvider&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nl&quot;&gt;networkProviderCreator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetworkProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaultNetworkCreator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;n&quot;&gt;networkProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;networkProviderCreator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultNetworkCreator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetworkProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;n&quot;&gt;NetworkProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://api.wherever.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;There&#39;s a lot to unpack here, so let&#39;s take it slowly. The initializer has a new &lt;code&gt;networkProviderCreator&lt;/code&gt;, a closure that returns a &lt;code&gt;NetworkProvider&lt;/code&gt;. In the initializer, we set our property to the return value of the closure. We also have a class method that gives us a default implementation that&#39;s used in production.&lt;/p&gt;

&lt;p&gt;But in tests, we can initialize the &lt;code&gt;StateManager&lt;/code&gt; with a stub closure, something like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fakeNetworkProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testSubject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fakeNetworkProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Now you get the benefits of initializer injection, but the flexibility to only use DI when you need to.&lt;/p&gt;

&lt;p&gt;Note: we should still test the &lt;code&gt;defaultNetworkCreator()&lt;/code&gt; function to make sure it works, too. Having code behave differently specifically while being tested is not generally a good idea.&lt;/p&gt;

&lt;p&gt;Applying the advice on using &lt;code&gt;typealias&lt;/code&gt; from &lt;a href=&quot;http://artsy.github.io/blog/2016/06/24/typealias-for-great-good/&quot;&gt;my last post&lt;/a&gt;, we can tidy our code up a little bit.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateManager&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;NetworkCreator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetworkProvider&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;networkProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetworkProvider&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nl&quot;&gt;networkProviderCreator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetworkCreator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaultNetworkCreator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;n&quot;&gt;networkProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;networkProviderCreator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassFunctions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateManager&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassFunctions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultNetworkCreator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetworkCreator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;n&quot;&gt;NetworkProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://api.wherever.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;h3&gt;But wait, there&#39;s more!&lt;/h3&gt;

&lt;p&gt;The other benefits of passing in a closure instead of an instance is that it lets the initializer customize the dependency based on other data. For example, let&#39;s say the state manager uses an &lt;code&gt;enum&lt;/code&gt; to differentiate between staging and production API endpoints (btw, &lt;a href=&quot;https://ashfurrow.com/blog/the-wrong-binary/&quot;&gt;two-case enums are great at this&lt;/a&gt;). How might our initializer change?&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;31&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;32&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;33&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APIEnvironment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Staging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Production&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateManager&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;NetworkCreator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetworkProvider&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;networkProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetworkProvider&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nl&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APIEnvironment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nl&quot;&gt;networkProviderCreator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetworkCreator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaultNetworkCreator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;baseURLString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Staging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;n&quot;&gt;baseURLString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://staging-api.wherever.com&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Production&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;n&quot;&gt;baseURLString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://api.wherever.com&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;n&quot;&gt;networkProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;networkProviderCreator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseURLString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassFunctions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateManager&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassFunctions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultNetworkCreator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetworkCreator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseURLString&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;n&quot;&gt;NetworkProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseURLString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;I really dig this. The closure to create the dependency is close to the code that uses it, but is insulated from any specific instance, so we get the benefits of using DI.&lt;/p&gt;

&lt;p&gt;You could argue that picking a base URL for an API shouldn&#39;t belong here, and you could probably convince me. But my point isn&#39;t that this specific example is ideal, it&#39;s that the pattern of using closures for initializer injection is pretty neat.&lt;/p&gt;

&lt;p&gt;The logic to create dependencies has to go &lt;em&gt;somewhere&lt;/em&gt;. I think it makes sense to keep it close to the code that actually uses the dependency, but isolated in a &lt;code&gt;class&lt;/code&gt; function so no actual instance is involved in its creation. As a result, developers get the benefits of initializer injection and none of the added cognitive overhead when writing your production code.&lt;/p&gt;

&lt;p&gt;It may not be a perfect pattern (what is?) but we&#39;ve been using it on &lt;a href=&quot;https://github.com/artsy/eidolon&quot;&gt;eidolon&lt;/a&gt; and &lt;a href=&quot;https://github.com/artsy/eigen&quot;&gt;eigen&lt;/a&gt; for nearly two years and – combined with generous use of protocols – we&#39;ve been really happy with the results.&lt;/p&gt;

&lt;p&gt;Now that I have more free time to explore the pattern, I want to take it a step further and see where it could be used outside of unit testing. It&#39;s possible that using this approach could make all our types less tightly coupled and provide a more modular codebase.&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Jun 2016 12:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/06/27/dependency-injection-in-swift/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/06/27/dependency-injection-in-swift/</guid>
        
        
        <category>eidolon</category>
        
        <category>eigen</category>
        
        <category>mobile</category>
        
        <category>swift</category>
        
      </item>
    
      <item>
        <title>Swift Type Aliases: Use Early and Often</title>
        <description>&lt;p&gt;It&#39;s been so fun to watch the Swift developer community experiment with Swift and to experiment with what idiomatic Swift will look like. No one really knows the answer yet, but we&#39;re starting to see some design patterns used more than others. We&#39;re seeing some language features used in key ways that define idiomatic Swift, and other language features that are being mostly ignored.&lt;/p&gt;

&lt;p&gt;Regrettably, one of my favourite features of Swift has not enjoyed the meteoric rise in popularity I believe it deserves: &lt;code&gt;typealias&lt;/code&gt;.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;Type aliases allow developers to define synonyms for pre-existing types. It might sound dull because it &lt;em&gt;is&lt;/em&gt; dull. In fact, its usefulness isn&#39;t even apparent when &lt;em&gt;writing&lt;/em&gt; code, mostly when &lt;em&gt;maintaining&lt;/em&gt; it.&lt;/p&gt;

&lt;p&gt;But before I dig into how &lt;code&gt;typealias&lt;/code&gt; is useful, let&#39;s review what it is to make sure we&#39;re all on the same page. Developers use &lt;code&gt;typealias&lt;/code&gt; to create a new type identifier that&#39;s a synonym for another type. For example, we can declare &lt;code&gt;typealias BigNumber = Int64&lt;/code&gt; and use &quot;BigNumber&quot; any place we could have used &quot;Int64&quot;.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BigNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BigNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BigNumber&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BigNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BigNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;You can use &lt;code&gt;typealias&lt;/code&gt; for most any type: classes, enums, structs, tuples, closures, etc. Here are a few examples.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employees&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GridPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompletionHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Now that we&#39;re familiar with &lt;code&gt;typealias&lt;/code&gt;, I want to discuss four examples that show how &lt;code&gt;typealias&lt;/code&gt; has helped us maintain code.&lt;/p&gt;

&lt;h3&gt;Promoting Existing Types Semantics&lt;/h3&gt;

&lt;p&gt;When writing web socket communication for eigen, Orta and I were using &lt;a href=&quot;https://jwt.io&quot;&gt;JSON Web Tokens&lt;/a&gt; to authenticate the user. If you&#39;ve never used JWTs before, don&#39;t worry, here&#39;s the tl;dr JWTs are a way to authenticate users in a way that clients can cryptographically verify. It&#39;s &lt;em&gt;basically&lt;/em&gt; a base64 encoded string of JSON.&lt;/p&gt;

&lt;p&gt;Clients don&#39;t need to verify the JWT in order to use them, and in fact when Orta and I began using them, we treated them only as strings retrieved from one API and sent to another (like an access token). However, instead of using the &lt;code&gt;String&lt;/code&gt; type, I decided to define a &lt;code&gt;JWT&lt;/code&gt; type alias.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JWT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;I used the new &lt;code&gt;JWT&lt;/code&gt; type throughout the code as a hint to other developers about what &lt;em&gt;kind&lt;/em&gt; of string it is. This gave it some semantic meaning on top of being a string. Neat. Only later, when we needed to start decoding the JWT itself did this really come in handy.&lt;/p&gt;

&lt;p&gt;After deleting the &lt;code&gt;typealias&lt;/code&gt; and replacing it with a class of the same name, we didn&#39;t have to worry about changing function definitions and property types all throughout our codebase. We made the changes locally, in one file, and most all the rest of our code still compiled. Pretty cool! Here&#39;s the &lt;a href=&quot;https://github.com/artsy/eigen/pull/1638/files/911473424849240bb71b89c412b0a1887e5c1418#diff-6d73ebd58fdd2d00c32813f60608fbd1R10&quot;&gt;relevant portion of the pull request&lt;/a&gt; that made that change.&lt;/p&gt;

&lt;h3&gt;Consolidating Tuple Types&lt;/h3&gt;

&lt;p&gt;I &lt;a href=&quot;https://ashfurrow.com/blog/uicollectionview-unjustly-maligned/&quot;&gt;recently wrote about UICollectionView&lt;/a&gt; and how I used them to solve a difficult layout problem. I detailed how I created a pipeline of simple math functions that used previous results to calculate the next step of the layout. What I didn&#39;t mention was that I used tuples to help, specifically tuples with &lt;code&gt;typealias&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Tuples are useful for composing several different values into a lightweight type. Think of tuples as junior structs. I was writing functions to do some calculations and return their result as a tuple. Something like this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layoutMetricsForPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CellPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;aspectRatio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;restingWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;restingHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;targetWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;targetHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;And because of how the layout pipeline worked, I then needed to use the &lt;em&gt;same&lt;/em&gt; tuple as a parameter for the next function.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;centersForPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CellPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;metrics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;restingWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;restingHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;targetWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;targetHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Any time you use the same tuple type more than once, consider making a &lt;code&gt;typealias&lt;/code&gt;. In this case, the code became a lot shorter and easier to skim and understand.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LayoutMetrics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;restingWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;restingHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;targetWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;targetHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CenterXPositions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;restingCenterX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;targetCenterX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layoutMetricsForPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CellPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;aspectRatio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LayoutMetrics&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;centersForPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CellPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;metrics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LayoutMetrics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CenterXPositions&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;If we need to change something about the tuple later on, we only need to change it in one place. We&#39;ve also made it easier to promote this tuple to a struct or class later on, just like in the JWT example, because all the functions are already referring to it as its own type. You can check out how we used type alias&#39;d tuples &lt;a href=&quot;https://github.com/artsy/eigen/blob/12eac80948bcfd1e5c6fc2aa85b22ccb2a4421dd/Artsy/View_Controllers/Live_Auctions/Views/LiveAuctionFancyLotCollectionViewLayout.swift#L104&quot;&gt;in the code&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Defining Closures Signatures&lt;/h3&gt;

&lt;p&gt;Objective-C developers, burdened with &lt;a href=&quot;http://goshdarnblocksyntax.com&quot;&gt;arcane syntax for blocks&lt;/a&gt;, use C&#39;s &lt;code&gt;typedef&lt;/code&gt; to isolate that syntax strangeness in one place. And even though Swift&#39;s closure syntax is &lt;em&gt;awesome&lt;/em&gt;, we can still benefit from Objective-C&#39;s example – we can use type aliases for closure signatures.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Moya/Moya&quot;&gt;Moya&lt;/a&gt; uses this technique quite a bit, because it has so many closures. Let&#39;s take a look at the &lt;code&gt;StubClosure&lt;/code&gt;, which &lt;a href=&quot;https://github.com/Moya/Moya/blob/6666947219f231091d5c3e0b9d5f63ac4091718d/Source/Moya.swift#L78-L79&quot;&gt;defines if (and how) a network request should be stubbed&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StubClosure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StubBehavior&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;We use this type as an initializer parameter instead of the full closure syntax, making our code a lot shorter and more legible. Nice! Since the user usually doesn&#39;t want to customize this parameter, so we&#39;ve &lt;a href=&quot;https://github.com/Moya/Moya/blob/6666947219f231091d5c3e0b9d5f63ac4091718d/Source/Moya.swift#L97&quot;&gt;defined a default value&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nl&quot;&gt;stubClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StubClosure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MoyaProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NeverStub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;MoyaProvider&lt;/code&gt; has a class function on it called &lt;code&gt;NeverStub&lt;/code&gt; &lt;a href=&quot;https://github.com/Moya/Moya/blob/6666947219f231091d5c3e0b9d5f63ac4091718d/Source/Moya.swift#L246-L248&quot;&gt;whose type&lt;/a&gt; matches our closure.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NeverStub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Moya&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StubBehavior&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Never&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This particular function doesn&#39;t use the &lt;code&gt;typealias&lt;/code&gt;, but another one does. We have a function named &lt;code&gt;DelayedStub&lt;/code&gt; that returns the &lt;code&gt;typealias&lt;/code&gt; instead of the raw closure. Take a look!&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DelayedStub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Moya&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StubClosure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Delayed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Super cool! Closures are a powerful tool in Swift already, but by using a &lt;code&gt;typealias&lt;/code&gt;, we refer to it as &lt;code&gt;StubClosure&lt;/code&gt; throughout our code.&lt;/p&gt;

&lt;p&gt;In isolation, this gain may not seem significant, but the dividends have accrued dramatically for the project. &lt;code&gt;typealias&lt;/code&gt; has made it easy to maintain Moya as it has evolved alongside Swift. Check out more examples of type aliasing closures &lt;a href=&quot;https://github.com/artsy/eigen/blob/12eac80948bcfd1e5c6fc2aa85b22ccb2a4421dd/Artsy/View_Controllers/Live_Auctions/LiveAuctionStateManager.swift#L20-L21&quot;&gt;in this eigen class&lt;/a&gt;, which uses them for dependency injection.&lt;/p&gt;

&lt;h3&gt;Extending Typealiases&lt;/h3&gt;

&lt;p&gt;The last example I want to discuss is extensions, specifically extensions to &lt;em&gt;your own&lt;/em&gt; types.&lt;/p&gt;

&lt;p&gt;When writing classes, especially view controllers, developers have a habit of writing long, unwieldy files that are difficult to navigate and maintain. Preventing such files is far easier than fixing them, which is why I use &lt;code&gt;typealias&lt;/code&gt; early, and I use it often.&lt;/p&gt;

&lt;p&gt;I recommend using a descriptive &lt;code&gt;typealias&lt;/code&gt; that is private to your file, and then extending that &lt;code&gt;typealias&lt;/code&gt; so you can keep things neat and tidy. It&#39;s a bit confusing, so let&#39;s take a look at an example.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrivateHelperFunctions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyViewController&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrivateHelperFunctions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TableViewMethods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyViewController&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;TableViewMethods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UITableViewDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UITableViewDataSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;   &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;We&#39;re still extending the view controller, but specifically we&#39;re extending the &lt;code&gt;typealias&lt;/code&gt; so that the extension has a helpful name. This is another way that &lt;code&gt;typealias&lt;/code&gt; can help add semantic meaning to your code.&lt;/p&gt;

&lt;p&gt;Beyond helping you find code quickly, having code in extensions also makes it &lt;em&gt;way&lt;/em&gt; easier to move that extension to another file or create a new helper class altogether. So not only does it keep classes tidy, but it also helps you keep classes &lt;em&gt;small&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This technique can also serve as a workaround for Swift&#39;s &lt;a href=&quot;http://stackoverflow.com/questions/24017316/pragma-mark-in-swift&quot;&gt;awful Xcode sectioning syntax&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-06-24-typealias-for-great-good/jumpbar.png&quot; alt=&quot;Xcode Jumpbar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&quot;https://github.com/artsy/eigen/search?l=swift&amp;amp;q=private+typealias&amp;amp;utf8=%E2%9C%93&quot;&gt;search through eigen&lt;/a&gt; for more examples of using a private &lt;code&gt;typealias&lt;/code&gt; to divide your code into manageable pieces.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Look, I&#39;m not saying that using &lt;code&gt;typealias&lt;/code&gt; more is universally a good idea. You might disagree with some of the use cases in this post, which is fine! And this isn&#39;t meant to be an exhaustive list of examples, either.&lt;/p&gt;

&lt;p&gt;My point is, used in a few key ways, &lt;code&gt;typealias&lt;/code&gt; has helped me maintain my code more easily. It&#39;s a good tool to be familiar with. Even if it won&#39;t revolutionize the way you write software, &lt;code&gt;typealias&lt;/code&gt; can help make your job a smidgen easier, and who could argue with that?&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Jun 2016 12:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/06/24/typealias-for-great-good/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/06/24/typealias-for-great-good/</guid>
        
        
        <category>eigen</category>
        
        <category>mobile</category>
        
        <category>swift</category>
        
      </item>
    
      <item>
        <title>GraphQL for iOS Developers</title>
        <description>&lt;p&gt;GraphQL is something you may have heard in passing, usually from the web team. It&#39;s a Facebook API technology, that describes itself as a &lt;em&gt;A Data Query Language and Runtime&lt;/em&gt;. GraphQL is a &lt;a href=&quot;http://facebook.github.io/graphql/&quot;&gt;spec&lt;/a&gt;, and there are &lt;a href=&quot;https://github.com/chentsulin/awesome-graphql#libraries&quot;&gt;multiple implementation&lt;/a&gt; of it. As mobile engineers, we can consider it an API, where the front-end team have as much control as the backend.&lt;/p&gt;

&lt;p&gt;This blog post covers our usage of GraphQL, and what I&#39;ve learned in the last 3 months of using it in &lt;a href=&quot;https://github.com/artsy/eigen/&quot;&gt;Eigen&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;h3&gt;So what is GraphQL&lt;/h3&gt;

&lt;p&gt;You can get the full explanation on &lt;a href=&quot;http://graphql.org&quot;&gt;the GraphQL website&lt;/a&gt;. Though, I found running through &lt;a href=&quot;https://learngraphql.com&quot;&gt;Learn GraphQL&lt;/a&gt; site to really hammer down how it works. Reading the &lt;a href=&quot;https://facebook.github.io/react/blog/2015/05/01/graphql-introduction.html&quot;&gt;introduction blog post&lt;/a&gt; can be useful too.&lt;/p&gt;

&lt;p&gt;GraphQL is an API middle-layer. It acts as an intermediate layer between multiple front-end clients and multiple back-end APIs. This means it can easily coalesce multiple API calls into a single request, this can be a &lt;em&gt;massive&lt;/em&gt; user experience improvement when you have a screen that requires information from multiple sources before you can present anything to a user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-06-19-graphql-for-iOS-devs/graphQL.svg&quot; width=100%&gt;&lt;/p&gt;

&lt;p&gt;As a client, you &lt;a href=&quot;https://github.com/artsy/eigen/blob/dac7c80b66b600f9a45aaae6095544fe420f0bbc/Artsy/Networking/ARRouter.m#L1011&quot;&gt;send&lt;/a&gt; a &quot;&lt;a href=&quot;http://graphql.org/docs/getting-started/#queries&quot;&gt;JSON-shaped query&lt;/a&gt;&quot; structure, which is heirarchical and easy to read:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;json&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;err&quot;&gt;artwork(id:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;kimber-berry-as-close-to-magic-as-you-can-get&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;err&quot;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;err&quot;&gt;additional_information&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;err&quot;&gt;is_price_hidden&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;err&quot;&gt;is_inquireable&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;blockquote&gt;&lt;p&gt;This will search for a &lt;a href=&quot;https://www.artsy.net/artwork/kimber-berry-as-close-to-magic-as-you-can-get&quot;&gt;specific artwork&lt;/a&gt;, sending back the Artwork&#39;s &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;additional_information&lt;/code&gt;, &lt;code&gt;is_price_hidden&lt;/code&gt; and &lt;code&gt;is_inquireable&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&#39;s important to note here, the data being sent &lt;em&gt;back&lt;/em&gt; is only what you ask for. This is not defined on the server as a &lt;em&gt;short&lt;/em&gt; or &lt;em&gt;embedded&lt;/em&gt; version of a model, but the specific data the client requested. When bandwidth and speed is crucial, this is the other way in which GraphQL improves the app-user experience.&lt;/p&gt;

&lt;p&gt;That&#39;s the two killer features:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Coalesce Multiple Network Requests. Reducing the amount of network requests that need to be made.&lt;/li&gt;
&lt;li&gt;Only Send The Data You Want. Only sending the data you are interested in.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;With mobile apps you&#39;re working with unreliable, slow networks with high bandwidth costs. Optimising towards less networking with richer data means your app is more resiliant to things outside of your control.&lt;/p&gt;

&lt;p&gt;This is in stark contrast to existing API concepts, like &lt;a href=&quot;http://stateless.co/hal_specification.html&quot;&gt;HAL&lt;/a&gt; and &lt;a href=&quot;http://jsonapi.org&quot;&gt;JSON-API&lt;/a&gt; - both of which are optimised for caching, and rely on &quot;one model, one request&quot; types of API access. E.g. a list of Artworks would actually contain a list of hrefs instead of the model data, and you have to fetch each model as a separate request.&lt;/p&gt;

&lt;h3&gt;Using GraphQL&lt;/h3&gt;

&lt;p&gt;Artsy&#39;s GraphQL server is (unsurprisingly) open-source, it&#39;s at &lt;a href=&quot;https://github.com/artsy/metaphysics&quot;&gt;artsy/metaphysics&lt;/a&gt;. However, it&#39;s not publicly accessible, (&lt;a href=&quot;https://github.com/artsy/metaphysics/issues/279&quot;&gt;yet?&lt;/a&gt;). One of the coolest things about developing against a GraphQL server is GraphiQL - an IDE for exploring your API. I can&#39;t show you ours, but I can send you to &lt;a href=&quot;http://clayallsopp.com&quot;&gt;Clay Allsop&#39;s&lt;/a&gt; &lt;a href=&quot;https://www.graphqlhub.com&quot;&gt;GraphQLHub&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.graphqlhub.com/playground?query=%23%20Hit%20the%20Play%20button%20above!%0A%23%20Hit%20%22Docs%22%20on%20the%20right%20to%20explore%20the%20API%0A%0A%7B%0A%20%20graphQLHub%0A%20%09reddit%20%7B%0A%20%20%20%20user(username%3A%20%22orta%22)%20%7B%0A%20%20%20%20%20%20username%0A%20%20%20%20%20%20commentKarma%0A%20%20%20%20%20%20createdISO%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20subreddit(name%3A%20%22swift%22)%7B%0A%20%20%20%20%20%20newListings(limit%3A%202)%20%7B%0A%20%20%20%20%20%20%20%20title%0A%20%20%20%20%20%20%20%20comments%20%7B%0A%20%20%20%20%20%20%20%20%20%20body%0A%20%20%20%20%20%20%20%20%20%20author%20%7B%20%0A%20%20%20%20%20%20%20%20%20%20%20%20username%0A%20%20%20%20%20%20%20%20%20%20%09commentKarma%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D&quot;&gt;Here&lt;/a&gt; ( I strongly recommend pausing to open that link in a new window. Press cmd + enter to see the results. We also have an example of refactoring that request &lt;a href=&quot;https://www.graphqlhub.com/playground?query=%23%20Hit%20the%20Play%20button%20above!%0A%23%20Hit%20%22Docs%22%20on%20the%20right%20to%20explore%20the%20API%0A%0A%7B%0A%20%20graphQLHub%0A%20%09reddit%20%7B%0A%20%20%20%20user(username%3A%20%22orta%22)%20%7B%0A%09%09%09...userFields%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20subreddit(name%3A%20%22swift%22)%20%7B%0A%20%20%20%20%20%20newListings(limit%3A%202)%20%7B%0A%20%20%20%20%20%20%20%20title%0A%20%20%20%20%20%20%20%20comments%20%7B%0A%20%20%20%20%20%20%20%20%20%20body%0A%20%20%20%20%20%20%20%20%20%20author%20%7B%20%0A%09%09%09%20%20%20%20%20%20...userFields%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A%0Afragment%20userFields%20on%20RedditUser%20%7B%0A%20%20username%0A%20%20commentKarma%0A%20%20createdISO%0A%7D&quot;&gt;here&lt;/a&gt;. )&lt;/p&gt;

&lt;p&gt;GraphQL comes with a playground for the API! It&#39;s amazing! Clay called it the &lt;a href=&quot;https://medium.com/the-graphqlhub/graphiql-graphql-s-killer-app-9896242b2125#.6ht6374bq&quot;&gt;&quot;Killer App&quot; of GraphQL&lt;/a&gt; - I&#39;m inclined to concur. I&#39;ve never had API docs this useful. This is built on top of the schema/docs/type reflection APIs inside the GraphQL spec.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/2016-06-19-graphql-for-iOS-devs/graphiql.png&#39;&gt;&lt;img src=&quot;/images/2016-06-19-graphql-for-iOS-devs/graphiql.png&quot; title=&quot;Selection diagram&quot; &gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;h3&gt;How GraphQL Changed How We Write Native Code&lt;/h3&gt;

&lt;h4&gt;View Models&lt;/h4&gt;

&lt;p&gt;Our GraphQL server is owned by the &lt;a href=&quot;http://artsy.github.io/blog/2016/03/28/artsy-engineering-organization-stack/&quot;&gt;web-practice&lt;/a&gt; and the mobile practice also help out occasionally. This ownership distinction is important, an API like this would normally be handled by our platform team.&lt;/p&gt;

&lt;p&gt;Because of Metaphysics&#39; ownership as a &quot;front-end&quot; product, it can contain additional information that is specific to front-end needs. For example, in our first example of a request to our GraphQL server we requested &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;additional_information&lt;/code&gt;, &lt;code&gt;is_price_hidden&lt;/code&gt; and &lt;code&gt;is_inquireable&lt;/code&gt; - only two of these items come from the database. Both is &lt;code&gt;is_price_hidden&lt;/code&gt; and &lt;code&gt;is_inquireable&lt;/code&gt; are derived from the API results on the server.&lt;/p&gt;

&lt;p&gt;This is &lt;em&gt;awesome&lt;/em&gt;, because before a &lt;a href=&quot;https://github.com/artsy/eigen/blob/dac7c80b66b600f9a45aaae6095544fe420f0bbc/Artsy/Views/Artwork/ARArtworkActionsView.m#L310-L362&quot;&gt;lot of this logic&lt;/a&gt; existed in a &lt;a href=&quot;https://github.com/artsy/eigen/blob/dac7c80b66b600f9a45aaae6095544fe420f0bbc/Artsy/Views/Artwork/ARArtworkActionsView.m#L108-L109&quot;&gt;Google Doc&lt;/a&gt; which needed to be re-implemented in 3-4 clients. On the native side we would find we were out-of-date mid-release cycle and needed to rush to catch up.&lt;/p&gt;

&lt;p&gt;So, what does this mean for view models? It lessens the need for them. If you can move a lot of your derived data to the server - this handles the logic that goes in a view model for you. Now it is provided server-side, and is consistent across platforms.&lt;/p&gt;

&lt;p&gt;We&#39;ve not stopped writing view models, but now discussions on them includes &quot;should this move to Metaphysics?&quot;.&lt;/p&gt;

&lt;h4&gt;React Native&lt;/h4&gt;

&lt;p&gt;We&#39;ve already &lt;a href=&quot;https://twitter.com/orta/status/734880605322776576&quot;&gt;shipped one full view controller&lt;/a&gt; in &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;React Native&lt;/a&gt; for our flagship app, &lt;a href=&quot;https://github.com/artsy/eigen/&quot;&gt;Eigen&lt;/a&gt;. The advantages that came from GraphQL were a big part of the discussion around using React Native.&lt;/p&gt;

&lt;p&gt;There will be longer articles on the &quot;why&quot; and &quot;how&quot; we choose to work this way. However, the key thing that we&#39;re excited about in using React Native is Relay. Using Relay, our &lt;a href=&quot;https://github.com/artsy/emission/tree/2ac6e9fc0f85ca81483bcbd6c841841104f07833/lib/components/artist&quot;&gt;views&lt;/a&gt; can declare a fragment of the GraphQL query that each respective &lt;a href=&quot;https://github.com/artsy/emission/blob/2ac6e9fc0f85ca81483bcbd6c841841104f07833/lib/components/artist/biography.js#L60-L69&quot;&gt;view needs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, in our Artist View Controller, the Biography &quot;View&quot; (&lt;a href=&quot;https://facebook.github.io/react-native/docs/native-components-ios.html&quot;&gt;component&lt;/a&gt;) declares &quot;when I am in the view heirarchy, you need to grab a &lt;code&gt;bio&lt;/code&gt;, and &lt;code&gt;blurb&lt;/code&gt;&quot;&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Relay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Biography&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;fragments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Relay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;QL&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;fragment&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;bio&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;blurb&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Once your views are declaring what data they need, and are acting on that data - you see less of a need to use models.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;GraphQL is having a massive impact in the way that we write our apps. It means we can make much faster mobile apps, as the network is our critical path. Faster apps means happier users, happier users means happier developers. I want to be happy. So I&#39;m thankful that the &lt;a href=&quot;https://github.com/artsy/metaphysics/graphs/contributors&quot;&gt;Web practice&lt;/a&gt; gave GraphQL a try, and &lt;a href=&quot;https://github.com/artsy/metaphysics/pull/243&quot;&gt;welcome&#39;d&lt;/a&gt; &lt;a href=&quot;https://github.com/artsy/metaphysics/pull/313&quot;&gt;us&lt;/a&gt; &lt;a href=&quot;https://github.com/artsy/metaphysics/pull/226&quot;&gt;to&lt;/a&gt; &lt;a href=&quot;https://github.com/artsy/metaphysics/pull/302&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;https://github.com/artsy/metaphysics/issues/2&quot;&gt;party&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Jun 2016 12:09:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/06/19/graphql-for-mobile/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/06/19/graphql-for-mobile/</guid>
        
        
        <category>eigen</category>
        
        <category>graphql</category>
        
        <category>mobile</category>
        
      </item>
    
  </channel>
</rss>
