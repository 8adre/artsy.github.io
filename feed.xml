<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artsy Engineering</title>
    <description></description>
    <link>http://artsy.github.io/</link>
    <atom:link href="http://artsy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 06 Apr 2020 03:14:58 +0000</pubDate>
    <lastBuildDate>Mon, 06 Apr 2020 03:14:58 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Team Working Agreements</title>
        <description>&lt;p&gt;Good team culture strives for cohesion. Once organizations get large enough, a tension emerges between the culture
of individual teams and the culture of the larger organization. How do you achieve team cohesion across small teams
&lt;em&gt;and&lt;/em&gt; the larger organizations they comprise?&lt;/p&gt;

&lt;p&gt;The culture at Artsy is driven by every team member, not mandated or handed down from above. This adds another
level of tension, between individuals and their smaller teams. Team working agreements embrace that tension to
provide a framework for converting tension into healthy culture.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;Artsy Engineering is part of a larger organization we call PDDE (Product, Design, Data, and Engineering). PDDE is
divided into several product teams, and each team contains at least one representative from product, design, data,
and engineering. Each PDDE team delivers product solutions targeted to a specific product need.&lt;/p&gt;

&lt;p&gt;Until recently, those teams could expect a significant change in team members at the start of every quarter, as we
encouraged engineers to explore other teams. The purpose of this practice was to spread knowledge throughout the
organization, and give folks the opportunity to keep themselves aligned with projects they found most interesting.&lt;/p&gt;

&lt;p&gt;The downside of this practice was that it made teams feel short-lived, impermanent, and unstable. Some teams were
hit harder than others - they&#39;d see their team completely turn over every quarter. This was felt most strongly by
our product managers who would take the time to learn the skills and strengths of each engineer on their team over
the course of a quarter, just to have to start the process all over again, making it difficult to plan projects or
set goals for the following quarter.&lt;/p&gt;

&lt;p&gt;To address these challenges, PDDE decided to set the expectation that engineers would stay on the same team each
quarter, with the option to request a team change, when necessary, to fill a skill, capacity, or growth need
elsewhere. This effectively ended the practice of shuffling teams every quarter. It was too much change, too often.&lt;/p&gt;

&lt;p&gt;As a result, our teams feel more stable and long-lived. We&#39;re able to build deeper team identity. We&#39;ve found one
tool particularly helpful in finding and building team identity: team working agreements.&lt;/p&gt;

&lt;a name=&quot;How.did.team.working.agreements.come.about.at.Artsy.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;How did team working agreements come about at Artsy?&lt;/h2&gt;

&lt;p&gt;The current breakdown of our PDDE organization is relatively new; it&#39;s also an on-going process. We are still
feeling out how these teams will/should work together. One of the core beliefs at Artsy is that when you are a part
of something - a process, a team, a culture - you are empowered to make impactful changes to it.&lt;/p&gt;

&lt;p&gt;&lt;aside class=&quot;dialogue&quot;&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/dialogue/adam.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Adam Iskounen says...&lt;/p&gt;
    &lt;p&gt;
      Team cohesion and unity was a common theme that kept surfacing during the retrospective meeting that led to
      PDDE ending the quarterly shuffling of teams. During my onboarding, I noticed in retros that teams were
      strong on &quot;what went well&quot; and light on &quot;what could be improved.&quot; We&#39;d have 1 or 2 &quot;didn&#39;t go well&quot; tickets,
      but they were usually something light-hearted/benign like &quot;team lunch was cancelled&quot;. One team in particular
      seemed like they were dancing around each other a bit, and important things like &quot;not getting stuff done&quot;
      wasn&#39;t being brought up.
    &lt;/p&gt;
    &lt;p&gt;I remembered that team working agreements were a tool used by
      a scrum master at my previous job to help a particular team that was struggling to gel, and brought it up
      without really knowing what was involved in the process. Fortunately my product manager - who was eager to
      form a team where each member felt empowered and excited to take ownership of our work - encouraged me to
      research and share the process for coming up with a team working agreement. At first I was nervous that some
      team members, especially those who I perceived to be more interested in technical challenges than on team-building,
      would not be interested in this and find that it was a waste of time. I was pleasantly surprised that not only did
      everyone on the team participate, but that those team members ended up being some of the more enthusiastic
      proponents for following-up on the team working agreement after our initial brainstorm.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;Since being pioneered by Adam&#39;s team, team working agreements have spread to most of our engineering teams. They&#39;ve
been a learning opportunity for all of us, and a chance for our team members to share experiences and practices
with each other.&lt;/p&gt;

&lt;a name=&quot;What.s.a.team.working.agreement.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What&#39;s a team working agreement?&lt;/h2&gt;

&lt;p&gt;A team working agreement is a written set of guidelines for an engineering team. It enumerates the habits and
practices that the team requires to be productive and successful. The agreement is a living document, and every
member of the team has a part in shaping it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Tuckman%27s_stages_of_group_development&quot;&gt;According to Bruce Tuckman, a team moves through four phases of development: forming, storming, norming, and performing&lt;/a&gt;.
Team working agreements can help a team move more quickly through the stages. A team in the &quot;forming&quot; stage will
quickly uncover areas of disagreement and move to &quot;storming&quot; when they attempt to align on a working agreement. A
&quot;storming&quot; team might move to &quot;norming&quot; more quickly when their points of friction are arbitrated in a working
agreement.&lt;/p&gt;

&lt;p&gt;Examples of habits or practices on a team working agreement might include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Any change to the sprint backlog requires product manager approval.&lt;/li&gt;
&lt;li&gt;Everyone owns the backlog and should add tickets for untracked work.&lt;/li&gt;
&lt;li&gt;Update the backlog before each day’s standup.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We&#39;ve been using a fairly consistent process to develop team working agreements at Artsy.&lt;/p&gt;

&lt;a name=&quot;Step.1:.Educate.the.team.about.team.working.agreements&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Step 1: Educate the team about team working agreements&lt;/h3&gt;

&lt;p&gt;We want every team member to recognize the importance of creating an agreement.&lt;/p&gt;

&lt;p&gt;Each team reviews
&lt;a href=&quot;https://github.com/artsy/README/blob/master/playbooks/agile/team-working-agreement.md&quot;&gt;our docs on the process of creating a working agreement&lt;/a&gt;
before creating one. They might also review an existing working agreement.&lt;/p&gt;

&lt;a name=&quot;Step.2:.Conduct.a.brainstorming.meeting&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Step 2: Conduct a brainstorming meeting&lt;/h3&gt;

&lt;p&gt;The team meets for an hour to brainstorm ideas that promote success from each individual or the team as a whole.
Some of our teams have met fully in-person and used physical sticky notes for brainstorming; many have used an
online tool like &lt;a href=&quot;https://miro.com/&quot;&gt;Miro&lt;/a&gt; to include remote members.&lt;/p&gt;

&lt;p&gt;It&#39;s vital that &lt;em&gt;all&lt;/em&gt; members of the team attend the brainstorm. For us, that includes engineers and product
managers, but also designers and data analysts. This is a discussion of how the entire team works together -
everyone&#39;s voice should be heard.&lt;/p&gt;

&lt;p&gt;A sample brainstorm agenda is
&lt;a href=&quot;https://github.com/artsy/README/blob/master/playbooks/agile/team-working-agreement.md#sample-meeting-agenda&quot;&gt;shared in our docs&lt;/a&gt;.
The output of the brainstorm is a set of ideas that everyone has contributed to.&lt;/p&gt;

&lt;a name=&quot;Step.3:.Distill.brainstorming.ideas.into.discrete..digestible.habits&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Step 3: Distill brainstorming ideas into discrete, digestible habits&lt;/h3&gt;

&lt;p&gt;The ideas from the brainstorming process can be sorted into themes. Within themes, we work to condense ideas into
habits and practices that are agreeable to the entire team. We have found success in keeping the language for these
habits small, discrete, and slogan-like.&lt;/p&gt;

&lt;p&gt;The distillation step might take several round-trips of gathering feedback and wordsmith-ing.&lt;/p&gt;

&lt;a name=&quot;Step.4:.Commit.the.most.important.habits.to.a..Team.Working.Agreement..document&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Step 4: Commit the most important habits to a &quot;Team Working Agreement&quot; document&lt;/h3&gt;

&lt;p&gt;The team votes on which habits should be included in the agreement and a document is circulated.&lt;/p&gt;

&lt;p&gt;It&#39;s not done, though. Remember: it&#39;s a living document.&lt;/p&gt;

&lt;a name=&quot;Step.5:.Revisit.the.working.agreement&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Step 5: Revisit the working agreement&lt;/h3&gt;

&lt;p&gt;As a team, decide how often the agreement should be revisited, and what &quot;revisiting the agreement&quot; means. When
should we amend it? When should we do another brainstorm? It probably doesn&#39;t make sense to scrap the old agreement
when one new team member joins, but how much change on a team would inspire us to recreate our agreement?&lt;/p&gt;

&lt;a name=&quot;Why.establish.a.team.working.agreement.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Why establish a team working agreement?&lt;/h2&gt;

&lt;a name=&quot;The.brainstorm.itself.is.incredibly.valuable.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;The brainstorm itself is incredibly valuable.&lt;/h3&gt;

&lt;p&gt;Dedicated time to talk about values, habits, and processes is incredibly helpful to a team, yet rarely scheduled.
The brainstorm for a team working agreement can fill this void.&lt;/p&gt;

&lt;p&gt;During the team agreement brainstorm the team looks at &lt;em&gt;how&lt;/em&gt; they work, instead of looking at &lt;em&gt;what&lt;/em&gt; work they&#39;re
doing. It&#39;s similar to what you might get out of a retro but at a higher level. It offers time to discuss &quot;soft&quot;
skills that you don&#39;t often discuss, in a context that you don&#39;t usually discuss them - with other individual
contributors, and with your closest collaborators.&lt;/p&gt;

&lt;p&gt;&lt;aside class=&quot;dialogue&quot;&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/dialogue/steve.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Steve Hicks says...&lt;/p&gt;
    &lt;p&gt;
      When joining a new team, there&#39;s often a period of &quot;feeling it out&quot; - where I&#39;m afraid to verbalize an
      opinion because I&#39;m not sure how the team feels about it. The team working agreement process has definitely
      helped lessen this feeling.
    &lt;/p&gt;
    &lt;p&gt;
      There&#39;s a &lt;a href=&quot;https://www.youtube.com/watch?v=FxTXf6qyaGk&quot;&gt;great talk by Katherine Wu named &quot;Ask vs Guess Culture&quot;&lt;/a&gt;.
      &quot;Guess&quot; culture is when you try to guess what a person wants or is thinking; &quot;Ask&quot; culture is when you flat out
      ask them. Team agreement brainstorms are a really neat way to &lt;em&gt;ask&lt;/em&gt; your team how they want to work, instead of
      spending many sprints trying to guess.
    &lt;/p&gt;
    &lt;p&gt;
      So far, I have seen the most value out of &lt;em&gt;the actual brainstorm&lt;/em&gt; than the working agreement itself. My teams
      have learned so much about each others&#39; habits and values.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/dialogue/adam.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Adam Iskounen says...&lt;/p&gt;
    &lt;p&gt;
      The process has helped confirm that the team shared interest in team dynamics &amp;amp; the process of collaboration
      across the team. As a new member it&#39;s nice to know that information.
    &lt;/p&gt;
    &lt;p&gt;
      It&#39;s been great to see teammates bring up the team agreement in different contexts. It wasn&#39;t just a one-hour
      brainstorm, it&#39;s something our team is living. Hearing our slogan-like habits recited during team meetings
      long after the brainstorm is a testament to the value of the agreement.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;a name=&quot;It.can.lead.to.better.engagement.in.sprint.activities.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;It can lead to better engagement in sprint activities.&lt;/h3&gt;

&lt;p&gt;One of our teams established in their working agreement that sprint meetings were valuable. This might seem too
obvious to put in a team working agreement, but it portrays clearly to everyone that they should attend all sprint
meetings and be actively engaged.&lt;/p&gt;

&lt;p&gt;The same team got a lot out of making slogans for the items in their working agreement. Phrases like &quot;Pair by
default&quot; and &quot;Incremental improvement over consistency&quot; were introduced during the brainstorm. They&#39;ve since become
mantras for the team to refer to during sprint work and ceremonies. Team values and habits solidify through this
kind of repetition.&lt;/p&gt;

&lt;a name=&quot;The.team.working.agreement.provides.on-boarding.documentation.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;The team working agreement provides on-boarding documentation.&lt;/h3&gt;

&lt;p&gt;When new members join a team, it takes time for them to adjust. A team working agreement provides an up-to-date
reference on the team&#39;s preferred methods of working. The working agreement isn&#39;t set in stone, and as the team
changes it&#39;s important to update it... but having it in writing helps new members acclimate quickly.&lt;/p&gt;

&lt;a name=&quot;What.are.some.challenges.with.team.working.agreements.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What are some challenges with team working agreements?&lt;/h2&gt;

&lt;a name=&quot;Uncertainty.about.what.the.team.agreement.should.include.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Uncertainty about what the team agreement should include.&lt;/h3&gt;

&lt;p&gt;Some teams have struggled to identify what belongs on a team working agreement. Should it describe our team values?
Habits? Procedures? Rules? Favorite afternoon snacks?&lt;/p&gt;

&lt;p&gt;It likely varies from team to team what you want here. Some teams might require guidance around working with JIRA;
others might be more focused on taking ownership of problems. These differences are likely a reflection of the
problems the team is currently facing or has recently faced.&lt;/p&gt;

&lt;p&gt;It&#39;s definitely important that you identify what you&#39;re looking for up front, and make it clear heading into the
brainstorm. Suggest categories, sample habits, &amp;amp; questions to ask heading into the brainstorm, and keep them
visible during the meeting.&lt;/p&gt;

&lt;p&gt;Take notice of known problem areas: are they addressed or avoided in the agreement? It is easy for a team to avoid
confrontation at their own expense.&lt;/p&gt;

&lt;p&gt;Also be cautious about introducing individual bias.&lt;/p&gt;

&lt;p&gt;&lt;aside class=&quot;dialogue&quot;&gt;
  &lt;div class=&quot;answer&quot;&gt;
    &lt;img src=&quot;/images/dialogue/steve.jpg&quot;&gt;
    &lt;p class=&quot;intro&quot;&gt;Steve Hicks says...&lt;/p&gt;
    &lt;p&gt;
      During my first team agreement brainstorm, I felt like we spent a lot of time talking about details
      related to specific incidents. On my next team, I made a strong effort to constrain the suggestions
      to avoid this. To me, team values were really important for this new team - and I did such a good
      job of encouraging those types of suggestions that it&#39;s pretty much all we ended up with.
    &lt;/p&gt;
    &lt;p&gt;
      As a result, our initial working agreement lacked important procedural and tactical definition. We&#39;ve
      been adding things like JIRA hygiene and responsibilities of project leaders as they come up, but I would
      not push a working agreement brainstorm so strongly in one direction again.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;Remember that the working agreement is a living document. If the team learns that it missed something in the
brainstorm, don&#39;t hesitate to update the agreement. Team retros are a great time to make updates.&lt;/p&gt;

&lt;a name=&quot;Working.agreements.are.hard.to.define.for.teams.without.a.well-established.identity.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Working agreements are hard to define for teams without a well-established identity.&lt;/h3&gt;

&lt;p&gt;For a team that has a strong and cohesive identity, the agreement is likely to affirm many things the team is
already believing and doing. For a less cohesive team the agreement is harder to pin down. Many opinions will
surface, and they may be in conflict with each other.&lt;/p&gt;

&lt;p&gt;While this is indeed challenging, it is also important to note that teams that lack identity benefit &lt;em&gt;greatly&lt;/em&gt; from
the team agreement brainstorm. Provided there is
&lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#psychological-safety&quot;&gt;psychological safety&lt;/a&gt;,
this is a really great time for the team to learn about what matters to each other, and move toward establishing an
identity.&lt;/p&gt;

&lt;a name=&quot;Facilitating.the.brainstorm.can.be.difficult.on.a.distributed.team.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Facilitating the brainstorm can be difficult on a distributed team.&lt;/h3&gt;

&lt;p&gt;Some of our teams were able to brainstorm with everyone on-site. They were able to rely on post-it notes and
in-person conversations, and read each other&#39;s non-verbal communication. Other teams have a mix of on-site and
remote members, and used tools like &lt;a href=&quot;http://miro.com/&quot;&gt;Miro&lt;/a&gt; to facilitate. This &lt;em&gt;can&lt;/em&gt; present a challenge...but if
you&#39;re already a distributed team, they are likely the same types of challenges you&#39;ve worked to overcome for &lt;em&gt;all&lt;/em&gt;
meetings.&lt;/p&gt;

&lt;p&gt;The differences are worth noting, though. The importance of reading each other&#39;s non-verbal communication is
magnified when you&#39;re having conversations about identity. It&#39;s quicker to organize and re-organize real-life
post-its than virtual post-its in an online tool. These are all opportunities to get better at being a distributed
team.&lt;/p&gt;

&lt;a name=&quot;It.takes.effort.to.make.sure.one.person.isn.t.introducing.their.bias.into.the.working.agreement.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;It takes effort to make sure one person isn&#39;t introducing their bias into the working agreement.&lt;/h3&gt;

&lt;p&gt;It&#39;s important for the team agreement brainstorm to provide an environment in which every team member is heard.
Even if your team is successful at this, there are still opportunities for individual bias to affect the working
agreement.&lt;/p&gt;

&lt;p&gt;We saw earlier how bias can appear when the examples provided for the brainstorm are too narrowly scoped.&lt;/p&gt;

&lt;p&gt;We recognized another bias vector in the distillation of the brainstorm into an actual agreement. If this is
handled by a single person, it&#39;s very possible for them to produce a working agreement that misrepresents &lt;em&gt;the
rest&lt;/em&gt; of the team. To counter this, we&#39;ve had multiple team members pair on the distillation process. Feedback on
the initial draft of the agreement is also important to ensure it does not misrepresent the team&#39;s ideas.&lt;/p&gt;

&lt;p&gt;The problem of introducing bias to the distillation process is most challenging with topics that are disputed
across the team. One of our teams spent a lot of time talking about meetings in their brainstorm, but struggled to
come to consensus on them. No single person, or even a pair, could add a disputed topic like this to the working
agreement without introducing their personal bias. In this specific case, the team chose to leave meetings off the
working agreement until they could reach consensus. Topics that are disputed across the team are important to talk
about at &lt;em&gt;some&lt;/em&gt; point, but the brainstorm is probably not the time.&lt;/p&gt;

&lt;a name=&quot;Team.health.is.easy.to.postpone.when.you.have.important.product.work.to.do.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Team health is easy to postpone when you have important product work to do.&lt;/h3&gt;

&lt;p&gt;One of our teams put the act of distilling the brainstorm notes into an agreement on one person. That person became
busier than expected, didn&#39;t have time to write the agreement, and the team&#39;s agreement stalled.&lt;/p&gt;

&lt;p&gt;Just as personal self-care gets put on the back burner during stressful times, creating a working agreement is easy
to bump down the backlog during intense periods of sprint work. The longer a team drags out the working agreement
process, the more context is lost from the original brainstorm. We recommend not letting your working agreement
linger.&lt;/p&gt;

&lt;p&gt;It&#39;s also important to revisit the working agreement often. It is a living document, not one-and-done. Review the
agreement as a team occasionally; update the agreement as your team learns how to collaborate better; cultivate the
agreement. If an agreement gets stale, it will become inaccurate, meaningless, and unused.&lt;/p&gt;

&lt;a name=&quot;What.does.it.even.mean.to.have.a.team.working.agreement.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;What does it even mean to have a team working agreement?&lt;/h3&gt;

&lt;p&gt;A team working agreement is a neat artifact. The brainstorm process has great value. But there is non-obvious work
involved in turning a team working agreement into the team culture. We have many questions that we aren&#39;t sure how
to answer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How do you enforce the agreement?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Should&lt;/em&gt; you enforce the agreement?&lt;/li&gt;
&lt;li&gt;How do you get the entire team to embrace it?&lt;/li&gt;
&lt;li&gt;What happens when the agreement is violated or disrespected?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you&#39;re using working agreements on your team and you&#39;ve got answers for us, or you want to start using them and
have more questions, we&#39;d love to hear from you!&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2020/04/01/team-working-agreements/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2020/04/01/team-working-agreements/</guid>
        
        
        <category>culture</category>
        
        <category>people</category>
        
        <category>process</category>
        
        <category>team</category>
        
      </item>
    
      <item>
        <title>iOS Deploys: Super Weird And Totally Normal</title>
        <description>&lt;p&gt;Software deploys! What a concept. You have some code running somewhere, and you need to get it running somewhere
else. What could possibly go wrong? While web developers have become accustom to some &lt;em&gt;really slick&lt;/em&gt; deploy
processes, iOS developers have to work within some very different constraints.&lt;/p&gt;

&lt;p&gt;Today I want to explore the differences between deploying iOS software and front-end/back-end web software. Some of
these differences are inherent to how the code gets executed, and some of the differences are incidental to choices
that Apple has made. These are constraints that iOS developers need to work within. As Artsy has adopted React
Native over the past four years, we have had more and more of our web engineering colleagues contributing to our
iOS app. For these web engineers, getting familiar with the iOS deploy constraints is as important as getting to
know Xcode and CocoaPods.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;A.Release.Case.Study&quot;&gt;&lt;/a&gt;
&lt;h2&gt;A Release Case Study&lt;/h2&gt;

&lt;p&gt;We&#39;re going to use a case study to frame today&#39;s discussion. Artsy&#39;s Mobile Experience team recently got a ticket
from our Platform team. The nature of the ticket itself doesn&#39;t matter, but it involved a change we were making to
our API. I fixed the bug and submitted a pull request, which quickly got merged. We tested the bug fix in our next
beta deploy, and everything looked fine. Great so far.&lt;/p&gt;

&lt;p&gt;Artsy releases iOS software on a two-week release cadence, and this bug fix was scheduled to be released to users
the following week. But our back-end team wanted to quickly deploy that API change, which would require the app bug
fix to get released to users &lt;em&gt;first&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So... what to do?&lt;/p&gt;

&lt;p&gt;Do we release off-cadence? Or do we push back on our Platform team and ask them to hold off until the scheduled
release?&lt;/p&gt;

&lt;p&gt;Let&#39;s actually pause for a moment and consider one of the assumptions we made above. If you&#39;re a web engineer, the
idea of releasing only every two weeks might seem pretty strange! I mean, why not release continuously? For
example, Artsy&#39;s website gets deployed to our staging environment after every merged pull request, and staging then
gets promoted to production several times a day. This process is generally referred to as &quot;continuous delivery&quot;,
and &lt;a href=&quot;https://www.thoughtworks.com/insights/blog/case-continuous-delivery&quot;&gt;it has a lot of advantages&lt;/a&gt;. That&#39;s why
it&#39;s so common among web engineering teams. So why not use continuous delivery on iOS apps?&lt;/p&gt;

&lt;a name=&quot;The.Executable.Problem&quot;&gt;&lt;/a&gt;
&lt;h2&gt;The Executable Problem&lt;/h2&gt;

&lt;p&gt;There are two reasons we can&#39;t use continuous delivery on iOS. First, continuous delivery is only really possible
when you control where the software gets executed (or, in the case of web front-ends, where the client-side code
gets served from). Artsy controls our own servers, so we can deliver web software continuously. The next time a
user makes a web request, they&#39;ll get the updated code. However, the Artsy iOS app runs on our users&#39; devices,
instead. We can&#39;t push out updates to users&#39; iPhones or iPads in the same way we can push updates to our servers.&lt;/p&gt;

&lt;p&gt;iOS apps are binary executables that are distributed through Apple&#39;s App Store, and updates to apps have to be
pulled down by devices. Even if &lt;em&gt;most&lt;/em&gt; users have automatic updates turned on, those updates are typically
installed overnight. Consequently, there&#39;s quite a lag between when we deploy an iOS update and when users run the
code. While it only takes about a week for 80% of our users to update to the latest version, there&#39;s a very long
tail after that.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-03-02-ios-deploys-super-weird-totally-normal/graph.png&quot; alt=&quot;Graph of in-use versions of Artsy&#39;s app, illustrating both the quick adoption of new updates by most users and the long tail of old versions that are never updated&quot; /&gt;&lt;/p&gt;

&lt;p&gt;iOS software is executed in an environment that we don&#39;t control, that we can&#39;t push updates to, and most
importantly, that we can&#39;t roll back deploys on. If we ship a version of our app with a bug, but then ship an
updated version with a fix right away, there is absolutely no guarantee that users will install that update.
&lt;em&gt;Ever&lt;/em&gt;. That means that &lt;em&gt;every&lt;/em&gt; deploy we make to our iOS software requires a lot of confidence in that code. In
contrast, rolling back a web deploy is quite painless. If we ship a bug to the web, no problem: just roll back the
deploy, fix the bug, and re-deploy with the fix.&lt;/p&gt;

&lt;p&gt;(Note: some readers might be wondering why we don&#39;t take advantage of over-the-air updates to our React Native
JavaScript bundle. This is definitely possible, but our app is brownfield with some native code and some React
Native code and we haven&#39;t yet built out the infrastructure for this. As more and more code shifts to React Native,
we plan to investigate OTA updates to JavaScript bundles.)&lt;/p&gt;

&lt;a name=&quot;Apple.s.Platform..Apple.s.Rules&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Apple&#39;s Platform, Apple&#39;s Rules&lt;/h2&gt;

&lt;p&gt;The second reason to deploy iOS software on a schedule, rather than with continuous delivery, depends on the App
Store review process. This is another big difference that takes web engineers a while to get used to. Whenever we
ship a version of our iOS app, we ship it to Apple for review, and then Apple ships it to our users. I&#39;m not going
to debate the utility of Apple as an intermediary – the fact is that they own the iOS platform and these are the
rules they have chosen. If you want to ship iOS software, then you have to abide by Apple&#39;s rules.&lt;/p&gt;

&lt;p&gt;App Store review isn&#39;t exactly QA. I mean, if we were to ship an app update and it crashes upon launch, Apple isn&#39;t
likely to approve that update. But if we have a small bug buried somewhere in the app, we can&#39;t expect Apple to
find it. Apple is only testing for adherence to their
&lt;a href=&quot;https://developer.apple.com/app-store/review/guidelines/&quot;&gt;App Store Review Guidelines&lt;/a&gt;. Apple is looking for
things like: is the app trying to steal user data? Is the app displaying objectionable material, given its age
rating? Is the app&#39;s description and App Store metadata correct? That kind of stuff.&lt;/p&gt;

&lt;p&gt;So not only do iOS software developers need a lot of confidence in every deploy, but they also need to abide by
Apple&#39;s guidelines.&lt;/p&gt;

&lt;p&gt;Alright. Let&#39;s return to the case study from earlier.&lt;/p&gt;

&lt;a name=&quot;Case.Study.Resolution&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Case Study Resolution&lt;/h2&gt;

&lt;p&gt;We had a bug fix in our app, and getting it deployed was blocking an important change to our back-end API. First,
we had to consider that some users simply wouldn&#39;t get the update. We had to ask ourselves if this would block the
back-end change entirely – through open discussions with the team, we decided to move forward. Second, we had to
consider the other work that had been merged since our last release. Were we confident in deploying that work
as-is? And what amount of QA would need to be done to ship those changes as well?&lt;/p&gt;

&lt;p&gt;That last point is really interesting because there was actually another option. Rather than deploy the app based
off the current &lt;code&gt;master&lt;/code&gt; branch (with the bug fix &lt;em&gt;and&lt;/em&gt; other work included), we did something a bit clever.
&lt;a href=&quot;https://fastlane.tools&quot;&gt;fastlane&lt;/a&gt;, the tool we use to automate our iOS deploys, will tag each commit that we
submit to the App Store. So rather than deploy the current &lt;code&gt;master&lt;/code&gt; branch, which would require very rigorous QA,
we checked out the previous release tag. We then used
&lt;a href=&quot;https://www.atlassian.com/git/tutorials/cherry-pick&quot;&gt;&lt;code&gt;git cherry-pick&lt;/code&gt;&lt;/a&gt; to apply &lt;em&gt;only&lt;/em&gt; the bug fix changes, and
deployed from there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-03-02-ios-deploys-super-weird-totally-normal/slack.png&quot; alt=&quot;Screenshot from Slack where I detailed my plan to cherry-pick the commits&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This isolated the changes we were making to the app and minimized the amount of QA we needed to feel confident in
our release. Even still, we ran through our usual QA script. As I hope I&#39;ve demonstrated above, it&#39;s always better
to be safe than be sorry when it comes to deploying iOS software.&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;git cherry-pick&lt;/code&gt; approach has its own trade-offs, but it is very effective in the right circumstance. It&#39;s an
approach I&#39;ve only had to use a few times during my time at Artsy, but it&#39;s a good approach to be familiar with.
This situation also highlights a benefit of automating iOS deploys: we know &lt;em&gt;exactly&lt;/em&gt; which commit each version of
our app is running, making it easy to &lt;code&gt;git cherry-pick&lt;/code&gt; with confidence.&lt;/p&gt;

&lt;p&gt;I hope I&#39;ve illustrated how iOS software is a bit different from web software, both inherently and incidentally.
Many of these same quirks apply to Android deploys as well. Mobile software feels closer to software sold in
shrink-wrapped boxes than it does to Docker images shipped to Kubernetes clusters. And that&#39;s okay. Different
platforms will always have different constraints. Hopefully by understanding these constraints, mobile and web
engineers can gain a greater empathy for one another and, ideally, share ideas and solutions so we can all learn
and grown together.&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2020/03/02/ios-deploys-super-weird-totally-normal/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2020/03/02/ios-deploys-super-weird-totally-normal/</guid>
        
        
        <category>continuous deployment</category>
        
        <category>deployment</category>
        
        <category>fastlane</category>
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>Deploying canaries with auto</title>
        <description>&lt;p&gt;Coordinating changes across many packages in the node ecosystem can be quite the challenge. You can use &lt;code&gt;npm link&lt;/code&gt;
or &lt;code&gt;yarn link&lt;/code&gt; to create a symlink of the package you&#39;re developing on into another package, but it
&lt;a href=&quot;https://github.com/yarnpkg/yarn/issues/1761#issuecomment-259706202&quot;&gt;has some drawbacks&lt;/a&gt;. If you&#39;re doing local
development and need to rapidly see updates and &lt;code&gt;yarn link&lt;/code&gt; isn&#39;t working out there&#39;s always tools like
&lt;a href=&quot;https://github.com/whitecolor/yalc#yalc&quot;&gt;yalc&lt;/a&gt; to help you out. That&#39;s really only for local development though.&lt;/p&gt;

&lt;p&gt;What if you need to test packages together in a staging environment? Generally the approach would to be to deploy a
&lt;a href=&quot;https://martinfowler.com/bliki/CanaryRelease.html&quot;&gt;canary&lt;/a&gt; version to npm that you can use in your staging
environment. I&#39;ll go over how to do that and how Artsy automates it.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;Publishing a canary isn&#39;t necessarily very hard. It&#39;s just a regular publish to npm with a few more steps.&lt;/p&gt;

&lt;p&gt;For example, if we were wanting to publish a canary version of &lt;code&gt;@artsy/reaction&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Update &lt;code&gt;package.json&lt;/code&gt;, set version to a canary version, e.g. &lt;code&gt;2.0.0-canary-&amp;lt;PR#&amp;gt;&lt;/code&gt;, &lt;code&gt;3.1.5-canary-&amp;lt;PR#&amp;gt;&lt;/code&gt;, ...&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm publish --tag canary&lt;/code&gt; in &lt;code&gt;reaction&lt;/code&gt; to publish the package under the canary tag&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;yarn add @artsy/reaction@canary&lt;/code&gt; to install canary package in the consuming system&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;em&gt;Tip: Running &lt;code&gt;npm dist-tag ls&lt;/code&gt; can be helpful to see what tagged packages are available&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For a lot of people, that&#39;d be enough. End blog post. Here at Artsy, we like things to be a little more
frictionless.&lt;/p&gt;

&lt;p&gt;We&#39;re already big fans of &lt;a href=&quot;https://github.com/intuit/auto&quot;&gt;Auto&lt;/a&gt;, Intuit&#39;s tool for automatically deploying
releases on PR merges. Orta wrote an awesome blog post on how we
&lt;a href=&quot;https://artsy.github.io/blog/2019/01/03/label-based-prs/&quot;&gt;migrated to auto&lt;/a&gt; from semantic-release a while back.&lt;/p&gt;

&lt;p&gt;As a short recap, &lt;code&gt;Auto&lt;/code&gt; makes the deployable units of a package be a PR instead of a commit. It uses labels like
&lt;code&gt;Version: Major&lt;/code&gt;, &lt;code&gt;Version: Minor&lt;/code&gt;, etc to determine how the PR will affect the package version. When a PR is
merged it&#39;ll automatically cut a released based on that label.&lt;/p&gt;

&lt;p&gt;As a testament to how awesome &lt;code&gt;Auto&lt;/code&gt; is, it already supports
&lt;a href=&quot;https://intuit.github.io/auto/pages/generated/canary.html&quot;&gt;canary deployments&lt;/a&gt; out of the box!&lt;/p&gt;

&lt;p&gt;Essentially when we&#39;re on a branch that isn&#39;t master our CI runs this command:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;&#39;&gt;&lt;span class=&#39;line&#39;&gt;auto canary&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;and auto takes care of publishing a canary version to NPM &lt;em&gt;and&lt;/em&gt; updating the PR description with the version and
instructions on how to use it.&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&quot;https://github.com/artsy/reaction/pull/3168&quot;&gt;check out the PR&lt;/a&gt; where I enabled it on reaction to see it in
action. The CI configuration itself is layered behind some
&lt;a href=&quot;https://circleci.com/docs/2.0/orb-intro/&quot;&gt;CircleCI Orb&lt;/a&gt;s. You can find all that configuration in
&lt;a href=&quot;https://github.com/artsy/orbs&quot;&gt;artsy/orbs&lt;/a&gt; if you&#39;re curious.&lt;/p&gt;

&lt;p&gt;Ultimately the culmination of this work means that every PR to a library at Artsy gets a canary. It&#39;s incredibly
simple to test changes in another system now.&lt;/p&gt;

&lt;p&gt;There is, however, one caveat. Being as canaries are being deployed to NPM, they need our NPM token. We can&#39;t just
share that with everyone, so this functionality doesn&#39;t work on forks. Given how CircleCI works, this includes
forks from folks who even have write access to the repository. We&#39;re thinking about how to solve that problem but
that&#39;ll be another blog post for another day.&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2020/02/20/deploying-canaries-with-auto/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2020/02/20/deploying-canaries-with-auto/</guid>
        
        
        <category>node</category>
        
        <category>npm</category>
        
        <category>packages</category>
        
        <category>road and bridges</category>
        
        <category>tools</category>
        
      </item>
    
      <item>
        <title>Effortless Pagination with GraphQL and Relay? Really!</title>
        <description>&lt;p&gt;It&#39;s the year 2020. You use a modern front-end stack of &lt;a href=&quot;https://relay.dev/&quot;&gt;Relay&lt;/a&gt;,
&lt;a href=&quot;https://graphql.org/&quot;&gt;GraphQL&lt;/a&gt;, &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; and &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;.
You can build an infinite scroll &#39;feed&#39; type UI totally out of the box with these tools, by mostly putting together
boilerplate (proper &lt;a href=&quot;https://facebook.github.io/relay/graphql/connections.htm#sec-Connection-Types&quot;&gt;connections&lt;/a&gt;,
along with a &lt;a href=&quot;https://relay.dev/docs/en/pagination-container&quot;&gt;pagination container&lt;/a&gt;). You have a design system, and
are rapidly building up a component library. Things are great!&lt;/p&gt;

&lt;p&gt;Then you take a look at the latest design comps for a &#39;browse&#39; type page, and you see that the
&lt;a href=&quot;https://medium.com/simple-human/7-reasons-why-infinite-scrolling-is-probably-a-bad-idea-a0139e13c96b&quot;&gt;controversial&lt;/a&gt;
infinite scroll has been replaced by a more traditional pagination bar.&lt;/p&gt;

&lt;p&gt;You know the one. Like the following, from &lt;a href=&quot;https://www.amazon.com&quot;&gt;Amazon&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-01-21-graphql-relay-windowed-pagination/amazon.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;You start to realize that the cursor-based setup of a connection, along with a Relay pagination container, does not
lend itself to this more traditional UI. For one thing, a user can arbitrarily &#39;jump&#39; to any page by including a
&lt;code&gt;?page=X&lt;/code&gt; query param (typically). For another, the user can only actually see the current page of content, versus
a feed. As you go to sleep and dream of REST, Rails controllers, &lt;a href=&quot;https://github.com/kaminari/kaminari&quot;&gt;kaminari&lt;/a&gt;,
&lt;a href=&quot;https://github.com/mislav/will_paginate&quot;&gt;will_paginate&lt;/a&gt;, and a simpler time, you start to have a vision...&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;To get a good primer of what a GraphQL connection is and why they&#39;re so useful, read this
&lt;a href=&quot;https://blog.apollographql.com/explaining-graphql-connections-c48b7c3d6976&quot;&gt;excellent Apollo blogpost&lt;/a&gt;. Seriously.
It&#39;s one of the best writeups on this subject out there. I&#39;ll assume basic familiarity with connection types from
this point forward.&lt;/p&gt;

&lt;p&gt;We prefer to use connections in place of lists almost always. Not only do they provide a preferred cursor-based
pagination API for clients, but their type specification (a map vs a list) is naturally forward-looking. Even if
you do no pagination, a pure list type can&#39;t accomodate returning other metadata (such as a &lt;code&gt;totalCount&lt;/code&gt;) alongside
the list. Additionally, if your data is very relational and better represented as nodes connected by edges (which
would contain data about the &#39;join&#39; of the two nodes), the connection type gives one more flexibility than a simple
list. This (and more) is all covered in the aforementioned blog post.&lt;/p&gt;

&lt;p&gt;So, let&#39;s start by taking a look at our desired pagination UI, and think about what kind of schema/components make
sense.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-01-21-graphql-relay-windowed-pagination/pagination.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;There looks to be several types of appearances we want to show, based on the total size of our list and fixed page
size chosen, as well as the current page. There&#39;s also some edge cases of empty lists, or lists that are short
enough to just display all their page numbers. Users can click on any displayed page number to jump to it. There&#39;s
a prev/next navigation, which brings the user forward and back one page at a time. Whenever the current page
changes, the URL should update accordingly. For a responsive implementation, we want to hide the page numbers, and
only show the prev/next toggles on small screens.&lt;/p&gt;

&lt;p&gt;Wow! Ok, we have our work cut out for us. But wait til you see how easy this is! There&#39;ll be links to our actual
production components involved (all open-source) at the end.&lt;/p&gt;

&lt;a name=&quot;Pagination.Schema&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Pagination Schema&lt;/h2&gt;

&lt;p&gt;Let&#39;s tackle the first part of this, which is: how do we adapt the
&lt;a href=&quot;https://facebook.github.io/relay/graphql/connections.htm&quot;&gt;GraphQL connection spec&lt;/a&gt; in order to hold necessary
information that a UI might need? Generally we want the UI&#39;s to be as simple as possible, and so if the server
could construct a suitable pagination schema, that would be preferable. The simpler our UI, and the more business
logic and good abstractions made in our GraphQL server, the more portable and reusable this all becomes.&lt;/p&gt;

&lt;p&gt;What kind of data does the UI need, in order to render a particular page of contents? Well, for a particular page
we&#39;d need to render the actual number it corresponds to. We&#39;ll need to know if this is the current page or not (so
we can distinguish it in the UI from neighboring pages). And, we&#39;ll need to know the actual cursor (think:
&lt;a href=&quot;https://relay.dev/graphql/connections.htm&quot;&gt;opaque string&lt;/a&gt;) that corresponds to this page number. It seems likely
we&#39;ll need some sort of way to construct cursors from page numbers, on the server.&lt;/p&gt;

&lt;p&gt;So, check this out:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// SDL&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PageCursor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;pageNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;isCurrent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PageCursors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PageCursor&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PageCursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PageCursor&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PageCursor&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This is our pagination schema. Including a field of type &lt;code&gt;pageCursors&lt;/code&gt; as a connection-level field, onto a
connection, is sufficient for a UI to incredibly simply &#39;just render&#39; a correct pagination bar always, and be able
to hook up proper interactions. We can fully construct a simple UI (using Relay, shown in the next section) that
can present and allow for the interactions desired, for windowed pagination.&lt;/p&gt;

&lt;p&gt;But, of course we&#39;re glossing over the implementation for such a &lt;code&gt;pageCursors&lt;/code&gt; type, so let&#39;s check that out before
looking at how a client might consume this.&lt;/p&gt;

&lt;p&gt;Our backing API&#39;s largely still paginate via offsets, and not cursors. That is, they accept page/size or
size/offset style arguments. We use &lt;a href=&quot;https://github.com/graphql/graphql-relay-js&quot;&gt;graphql-relay-js&lt;/a&gt;, which includes
helpers to make sure types and resolvers are compatible with some Relay expectations. So, we use this library to
generate our cursors, and can convert the cursor to an offset. A page of 4 with a size of 10, returns the elements
numbered 30 - 39 in that list. So a page of 4 (and size of 10), is equivalent to an offset of 29 (and size of 10).
We have:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pageToCursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This gives us the offset of the last value of the previous page. While our upstream services are all still
paginating using this size/offset method, the &lt;a href=&quot;https://relay.dev/graphql/connections.htm&quot;&gt;GraphQL cursor spec&lt;/a&gt;
prefers opaque cursors to be used on the client. This allows the actual implementation of pagination to change
upstream while clients remain unaffected. Thus if we ever update our upstream pagination arguments/logic/setup, we
could update this schema implementation accordingly, and clients would continue to be functional.&lt;/p&gt;

&lt;p&gt;For inspiration in constructing our &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;last&lt;/code&gt;, and &lt;code&gt;around&lt;/code&gt; groups, we turn to
&lt;a href=&quot;https://www.fngtps.com/&quot;&gt;Fingertips&lt;/a&gt; and their
&lt;a href=&quot;https://github.com/Fingertips/peiji-san/blob/6bd1bc7c152961dcde376a8bcb2ca393b5b45829/lib/peiji_san/view_helper.rb#L87&quot;&gt;pagination library&lt;/a&gt;.
That code goes through the various cases possible (a short list, a long list where the current page is near the
front, middle or end, various degenerate cases, etc.), and returns a proper structure that represents this data. It
can handle all combinations of list sizes, and current position relative to the total size.&lt;/p&gt;

&lt;p&gt;In pseudo-code, it looks like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emptyList&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;around&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listIsShort&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;around&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalPages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nearBeginning&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;around&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalPages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nearMiddle&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;middle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalPages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nearEnd&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;around&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Our full implementation of that method can be found
&lt;a href=&quot;https://github.com/artsy/metaphysics/blob/205592be7f59970cf80313972ceb95bb1579c31f/src/schema/v2/fields/pagination.ts#L96&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a real-life example, check out
&lt;a href=&quot;https://metaphysics-staging.artsy.net/v2?query=%7B%0AartworksConnection(first%3A5%2C%20after%3A%20%22YXJyYXljb25uZWN0aW9uOjE0%22)%20%7B%0A%20%20pageInfo%20%7B%0A%20%20%20%20hasNextPage%0A%20%20%20%20endCursor%0A%20%20%7D%0A%20%20pageCursors%7B%0A%20%20%20%20first%20%7B%0A%20%20%20%20%20%20cursor%0A%20%20%20%20%20%20page%0A%20%20%20%20%20%20isCurrent%0A%20%20%20%20%7D%0A%20%20%20%20last%20%7B%0A%20%20%20%20%20%20cursor%0A%20%20%20%20%20%20page%0A%20%20%20%20%20%20isCurrent%0A%20%20%20%20%7D%0A%20%20%20%20around%20%7B%0A%20%20%20%20%20%20cursor%0A%20%20%20%20%20%20page%0A%20%20%20%20%20%20isCurrent%0A%20%20%20%20%7D%0A%20%20%20%20previous%20%7B%0A%20%20%20%20%20%20page%0A%20%20%20%20%20%20cursor%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%7D&quot;&gt;this link, corresponding to a page number of 4&lt;/a&gt;.
You can adjust the arguments to see how the output changes based on where you are in the list. Try putting
different cursor values in! It looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-01-21-graphql-relay-windowed-pagination/graphiql.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;Let&#39;s look at a couple of other pieces of data requested here. One of these is a &lt;code&gt;previous&lt;/code&gt; page cursor. This is to
support that action (the prev/next toggles) in the UI. However, we don&#39;t need a custom &lt;code&gt;next&lt;/code&gt; item to support that
behavior. That&#39;s because we tend to use
&lt;a href=&quot;https://facebook.github.io/relay/graphql/connections.htm#sec-Forward-pagination-arguments&quot;&gt;forward-style pagination arguments&lt;/a&gt;
with connections, which means the connection will already return the data needed for that action (remember, you can
implement a scrolling infinite scroll feed that always takes you to the next page right out of the box).
Specifically, the &lt;code&gt;hasNextPage&lt;/code&gt; and &lt;code&gt;endCursor&lt;/code&gt; are those fields from the
&lt;a href=&quot;https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo.Fields&quot;&gt;GraphQL &lt;code&gt;pageInfo&lt;/code&gt; object&lt;/a&gt;
which give you that information.&lt;/p&gt;

&lt;a name=&quot;Companion.UI.Component&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Companion UI Component&lt;/h2&gt;

&lt;p&gt;Ok, now that we have a connection and corresponding fields that provide the needed data, let&#39;s take a look at a
simple React component that can render this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pageCursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/Button&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Show page 1 if `first` is present, and append with dots&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Show everything in `around`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Show last page if present, and prepend with dots&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Show previous toggle, active if present&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;// Show next toggle, active if next page exists&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Previous&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/Button&amp;gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Page&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pageCursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&amp;gt;)}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;around&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Page&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pageCursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Page&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pageCursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&amp;gt;)}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasNextPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/Button&amp;gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;That&#39;s basically it, visually speaking! The data provided by our GraphQL server is sufficient to render what&#39;s
needed. You can see such a UI component in our design system
&lt;a href=&quot;https://github.com/artsy/palette/blob/f882d32c3fdc6e7f81915c2922e3824bd26791e7/packages/palette/src/elements/Pagination/Pagination.tsx&quot;&gt;here&lt;/a&gt;.
It looks very similar to the above code. Of note, is since this is a simple UI component, it is vanilla React. It
is not a Relay component. It requires an &lt;code&gt;onClick&lt;/code&gt; and &lt;code&gt;onNext&lt;/code&gt; to be passed as props.&lt;/p&gt;

&lt;a name=&quot;Relay.Integration.Step.I&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Relay Integration Step I&lt;/h2&gt;

&lt;p&gt;Now, let&#39;s take a look at how we can build a Relay container that will use the above UI component. First, let&#39;s
build a Relay-wrapped component of the above UI component. This is a fragment container, and lists all the fields
needed:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;fragment&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pagination_pageCursors&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PageCursors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;around&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;cursor&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;isCurrent&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;cursor&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;isCurrent&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;cursor&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;isCurrent&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;previous&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;cursor&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;As a fragment container, this doesn&#39;t have the ability to fetch anything by itself. We want to pass in an &lt;code&gt;onClick&lt;/code&gt;
and &lt;code&gt;onNext&lt;/code&gt; prop from a parent, as well as the &lt;code&gt;hasNextPage&lt;/code&gt; and &lt;code&gt;endCursor&lt;/code&gt; data. Check out
&lt;a href=&quot;https://github.com/artsy/reaction/blob/c6d630f8c3213f47c5124f63eda13fbb9d8f497b/src/Components/v2/Pagination.tsx&quot;&gt;this component&lt;/a&gt;
in our library to see how we take that vanilla React component mentioned above, and use the above fragment to make
a Relay fragment container out of it.&lt;/p&gt;

&lt;p&gt;Now, we need to decide what kind of parent container is appropriate, and how this fragment container will be used.&lt;/p&gt;

&lt;a name=&quot;Relay.Integration.Step.II&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Relay Integration Step II&lt;/h2&gt;

&lt;p&gt;This is going to be confusing, but for this step, we use a
&lt;a href=&quot;https://relay.dev/docs/en/refetch-container&quot;&gt;refetch container&lt;/a&gt; in order to present our paginated collection view,
rather than the aptly-named &lt;a href=&quot;https://relay.dev/docs/en/pagination-container&quot;&gt;Relay pagination container&lt;/a&gt;. The
latter is more suited for an infinite scroll feed view (presenting all content already fetched, only adjacent pages
in a particular direction are able to be scrolled to, etc.) vs. the windowed pagination we are trying to
accomplish. The refetch container is a much more natural fit for our use case, despite the naming.&lt;/p&gt;

&lt;p&gt;That fragment looks like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;fragment&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConnectionResults_query&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;someConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;pageInfo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;hasNextPage&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;endCursor&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;pageCursors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Pagination_pageCursors&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OtherStuffForYourView&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;We include our &lt;code&gt;pageCursors&lt;/code&gt; fragment, as well as the &lt;code&gt;hasNextPage&lt;/code&gt; and &lt;code&gt;endCursor&lt;/code&gt; from the &lt;code&gt;pageInfo&lt;/code&gt; object. We
need to provide the &lt;code&gt;onClick&lt;/code&gt; and &lt;code&gt;onNext&lt;/code&gt; callbacks as well. Since this component will have access to a
&lt;a href=&quot;https://relay.dev/docs/en/refetch-container#refetch&quot;&gt;&lt;code&gt;relay&lt;/code&gt; prop&lt;/a&gt; since it is a refetch container, those look
like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;handleNext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasNextPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;endCursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;relay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PAGE_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cursor&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;cm&quot;&gt;/* Update URL, set state, etc. */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;The refetch query defined for the container will look like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeConnectionQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ConnectionResults_query&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;We&#39;re pretty much done, this is all just Relay boilerplate at this point.&lt;/p&gt;

&lt;p&gt;Putting it all together, our refetch container winds up rendering a fully functional pagination component in one
line:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Pagination&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pageCursors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pageCursors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;That&#39;s it! Any connection can have this pagination functionality added to it very simply. You include the page
cursor schema on the server for that type (we have a
&lt;a href=&quot;https://github.com/artsy/metaphysics/blob/205592be7f59970cf80313972ceb95bb1579c31f/src/schema/v2/fields/pagination.ts#L160&quot;&gt;factory method&lt;/a&gt;
to help us do that automatically for any connection type). Then, following the above steps, you can quickly build a
Relay refetch container that displays and seamlessly paginates any list.&lt;/p&gt;

&lt;p&gt;You can see an example of this in numerous places on the &lt;a href=&quot;https://www.artsy.net&quot;&gt;Artsy&lt;/a&gt; website. Head on over to
our &lt;a href=&quot;https://www.artsy.net/collect&quot;&gt;Artworks browse experience&lt;/a&gt; and have fun filtering and searching/browsing
through all accessible works! The pagination controls and functionality on this page, and others, are built using
the technique described in this post.&lt;/p&gt;

&lt;a name=&quot;Examples&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Examples&lt;/h2&gt;

&lt;p&gt;Since our &lt;a href=&quot;https://github.com/artsy/metaphysics&quot;&gt;GraphQL orchestration layer&lt;/a&gt;, our
&lt;a href=&quot;https://github.com/artsy/palette&quot;&gt;design system&lt;/a&gt; and
&lt;a href=&quot;https://github.com/artsy/reaction&quot;&gt;UI component and app library&lt;/a&gt; are all open source, here&#39;s links to our actual
production implementation of the above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/metaphysics/blob/205592be7f59970cf80313972ceb95bb1579c31f/src/schema/v2/fields/pagination.ts&quot;&gt;Pagination schema in GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/palette/blob/f882d32c3fdc6e7f81915c2922e3824bd26791e7/packages/palette/src/elements/Pagination/Pagination.tsx&quot;&gt;React UI component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/reaction/blob/c6d630f8c3213f47c5124f63eda13fbb9d8f497b/src/Components/v2/Pagination.tsx&quot;&gt;Relay FragmentContainer wrapping of the above&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/reaction/blob/c6d630f8c3213f47c5124f63eda13fbb9d8f497b/src/Apps/Search/Routes/Artists/SearchResultsArtists.tsx&quot;&gt;Relay RefetchContainer full example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 21 Jan 2020 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2020/01/21/graphql-relay-windowed-pagination/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2020/01/21/graphql-relay-windowed-pagination/</guid>
        
        
        <category>graphql</category>
        
        <category>pagination</category>
        
        <category>relay</category>
        
      </item>
    
      <item>
        <title>At Long Last: A Log Out Button</title>
        <description>&lt;p&gt;In 2013, Artsy shipped the first version of our iOS app. Typical for an early-day startup, the app was a &quot;minimum
viable product&quot; (with a big emphasis on &quot;minimum&quot;). One of the features that didn&#39;t make the cut was something you
expect to see in most apps: a log out button.&lt;/p&gt;

&lt;p&gt;When I joined Artsy a year later, there was still no log out button. And there would be no log out button for
another six years, until today.&lt;/p&gt;

&lt;p&gt;I want to talk about this quirk of our app, from both product and technical perspectives. Why wasn&#39;t this already
in our app? Why was it so difficult to build? These are interesting questions, and their answers shed light on how
products mature over time. I also want to talk about how we finally managed to prioritize this kinda weird feature
request (spoilers: it was our company-wide hackathon). Let&#39;s go!&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;When I say that our app doesn&#39;t have a log out button, that&#39;s a bit of a fib: it &lt;em&gt;does&lt;/em&gt; have a log out button... in
the admin-only debug menu. The reason why this isn&#39;t a user-facing feature is that the final step of this
admin-only log out feature is a call to &lt;code&gt;exit(0)&lt;/code&gt;, effectively crashing the app. That&#39;s &lt;em&gt;one&lt;/em&gt; way to make sure that
user-specific state doesn&#39;t pollute your app&#39;s runtime, but of course it would be ridiculous for a user-facing log
out button to crash the app. The only other way to log out was to uninstall the app, which is &lt;em&gt;not&lt;/em&gt; something we
want to encourage users to do.&lt;/p&gt;

&lt;p&gt;So Artsy staff could log out of the app, but our normal users couldn&#39;t. This quirk was acceptable in the early days
of our app, but as the years wore on, it became less of a quirk and more of a product limitation. Even three months
after creating our new Mobile Experience team, we hadn&#39;t yet prioritized this feature. Let&#39;s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Five_whys&quot;&gt;dive into this question&lt;/a&gt; a little bit.&lt;/p&gt;

&lt;p&gt;The log out button hadn&#39;t been prioritized. &lt;strong&gt;Why?&lt;/strong&gt; To be honest, we had – and still have – a lot of work to do to
improve the app (&lt;a href=&quot;http://artsy.net/jobs&quot;&gt;we&#39;re hiring, by the way&lt;/a&gt;). Among the high-impact work we&#39;ve been
shipping, the log out button simply never made the cut. &lt;strong&gt;Why?&lt;/strong&gt; It turns out be quite complicated to implement a
log out button in our app. &lt;strong&gt;Why?&lt;/strong&gt; To answer that, we need to step back and think about software development and
requirements gathering, generally.&lt;/p&gt;

&lt;p&gt;Experienced software developers will tell you that it&#39;s far, far easier to build a piece of software with a feature
in mind &lt;em&gt;from the start&lt;/em&gt; than it is to take an existing piece of software and add something to it that it was never
intended to do. For our app, logging out was something it was never intended to do, and so adding it was
technically difficult. &lt;strong&gt;Why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because of &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil&quot;&gt;state&lt;/a&gt;.
When you log in to our app, the state of the app changes: we get a user ID and access token from the Artsy API and
our code assumes that these values never change. This is further complicated by the fact that our app is split into
two pieces: the native code (written in Objective-C and Swift) and the React Native code (written in TypeScript).
You can effectively think of these as &lt;em&gt;two&lt;/em&gt; apps that interoperate with each other. The state now has to be managed
across &lt;em&gt;two&lt;/em&gt; pieces of software, further complexifying the work to add a log out button.&lt;/p&gt;

&lt;p&gt;Returning to the idea of developing features in mind from the start (versus adding them after the fact), our React
Native codebase had always assumed a logged-in user. Adding support for this later on was too difficult (indeed,
our solution was to
&lt;a href=&quot;https://github.com/artsy/emission/pull/2027/files#diff-0cc174f9197fd0b06ecbd2eaa0247833R1020&quot;&gt;invalidate the entire React Native runtime upon log out&lt;/a&gt;).
This wasn&#39;t a limitation of React Native, but rather it was a limitation of how we chose to organize our code. If
we&#39;d added a log out button earlier in the product lifetime, it wouldn&#39;t have been so difficult. The longer we
waited, the more and more code we wrote that implicitly relied upon our existing limitations.&lt;/p&gt;

&lt;p&gt;In this way, the &lt;em&gt;absence&lt;/em&gt; of a feature had gained its own inertia. The missing feature became a present absence,
and I think there&#39;s more to think about there – maybe for another blog post.&lt;/p&gt;

&lt;p&gt;So what we had was a difficult technical problem that wasn&#39;t &lt;em&gt;that&lt;/em&gt; high of priority and didn&#39;t have an obvious
solution. Our product team wasn&#39;t feeling the pain, but our colleagues who interface more directly with our users
&lt;em&gt;were&lt;/em&gt; feeling it.&lt;/p&gt;

&lt;p&gt;Artsy kicked off 2020 with a company-wide Hackathon. We run these events roughly once a year, and they provide a
great opportunity for engineers and non-engineers to work together to build something over a few days. Maybe it&#39;s a
brand-new piece of software to help us do our jobs better. Maybe it&#39;s a new zine to collect our favourite artworks
from the site? And maybe, just maybe, it&#39;s a long-neglected user feature that never made the cut in prioritization
meetings.&lt;/p&gt;

&lt;p&gt;Among all the ideas that Artsy staff submitted for the Hackathon, the Artsy iOS Log Out button received the third
most votes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-01-15-ios-logout-button-at-last/idea.png&quot; alt=&quot;Screenshot of our Hackathon ideas board&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I sat down with another Mobile Experience engineer, Brian, and the people who submitted the Hackathon idea. If we
were going to build this, it was worth doing right, so we asked questions and learned more about why users need a
log out button at all. I&#39;ll spare you the details, but it suffices to say that I learned a lot.&lt;/p&gt;

&lt;p&gt;Brian and I worked on the feature, digging into the internals of our app and the interop between native and React
Native code. Our solution wasn&#39;t necessarily the &quot;best&quot; solution, but it worked within the assumptions that the app
has already made. Here&#39;s roughly the plan we set out with.&lt;/p&gt;

&lt;p&gt;On the React Native side of the app, build a settings screen with the log out button:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When the user taps the button, post a notification through &lt;code&gt;NSNotificationCenter&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Also, show the user who they are logged in &lt;em&gt;as&lt;/em&gt; on this screen.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;On the native side of the app, listen for the notification and take the following steps when it&#39;s fired:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tear down the React Native bridge (invalidate it and release it).&lt;/li&gt;
&lt;li&gt;Tear down the native user interface (set singleton instance to &lt;code&gt;nil&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Get a fresh unauthenticated API token.&lt;/li&gt;
&lt;li&gt;Use the token to show the sign in/up flow (set the window&#39;s &lt;code&gt;rootViewController&lt;/code&gt; property).&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Invalidating the React Native bridge is quite a dramatic action to take, but it&#39;s effective. We chose this solution
because it allows our React Native code to continue assuming that the user ID and access token never change (during
its lifetime, anyway).&lt;/p&gt;

&lt;p&gt;We had a few other items to follow-up on, mostly reference cycles that were holding onto invalid singleton
instances in-memory. Here&#39;s the log out button in action:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-01-15-ios-logout-button-at-last/logout.png&quot; alt=&quot;Screenshot of our new log out button!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We learned a tonne about the React Native bridge, the existing architecture of our app, and how we&#39;d like to see
that mature going forward.&lt;/p&gt;

&lt;p&gt;I said earlier that the longer we waited, the harder it was to build this log out button because more and more of
our existing code relied upon assumptions that the log out button would break. Now that we &lt;em&gt;do&lt;/em&gt; have a log out
button, &lt;em&gt;new code we write needs to take it into account&lt;/em&gt;. The assumptions coders can make about this codebase are
shifting over time – this is an experience that I never appreciated while working on minimum viable products. I&#39;m
trying to lean into these shifts and use them to drive further modernizations in our codebase. For instance, I&#39;m
already thinking ahead to how everything will work once our sign in/up flow is moved from Objective-C to React
Native (since the user ID and access token &lt;em&gt;will&lt;/em&gt; need to be mutable state).&lt;/p&gt;

&lt;p&gt;In case you&#39;re curious, all our iOS code is open source. The work to add a log out button is totally open source in
&lt;a href=&quot;https://github.com/artsy/emission/pull/2027&quot;&gt;these&lt;/a&gt; &lt;a href=&quot;https://github.com/artsy/eigen/pull/2977&quot;&gt;two&lt;/a&gt; pull requests.&lt;/p&gt;

&lt;p&gt;Any organization structure will lead to features falling through cracks. It just happens, it&#39;s the nature of
structured organizations. What we&#39;ve learned at Artsy is that Hackathons (and cross-team collaboration in general)
are effective &quot;escape hatches&quot; for important-but-not-urgent work to get prioritized. They help our colleagues in
Engineering and other teams get to know each other, get to know our business, and find out what kind of features
our users need – even less-than-glamorous features, like a log out button.&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2020/01/15/ios-logout-button-at-last/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2020/01/15/ios-logout-button-at-last/</guid>
        
        
        <category>hackathon</category>
        
        <category>ios</category>
        
        <category>tech debt</category>
        
      </item>
    
      <item>
        <title>Better GraphQL Error Handling I - Using Custom Directives</title>
        <description>&lt;p&gt;This will be the first in a series of posts about how we used advanced GraphQL tooling and functionality to better
handle errors occurring during query resolution, and better equip clients to reason about such errors.&lt;/p&gt;

&lt;p&gt;The goal is to describe our current approach, but also do a deep dive into specific ways we&#39;ve extended our
&lt;a href=&quot;https://github.com/artsy/metaphysics&quot;&gt;GraphQL server&lt;/a&gt; to help us accomplish that. If you are an interested GraphQL
user, you may find this useful, even if some of the larger context specifically around how we are using it to help
standardize error handling doesn&#39;t apply.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Introduction.and.Initial.Context&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Introduction and Initial Context&lt;/h2&gt;

&lt;p&gt;At Artsy, we use GraphQL as our API language of choice. In particular,
&lt;a href=&quot;https://artsy.github.io/blog/2018/05/08/is-graphql-the-future/&quot;&gt;as&lt;/a&gt;
&lt;a href=&quot;https://artsy.github.io/blog/2016/06/19/graphql-for-mobile/&quot;&gt;we&#39;ve described&lt;/a&gt;
&lt;a href=&quot;https://artsy.github.io/blog/2016/11/02/improving-page-speed-with-graphql/&quot;&gt;before&lt;/a&gt;, we have an orchestration
layer speaking GraphQL, which is what our front-end clients talk to. The GraphQL orchestration layer wraps up
access to several backend services, which are made accessible via a combination of data loaders and
&lt;a href=&quot;https://www.apollographql.com/docs/apollo-server/features/schema-stitching/&quot;&gt;schema stitching&lt;/a&gt;.
&lt;a href=&quot;https://www.apollographql.com/docs/apollo-server/federation/introduction/&quot;&gt;Apollo Federation&lt;/a&gt; is another tool
people are using to bring together disparate backends when using GraphQL in an orchestration layer.&lt;/p&gt;

&lt;p&gt;Now, consider the following query, which is a realistic one you might see when accessing a &#39;product&#39; page.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;andy-warhol-skull&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;mainContentStuff&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;biographicalData&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;userReviews&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Accesses&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reviews&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;service&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Part of the &lt;a href=&quot;https://graphql.github.io/graphql-spec/&quot;&gt;GraphQL spec&lt;/a&gt; advises that one should return a 2XX status
code, even if there are exceptions raised when resolving your query. A non-2XX status code from a GraphQL server
would indicate an error with the server itself. Errors that occur during query resolution can be consolidated and
placed in the &lt;code&gt;errors&lt;/code&gt; key of the response. This is all
&lt;a href=&quot;https://graphql.github.io/graphql-spec/draft/#sec-Errors&quot;&gt;advised by the spec&lt;/a&gt;, and so is found in most GraphQL
implementations.&lt;/p&gt;

&lt;p&gt;Given that this query likely backs a product page, some questions about possible error handling behavior that
immediately arise:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If there are multiple fields erroring, which error (if any) is reported to the user?&lt;/li&gt;
&lt;li&gt;How does the UI decide whether an error is recoverable? That is, if the &lt;code&gt;mainContentStuff&lt;/code&gt; field for a view has
errored, that&#39;s probably not recoverable, and appropriate feedback should be displayed. But, if user reviews are
unavailable at this time, it&#39;s likely you might still want to render the main view, but with that section
appropriately handled. Is there a generic way to handle this?&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Using.a.Directive.to.Eliminate.Ambiguity&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Using a Directive to Eliminate Ambiguity&lt;/h2&gt;

&lt;p&gt;We decided to allow our UI components to declare, using a GraphQL directive, one and only one field in a query to
optionally be the &#39;principal field&#39;. That is, this is the field that, if there are any errors resolving it, should
result in an entire view rendering an appropriate error state. For web, this means a non-2XX status code and
resulting error page. Any errors occurring in field resolution of non-principal fields should still result in a 2XX
to the user, and the UI should be able to gracefully recover from the missing data. Since we use
React/Relay/GraphQL, and GraphQL queries are colocated with UI components, a GraphQL directive is particularly
useful.&lt;/p&gt;

&lt;p&gt;Rewriting the above query, we might do something like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;andy-warhol-skull&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;mainContentStuff&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;principalField&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;biographicalData&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;userReviews&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Accesses&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reviews&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;service&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This would mean that any errors occuring in resolving &lt;code&gt;mainContentStuff&lt;/code&gt; would result in either a 500 status code
and error page to the user, or possibly a more specific error and status code. However, any errors occurring in
resolving user reviews or other fields, would not cause a 500 and error page. Instead, there would be a 200 and the
UI would render. This means that our UI components should generally be defensive about their incoming props being
&lt;code&gt;null&lt;/code&gt; (which is likely what you&#39;d see when the corresponding field errors during query resolution). Using
TypeScript and
&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html&quot;&gt;strict null checking&lt;/a&gt; can help
make your UI bulletproof to these sorts of issues.&lt;/p&gt;

&lt;p&gt;With this context, let&#39;s look at how we implement a custom &lt;code&gt;@principalField&lt;/code&gt; GraphQL directive. Future posts in
this series talking about custom GraphQL functionality will likely skip this intro section.&lt;/p&gt;

&lt;a name=&quot;Implementing.a.Custom.GraphQL.Directive&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Implementing a Custom GraphQL Directive&lt;/h2&gt;

&lt;p&gt;First, we have a new directive that we&#39;d like to add to our schema. That is, we&#39;d like a client to be able to
specify &lt;code&gt;@principalField&lt;/code&gt; alongside any field, and have that query be validated correctly by the server. You can
&lt;a href=&quot;https://metaphysics-staging.artsy.net/?query=%7B%0Aartwork(id%3A%22andy-warhol-skull%22)%20%40nonExistentDirective%7B%0A%20%20id%0A%7D%7D&quot;&gt;see for yourself&lt;/a&gt;
how &lt;a href=&quot;https://github.com/graphql/graphql-js&quot;&gt;graphql-js&lt;/a&gt; and
&lt;a href=&quot;https://github.com/graphql/express-graphql&quot;&gt;express-graphql&lt;/a&gt; respond when an unknown directive is specified. Your
GraphQL server implementation may look slightly different.&lt;/p&gt;

&lt;p&gt;Turns out, that&#39;s pretty easy to do in &lt;code&gt;graphql-js&lt;/code&gt;. We declare a variable of type &lt;code&gt;GraphQLDirective&lt;/code&gt;, which
operates on a &lt;code&gt;DirectiveLocation.FIELD&lt;/code&gt; location:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PrincipalFieldDirective&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GraphQLDirective&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;principalField&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;locations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DirectiveLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;and then when we create our schema, we pass this in as &lt;code&gt;directives&lt;/code&gt;. Since this will overwrite the
&lt;a href=&quot;https://www.apollographql.com/docs/apollo-server/schema/directives/&quot;&gt;default directives&lt;/a&gt;, we need to append ours.&lt;/p&gt;

&lt;p&gt;Something like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;specifiedDirectives&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;graphql&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GraphQLSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;directives&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;specifiedDirectives&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PrincipalFieldDirective&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;In terms of the SDL for your schema, this is equivalent to the following line:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;directive&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;principalField&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FIELD&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;That&#39;s it! You&#39;ve successfully added a new directive to your schema. At this point, your GraphQL server will
properly validate and allow a &lt;code&gt;@principalField&lt;/code&gt; directive specified by a client alongside any field. Now, we do
want to ensure that if this directive is used, it only appears once in your query. We can accomplish this with a
custom GraphQL validation, which we&#39;ll cover in the next post.&lt;/p&gt;

&lt;p&gt;So now, how should we implement the functionality of this directive? We decided that we want to use the
&lt;a href=&quot;https://github.com/graphql/graphql-spec/blob/master/spec/Section%207%20--%20Response.md#response-format&quot;&gt;extensions&lt;/a&gt;
part of our GraphQL response to carry this data, a free-form map of data up to the implementor, which is a perfect
fit for this type of optional additional information. If an error occurs in a field tagged with the directive, we
want the response to look something like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;json&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;extensions&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;principalField&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;In &lt;code&gt;express-graphql&lt;/code&gt;, we&#39;ll need a method appropriate for the
&lt;a href=&quot;https://github.com/graphql/express-graphql#options&quot;&gt;extensions&lt;/a&gt; option. That looks like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;principalFieldDirectiveExtension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;documentAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getPrincipalFieldDirectivePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;principalField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;If there is a field designated with the principal field directive, and there is an error at that same path, we&#39;ll
return that information, otherwise do nothing.&lt;/p&gt;

&lt;p&gt;That&#39;s it! We have one additional helper we need to write, &lt;code&gt;getPrincipalFieldDirectivePath&lt;/code&gt;. This builds an array
of all the fields encountered to get to one tagged with our directive. It matches the way the
&lt;a href=&quot;https://graphql.github.io/graphql-spec/June2018/#sec-Errors&quot;&gt;path of an error&lt;/a&gt; is constructed by the server, which
enables us to determine if a particular error was associated with a field tagged with the directive.&lt;/p&gt;

&lt;p&gt;That looks like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BREAK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DocumentNode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;graphql&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getPrincipalFieldDirectivePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DocumentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;enter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;leave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;Directive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;principalField&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BREAK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This uses a &lt;a href=&quot;https://graphql.org/graphql-js/language/#visit&quot;&gt;GraphQL visitor&lt;/a&gt; to traverse our query, and build up
an array of field names. We can exit early with that path if we encounter our directive.&lt;/p&gt;

&lt;a name=&quot;Example.Query&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Example Query&lt;/h2&gt;

&lt;p&gt;Let&#39;s take a look at how you can use this in practice, in order to help standardize when and with what status a UI
can inform the user of an error.&lt;/p&gt;

&lt;p&gt;Something like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;andy-warhol-skull&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;principalField&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;userReviews&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;notes&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;contents&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;results in:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;json&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;artwork&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;extensions&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;principalFieldError&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;httpStatusCode&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;and the UI can immediately return an appropriate message to the user, if the artwork is not found. If fetching the
artwork is successful, but there&#39;s an issue with the reviews, the response will look like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;json&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;artwork&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;userReviews&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;contents&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;We can make sure that our UI components (likely Relay containers) corresponding to &lt;code&gt;userReviews&lt;/code&gt; are defensive
about that incoming prop being &lt;code&gt;null&lt;/code&gt;. Most likely a zero state (&quot;No Reviews Found&quot;), or just skipping the section
entirely, is appropriate.&lt;/p&gt;

&lt;a name=&quot;Conclusion&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this way, we can standardize on and remove ambiguity about how a UI handles one or more errors in query
resolution and exactly when such an error should be propagated and made user-facing. We can help ensure that our
UI&#39;s are resilient to errors occurring in a leaf.&lt;/p&gt;

&lt;p&gt;In the next post, we&#39;ll look at how we can write a GraphQL validation rule to ensure that a client specifies at
most one field with the &lt;code&gt;@principalField&lt;/code&gt; directive. After that, we&#39;ll take a look at how you can successfully
parse and support GraphQL query resolution errors occurring in a variety of contexts such as during stitching.
Putting this altogether, we hope you will come away with a better understanding of how to extend your GraphQL
server with your own custom behaviors, and in particular how we&#39;ve used these to better log/propagate/present the
potential errors occurring during a query.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2020/01/13/graphql-custom-directives/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2020/01/13/graphql-custom-directives/</guid>
        
        
        <category>error handling</category>
        
        <category>graphql</category>
        
      </item>
    
      <item>
        <title>Is this you? No, really, is this you?</title>
        <description>&lt;p&gt;You are a software engineer.&lt;/p&gt;

&lt;p&gt;You consider yourself an introvert, and you really appreciate &quot;engineering time&quot;, where you prefer to work for
extended uninterrupted periods because interruptions wreck you. You are used to being misunderstood. Ever since you
can remember the people around you have been kind of baffling: they constantly fail to notice stuff that&#39;s really
obvious and important to you, and then they have the audacity to get frustrated with you for not understanding
&lt;em&gt;them&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But whatever, you can deal with this, right? This is just how life goes, right? Everyone&#39;s like this, right?&lt;/p&gt;

&lt;p&gt;Right?&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;It&#39;s really been like this as long as you can remember. Maybe even as early as kindergarten, when you distinctly
remember feeling &quot;Wow, I guess all these kids must already know each other?&quot; because how else would they know how
to just start playing together? You might have gotten really, really good at languages -- or you might have
eschewed the humanities entirely and focused on things like Math and Science. Regardless, you were in it for the
&lt;em&gt;systems&lt;/em&gt; -- grammar just &lt;em&gt;makes sense&lt;/em&gt; to you, in the same way software engineering just &lt;em&gt;makes sense&lt;/em&gt; to you now.
Math, you finally understood, was just a specialized language for referring to the relations between things --
sure, okay!&lt;/p&gt;

&lt;p&gt;Socially, things were always a little weird for you. Other people never &lt;em&gt;quite&lt;/em&gt; behaved in ways that made sense to
you, and especially when younger you probably socialized by getting &#39;adopted&#39; by some other kid who seemed to know
what was going on. Whatever you studied you poured yourself into deeply as long as it held your interest -- your
mind expanded into the space your lessons created and eagerly walked hidden pathways that your classmates didn&#39;t
see. You asked the questions in class that surprised the teacher and annoyed your peers, and you probably got damn
good grades.&lt;/p&gt;

&lt;p&gt;You may have been bullied.&lt;/p&gt;

&lt;p&gt;You likely went to college and focused on something that interested you -- perhaps you doubled down on language, or
maybe you went into engineering or music or math. It was a revelation, because maybe for the first time in your
life you were surrounded by a self-selecting group of peers, some of whom shared your passion for analysis and deep
thinking. You didn&#39;t have to go to great lengths to establish a shared context, for instance. You could speak words
that were meaningful to you and someone else could understand and offer a meaningful response, and this made you
feel uncomfortable at first but you really loved it. Your experience of college was maybe a bit different than you
expected - certainly nothing like the movies you watched as a kid. You got really into a weird hobby, maybe, and
didn&#39;t end up going to too many parties.&lt;/p&gt;

&lt;p&gt;Relationships and intimacy have always been a bit fraught for you. You frequently find yourself trying to figure
out what you&#39;re supposed to be feeling, and you work hard to show your partner the person you want to be. Maybe
when you first moved in with someone you had a bit of a freakout that has made you nervous to think about ever
since, or maybe meeting a significant other&#39;s family has been so anxiety-inducing as to prove impossible. Maybe you
have a string of failed relationships behind you, each of them starting out so promisingly and then imploding
catastrophically and confusingly once the initial honeymoon phase was over and it was time to really get to know,
get to grow with another person. You don&#39;t know how to do that, and every time you try you seem to make someone
upset.&lt;/p&gt;

&lt;p&gt;You&#39;re a software engineer at least partly because computers are much easier to communicate with than people. When
a computer doesn&#39;t understand you it&#39;s because you&#39;ve done something wrong. When a computer says something
incorrect it&#39;s also because you&#39;ve done something wrong. You can step through and rigorously debug the problem,
identifying and isolating the mistake. The more you played around with tech the more you liked it - and when you
discovered programming it blew your mind, because you &lt;em&gt;intuitively&lt;/em&gt; understood the relational nature of computation
and found yourself suddenly gifted with superpowers.&lt;/p&gt;

&lt;p&gt;When you entered the working world you were REALLY confused, though. You were able to complete a week&#39;s worth of
assignments in an afternoon. It was really obvious to you who was working intelligently and who was not, and you
had to learn, perhaps painfully, that sharing that kind of feedback isn&#39;t always constructive. Maybe one day you
got some criticism about something you did and it really hurt in ways you didn&#39;t expect. Maybe you found yourself
reacting defensively, and the next thing you know you&#39;re in a meeting with HR over what to you was clearly all a
big misunderstanding, but nobody is smiling. Or maybe instead someone recognized that you were having a tough time,
and stepped in to defuse the situation.&lt;/p&gt;

&lt;p&gt;Regardless, your agency was compromised. You found yourself resenting the arbitrary and unwritten rules of the
professional world: you have to be at your desk and looking busy even when you&#39;re just thinking; let people say
things that are not true if correcting them publicly will embarrass someone; people will ignore your advice and
then something will break because of it and it&#39;s very important not to get too upset.&lt;/p&gt;

&lt;p&gt;You&#39;re used to modeling the world in a specific way, but school didn&#39;t actually prepare you in any way for the
complex web of social dynamics that, just like in kindergarten, everyone else seems to grok. It&#39;s really
frustrating, maybe you&#39;ve been fired once or twice, maybe you&#39;ve left a few jobs out of embarrassment. You
eventually figured it out -- or maybe you didn&#39;t! The thing is, programming has never been the hard part of work,
for you. The people have been the much more interesting and challenging domain to master.&lt;/p&gt;

&lt;p&gt;Today, you&#39;re an engineer who really deeply understands and enjoys your stack. You have workflows that you can do
in your sleep, you know intuitively what the current state of your system is and you have a powerful intuition for
downstream problems. Maybe you&#39;ve figured out how to play the social game, in which case you&#39;re probably gregarious
and supportive and kind to your coworkers. Maybe you haven&#39;t, in which case you&#39;re super productive but don&#39;t
attend a lot of office functions. Either way is fine as long as you&#39;ve found a place where you feel comfortable!&lt;/p&gt;

&lt;p&gt;At the same time, you&#39;ve had a sense for years that something isn&#39;t quite... right. You&#39;ve probably learned to
ignore it. Sure things get super stressful sometimes. Sure you find yourself really unreasonably tired, especially
after meeting-heavy days. Sure when you get downtime sometimes all you can do is just sit there doing nothing --
maybe you feel bad about that? Maybe you use an abnormally high number of sick days purely for mental health
reasons. Maybe you&#39;ve got a substance abuse issue. You&#39;re probably struggling with codependency, anxiety and/or
depression. You think of yourself as just &quot;a depressed person&quot;, but try not to let it define you. You feel
constantly on the edge of burnout, but no matter how many vacations you take it doesn&#39;t seem to get any better.&lt;/p&gt;

&lt;p&gt;Maybe you are sensitive to certain kinds of sensory stimuli - like, you can&#39;t wear synthetic fabric because it just
feels gross. Maybe you can&#39;t eat peaches because the peach fuzz on the roof of your mouth is unbearable. Maybe you
can&#39;t go into a well-lit room without sunglasses, maybe every sound you hear comes in at the same volume. Maybe a
bunch of these kinds of things or more bother you, and maybe you&#39;ve forgotten because you&#39;ve just pushed through
them your whole life. Maybe you&#39;ve accepted that you&#39;re just kind of weird and different.&lt;/p&gt;

&lt;p&gt;But maybe -- and this may be the best news you&#39;ve ever received -- you&#39;re autistic.&lt;/p&gt;

&lt;p&gt;Many (if not most) autistic people would tell you similar stories about their personal histories, especially those
who have gone undiagnosed into adulthood. If these descriptions resonate with you -- maybe not exactly, but maybe
you can see the shape I&#39;m trying to paint -- then it&#39;s worth considering the possibility that you may be
&lt;strong&gt;neurodivergent&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Autism is one form of neurodiversity, and what I&#39;m describing above is a very autistic experience - but there&#39;s a
ton of overlap with ADHD, Dyslexia and other neurodivergent conditions. We&#39;ve learned so much about neurodiversity
in the past ten years, and even if you consider yourself fairly well-informed about autism it&#39;s worth updating your
understanding.&lt;/p&gt;

&lt;p&gt;Your first step, quite reasonably, might be to go take a look at the
&lt;a href=&quot;https://www.cdc.gov/ncbddd/autism/hcp-dsm.html&quot;&gt;official diagnostic criteria&lt;/a&gt; for autism. But autistic or not, if
you do that you will in all likelihood not see yourself reflected -- those criteria are purely behavioral, while
the experience of being autistic is purely subjective. Non-autistic (or &quot;allistic&quot;) experts on autism document
observable behavior but don&#39;t actually understand what they&#39;re seeing. I tried to
&lt;a href=&quot;https://theaspergian.com/2019/04/17/humanizing-the-dsm-diagnosis-for-autism/&quot;&gt;reframe those criteria&lt;/a&gt; in a way
that makes them feel human and relatable rather than inhuman and other.&lt;/p&gt;

&lt;p&gt;I&#39;m writing this blog post because my own self-diagnosis at age 34 and formal diagnosis this past fall at age 36
changed my life, and I &lt;em&gt;know for a fact&lt;/em&gt; that there going to be some autistic people reading this who don&#39;t know
that they&#39;re autistic.&lt;/p&gt;

&lt;p&gt;If you&#39;re interested in learning more, I highly recommend perusing
&lt;a href=&quot;https://reddit.com/r/autismTranslated&quot;&gt;AutismTranslated&lt;/a&gt;, a subreddit to make autistic traits more recognizable
and relatable to those of us who subjectively experience them. I&#39;m personally most active
&lt;a href=&quot;https://twitter.com/mykola&quot;&gt;on twitter&lt;/a&gt; these days and you can always find me there, along with hundreds of other
folks using the &lt;a href=&quot;https://twitter.com/search?q=%23actuallyAutistic&quot;&gt;#actuallyAutistic&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/search?q=%23allAutistics&quot;&gt;#allAutistics&lt;/a&gt; and
&lt;a href=&quot;https://twitter.com/search?q=%23askingAutistics&quot;&gt;#askingAutistics&lt;/a&gt; hashtags. Autism is a condition particularly
vulnerable to intersectional dynamics, which means that resources like
&lt;a href=&quot;https://twitter.com/search?q=%23autisticWhileBlack&quot;&gt;#autisticWhileBlack&lt;/a&gt; and
&lt;a href=&quot;https://reddit.com/r/aspergirls&quot;&gt;/r/aspergirls&lt;/a&gt; are crucial to folks in those demographics.&lt;/p&gt;

&lt;p&gt;Finally, as preparation for this blog post I asked diagnosed neurodivergent tech workers on twitter
&lt;a href=&quot;https://twitter.com/mykola/status/1205927773644214273&quot;&gt;to volunteer if they&#39;re willing to answer questions&lt;/a&gt;, and
as of this writing over a hundred people have answered. So if you want to know more about what this is like --
whether you want to better understand yourself or you have other people in your life you want to learn how to
better support -- please check out that thread and the huge number of responses, and don&#39;t be afraid to reach out
to people!&lt;/p&gt;

&lt;p&gt;If you&#39;re autistic and undiagnosed you&#39;re living life on hard mode and you don&#39;t even know it. Learning who you
are, learning what your authentic needs are and learning how to heal from years of maladaptive coping mechanisms
can and will change your life in a million ways. You can move from barely getting by to thriving as your most
authentic self.&lt;/p&gt;

&lt;p&gt;I see you and I believe in you, and there are a lot of us out here ready to help. &amp;lt;3&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Jan 2020 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2020/01/06/is-this-you/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2020/01/06/is-this-you/</guid>
        
        
        <category>autism</category>
        
        <category>culture</category>
        
        <category>diversity</category>
        
        <category>mental-health</category>
        
        <category>neurodiversity</category>
        
      </item>
    
      <item>
        <title>iOS Learning Group</title>
        <description>&lt;p&gt;Regular readers of our blog might be familiar with &lt;a href=&quot;https://www.cultureamp.com&quot;&gt;Culture Amp&lt;/a&gt;, a tool Artsy uses to
collect anonymous feedback and take action on cultural issues (we most recently discussed the tool
&lt;a href=&quot;https://artsy.github.io/blog/2019/04/19/having-a-coffee-with-every-engineer/&quot;&gt;in this blog post&lt;/a&gt;). At a
company-wide level, Culture Amp has helped guide everything from Artsy&#39;s evolving culture, to our physical work
spaces, to our support for remote work. At an engineering-team level, we&#39;ve also been using Culture Amp to guide
our choices in technology, documentation, and training.&lt;/p&gt;

&lt;p&gt;In this blog post I&#39;ll be detailing a recent learning course we ran to share knowledge about how Artsy builds iOS
software for our entire engineering team.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;Let&#39;s start at the beginning. Earlier this year, Artsy Engineering ran a survey through Culture Amp to get answers
to the following questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What is our team&#39;s opinion on our current technology choices?&lt;/li&gt;
&lt;li&gt;What is our team&#39;s familiarity with or preparedness for our current technology?&lt;/li&gt;
&lt;li&gt;Where are the areas of strength and opportunities for both learning and teaching?&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;There are a lot of things we learned from this survey, and among them was a desire for engineers to better
understand how to build iOS software at Artsy. With a nudge (and support!) from our &lt;em&gt;Peer Learning Working Group&lt;/em&gt;,
I set out to create a learning plan. I wasn&#39;t starting from scratch – we already ran a few learning groups on
topics ranging from Scala fundamentals to React Hooks. We used the lessons learned from &lt;em&gt;those&lt;/em&gt; experiences to
define and deliver a learning plan.&lt;/p&gt;

&lt;p&gt;I started by booking five sessions, spread out by a week. I picked a time that was a good fit for as many engineers
as possible, and I scheduled them a month ahead to give people a chance to move their schedules around. Scheduling
them up front was important, to give learners a sense of what to expect; previous learning groups had suffered from
inconsistent schedules, which led to intermittent attendance. I also asked each Tech Lead to make sure at least one
engineer from their team attended.&lt;/p&gt;

&lt;p&gt;Next was the actual curriculum. In the spirit of &quot;proudly discovered elsewhere&quot;, we actually looked at using
existing learning resources that someone else had already developed. However, since
&lt;a href=&quot;https://artsy.github.io/series/react-native-at-artsy/&quot;&gt;our iOS stack is a bit unique&lt;/a&gt; and I was keen to keep
honing my own skills as a technical educator, we decided to make our own. With the help of our Peer Learning
Working Group, we set learning objectives for the five sessions. Here was the original plan:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Week 1&lt;/strong&gt;: This week, we will cover how iOS software is developed, QA&#39;d, and deployed. By the end of this
session, all participants should be able to pull the latest code from &lt;a href=&quot;https://github.com/artsy/eigen&quot;&gt;Eigen&lt;/a&gt;
(our native iOS repo) and &lt;a href=&quot;https://github.com/artsy/emission&quot;&gt;Emission&lt;/a&gt; (our React Native repo), see their work
in an iOS simulator, and link the two projects together.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Week 2&lt;/strong&gt;: This week, we will cover what makes React Native distinct from React on the web, as well as how Artsy
leverages shared infrastructure (such as our design-system, &lt;a href=&quot;https://github.com/artsy/palette&quot;&gt;Palette&lt;/a&gt;) to make
it easier for engineers to work in either one.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Week 3&lt;/strong&gt;: This week, we will cover how to create a new view controller. View controllers are the main unit of
composition for native iOS apps, and we integrate our &quot;Scene&quot; React components &lt;em&gt;as&lt;/em&gt; view controllers. This
includes routing between view controller, from both native Objective-C and React Native code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Week 4&lt;/strong&gt;: This week, we will create our own React component to fit within the new view controller from Week 3.
This will be a Relay container, fetching data from our GraphQL API,
&lt;a href=&quot;https://github.com/artsy/metaphysics&quot;&gt;Metaphysics&lt;/a&gt;. We will cover how to fetch data, how to &lt;em&gt;re&lt;/em&gt;-fetch data, as
well as how Eigen and Emission integrate together to provide client-side API response caches (both Relay and
others).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Week 5&lt;/strong&gt;: This is the final week. Participants are asked to bring an iOS bug from their product team&#39;s backlog
that they would like to fix. Pairing is encouraged.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Things mostly went to plan. I made sure to provide the learning resources at least a day or two ahead of each
session; this let me respond to feedback from the previous week, and also gave learners a chance to review
materials ahead of time.&lt;/p&gt;

&lt;p&gt;Every session was recorded for anyone who missed it. We had a shared Slack channel set up for questions, so
engineers could help each other. I also made sure to provide weekly office hours: this was space for people who
missed sessions to catch up, or to just dig into concepts in more detail. I&#39;ll return to the topic of office hours
later in this post.&lt;/p&gt;

&lt;p&gt;Around the time of the learning group, I was reading
&lt;em&gt;&lt;a href=&quot;https://www.amazon.com/Make-Stick-Science-Successful-Learning/dp/0674729013/ref=sr_1_1?keywords=making+it+stick&amp;amp;qid=1575314498&amp;amp;sr=8-1&quot;&gt;Make It Stick: The Science of Successful Learning&lt;/a&gt;&lt;/em&gt;.
The book is written for people who want to improve their own learning skills, but it was &lt;em&gt;very&lt;/em&gt; helpful to read as
I was developing and delivering this curriculum. Here are a few lessons that I learned from the book that were
helpful while teaching engineers at Artsy about how we build iOS software:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If someone tries to do something themselves &lt;em&gt;before&lt;/em&gt; being told how to do it, the attempt will strengthen their
understanding of the underlying concept. To put this into practice, I would often ask learners questions that I
didn&#39;t expect they could answer yet, and the resulting discussion was always worthwhile.&lt;/li&gt;
&lt;li&gt;Interleaving different concepts together helps learners form connections between those concepts. This was
especially important, since a big motivator for using React Native at Artsy was to share skills between web and
iOS codebases. As an example of putting this into practice, I interleaved a discussion of
&lt;a href=&quot;https://relay.dev&quot;&gt;Relay&lt;/a&gt; into our curriculum; I hoped to show learners both a new perspective of Relay, as well
as show them how familiar writing React Native code was to writing React web code.&lt;/li&gt;
&lt;li&gt;Allowing for some forgetting to take place before reviewing concepts will
&lt;a href=&quot;https://njcideas.wordpress.com/2017/09/22/the-cognitive-science-of-studying-massed-practice-vs-spaced-practice/&quot;&gt;help strengthen learner&#39;s understanding&lt;/a&gt;.
To put this into practice, I would return to topics from a few weeks ago to cement their understanding with
learners.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I had to push through some discomfort as an educator, too. Each session ended with homework questions, which we
reviewed at the top of the next session. I would ask each question and then just sit there, in awkward silence,
while everyone looked around for someone to answer. Eventually, inevitably, someone would.&lt;/p&gt;

&lt;p&gt;All of the learning materials
&lt;a href=&quot;https://github.com/artsy/README/tree/master/resources/mobile/learning-group&quot;&gt;are open source&lt;/a&gt;. While the materials
are mostly specific to Artsy, they may be of help to others. And regardless, we want to adhere to our
&lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#open-source-by-default&quot;&gt;Open Source by Default&lt;/a&gt;
principle.&lt;/p&gt;

&lt;p&gt;We learned quite a lot from delivering this curriculum – lessons we can apply to our next learning group:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learners appreciated the weekly schedule set upfront, affirming what we learned from previous learning groups.&lt;/li&gt;
&lt;li&gt;Learners appreciated having access to the materials ahead of time.&lt;/li&gt;
&lt;li&gt;Learners appreciated having the sessions recorded, to be reviewed later (or watched, in case they missed the
session).&lt;/li&gt;
&lt;li&gt;Learners appreciated having office hours available; even though the office hours weren&#39;t well-attended, learners
appreciated having access to them if they needed to.&lt;/li&gt;
&lt;li&gt;Learners even appreciated the awkward silences while I waited for an answer to my questions. (One survey
respondent described it as &quot;like pulling teeth, but helpful.&quot;)&lt;/li&gt;
&lt;li&gt;Learners are varied in how they want to learn. Some liked going through things together. Some thought we went too
slow. Still others thought we should expect learners to do more work ahead of class.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This last point is worth expanding upon. While everyone learns differently, there is a distinction between what
&lt;em&gt;feels&lt;/em&gt; effective and what &lt;em&gt;is&lt;/em&gt; effective. I tried to structure the course so that it was accessible to as many
types of learners as possible: some like to review materials ahead of time, some like to have them on hand during
the session, etc. Some are in-person, others are remote, still others are reviewing the recording. I could write
another blog post about learning styles, but for now it suffices to say that I aimed for &lt;em&gt;inclusion&lt;/em&gt; of as many
different learners as possible while also recognizing that I can&#39;t make everyone happy.&lt;/p&gt;

&lt;p&gt;As I enter a new chapter of my own career, leading Artsy&#39;s new Mobile Experience team, it was helpful to return to
some fundamentals; to get familiar with technology choices that we made years ago
(&lt;a href=&quot;https://ashfurrow.com/blog/swift-vs-react-native-feels/&quot;&gt;choices which I originally resisted&lt;/a&gt;); and to learn from
learners&#39; perspectives as beginners. The future of iOS software at Artsy is very bright, and now every product team
is more prepared than ever to deliver user experiences that are of a quality worthy of art.&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Dec 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/12/03/ios-learning-group/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/12/03/ios-learning-group/</guid>
        
        
        <category>culture</category>
        
        <category>ios</category>
        
        <category>learning</category>
        
      </item>
    
      <item>
        <title>Diagnosing our Radiation Problems</title>
        <description>&lt;p&gt;Email! Electronic mail! What a concept! Like many companies, Artsy has built products on top of email, but this is
a decision that (like many companies) Artsy periodically regrets. But overall, our email systems work well!&lt;/p&gt;

&lt;p&gt;But what about when it doesn&#39;t? Well that&#39;s what today&#39;s blog post is about: what happens when things break and you
don&#39;t know why?&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;I have learned a lot
&lt;a href=&quot;https://artsy.github.io/blog/2018/05/30/my-first-week-on-call/&quot;&gt;since my first on-call shift&lt;/a&gt;, but going on call
still gives me a little stage fright. As I start a shift, I&#39;m on the look-out for things that might break, and soon
after starting a recent on-call shift, &quot;breaking&quot; is exactly what things did.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-11-07-diagnosing-our-radiation-problems/alert.png&quot; alt=&quot;Screenshot of Slack alert&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We got an automated alert on Slack that one of our email services, code-named &quot;Radiation&quot;, had really high response
times. We &lt;em&gt;then&lt;/em&gt; received an alert that too many requests to Radiation were failing completely. Yikes. The next
twenty two hours was a deep dive into Heroku, New Relic, Rails, and PostgreSQL, all to isolate the problem and
produce a solution.&lt;/p&gt;

&lt;p&gt;The nice thing about email, as a protocol, is that it&#39;s based on a store-and-forward concept. That means that if a
message delivery fails, email servers will try again later (typically with an exponential backoff). SendGrid, our
email processor, has built their REST API around this same store-and-forward concept. While the Radiation server
was unresponsive, SendGrid wouldn&#39;t receive successful HTTP responses from the webhook deliveries, so it would
attempt to re-deliver the failing emails later. Email deliveries would be delayed, but the emails themselves would
not be dropped. We wasted no time addressing the problem, but we were also confident that once we fixed the issue,
the data would be okay.&lt;/p&gt;

&lt;p&gt;After the alert, Ashkan (Radiation&#39;s point-person) and I communicated with our colleagues (engineers and affected
non-engineers) about the problem. With the help of Chung-Yi, we began investigating the immediate problem (with a
focus on &lt;em&gt;mitigating&lt;/em&gt; it, rather than necessarily &lt;em&gt;fixing&lt;/em&gt; it). Oh, we tried it all: spinning up more Heroku Dynos
to handle requests, increasing concurrency on the individual Dynos, restarting Redis and PostgreSQL stores. Each
time, things would work briefly before the Radiation API would begin timing out again. More accurately, the
requests sent to Radiation were taking longer than the Heroku router was giving them (30 seconds) before the router
gave up and timed out the request. We started examining the Radiation code and database (keeping our &lt;em&gt;ion the
prize&lt;/em&gt;: mitigation).&lt;/p&gt;

&lt;p&gt;Ashkan investigated slow database queries. We added new PostgreSQL indexes to speed up queries, and restructured
others to avoid expensive joins. Unfortunately, all this accomplished was extending the time after a Dyno reboot
that things would work (before beginning to timeout again). Because
&lt;a href=&quot;https://artsy.github.io/blog/2017/05/30/database-encryption/&quot;&gt;Artsy stores emails as encrypted-at-rest&lt;/a&gt;, it was
difficult to pinpoint which exact message could be causing the timeouts. And Radiation itself didn&#39;t have much in
the way of logging, which would normally help us debug the problem.&lt;/p&gt;

&lt;p&gt;It was frustrating to try to fix something but only manage to improve how long it took to break again. We had
enhanced Radiation&#39;s performance to the point where it was taking 10 minutes after a Dyno reboot to begin timing
out again, up from 30 seconds at the beginning of the incident. Despite an afternoon and evening spent trying to
fix the problem, we were stuck. We decided that the best course of action was a good night&#39;s sleep; we would ask
for help in the morning.&lt;/p&gt;

&lt;p&gt;The next day, Ashkan and I got &lt;em&gt;up and atom&lt;/em&gt; to address the problem. We brought my on-call partner Devon up to
speed, detailing the incident symptoms and what we had tried so far. While Devon and Ashkan worked on additional
logging and new timeout strategies, I took another approach.&lt;/p&gt;

&lt;p&gt;Artsy has been moving to &lt;a href=&quot;https://www.datadoghq.com&quot;&gt;DataDog&lt;/a&gt; for server performance monitoring, but Radiation was
still using &lt;a href=&quot;https://newrelic.com&quot;&gt;New Relic&lt;/a&gt;. My background is in iOS app development and I had never really dug
into New Relic before, but I &lt;em&gt;am&lt;/em&gt; very experienced at profiling iOS applications, and the Ruby and Objective-C
runtimes have more in common than they have have differences. I used New Relic to profile a production Radiation
Dyno for five minutes and, to our collective surprise, we found that more than 90% of CPU time was being spent in
&lt;a href=&quot;https://github.com/thoughtbot/griddler/blob/ff2ad16949bf5190f93df1a3e83eb0192f136c6d/app/controllers/griddler/emails_controller.rb#L4-L10&quot;&gt;an innocuous function of a dependency&lt;/a&gt;,
the open source library &lt;a href=&quot;https://github.com/thoughtbot/griddler&quot;&gt;Griddler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Artsy uses Griddler to parse and sanitize emails that we receive from &lt;a href=&quot;https://sendgrid.com&quot;&gt;SendGrid&lt;/a&gt;. Griddler
contained the problematic code, which was responsible for parsing email responses from threaded replies. So if an
email body received by Radiation looks like this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;&#39;&gt;&lt;span class=&#39;line&#39;&gt;This is the most recent reply in this email conversation.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;On September 28th, 2019, Someone Else Wrote:
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;[The rest of the email thread]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Then Griddler parses out the string &quot;This is the most recent reply in this email conversation.&quot; for Radiation to
process. This is really important because some of the threads in Radiation are &lt;em&gt;thousands&lt;/em&gt; of emails long. In fact,
I learned that Radiation has Artsy&#39;s largest production database.&lt;/p&gt;

&lt;p&gt;Griddler does this processing via regular expressions. Ashkan had the insight to look for existing issues from
other Griddler users who ran into similar problems, and to our delight,
&lt;a href=&quot;https://github.com/thoughtbot/griddler/pull/310&quot;&gt;we found a pull request&lt;/a&gt; that appeared to address the &lt;em&gt;exact&lt;/em&gt;
issue that we were having.&lt;/p&gt;

&lt;p&gt;It turns out that emails with large amounts of repeated newline characters would totally stall Griddler&#39;s regex.
Heroku&#39;s router would timeout any request after 30 seconds, but would leave the Ruby code churning on that regex.
That would leave the Rails server unable to respond to subsequent HTTP requests, causing more timeouts. And because
of email&#39;s store-and-forward nature, SendGrid would begin sending more problematic emails pretty quickly after any
Radiation reboot. A small change to add a regex group was all that was necessary to fix the issue.&lt;/p&gt;

&lt;p&gt;Phew! We forked Griddler to Artsy&#39;s GitHub organization and applied the change from the pull request. We were
concerned about security implications of using a different regex, but my
&lt;a href=&quot;https://artsy.github.io/blog/2018/02/06/apogee-technical-retrospective/&quot;&gt;previous work in regular expressions&lt;/a&gt;
helped me vet the change. We pointed Radiation&#39;s Gemfile to Artsy&#39;s fork and deployed the change.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-11-07-diagnosing-our-radiation-problems/heroku.png&quot; alt=&quot;Screenshot of Heroku Dashboard, indicating a drop in load&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, we waited. Would the system start timing out again? It took a half hour for any of us to breathe a sigh of
relief. But things appeared to be stable: response times were normal and Dyno load dropped precipitously. Our
&lt;em&gt;Curie&lt;/em&gt; worked. (Okay, enough radiation puns.)&lt;/p&gt;

&lt;p&gt;During our weekly incident review, Devon guided the rest of our team through our incident response and what we
learned. Radiation is now in a much better state, so that future problems will be easier to track down. We
responded to the Griddler pull request, encouraging the maintainers to merge the commit so other teams would avoid
this problem. The incident review meeting explored a number of options to mitigate future issues, including
migrating Radiation to our Kubernetes cluster, and Sam (our VP of Engineering) suggested writing this post. So here
we are.&lt;/p&gt;

&lt;p&gt;Ashkan also followed up with peer feedback for Devon, Chung-Yi, and myself. In part, it read:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It&#39;s rare and odd to say dealing with incident was fun, but with your help it actually was productive and fun.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Which, honestly? One of my proudest accomplishments at Artsy.&lt;/p&gt;

&lt;p&gt;In the end, we solved the problem and restored access to our email systems in under 24 hours. We kept our cool, we
communicated effectively with our non-engineering colleagues, and we learned a lot. What more could you want from a
Radiation incident?&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Nov 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/11/14/diagnosing-our-radiation-problems/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/11/14/diagnosing-our-radiation-problems/</guid>
        
        
        <category>best practices</category>
        
        <category>culture</category>
        
        <category>databases</category>
        
        <category>email</category>
        
        <category>encryption</category>
        
        <category>people</category>
        
        <category>team</category>
        
      </item>
    
      <item>
        <title>CSS is Hard and Other Things I Learned Working on the 2019 Artsy Vanguard</title>
        <description>&lt;p&gt;The Artsy Vanguard is an annual editorial series where we feature up-and-coming, notable, and praiseworthy artists
and their contributions to the art world. 2019 was the second year that Artsy published this special feature,
although we have been publishing custom editorial segments multiple times per year since 2015.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In this post, I’ll discuss my recent experience working on the
&lt;a href=&quot;https://www.artsy.net/series/artsy-vanguard-2019&quot;&gt;2019 Artsy Vanguard&lt;/a&gt; editorial feature. I’ll start by
introducing the technology stack behind our articles and then discuss what I learned from both a team/organization
and technical perspective.&lt;/em&gt;&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;An.Introduction.to.Artsy.Editorial&quot;&gt;&lt;/a&gt;
&lt;h1&gt;An Introduction to Artsy Editorial&lt;/h1&gt;

&lt;p&gt;Typically our editorial works fall under one of five or so categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/article/artsy-editorial-hip-hop-legend-q-tip-shares-diverse-art-collection&quot;&gt;Standard articles&lt;/a&gt;,
which have the same layout, but whose content could broadly relate to any of the primary categories Artsy’s
editors tend to cover.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/news&quot;&gt;News content&lt;/a&gt; consisting of an infinitely scrolling feed of the latest newsworthy
events in the art world.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/series/artsy-editors-future-art&quot;&gt;Sponsored&lt;/a&gt; and non-sponsored editorial features that may
be a &lt;a href=&quot;https://www.artsy.net/article/artsy-editorial-rise-fall-internet-art-communities&quot;&gt;standalone&lt;/a&gt; publication
or a &lt;a href=&quot;https://www.artsy.net/series/how-to-be-an-artist&quot;&gt;part of a larger related series&lt;/a&gt; of features.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/series/artsy-editors-future-art-carrie-mae-weems&quot;&gt;Video editorial series&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For more information on Artsy&#39;s editorals, check out this
&lt;a href=&quot;https://artsy.github.io/blog/2019/03/05/custom-editorial-features/&quot;&gt;blog post&lt;/a&gt; written by Senior Software Engineer
&lt;a href=&quot;https://artsy.github.io/author/eve/&quot;&gt;Eve Essex&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To maintain consistency and standardization in terms of user experience design, layout, and page interactivity
options of the editorials that we offer, we use an internal content management service.
&lt;a href=&quot;http://pages.artsy.net/rs/609-FDY-207/images/Gallery%20Guide%20to%20Artsy%20Writer.pdf&quot;&gt;Artsy Writer&lt;/a&gt; enables our
editorial team to publish content to the main Artsy website without having to collaborate with our engineering
organization. (Yay software!) Given that it is designed to handle the layout of the different types of editorial
features that we offer in a uniform way, highly customized editorials like the
&lt;a href=&quot;https://www.artsy.net/series/artsy-vanguard-2019&quot;&gt;2019 Artsy Vanguard&lt;/a&gt; or
&lt;a href=&quot;https://www.artsy.net/article/artsy-editorial-people-defined-visual-culture-2018&quot;&gt;2018 Year in Visual Culture&lt;/a&gt;
require quite a bit of planning and cross-team collaboration, as well as customized software development to support
the features that deviate from our current layouts.&lt;/p&gt;

&lt;p&gt;Creating the 2019 Artsy Vanguard was truly a company-wide effort! I’m pretty new to Artsy, having only joined last
summer, so some of the work I did on Artsy Vanguard was around understanding our existing framework for routing
article content from &lt;a href=&quot;https://github.com/artsy/positron&quot;&gt;Positron&lt;/a&gt;, Artsy’s editorial API, to
&lt;a href=&quot;https://github.com/artsy/force&quot;&gt;Force&lt;/a&gt;, the code that powers our &lt;a href=&quot;https://www.artsy.net/&quot;&gt;production site&lt;/a&gt;. On the
Engineering side, I collaborated with the project’s technical lead Eve, a senior engineer with years of experience
working in these code repositories. There were several key stakeholders, including, but certainly not limited to, a
lead project manager, lead visuals editor, designers, content writers, as well as the
&lt;a href=&quot;http://wax-studios.com/&quot;&gt;external design firm&lt;/a&gt; that delivered the initial design concept and video content used
for the series.&lt;/p&gt;

&lt;a name=&quot;Learnings&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Learnings&lt;/h1&gt;

&lt;p&gt;Vanguard was an exciting project, but as with any software endeavor, it came with its own share of learnings and
difficulties.&lt;/p&gt;

&lt;a name=&quot;L.strong.1..Splitting.time.between.two.teams.is.hard..strong.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;&lt;strong&gt;1. Splitting time between two teams is hard&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;My team, Grow, is responsible for the development and maintenance of Engineering software related to increasing
user engagement with Artsy’s products. Some of our most notable projects include
&lt;a href=&quot;http://files.artsy.net/documents/artsy-bmw-city-guide.pdf&quot;&gt;City Guide&lt;/a&gt;, an iOS feature built in collaboration with
BMW, detailing art shows and partner fairs in several major international cities,
&lt;a href=&quot;https://www.artsy.net/collections&quot;&gt;collections&lt;/a&gt; and &lt;a href=&quot;https://www.artsy.net/collect&quot;&gt;collection hubs&lt;/a&gt; offering
prospective art buyers more comprehensive ways to explore works and artists of interest, and of course the
&lt;a href=&quot;https://www.artsy.net/articles&quot;&gt;Artsy Editorial&lt;/a&gt;, home to all of our editorial content. We typically work in
two-week sprint cycles, aiming to produce a planned set of deliverables during that time, and collaborating between
other developers on the team, a designer, product manager, data scientist, and technical team leader.&lt;/p&gt;

&lt;p&gt;Given that this project involved collaboration from several teams and stakeholders outside of Engineering, we
decided to manage it as a project separate from the rest of the deliverables the Grow team did during the sprints.
This meant I had to split my time between team meetings for Vanguard work and team meetings for Grow. I would keep
the Grow team up to date on the Vanguard work we were doing but it felt like I was in a liminal space between the
two teams. In addition to attending weekly cross-team Vanguard standups, I attended daily Vanguard engineering
standups to align with Eve on the work that we needed to produce. In the interest of protecting my time and not
attending 3 different team standups in a single day, I posted updates to the Grow team via Slack to keep everyone
updated on the progress of our work. Despite our best intentions, it’s difficult to work on two teams at once and
feel fully committed to either.&lt;/p&gt;

&lt;a name=&quot;L.strong.2..Estimation.is.Hard..strong.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;&lt;strong&gt;2. Estimation is Hard&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Due to the way this project was organized, we allotted 1.5 sprint cycles to complete the engineering work. However,
this time allotment was decided on before we had received the completed design specifications from the design firm.
This posed a set of interesting challenges in the sense that the Grow team committed to delivering a feature by a
predetermined deadline without having all of the information needed to understand the full scope of the project. As
with any engineering project, there are often unknown unknowns, those pesky little gotchas that surface as work
commences on a project, but that cannot always be predicted. This presented an interesting lesson in learning how
to estimate the amount of work required to deliver a minimum viable product and reduce the scope to meet certain
deadlines.&lt;/p&gt;

&lt;p&gt;Given the limited amount of time to deliver some fairly complex designs, it was clear that we would have to reduce
some of the technical complexity in order to meet the deadline. This is pretty standard in agile development, but
this was the first time that I was in a position of having to deliver this &quot;bad news&quot;. It is difficult to tell team
members that a feature is not going to be able to shipped as initially expected, but these are the sort of
concessions that have to be made sometimes in order to deliver a viable product. Fortunately, I was fully supported
by my managers, tech lead, and colleagues in having to deliver the news that we were not going to be able to
deliver a feature identical to the one given to us by the design firm. From this experience, I learned that making
accurate estimations about how much work a project actually involves is hard, relying on agile as a rule makes it
easier, communicating early and often when there’s any uncertainty around delivering a feature by deadline is
critical, and working with team members that value candor, flexibility, communication, and iteration is empowering.&lt;/p&gt;

&lt;a name=&quot;L.strong.3..CSS.is.Hard..strong.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;&lt;strong&gt;3. CSS is Hard&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;I get excited about implementing visually delightful designs, and Artsy Vanguard’s 2019 designs did not
disappoint. There were two key components that involved interesting CSS approaches:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 1. Mixed Blending Mode to handle the inversion of the side frame text when it appeared over different
backgrounds&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 2. Creating the visual effect of &lt;code&gt;.mp4&lt;/code&gt; videos nested inside of SVG shapes&lt;/strong&gt;&lt;/p&gt;

&lt;a name=&quot;Mixed.Blend.Mode&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Mixed Blend Mode&lt;/h2&gt;

&lt;p&gt;Mixed blend mode is a CSS property that handles blending the colors of overlapping elements. In this case, we
wanted to create the effect of inverting the colors of the static side frame text when they overlapped with either
the white background, the black SVG shapes, or the SVG videos.&lt;/p&gt;

&lt;p&gt;This inverted color effect also needed to be applied to the text of the editorial content when it overlapped with
the black SVG background, when it extended past the SVG background onto a white background, and when the current
article was in an expanded state.&lt;/p&gt;

&lt;p&gt;I found &lt;a href=&quot;https://css-tricks.com/almanac/properties/m/mix-blend-mode/&quot;&gt;CSS-Tricks&lt;/a&gt; and the
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode&quot;&gt;Mozilla Developer’s Network&lt;/a&gt; documentation super
helpful in understanding the various blending properties. Since the designs for Vanguard involved a fairly simple
blending mode of inverting black and white, the mix-blend-mode difference property was how we created the effect of
inverting the black text against the various backgrounds it overlapped with. The blend mode property works by
calculating the rgb color value of the text, and the background-color of the underlying element, and using that
value to determine what colors to render. This inverse calculation also creates the “solarized” effect when the
black side frame text renders over the video-in-SVG.&lt;/p&gt;

&lt;p&gt;In the original design specifications, the static text framing the page was intended to render black over a white
background, white over a black background, and white over the video-in-SVG. In order to achieve that effect, we
would have needed to apply the &lt;code&gt;difference&lt;/code&gt; mix-blend-mode property when the text overlapped with a black or white
background, and color-dodge when it overlapped with a video-in-SVG background. However, given it is not possible to
assign multiple blending modes to a fixed element we had to deviate from the original design specifications.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-11-04-css-is-hard-and-vanguard-2019-learnings/mbb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ts&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FrameText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Sans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;fixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;mix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mode&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;




&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ts&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InvertedText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;mix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isMobile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;normal&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;difference&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)};&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;will&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;a name=&quot;Video-in-SVG&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Video-in-SVG&lt;/h2&gt;

&lt;p&gt;In the article series you might have noticed that each of the article subsections begins with a different polygonal
shape, which serves as a visual indicator to readers that they are viewing an article either the &lt;em&gt;Emerging&lt;/em&gt;, &lt;em&gt;Newly
Established&lt;/em&gt;, or &lt;em&gt;Getting Their Due&lt;/em&gt; sections. You might have also noticed that each article subseries starts with
a video clip nested inside of one of these corresponding polygon shapes. These are what I refer to as video-in-SVG.
Nothing too in-depth here, but I’ll offer up the initial approach to how this effect was implemented as well as the
final solution.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-11-04-css-is-hard-and-vanguard-2019-learnings/getting-their-due.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/2019-11-04-css-is-hard-and-vanguard-2019-learnings/getting-their-due-img.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Initially, I attempted to implement this using the
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject&quot;&gt;Foreign Object&lt;/a&gt; SVG element and adding a
&lt;a href=&quot;https://css-tricks.com/almanac/properties/c/clip-path/&quot;&gt;Clip Path&lt;/a&gt; CSS property with the to the div element
wrapping the video. In both approaches the video component stopped respecting the responsiveness of the page, which
created an undesirable layout effect of having a huge video on screens smaller than 600 pixels wide, and
disproportionate sizing relative to the rest of the components in the article series.&lt;/p&gt;

&lt;p&gt;In order to achieve the desired effect, the component was refactored to make the SVG &quot;blob&quot; a sibling of the video
wrapped inside a parent div with a fixed height. The parent div received a height equal to 100% of the viewport
width divided by the video’s aspect ratio--16:9. This prevents the video from being visible outside the borders of
the SVG. Et voila!&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ts&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SubseriesWrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;direction&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;cm&quot;&gt;/* 16 x 9 aspect ratio */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;




&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;html&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;SubseriesWrapper&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;SubseriesSVGWrapper&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;viewBox=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0 0 1600 900&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/2000/svg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;FFF&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;100vw&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;M0,0V900H1600V0ZM1489.83,896.43,146.61,805.5,47.2,182.84,320,4.17l874.07,86,360.06,148Z&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;VanguardSubseriesVideoWrapper&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;lt;VanguardSubseriesVideo&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;autoPlay&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;muted&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;playsInline&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;controls=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{false}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{props.url}&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/VanguardSubseriesVideoWrapper&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/SubseriesSVGWrapper&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/SubseriesWrapper&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;a name=&quot;Final.Thoughts&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Final Thoughts&lt;/h1&gt;

&lt;p&gt;One of the biggest non-technical takeaways for me was the importance of becoming skilled at thinking like a product
manager while approaching engineering work. Engineers that do this well are adept at balancing many
responsibilities–scoping out the amount of engineering work involved in producing a deliverable, communicating
technical information to non-technical team members, managing expectations and (sometimes) competing interests when
working on cross-teams projects, gracefully informing stakeholders that the scope of a project will have to be
limited in order to deliver an MVP, among others. Doing these things well is hard, and furthermore not something we
learn in computer science or engineering programs; yet is a requisite, in my opinion, to be an effective engineer.
I’m grateful for the opportunity to have collaborated with others on this year’s Artsy Vanguard and to have been
given the chance to develop these skills.&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/10/29/css-is-hard-and-vanguard-2019-learnings/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/10/29/css-is-hard-and-vanguard-2019-learnings/</guid>
        
        
        <category>agile</category>
        
        <category>artsy vanguard</category>
        
        <category>collection hubs</category>
        
        <category>collections</category>
        
        <category>css</category>
        
        <category>design</category>
        
        <category>editorial</category>
        
        <category>learnings</category>
        
        <category>mixed-blend-mode</category>
        
        <category>people</category>
        
        <category>svg</category>
        
        <category>teams</category>
        
      </item>
    
  </channel>
</rss>
