<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artsy Engineering</title>
    <description></description>
    <link>http://artsy.github.io/</link>
    <atom:link href="http://artsy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 27 Sep 2016 08:54:39 +0000</pubDate>
    <lastBuildDate>Tue, 27 Sep 2016 08:54:39 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Professional Development at Artsy Engineering</title>
        <description>&lt;p&gt;In considering an offer to join us at Artsy, one of our newest incoming engineers asked me a great question: &lt;em&gt;How does the tech team do professional development?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As I thought about it, I began to realize that the answer is “a lot”! Most of our efforts evolved organically. Someone had an idea, and people rallied around it. I thought it would be useful to share, in case others are inspired by what&#39;s caught on here. Here are some of the things we do.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;h1&gt;Practices&lt;/h1&gt;

&lt;p&gt;Our engineering team used to be organized along &lt;em&gt;practice&lt;/em&gt; lines: web, mobile native, and platform. Following our recent &lt;a href=&quot;http://artsy.github.io/blog/2016/03/28/artsy-engineering-organization-stack/&quot;&gt;product reorganization&lt;/a&gt;, we’re primarily organized in product teams, which are more deeply integrated and aligned with our business units. But practices are here to stay. They serve as horizontal channels for developers working in similar technologies to collaborate and share best practices. They each have a lively Slack channel and do standups once or twice a week.&lt;/p&gt;

&lt;h1&gt;Product teams&lt;/h1&gt;

&lt;p&gt;Within product teams, engineers take on work across the stack. Most engineers have one or more zone of expertise, but it&#39;s important for us to branch out as well. In my role as a product engineering lead, I&#39;m responsible for helping to support this, to ensure that my team members are broadening in their skills.&lt;/p&gt;

&lt;h1&gt;Collaboration&lt;/h1&gt;

&lt;p&gt;In day-to-day work, we do a lot of pair programming and whiteboard architecture on an ad hoc basis. This happens between teams as much as within them. It&#39;s common for developers to request code reviews from members of other teams, and equally common for them to provide friendly pointers on PRs they chance upon.&lt;/p&gt;

&lt;h1&gt;Lunch ’n’ Learn&lt;/h1&gt;

&lt;p&gt;Every Thursday, we do a Lunch-and-Learn session. Historically, we mostly showed off tech we use internally. But over about a year, most of our tech stack has been presented this way, so we also bring in engineers we know at other companies to share what they’re working on.&lt;/p&gt;

&lt;h1&gt;Conferences&lt;/h1&gt;

&lt;p&gt;Devs are encouraged to attend conferences. The engineering budget covers expenses for 1 per year as an attendee, and unlimited as a presenter. Many of our engineers are experienced presenters -- and I know &lt;a href=&quot;http://orta.io/&quot;&gt;Orta&lt;/a&gt; has even been a conference organizer. So there’s plenty of support for first-time presenters. Lunch ’n’ Learn sessions have served as a place to do a dry run for a presentation.&lt;/p&gt;

&lt;h1&gt;Community engagement&lt;/h1&gt;

&lt;p&gt;Professional development isn’t just about absorbing new information, it’s also about teaching and sharing. That’s one of the best ways to truly master a topic. We encourage folks to participate in OSS, blogging (obviously), speaking, and other types of community engagement, and we’ve got really experienced people on all those fronts to support for helping make this happen. We&#39;ve got team members who help maintain highly utilized community projects, but there are more low-key ways to be involved in OSS. One nice thing about being &lt;a href=&quot;http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html&quot;&gt;open source by default&lt;/a&gt; is that it gives us ways to contribute to OSS in the course of doing regular product development.&lt;/p&gt;

&lt;h1&gt;Slack discussions&lt;/h1&gt;

&lt;p&gt;We’ve got an active #tech-learning Slack channel, which people use to share and discuss articles. We also have a number of language-specific Slack channels, such as #elixir, #swift, and #scala (my personal fave).&lt;/p&gt;

&lt;h1&gt;Mentorship&lt;/h1&gt;

&lt;p&gt;Newer devs are paired with a mentor, who serves as the point person the newer dev can always talk to. Making this connection official means that it counts as a job responsibility for the mentor. For obvious reasons, mentoring benefits the mentee, but it&#39;s good to remember that it also helps mentors develop. After all, teaching someone is the best way to learn.&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Sep 2016 16:37:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/09/22/professional-development-at-artsy-engineering/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/09/22/professional-development-at-artsy-engineering/</guid>
        
        
        <category>development</category>
        
        <category>education</category>
        
        <category>engineering</category>
        
        <category>organization</category>
        
        <category>professional</category>
        
      </item>
    
      <item>
        <title>Dev Interviews: Maxim Cramer</title>
        <description>&lt;p&gt;I&#39;m happy to introduce the next in the &lt;a href=&quot;http://artsy.github.io/series/dev-interviews/&quot;&gt;Dev Interviews&lt;/a&gt; series - &lt;a href=&quot;http://www.mennenia.com/&quot;&gt;Maxim Cramer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Maxim has been at Artsy for 6 month, working on our mobile app Eigen. Our interview covers how being a remote developer, advice for people at a HQ working with remotes, her work with React Native and what the future holds for the Artsy mobile team.&lt;/p&gt;

&lt;p&gt;Jump &lt;a href=&quot;https://www.youtube.com/watch?v=ftsBR_KqHcE&quot;&gt;to YouTube&lt;/a&gt; for the video, or click more for a inline video.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;iframe width=&#39;100%&#39; height=&#39;600&#39; src=&#39;https://www.youtube.com/embed/ftsBR_KqHcE &#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Sep 2016 12:11:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/09/16/Dev-Interview-Maxim-Cramer/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/09/16/Dev-Interview-Maxim-Cramer/</guid>
        
        
        <category>culture</category>
        
        <category>interview</category>
        
        <category>video</category>
        
      </item>
    
      <item>
        <title>Help! I&#39;m becoming Post-Junior</title>
        <description>&lt;p&gt;I’ve lived in NYC for 2 years now. I’ve been around long enough that some of the people I helped when they started learning have begun to feel like they’re not “Juniors” anymore.&lt;/p&gt;

&lt;p&gt;They have begun feeling confident in their code, their responsibilities at the company and wanting to improve both. It&#39;s a feeling that maybe, just maybe, &lt;a href=&quot;https://ashfurrow.com/blog/normalizing-struggle/&quot;&gt;you&#39;re not struggling to stay afloat anymore&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post aims to be technology-agnostic, and if you sit somewhere at 1.5 - 3 years of programming experience then you’ll probably get something out of it. On top of that,  I’ll give some pragmatic JS and iOS specific tips at the end.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;This post is easy to start. At Artsy we have an &lt;a href=&quot;/blog/2015/04/03/artsy-engineering-compensation-framework/&quot;&gt;engineering ladder system&lt;/a&gt; - which I’ll paraphrase below. It’s worth the full read though.&lt;/p&gt;

&lt;p&gt;Key point:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Performance evaluation at Artsy is composed of the what, &lt;em&gt;i.e. what you achieve that contributes to your team’s goals and ultimately Artsy goals&lt;/em&gt;, and the how, &lt;em&gt;i.e. how you act and how those actions contribute to Artsy’s culture and values&lt;/em&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We measure your career stage by your &lt;strong&gt;impact&lt;/strong&gt; at Artsy, this is initially on the products you’re working on, but eventually moves out to the culture and the business:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Engineer 1&lt;/strong&gt; - Can ship a well defined product feature.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Engineer 2&lt;/strong&gt; - Can independently own a product features and can handle the communication with others around it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Engineer 3&lt;/strong&gt; - Can handle a suite of features, and broadly contribute within a domain. Can improve company culture.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Engineer 4&lt;/strong&gt; - Can improve and be a multiplier on other people’s work, can anticipate larger trends and affect culture to avoid or steer in that direction.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Engineer 5&lt;/strong&gt; - Defines technical culture, works on impacting all parts of our businesses and creates new opportunities for the company.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What we’re talking about here is the transition from Engineer 1, to Engineer 2. Here’s our full unabridged description of an Engineer 2.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;▪   Consistently writes and delivers correct and clean quality code with guidance.&lt;/p&gt;

&lt;p&gt;▪   Self-sufficient and makes steady progress on tasks.&lt;/p&gt;

&lt;p&gt;▪   Knows when to ask for help and how to get unblocked.&lt;/p&gt;

&lt;p&gt;▪   Makes steady, well-paced progress without the need for constant significant feedback from more senior engineers.&lt;/p&gt;

&lt;p&gt;▪   Owns a small-to-medium feature from technical design through completion.&lt;/p&gt;

&lt;p&gt;▪   Provides help and support outside of area under their responsibility.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What can we gleam from this, so we start thinking of ways to improve ourselves as individual contributors?&lt;/p&gt;

&lt;h2&gt;Increasing your Responsibility with Cross Team Interactions&lt;/h2&gt;

&lt;p&gt;It’s very unlikely that you are making all of the calls in a product. What is hopefully happening is that your team figures out a plan to ship something in a reasonable timeframe and as a team you assign each other smaller tasks that make that work.&lt;/p&gt;

&lt;p&gt;It’s very likely that as a junior, you will be given the most well-defined small tasks. In OSS we call these the “&lt;a href=&quot;https://github.com/danger/danger/issues?q=is:issue+is:open+label:%22You+Can+Do+This%22&quot;&gt;easy first steps&lt;/a&gt;.” Tasks that can be done atomically, without requiring more interaction with designers or members of the product team. Initially this is a feature (in that you get easy tasks), that eventually turns into a bug (you want to contribute at a higher level).&lt;/p&gt;

&lt;p&gt;When it’s time to divvy up responsibilities, you should consider speaking up about taking tasks that are blocking people, but require further investigation outside of your dev team.&lt;/p&gt;

&lt;p&gt;These responsibilities could be checking up on the status of an API with a platform team, or communicating with different parts of the business to get confirmation on specific details. It is the vagueness that makes the task harder, work your way towards making the task clear - then you have a well defined project.&lt;/p&gt;

&lt;h2&gt;Learn From Your Project&#39;s History&lt;/h2&gt;

&lt;p&gt;When you work, you’re probably working inside an application that other people have built. They have laid the frameworks down, established the team norms and architectural choices that could have existed for years before you arrived.&lt;/p&gt;

&lt;p&gt;Part of what gives you that feeling of confidence in your code is you’re comfortable within the architectural ecosystem you’re used to: e.g. React + Relay, iOS MVVM, Backbone + Express, Rails + CoffeeScript. You’re probably getting good at using them, and that’s awesome.&lt;/p&gt;

&lt;p&gt;To evolve from just that you need to really understand why these choices were made, what their trade-offs are and what was the reasoning for that platform to even exist in the first place.&lt;/p&gt;

&lt;p&gt;By understanding the history of the choices that you have been living with, you can make better decisions in the future.&lt;/p&gt;

&lt;h2&gt;The Bigger Picture&lt;/h2&gt;

&lt;p&gt;There is no “One True Solution” for anything in programming. You should be wary of anyone that tries to tell you all similar sounding things should be done one way. The things you work on are likely a combination of different patterns that work together to become “an app.”&lt;/p&gt;

&lt;p&gt;Understanding your patterns well, and knowing when to apply them will get you far. If you want to go further still, you need to be able to step back from your patterns and try to see larger pictures. A feature that you write this week  &lt;em&gt;with a little bit more abstraction today&lt;/em&gt; could make it much easier to write something next week. Writing better abstractions makes it easier for you to become a multiplier for other peoples work.&lt;/p&gt;

&lt;p&gt;The hard bit is trying to see what that is. Realistically, this is about understanding where the product is, and what it’s roadmap is for the next few iterations as well as trying to think about abstractions that may not be available inside your project.&lt;/p&gt;

&lt;h2&gt;Studying Outside Your Daily Craft&lt;/h2&gt;

&lt;p&gt;Some problems can be handled particularly well by different architectural patterns.  Without knowing they exist, how can you think that they are something you can use?&lt;/p&gt;

&lt;p&gt;This leads to an interesting problem, how do you learn new architectural pattens?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Process&lt;/strong&gt;: You’re probably using some form of &lt;a href=&quot;http://agilemanifesto.org&quot;&gt;agile development&lt;/a&gt;, understand what that &lt;a href=&quot;https://en.wikipedia.org/wiki/Agile_software_development&quot;&gt;really means&lt;/a&gt; and how it compares to others. Try reading &lt;a href=&quot;https://www.amazon.co.uk/Getting-Things-Done-Stress-free-Productivity-ebook/dp/B00SHL3V8M/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1473567686&amp;amp;sr=1-1&amp;amp;keywords=gtd&quot;&gt;Getting Things Done&lt;/a&gt; and I’ve heard good things about &lt;a href=&quot;https://www.amazon.co.uk/Personal-Kanban-Mapping-Work-Navigating-ebook/dp/B004R1Q642/ref=sr_1_6?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1473567686&amp;amp;sr=1-6&amp;amp;keywords=gtd&quot;&gt;Personal Kanban&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Code Architecture&lt;/strong&gt;: Here are some book recommendations, &lt;a href=&quot;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot;&gt;Clean Code&lt;/a&gt;, &lt;a href=&quot;https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X/ref=pd_bxgy_14_img_3?ie=UTF8&amp;amp;psc=1&amp;amp;refRID=BX7MTECP16Z2VR3N3T25&quot;&gt;The Pragmatic Programmer&lt;/a&gt;, &lt;a href=&quot;https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612&quot;&gt;Elements of Reusable Object-Oriented Software&lt;/a&gt; and &lt;a href=&quot;https://www.amazon.co.uk/gp/product/B005OYHF0A/&quot;&gt;Working Effectively with Legacy Code&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tooling&lt;/strong&gt;: There is never one way to do something, so try something else. Switch text editor for a month, or explore alternative methods of doing the same thing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;You can use this knowledge to start offering useful advice that can start to influence your team, for example could be in the form of trying few new idea and offering feedback on their tradeoffs.&lt;/p&gt;

&lt;p&gt;As this is useful to both you and your employer, you should consider talking to your manager about booking time in your work calendar for doing 30 minutes of career development once a week studying topics like these.&lt;/p&gt;

&lt;h2&gt;Helping others&lt;/h2&gt;

&lt;p&gt;You can help your team out by using some of the skills from above.  You can then start thinking of expanding your influence within the company. By being a programmer you already have skills that a lot of people would like to learn or have a better working knowledge of it.&lt;/p&gt;

&lt;p&gt;If you’ve got this far in the article, it’s very likely you’ve got enough skills to &lt;a href=&quot;http://artsy.github.io/blog/2016/01/26/swift-at-artsy/&quot;&gt;lead&lt;/a&gt; &lt;a href=&quot;http://artsy.github.io/blog/2016/08/31/Keyboard-Shortcuts-workshop/&quot;&gt;workshops&lt;/a&gt; internally, and write blog posts about &lt;a href=&quot;http://artsy.github.io/blog/2015/07/06/how-to-write-unit-tests-like-a-brood-parasite/&quot;&gt;your experiences&lt;/a&gt; to &lt;a href=&quot;http://artsy.github.io/blog/2015/06/04/an-eigenstate-of-mind/&quot;&gt;help other developers&lt;/a&gt; at your level. For example, this month I’ve ran a workshop on keyboard shortcuts and on learning to program in Swift. Both of them required maybe 2 hours of preparation, and an email or two announcing that it’s happening.&lt;/p&gt;

&lt;p&gt;Other options are to give &lt;a href=&quot;http://artsy.github.io/blog/2016/03/09/public-speaking-part1-is-it-for-me/&quot;&gt;technical talks&lt;/a&gt; within your company on specific topics, for example &lt;a href=&quot;/blog/2015/12/10/License-and-You/&quot;&gt;Licensing for OSS code&lt;/a&gt; is a talk I gave internally to Artsy. We now have a weekly team “Lunch &amp;amp; Learn” where we give anyone the chance to talk, or request a talk on a topic.&lt;/p&gt;

&lt;p&gt;This gives a lot of space for personal growth too, as these are really easy to transition into blog posts and meetup talks.&lt;/p&gt;

&lt;p&gt;Finally, try to pair with programmers outside of your direct team, it could be on whatever they’re working on - you’ll learn a bit more about other systems and they’ll get to &lt;a href=&quot;https://en.wikipedia.org/wiki/Rubber_duck_debugging&quot;&gt;rubber duck&lt;/a&gt; their problems.&lt;/p&gt;

&lt;h2&gt;Side Projects&lt;/h2&gt;

&lt;p&gt;I’ve tried to focus this post specifically on things you can do on work time. Not everyone has the ability to go home and spend a few hours on this and that. However, programming at the early stage can generally be a “you get out what you put in” kind of deal with time.&lt;/p&gt;

&lt;p&gt;Side projects give you the chance to test out new ideas in an isolated environment that is totally under your control. They are great places for exploring what makes a system tick. Some side-projects are built to be &lt;a href=&quot;https://github.com/orta/you-can-do-it&quot;&gt;thrown away&lt;/a&gt; others can &lt;a href=&quot;https://cocoapods.org&quot;&gt;to last&lt;/a&gt; &lt;a href=&quot;http://danger.systems&quot;&gt;for years&lt;/a&gt;. Both are valuable spaces for experimentation.&lt;/p&gt;

&lt;h2&gt;Contributing to Open Source&lt;/h2&gt;

&lt;p&gt;A lot of people’s work relies on Open Source code and as you are starting to branch out into having a larger impact - perhaps making smaller improvements to the projects you rely on every day could help. This is &lt;a href=&quot;https://speakerdeck.com/orta/the-cocoapods-spec-repo-and-cocoadocs&quot;&gt;how I got started&lt;/a&gt; working with larger projects in the Open Source world.&lt;/p&gt;

&lt;p&gt;Interacting in these projects exposes you to whole new teams of people with, hopefully, very different perspectives. It will change you, you will change them.&lt;/p&gt;

&lt;h2&gt;Moving On&lt;/h2&gt;

&lt;p&gt;This is a &lt;a href=&quot;https://github.com/artsy/artsy.github.io/pull/275#issuecomment-246227904&quot;&gt;complicated topic&lt;/a&gt;, perhaps worth of it’s own post.&lt;/p&gt;

&lt;p&gt;When you first start looking for a job in technology, you likely didn’t have too many choices and was pleased to have any offer. By this point, I’m hoping you’re at a point where you understand your value to a company.&lt;/p&gt;

&lt;p&gt;Perhaps it’s worth thinking about what kind of space the company has for you to grow in. Since I started my career, Artsy is the only job I’ve been in for longer than 2 years. For some, I felt like I had outgrown my original role but could not find a space to grow into.&lt;/p&gt;

&lt;p&gt;It’s worth re-evaluating. I do it every year in anticipation of my &lt;a href=&quot;http://orta.io/on/being/29&quot;&gt;annual write-ups&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Wrap-up&lt;/h2&gt;

&lt;p&gt;This is no simple “one-step to consider yourself post-Junior&quot; article. Only a collection of ideas that you can apply until you feel confident as you find you own ways to help out. As you grow, you grow in many different directions at once - and all of them are valid.&lt;/p&gt;

&lt;p&gt;You can grow by research, practice, doing things outside of work, doing small projects with others in work, experimentation with technology, interacting with more and more people and re-thinking existing approaches. Once you&#39;re outside of small feature work - there are so many ways you can contribute.&lt;/p&gt;

&lt;p&gt;We use the idea of an engineering ladder as a yardstick to ensure we treat developers fairly at Artsy. Different companies will have different ways of scoping how you measure up as a programmer. Your company&#39;s ladder can help offer direction for what they would love to see.&lt;/p&gt;

&lt;p&gt;At the end of the day you’ve got your foundations now, and its time to start thinking about building yourself into a unique programmer and creating your own opinions. There’s never been a better time to start.&lt;/p&gt;

&lt;h2&gt;Further Reading&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.alexnaraghi.com/what-i-didnt-understand-as-a-junior-programmer&quot;&gt;What I Didn&#39;t Understand as a Junior Programmer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dbgrandi.github.io/growing_beyond_junior/&quot;&gt;Growing Beyond Junior&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;iOS Specific&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Study &lt;a href=&quot;/blog/2016/06/19/graphql-for-mobile/&quot;&gt;GraphQL&lt;/a&gt;, study my entire series on &lt;a href=&quot;/series/cocoa-architecture/&quot;&gt;Cocoa Architecture&lt;/a&gt; and our &lt;a href=&quot;/series/ios-code-review/&quot;&gt;app code reviews&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Study MVC, MVVM, RxSwift, VIPER, Testing, BDD, CocoaPods &amp;amp; Swift Package Manager with an hour on each minimum.&lt;/li&gt;
&lt;li&gt;Read &lt;a href=&quot;https://www.objc.io&quot;&gt;objc.io&lt;/a&gt;, watch their videos too.&lt;/li&gt;
&lt;li&gt;Study other languages, and toolsets - it’s very easy to become silo’d in just Objective-C and Swift.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;JS Specific&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Study ES6, GraphQL, React, Relay, Redux, Angular 2, Flow, TypeScript, Carte Blanche, Webpack &amp;amp; Babel.&lt;/li&gt;
&lt;li&gt;Get a company account on &lt;a href=&quot;https://egghead.io&quot;&gt;Egghead&lt;/a&gt; - give yourself a timetable on work time to spend 30+ minutes once a week watching videos from it.&lt;/li&gt;
&lt;li&gt;Explore VS Code, Safari Web Inspector and Web Storm as different ways of doing the same thing, but with more tooling.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 10 Sep 2016 12:17:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/09/10/Help!-I'm-becoming-Post-Junior/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/09/10/Help!-I'm-becoming-Post-Junior/</guid>
        
        
        <category>culture</category>
        
        <category>juniors</category>
        
      </item>
    
      <item>
        <title>Helping the Web Towards OSS by Default</title>
        <description>&lt;p&gt;The main Artsy.net website for the desktop, &lt;a href=&quot;https://github.com/artsy/force&quot;&gt;Force&lt;/a&gt;, was our first Artsy application to open its source code, &lt;a href=&quot;http://artsy.github.io/author/craig&quot;&gt;Craig&lt;/a&gt; and &lt;a href=&quot;http://artsy.github.io/author/brennan&quot;&gt;Brennan&lt;/a&gt; did it &lt;a href=&quot;/blog/2014/09/05/we-open-sourced-our-isomorphic-javascript-website/&quot;&gt;back in 2014&lt;/a&gt;. Force&#39;s public offering laid the groundwork for the iOS OSS projects to come afterwards: &lt;a href=&quot;/blog/2014/11/13/eidolon-retrospective/&quot;&gt;Eidolon&lt;/a&gt;, &lt;a href=&quot;/blog/2015/04/28/how-we-open-sourced-eigen/&quot;&gt;Eigen&lt;/a&gt;, &lt;a href=&quot;/blog/2015/08/06/open-sourcing-energy/&quot;&gt;Energy&lt;/a&gt; and &lt;a href=&quot;/blog/2015/11/05/Emergence-Code-Review/&quot;&gt;Emergence&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Though Force wasn&#39;t quite Open Source by Default, it represented a &lt;em&gt;really&lt;/em&gt; important step for  Artsy&#39;s OSS perspective but was not the end goal. We were opening our source, but not opening our process.&lt;/p&gt;

&lt;p&gt;This month both &lt;a href=&quot;https://github.com/artsy/force&quot;&gt;Force&lt;/a&gt;, the desktop version of &lt;a href=&quot;https://www.artsy.net/&quot;&gt;Artsy.net&lt;/a&gt; and &lt;a href=&quot;https://github.com/artsy/microgravity&quot;&gt;Microgravity&lt;/a&gt;, the mobile version - moved to being built entirely in the open. Read on to find out how.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;h2&gt;Force&lt;/h2&gt;

&lt;p&gt;Over the course of the last month, I&#39;ve sat on and off with Charles &quot;&lt;a href=&quot;http://charlesbroskoski.com/_/&quot;&gt;Cab&lt;/a&gt;&quot; Broskoski, and figured out what it would take to migrate Force to work in the public. Previous to this, work happened on a private repo, and we would push that code to the public.&lt;/p&gt;

&lt;p&gt;We scoped out what it would require, creating an issue that summarized the work. Then we waited for 2 weeks, to give people the chance to discuss the idea and to offer examples for why we should delay or not move. Not all projects &lt;em&gt;should&lt;/em&gt; be OSS, and everyone should have a say when it affects them - giving some time let the team speak their mind. Especially during summer, when people were less active at work.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/oss-milestone/force-oss.png&#39;&gt;&lt;img src=&quot;/images/oss-milestone/force-oss.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;It had been 9 months since the last commit to the public repo, and so auditing the commits was a matter of investigating into configuration files, and seeing what&#39;s changed since the last public commit.&lt;/p&gt;

&lt;p&gt;Next up, we renamed the current &lt;code&gt;force&lt;/code&gt; repo to &lt;code&gt;force-private&lt;/code&gt;. This was to keep the old issues and PRs around after we moved to working in the public. With &lt;code&gt;force&lt;/code&gt; now available we re-named the already public project.&lt;/p&gt;

&lt;p&gt;We then ensured all outstanding PRs were merged or closed, and pushed the commits from &lt;code&gt;force-private&lt;/code&gt; to the now OSS &lt;code&gt;force&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;CI&lt;/h3&gt;

&lt;p&gt;To get back up to speed we needed to set up CI, figuring this out took time.&lt;/p&gt;

&lt;p&gt;We got testing up and running in no time. However, Force is deployed via &lt;a href=&quot;https://semaphoreci.com/&quot;&gt;Semaphore CI&lt;/a&gt;, and to deploy we needed to push compiled assets to S3. To pull that off, we needed access to an S3 key, and token.&lt;/p&gt;

&lt;p&gt;In our iOS projects, &lt;a href=&quot;https://github.com/artsy/eidolon/pull/607&quot;&gt;we do not expose environment variables&lt;/a&gt; to PRs from forks, so we don&#39;t expect them to pass from external contributors. This is fine, because we have &lt;a href=&quot;http://artsy.github.io/blog/2016/01/13/OSS-Expectations/&quot;&gt;different expectations&lt;/a&gt; for OSS apps vs libraries. We do this to ensure that we don&#39;t receive a PR that adds &lt;code&gt;printenv&lt;/code&gt; to the CI scripts, exposing our secret keys.&lt;/p&gt;

&lt;p&gt;As we couldn&#39;t add the keys to our testing environment, we added them to our heroku environment then took them from that. Semaphore sets up our heroku environment only during deployment, so in the deployment phase, we can use a line like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FORCE_S3_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;heroku config:get FORCE_S3_KEY --app force-production&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This sets up the environment like we used to have it when force was private.&lt;/p&gt;

&lt;h3&gt;Team&lt;/h3&gt;

&lt;p&gt;We needed to move all the team members to using the OSS version of our apps. This is a little bit complicated as &lt;a href=&quot;/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy/&quot;&gt;we work from forks&lt;/a&gt;. &lt;a href=&quot;http://www.anandarooproy.com/portfolio&quot;&gt;Roop&lt;/a&gt;, an engineer on the web team, created a &quot;Force OSS Dance Script&quot; ( sidenote: &lt;a href=&quot;http://www.anandarooproy.com/portfolio&quot;&gt;his site&lt;/a&gt; is worth a visit, there&#39;s 15 years of interesting maps. )&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;31&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;32&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;33&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;## RENAME THE OLD REPO&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# on GitHub&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# - Go to my fork https://github.com/&amp;lt;username&amp;gt;/force&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# - Go to Settings tab&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# - Rename repo to &amp;quot;force-private&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# on my local machine&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;mv force force-private
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;force-private
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;git remote &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;-url upstream git@github.com:artsy/force-private.git
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;git remote &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;-url origin git@github.com:&amp;lt;username&amp;gt;/force-private.git
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;## FORK AND CLONE THE NEW REPO&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# back to GitHub&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# - Go to the new Force repo https://github.com/artsy/force&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# - Fork it to my account&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# back to my local machine&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;git clone git@github.com:&amp;lt;username&amp;gt;/force.git
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;force
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;git remote add upstream git@github.com:artsy/force.git
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;cp ../force-private/.env ./
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;cp ../force-private/node_modules ./ &lt;span class=&quot;c&quot;&gt;# or just &amp;#39;npm install&amp;#39; again&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# all good now - both repos on local machine with correct remotes, envs, deps&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;For Force, all the same commits existed in both repos, so it would be difficult to push secrets to the open repo by accident. However, individuals did to sync up a new version of their forks.&lt;/p&gt;

&lt;p&gt;And that, is how we moved force into OSS by Default. :+1: - We&#39;ll cover the issues migration later.&lt;/p&gt;

&lt;h2&gt;Microgravity&lt;/h2&gt;

&lt;p&gt;I have a lot of love for Microgravity. It&#39;s the web project that made &lt;a href=&quot;/blog/2015/04/28/how-we-open-sourced-eigen/&quot;&gt;Eigen&lt;/a&gt; possible. Once Force had moved, I started spending time with Craig trying to understand what it would take to open up Microgravity.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/oss-milestone/micrograv-oss.png&#39;&gt;&lt;img src=&quot;/images/oss-milestone/micrograv-oss.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;It is no surprise to find a lot of overlap, both projects are based on the same foundations: &lt;a href=&quot;http://ezeljs.com&quot;&gt;Ezel.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We didn&#39;t trust the commit history for microgravity, so we nuked it. Same as our native OSS apps.&lt;/p&gt;

&lt;p&gt;We came up with a pattern to make it easier for people to migrate issues, we created a &lt;code&gt;migrate&lt;/code&gt; GitHub label that anyone can apply to an issue in a private repo. Then we use &lt;a href=&quot;https://github-issue-mover.appspot.com&quot;&gt;Issue Mover for GitHub&lt;/a&gt; with some inline JavaScript to loop through all our issues to migrate. As it&#39;s applying a label we can ask product owners and designers to choose ones that are important to them too.&lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;p&gt;I love that I got to help make these changes, the web team started the process of opening our apps at Artsy, then the mobile team took the next big step. Now the teams are both in lock-step, and if you work on the front-end at Artsy - OSS by Default is the way we all work now.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Sep 2016 12:17:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/09/06/Milestone-on-OSS-by-Default/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/09/06/Milestone-on-OSS-by-Default/</guid>
        
        
        <category>force</category>
        
        <category>javascript</category>
        
        <category>js</category>
        
        <category>microgravity</category>
        
        <category>node</category>
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>macOS Keyboard Shortcuts workshop video</title>
        <description>&lt;p&gt;Hey all, I was asked to talk internally about ways in which anyone can improve their day-to-day computer usage. For me, using keyboard shortcuts shows a greater level of control of your machine - and more importantly can be considerably faster.&lt;/p&gt;

&lt;p&gt;I have all of my notes, annotated with images inside a personal GitHub repo: &lt;a href=&quot;https://github.com/orta/keyboard_shortcuts&quot;&gt;orta/keyboard_shortcuts&lt;/a&gt;. We covered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pressing menu items via keyboard&lt;/li&gt;
&lt;li&gt;Window Management&lt;/li&gt;
&lt;li&gt;Text Management, e.g. jumping between words etc.&lt;/li&gt;
&lt;li&gt;Searching for text&lt;/li&gt;
&lt;li&gt;Taking Screenshots&lt;/li&gt;
&lt;li&gt;Slack and Chrome&lt;/li&gt;
&lt;li&gt;Using a Window Manager and Clipboard History Manager&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Jump &lt;a href=&quot;https://www.youtube.com/watch?v=1mIRCL_lGbg&quot;&gt;to YouTube&lt;/a&gt; for the video, or click more for a smaller inline preview.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;iframe width=&#39;100%&#39; height=&#39;600&#39; src=&#39;https://www.youtube.com/embed/1mIRCL_lGbg &#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Aug 2016 12:09:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/08/31/Keyboard-Shortcuts-workshop/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/08/31/Keyboard-Shortcuts-workshop/</guid>
        
        
        <category>video</category>
        
        <category>workshop</category>
        
      </item>
    
      <item>
        <title>Learn Swift at Artsy, Beginners Lesson Three</title>
        <description>&lt;p&gt;And we&#39;re back! With lesson three of the beginners&#39; Swift-at-Artsy course. To recap, Orta and I &lt;a href=&quot;http://artsy.github.io/blog/2016/01/26/swift-at-artsy/&quot;&gt;led a course at Artsy&lt;/a&gt; to teach our colleagues Swift &lt;em&gt;last&lt;/em&gt; August, and we&#39;re doing it again. I&#39;m leading the stream for people who&#39;ve never programmed before.&lt;/p&gt;

&lt;p&gt;Yesterday was lesson three and I have a &lt;a href=&quot;https://youtu.be/e2ErzD8ibG8&quot;&gt;screen recording&lt;/a&gt; of my walkthrough of &lt;a href=&quot;https://github.com/artsy/Swift-at-Artsy/tree/master/Beginners/Lesson%20Three&quot;&gt;the material&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;iframe width=&#39;100%&#39; height=&#39;600&#39; src=&#39;https://www.youtube.com/embed/e2ErzD8ibG8 &#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Aug 2016 09:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/08/30/swift-at-artsy-beginners-lesson-three/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/08/30/swift-at-artsy-beginners-lesson-three/</guid>
        
        
        <category>code</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>oss</category>
        
        <category>swift</category>
        
        <category>teaching</category>
        
        <category>video</category>
        
      </item>
    
      <item>
        <title>On our implementation of React Native</title>
        <description>&lt;center&gt;
 &lt;img src=&quot;/images/emission/emission-logo-artsy.svg&quot; style=&quot;height:300px;&quot;&gt;
&lt;/center&gt;


&lt;p&gt;I arrived fashionably late to the &lt;a href=&quot;/blog/2016/08/15/React-Native-at-Artsy/&quot;&gt;React Native party&lt;/a&gt; in Artsy. I had been a part of our &lt;a href=&quot;/blog/2016/08/09/the-tech-behind-live-auction-integration/&quot;&gt;Auctions Team&lt;/a&gt;, where we worked in Swift with &lt;a href=&quot;https://cocoapods.org/pods/Interstellar&quot;&gt;some light-FRP&lt;/a&gt;. We were not affected by the 4 months of simultaneous work on moving to React Native, at all.&lt;/p&gt;

&lt;p&gt;It was a quiet revolution. I did not have to install &lt;code&gt;npm&lt;/code&gt;, I made zero changes to the code for auctions and the whole app&#39;s infrastructure barely changed. Yet we moved to making all new code inside our 3 year old iOS app use React Native. What gives?&lt;/p&gt;

&lt;p&gt;Well, first up we weren&#39;t planning a re-write, we don&#39;t have that kind of luxury and the scope of our app is too big compared to the team working on it. Second, we reused existing dependency infrastructure to support JavaScript based apps. Read on to find out what that looks like.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;h3&gt;Why we were in a good position to do this&lt;/h3&gt;

&lt;p&gt;Let&#39;s talk a little about the Artsy flagship app, &lt;a href=&quot;https://github.com/artsy/eigen/&quot;&gt;Eigen&lt;/a&gt;. It&#39;s an app that aimed to comprehensively cover the art world. From &lt;a href=&quot;https://www.artsy.net/shows&quot;&gt;Shows&lt;/a&gt; to &lt;a href=&quot;https://www.artsy.net/galleries&quot;&gt;Galleries&lt;/a&gt;, &lt;a href=&quot;https://www.artsy.net/art-fairs&quot;&gt;Fairs&lt;/a&gt; to &lt;a href=&quot;https://www.artsy.net/auctions&quot;&gt;Auctions&lt;/a&gt;, &lt;a href=&quot;https://www.artsy.net/institutions&quot;&gt;Museums&lt;/a&gt; to &lt;a href=&quot;https://www.artsy.net/articles&quot;&gt;Magazines&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It all looks a bit like this:&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/emission/eigen-overview.jpg&#39;&gt;&lt;img src=&quot;/images/emission/eigen-overview.jpg&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;Our app neatly splits into two areas of view controllers, ones that act as a browser chrome, and individual view controllers that normally map 1:1 to &lt;a href=&quot;https://github.com/artsy/eigen/blob/master/Artsy/App/ARSwitchBoard.m#L122&quot;&gt;routes&lt;/a&gt; on the Artsy website.&lt;/p&gt;

&lt;p&gt;For example, the route &lt;code&gt;artsy.net/artwork/glenn-brown-suffer-well&lt;/code&gt; maps to the native &lt;code&gt;ARArtworkViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/emission/eigen.svg&#39;&gt;&lt;img src=&quot;/images/emission/eigen.svg&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;Just as a browser knows very little about the individual content of the pages that it&#39;s rendering, the eigen chrome exists &lt;em&gt;relatively&lt;/em&gt; independent of the view controllers that are showing.&lt;/p&gt;

&lt;p&gt;Each view controller also knows very little about each-other, so actions that trigger a new view controller are generally done by creating a string route and passing it through the routing system. I&#39;ve wrote about this pattern in &lt;a href=&quot;https://artsy.github.io/blog/2015/08/15/Cocoa-Architecture-Router-Pattern/&quot;&gt;Cocoa Architecture: Router Pattern&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Interestingly, if the router cannot route a view controller, it will pass through to a web view. This is why we consider the app a &lt;a href=&quot;http://artsy.github.io/blog/2015/08/24/Cocoa-Architecture-Hybrid-Apps/&quot;&gt;hybrid app&lt;/a&gt;. This pattern means adding new view controllers is extremely easy.&lt;/p&gt;

&lt;h3&gt;Introducing Emission&lt;/h3&gt;

&lt;p&gt;Emission is what we use to contain all of our React Native components. Our flagship app Eigen, can depend on and use without needing to bother with the implementation details of React Native. At it&#39;s core, Emission is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A node module.&lt;/li&gt;
&lt;li&gt;A CocoaPod.&lt;/li&gt;
&lt;li&gt;An iOS App.&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;The Node Module&lt;/h4&gt;

&lt;p&gt;Emission itself, is a node module. In our case, it is a JavaScript library that exposes 3 JavaScript objects.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;cm&quot;&gt;/* @flow */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Containers&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;./lib/containers&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Components&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;./lib/components&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Routes&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;./lib/relay/routes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;./lib/relay/config&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;./lib/app_registry&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;Containers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;Components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;Routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Another node project can have Emission as a dependency - then can access our &lt;code&gt;Container&lt;/code&gt;s, &lt;code&gt;Component&lt;/code&gt;s and &lt;code&gt;Route&lt;/code&gt;s. A container is a &lt;a href=&quot;https://facebook.github.io/relay/docs/api-reference-relay-container.html&quot;&gt;Relay container&lt;/a&gt;, a component is a &lt;a href=&quot;https://facebook.github.io/react/docs/component-api.html&quot;&gt;React Component&lt;/a&gt; and a Route is a &lt;a href=&quot;https://facebook.github.io/relay/docs/guides-routes.html#content&quot;&gt;Relay Route&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The thing that&#39;s interesting from the integration side, is that each &lt;code&gt;Container&lt;/code&gt; is effectively a View Controller that Emission provides to a host application. React Native ignores  the concept of view controllers from the Cocoa world, so we have an &lt;a href=&quot;https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Pod/Classes/ViewControllers/ARComponentViewController.m&quot;&gt;ARComponentViewController&lt;/a&gt; which is subclassed for each exposed &lt;code&gt;Component&lt;/code&gt; class.&lt;/p&gt;

&lt;h4&gt;The iOS App&lt;/h4&gt;

&lt;p&gt;The iOS app acts as a host target for the CocoaPod, and provides an instance of an &lt;a href=&quot;https://github.com/artsy/emission/blob/master/Pod/Classes/Core/AREmission.m&quot;&gt;AREmission&lt;/a&gt; object to the view controllers using React Native. The app is nothing special, it is the default app that is created using &lt;code&gt;pod lib create&lt;/code&gt;. We then &lt;a href=&quot;https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Example/Podfile&quot;&gt;use CocoaPods&lt;/a&gt; to bring in React from inside the &lt;code&gt;node_modules/&lt;/code&gt; folder the Emission node module creates.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;AREmission&lt;/code&gt; instance is the intermediary between the host-app (&lt;a href=&quot;https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Example/Emission/AppDelegate.m#L56&quot;&gt;The Emission Example app&lt;/a&gt;, or &lt;a href=&quot;https://github.com/artsy/eigen/blob/41b00f6fe497de9e902315104089370dea417017/Artsy/App/ARAppDelegate%2BEmission.m&quot;&gt;Eigen&lt;/a&gt;.) It has an API for handling routing, and passing authentication credentials into the React Native world.&lt;/p&gt;

&lt;p&gt;We use the example app to do development inside React Native. As of right now, it is simply a tableview that provides a list of view controllers &lt;a href=&quot;https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Example/Emission/AppDelegate.m#L159-L169&quot;&gt;that represent an exposed Container&lt;/a&gt;. Once you are in the right view controller, you can rely on &lt;a href=&quot;http://facebook.github.io/react-native/releases/0.31/docs/debugging.html#automatic-reloading&quot;&gt;Hot Reloading&lt;/a&gt; to simplify your work.&lt;/p&gt;

&lt;h4&gt;The Pod&lt;/h4&gt;

&lt;p&gt;An important part of working with React Native, is that you can choose to use native code when appropriate. The &lt;a href=&quot;https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Emission.podspec&quot;&gt;Pod for&lt;/a&gt; Emission, created entirely in Objective-C, provides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Communication between React Native and the host app objects via &lt;a href=&quot;https://facebook.github.io/react-native/docs/native-modules-ios.html&quot;&gt;native modules&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UIViewController&lt;/code&gt; subclasses for Host apps to consume.&lt;/li&gt;
&lt;li&gt;Bridges for existing native views (like our &lt;a href=&quot;https://github.com/artsy/extraction/blob/d6a32186f7098eb2ec5d05e2fb5302a8378eff70/Extraction/Classes/ARSwitchView.m&quot;&gt;SwitchView&lt;/a&gt;) into React Native.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The choice of Objective-C is for simplicity, and language stability. Swift is technically an option, but it&#39;s not  worth the complications for &lt;a href=&quot;https://github.com/artsy/emission/tree/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Pod/Classes&quot;&gt;a few simple objects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In order to share native views with our host app, Eigen, we created a library to just hold the shared UI components, &lt;a href=&quot;https://github.com/artsy/extraction&quot;&gt;Extraction&lt;/a&gt;. These are &lt;a href=&quot;https://github.com/artsy/extraction/tree/d6a32186f7098eb2ec5d05e2fb5302a8378eff70/Extraction/Classes&quot;&gt;factored out of Eigen&lt;/a&gt;, and into a pod. Emission and Eigen have this as a dependency.&lt;/p&gt;

&lt;h4&gt;Pod Deployment&lt;/h4&gt;

&lt;p&gt;What makes this work well, from the perspective of Eigen is that the React Native comes in atomically. The Podspec &lt;a href=&quot;https://github.com/artsy/emission/blob/master/Emission.podspec#L17-L18&quot;&gt;references&lt;/a&gt; the few native classes, and a single JavaScript file.&lt;/p&gt;

&lt;p&gt;This JavaScript file is the bundled version of all our React Native code. It&#39;s &lt;a href=&quot;https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/package.json#L7&quot;&gt;updated  by running&lt;/a&gt; &lt;code&gt;npm run bundle&lt;/code&gt;. This generates both the minified JS, and a source map so that we can transcribe the error reports into the code we write.&lt;/p&gt;

&lt;p&gt;Using the CocoaPod, Emission can provide native view controllers that use React Native under the hood. The host app does not need to know the underlying details like &lt;code&gt;npm&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;On Emission&lt;/h3&gt;

&lt;p&gt;Whether this is a pattern other apps can follow is hard to say, we were in a great position to do this. Our app has view controllers that have very little communication with each other and the host app does not need to bridge large amounts of information.&lt;/p&gt;

&lt;p&gt;As ever, our work is open source, and we ensure that anyone can download and run Emission, so if you&#39;d like to understand more, clone &lt;a href=&quot;https://github.com/artsy/emission#reactions--emissions&quot;&gt;artsy/emission&lt;/a&gt; and study the implementation.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Aug 2016 12:17:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/08/24/On-Emission/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/08/24/On-Emission/</guid>
        
        
        <category>eigen</category>
        
        <category>mobile</category>
        
        <category>node</category>
        
        <category>reactnative</category>
        
        <category>tooling</category>
        
      </item>
    
      <item>
        <title>Learn Swift at Artsy, Beginners Lesson Two</title>
        <description>&lt;p&gt;And we&#39;re back! With lesson two of the beginners&#39; Swift-at-Artsy course. To recap, Orta and I &lt;a href=&quot;http://artsy.github.io/blog/2016/01/26/swift-at-artsy/&quot;&gt;led a course at Artsy&lt;/a&gt; to teach our colleagues Swift &lt;em&gt;last&lt;/em&gt; August, and we&#39;re doing it again. I&#39;m leading the stream for people who&#39;ve never programmed before.&lt;/p&gt;

&lt;p&gt;Yesterday was lesson two and I have a &lt;a href=&quot;https://youtu.be/EBtzqx1YRBg&quot;&gt;screen recording&lt;/a&gt; of my walkthrough of &lt;a href=&quot;https://github.com/artsy/Swift-at-Artsy/tree/master/Beginners/Lesson%20Two&quot;&gt;the material&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;iframe width=&#39;100%&#39; height=&#39;600&#39; src=&#39;https://www.youtube.com/embed/EBtzqx1YRBg &#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Aug 2016 09:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/08/23/swift-at-artsy-beginners-lesson-two/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/08/23/swift-at-artsy-beginners-lesson-two/</guid>
        
        
        <category>code</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>oss</category>
        
        <category>swift</category>
        
        <category>teaching</category>
        
        <category>video</category>
        
      </item>
    
      <item>
        <title>Using VS Code for JavaScript</title>
        <description>&lt;center&gt;
 &lt;img src=&quot;/images/vscode/vscode_logo_artsy.svg&quot; style=&quot;width:300px;&quot;&gt;
&lt;/center&gt;


&lt;p&gt;I&#39;m an old school TextMate user, who has also been using Xcode for the last decade. These two sit at a very opposite ends of an &quot;editor&quot; spectrum.&lt;/p&gt;

&lt;p&gt;TextMate is extremely bare bones at the core, but introduced the idea of bundles as plugins. Making it really easy for others to build their own plugins for their own contexts. Xcode on the other-hand includes a 3D scene editor, the best interface builder I&#39;ve seen, super rich debugging tools and close to zero support for improving it yourself.&lt;/p&gt;

&lt;p&gt;As we agreed on moving to React Native, we needed to decide what the team should use for &lt;a href=&quot;https://github.com/artsy/emission/blob/master/docs/vscode.md&quot;&gt;working in that environment&lt;/a&gt;. After experimentation with many editors, we decided on Microsoft&#39;s &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We wanted to keep a lot of the best features from Xcode, while working in a completely JavaScript environment. For example: debuggers, inline errors, auto-complete, symbol mapping and to ideally have them all inside a single editor.&lt;/p&gt;

&lt;p&gt;Let&#39;s dig into the principals of how Visual Studio Code works, what makes it a better option for us, and what parts of it really shine.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;hr /&gt;

&lt;h3&gt;What is Visual Studio Code?&lt;/h3&gt;

&lt;p&gt;Visual Studio Code (VS Code) is &lt;em&gt;yet another&lt;/em&gt;, JavaScript-based text editor. It&#39;s built atop of GitHub&#39;s &lt;a href=&quot;http://electron.atom.io&quot;&gt;Electron&lt;/a&gt;. Electron is a framework for writing native apps as easy as building websites. It started as a web component for some Microsoft web-service, and eventually evolved into a fully-fledged text editor.&lt;/p&gt;

&lt;h4&gt;IDE - Editor hybrid&lt;/h4&gt;

&lt;p&gt;Visual Studio Code (VS Code) believes that the sweet-spot between and IDE and a plain Text Editor, is somewhere a little bit closer to the IDE side.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/vscode/editors.png&#39;&gt;&lt;img src=&quot;/images/vscode/editors.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;This means instead of the Text-Editor style folder based approach, VS Code expects to set up a project structure per-project to start supporting from of the more useful IDE-like features.&lt;/p&gt;

&lt;p&gt;It supports TextMate style plugins (called Extensions) through a controlled, but expanding &lt;a href=&quot;https://code.visualstudio.com/docs/extensions/overview&quot;&gt;extension API&lt;/a&gt;. The extension API work takes an &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingXPCServices.html&quot;&gt;Apple-like&lt;/a&gt; approach to ensuring stability by having all extensions run outside of the host process. &lt;a href=&quot;https://code.visualstudio.com/docs/extensions/our-approach&quot;&gt;This approach&lt;/a&gt; ensures any extension crash does not take down the editor.&lt;/p&gt;

&lt;p&gt;It&#39;s also smart about deciding when to load an extension, for example, my &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Orta.vscode-danger&quot;&gt;Danger&lt;/a&gt; extension will &lt;a href=&quot;https://github.com/orta/vscode-danger/blob/a21ccc101b2b1c1be595b10565bca9c88242fb6f/package.json#L18-L20&quot;&gt;only load&lt;/a&gt; if there is a &lt;code&gt;Dangerfile&lt;/code&gt; in the root of the workspace.&lt;/p&gt;

&lt;p&gt;These two approaches to extensions are specifically aimed at &lt;a href=&quot;https://discuss.atom.io/t/why-is-atom-so-slow/11376&quot;&gt;addressing issues&lt;/a&gt; seen inside Atom, where any user actions can be / are blocked by extensions, and extensions have full-reign to make any change they want. Even on my Mac Pro, there is a noticable lag. I initially assumed this was the &quot;JavaScript tax&quot; for all Electron apps, but VS Code is fast.&lt;/p&gt;

&lt;h3&gt;Making Intellisense&lt;/h3&gt;

&lt;p&gt;By default a JavaScript project does not have a way to provide auto-completion, or in VS Code&#39;s terminology: Intellisense. Trying to make auto-complete based on a &lt;a href=&quot;https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop&quot;&gt;REPL&lt;/a&gt; can only get you so far, because it has to be wary against functions with side-effects. Other alternatives are to build an &lt;a href=&quot;http://jointjs.com/demos/javascript-ast&quot;&gt;AST&lt;/a&gt; from the code, and then introspect that.&lt;/p&gt;

&lt;p&gt;In Xcode the auto-complete tools are powered by the type systems of Objective-C and Swift. This means that you can know the structure of an object, without having to dig inside it, potentially breaking it in the process. Vanilla JavaScript does not have a type system. There are a few root classes though: String, Object, Number etc.&lt;/p&gt;

&lt;p&gt;To work around this problem, VS Code uses &lt;a href=&quot;http://www.typescriptlang.org&quot;&gt;TypeScript&lt;/a&gt; behind the scenes. TypeScript is a language that compiles down to JavaScript which provides a typing structure on top of JavaScript. This is a similar approach to how &lt;a href=&quot;https://flowtype.org&quot;&gt;Flow works&lt;/a&gt; too, which is the language &lt;a href=&quot;https://github.com/artsy/emission/pull/220&quot;&gt;we write React Native&lt;/a&gt; in.&lt;/p&gt;

&lt;p&gt;This can work out really well for your own classes if you are declaring your types, but the npm ecosystem is &lt;em&gt;full&lt;/em&gt; of untyped JavaScript, and a lot of your work is about sitting atop those abstractions. The fix for this is offered via &lt;a href=&quot;http://definitelytyped.org&quot;&gt;DefinitelyTyped&lt;/a&gt; which provides type definitions for popular npm modules. For example here is &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/redux/redux.d.ts&quot;&gt;one for Redux&lt;/a&gt; - these act like &lt;a href=&quot;https://github.com/artsy/eigen/blob/master/Artsy/App/ARSwitchBoard.h&quot;&gt;header files in Objective-C&lt;/a&gt; - offering inline documentation, and the shape of the object.&lt;/p&gt;

&lt;p&gt;I use an extension to keep these up to date and to have them installed in every project I work in: &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=jvitor83.types-autoinstaller&quot;&gt;Types auto installer&lt;/a&gt;. Here&#39;s an example of auto-complete for &lt;a href=&quot;http://redux.js.org/docs/api/Store.html&quot;&gt;a Redux store&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/vscode/redux.png&#39;&gt;&lt;img src=&quot;/images/vscode/redux.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;It&#39;ll also provide information about the parameters, which is a life-saver for me. Having grown up with &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html&quot;&gt;named&lt;/a&gt; &lt;a href=&quot;https://robots.thoughtbot.com/ruby-2-keyword-arguments&quot;&gt;parameters&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/vscode/redux-params.png&#39;&gt;&lt;img src=&quot;/images/vscode/redux-params.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;h3&gt;Runtime&lt;/h3&gt;

&lt;p&gt;Using console logs to debug isn&#39;t an acceptable answer when debugging for me anymore. &lt;a href=&quot;http://blog.cleancoder.com/uncle-bob/2016/07/27/TheChurn.html&quot;&gt;That&#39;s churn&lt;/a&gt; that I&#39;m not willing to lose time to. Luckily for me, VS Code supports debugging across many languages.&lt;/p&gt;

&lt;p&gt;It does this by having a generic VS Code &lt;a href=&quot;https://code.visualstudio.com/docs/extensions/example-debuggers&quot;&gt;Debug Protocol&lt;/a&gt; which lets extensions use their own processes to run the debugger. So the ruby debugger runs on the &lt;a href=&quot;https://github.com/rubyide/vscode-ruby#debugger&quot;&gt;&lt;code&gt;ruby-debug-ide&lt;/code&gt;&lt;/a&gt; gem, and for node-based projects it uses the debugger built into node.&lt;/p&gt;

&lt;p&gt;So, here is a common case. I want to start up my web-server, so I need to run &lt;code&gt;npm dev&lt;/code&gt;. I can run this from VS Code:&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/vscode/start.png&#39;&gt;&lt;img src=&quot;/images/vscode/start.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;Once that&#39;s running - I can attach a debugger. This is listing all of the available node processes on my computer:&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/vscode/attatch.png&#39;&gt;&lt;img src=&quot;/images/vscode/attatch.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;Then I can add a breakpoint, and when it is triggered, I have a full stack trace and REPL. The REPL is very barebones, for example - there&#39;s no auto-complete. However, it&#39;s good for quick exploration. I keep &lt;a href=&quot;https://www.objc.io/issues/19-debugging/lldb-debugging/#printing-objects&quot;&gt;accidentally prefixing&lt;/a&gt; my REPL code with &lt;code&gt;po&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/vscode/debug.png&#39;&gt;&lt;img src=&quot;/images/vscode/debug.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;The breakpoint works through a &lt;a href=&quot;http://blog.teamtreehouse.com/introduction-source-maps&quot;&gt;source map&lt;/a&gt;, and so the line you expect is the one that you&#39;re working in. That stuff is all pretty magic to me. Good on Microsoft, and the node community for pulling that off.&lt;/p&gt;

&lt;h3&gt;Wrapup&lt;/h3&gt;

&lt;p&gt;I still feel a little bit uncomfortable in JavaScript projects, as a long-time native developer. However feel like VS Code is a nice mix of the freeform &quot;just do something&quot; style of Text Editors, which work across a lot of systems and the tight-knit IDEs that are bound to a specific domain. It can be a bridge between worlds.&lt;/p&gt;

&lt;p&gt;VS Code has become my main editor in Ruby and JavaScript, due to having great support for the projects and being an OSS project which I feel like I can contribute to. No more being &lt;a href=&quot;https://github.com/alcatraz/Alcatraz/issues/475&quot;&gt;locked out&lt;/a&gt; of improving my editor. Awesome!&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Aug 2016 22:17:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/08/15/vscode/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/08/15/vscode/</guid>
        
        
        <category>danger</category>
        
        <category>node</category>
        
        <category>reactnative</category>
        
        <category>tooling</category>
        
      </item>
    
      <item>
        <title>Learn Swift at Artsy, Beginners Lesson One</title>
        <description>&lt;p&gt;Last August, Orta and I &lt;a href=&quot;http://artsy.github.io/blog/2016/01/26/swift-at-artsy/&quot;&gt;led a course at Artsy&lt;/a&gt; to teach our colleagues Swift. There were two parallel groups of learners: a &quot;beginners&quot; group who had never coded before, and an &quot;informed&quot; group who already knew how to code. This year, we&#39;re leading the course again with a slight twist: we&#39;re repeating the course for absolute beginners, and we&#39;re introduce a new course for anyone who completed last year&#39;s beginner course.&lt;/p&gt;

&lt;p&gt;We&#39;re really excited both to help new colleagues take their first steps into programming, and to help returning colleagues continue their journey.&lt;/p&gt;

&lt;p&gt;Today was lesson one of the beginner group, and I have a &lt;a href=&quot;https://youtu.be/OLdSg0XpFqA&quot;&gt;screen recording&lt;/a&gt; of my walkthrough of &lt;a href=&quot;https://github.com/artsy/Swift-at-Artsy/tree/master/Beginners/Lesson%20One&quot;&gt;lesson one&#39;s material&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;iframe width=&#39;100%&#39; height=&#39;600&#39; src=&#39;https://www.youtube.com/embed/OLdSg0XpFqA &#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Aug 2016 21:18:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/08/15/swift-at-artsy-beginners-lesson-one/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/08/15/swift-at-artsy-beginners-lesson-one/</guid>
        
        
        <category>code</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>oss</category>
        
        <category>swift</category>
        
        <category>teaching</category>
        
        <category>video</category>
        
      </item>
    
  </channel>
</rss>
