<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artsy Engineering</title>
    <description></description>
    <link>http://artsy.github.io/</link>
    <atom:link href="http://artsy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 07 Feb 2016 20:24:36 +0000</pubDate>
    <lastBuildDate>Sun, 07 Feb 2016 20:24:36 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Interviewing, applying and getting your first job in iOS</title>
        <description>&lt;p&gt;When I was at the beginning of my career, my first developer job application was to a design agency who were doing Mac development too. It was pretty nerve-wracking to apply for my first programming job, and I came into the interview with no idea what to expect. I had just graduated from university and was at the first few steps of my career, I&#39;d call this being a junior. It was a time period where I would need mentoring, and supervision in order to grow. A good explanation is in &lt;a href=&quot;http://programmers.stackexchange.com/questions/14914/whats-the-difference-between-entry-level-jr-sr-developers&quot;&gt;this StackOverflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that I&#39;m both further on in my career, and involved with so many juniors in NYC, I&#39;m meeting with a lot of people who are in the same position I was then and I get a lot of questions asking what they can do to prepare. This post &lt;em&gt;attempts&lt;/em&gt; at being a comprehensive collection of recommendations. It is subjective, of course, and strongly biased towards my experiences.&lt;/p&gt;

&lt;p&gt;Before I jump through to the article, there&#39;s one thing that should be above the fold. &lt;em&gt;Chill out&lt;/em&gt;. You might not get it right on the first try, I&#39;ve applied for jobs and received a &quot;no thanks.&quot; Yet eventually I became the head of mobile at Artsy. Everyone finds their place in time.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;h3&gt;On Your Readiness&lt;/h3&gt;

&lt;p&gt;No-one starting out is ever ready, and an individual is &lt;a href=&quot;https://ashfurrow.com/blog/you-never-arrive/&quot;&gt;never really &quot;done&quot;&lt;/a&gt;. However, in this &lt;a href=&quot;http://dbgrandi.github.io/minimum_viable_programmer/&quot;&gt;post @dbgrandi&lt;/a&gt; neatly sums up the lower bar to entry.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I had a long list of specific things relating to Xcode and iOS. They were very tedious things like, “you should know how to add a new file to an Xcode project.” I’ve shortened that list to a general description here.&lt;/p&gt;

&lt;p&gt;I expect you to be able to start a new project, write some code to download a bit of JSON via HTTP, and use the parsed JSON to present some data in a UITableView.&lt;/p&gt;

&lt;p&gt;If you can do that, in a well organised manner, and can discuss the choices you made to get your app built you’ll have been able to do almost everything that was on that long and tedious list.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is a great starting point. In an ideal world, an interviewer isn&#39;t going to judge you on not knowing every detail about the whole system. They will have expectations that you&#39;re going to have to learn on the job for a lot of things, and that&#39;s ok.&lt;/p&gt;

&lt;h3&gt;On the lookout&lt;/h3&gt;

&lt;p&gt;There are a bunch of websites for putting up job adverts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/jobs&quot;&gt;StackOverflow jobs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.natashatherobot.com/swift-jobs/&quot;&gt;Natasha The Robot&#39;s Swift Jobs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jobs.coreint.org&quot;&gt;Core Intuition&#39;s Jobs Board&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.apple.com/jobs/us/&quot;&gt;Apple&#39;s Jobs Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/xcodejobs&quot;&gt;@xcodejobs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These kind of things work, I got my first programming job through &lt;a href=&quot;http://www.cocoabuilder.com/archive/cocoa/174142-ann-cocoadev-jobs-board.html&quot;&gt;CocoaDev Jobs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These are great, but in my opinion the best way to find out what companies are hiring is to attend meet-ups in the city. In NYC we have 3-4 big iOS meet-ups a month, and all of them give a chance for people looking for others to work to speak up. You might not live in as big of a city, but I used to travel an hour to Manchester to attend a meet-up, they would have the same thing, I almost became a full-time rubyist because of it. I have quite a few friends in NYC who started their careers by talking to someone at a meet-up.&lt;/p&gt;

&lt;p&gt;Generic job websites can be good, for example Artsy&#39;s job postings are on &lt;a href=&quot;https://angel.co/artsy&quot;&gt;AngelList&lt;/a&gt; and &lt;a href=&quot;https://www.glassdoor.co.uk/Job/Artsy-Jobs-E793485.htm&quot;&gt;Glassdoor&lt;/a&gt; but the vast majority of applications feel like they were sent to a lot of companies. They are given a low priority when compared to direct inquiries because of this. I can&#39;t speak from experience but &lt;a href=&quot;https://www.theladders.com&quot;&gt;Ladders&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com&quot;&gt;LinkedIn&lt;/a&gt;, &lt;a href=&quot;http://hired.com&quot;&gt;Hired&lt;/a&gt; and &lt;a href=&quot;https://weworkremotely.com&quot;&gt;weworkremotely&lt;/a&gt; are probably worth a look too.&lt;/p&gt;

&lt;p&gt;Finally, search the websites of companies you like for careers or jobs pages.&lt;/p&gt;

&lt;p&gt;If you see an advert for a mobile developer, but they don&#39;t mention juniors, you should apply anyway. We&#39;ve never had junior positions on our jobs pages, but have hired some who inquired anyway. Don&#39;t pretend to be more senior than you are though, set the right expectations.&lt;/p&gt;

&lt;p&gt;Finally, consult your network, talk to people at meet ups, sneakily contribute to open source projects with people you want to talk to and then email the project owner after they&#39;ve got to know your name.&lt;/p&gt;

&lt;h3&gt;On a Coffee&lt;/h3&gt;

&lt;p&gt;Know what goes a long way? Talking with someone before applying. I regularly get coffee with applicants or potential applicants when I&#39;m in NYC. Coffee can be hard when applying for junior roles when remote, but so far, to my knowledge I&#39;ve not talked to anyone who hires a junior as a remote developer. I&#39;m not sure it could work unless the entire team was remote, or the junior developer had a lot of experience and was only a junior in the sense that they were just hitting the work-force.&lt;/p&gt;

&lt;p&gt;These are 15-30 minute informal chats, but from an employers perspective they are definitely a good way to filter candidates. A coffee is time-cheap, interviews are time-expensive. So ask someone on the dev team to do them, you&#39;ll usually get a yes. Tamar Nachmany has some &lt;a href=&quot;https://booleancubes.tumblr.com/post/137057622039/the-networking-with-awesome-strangers-checklist&quot;&gt;great, salient points&lt;/a&gt; on the right way to pitch these emails.&lt;/p&gt;

&lt;p&gt;It&#39;s definitely worth doing your homework on both the person doing coffee, and the company they work for. A coffee could turn into an interview.&lt;/p&gt;

&lt;h5&gt;But I don&#39;t live in a major metropolis&lt;/h5&gt;

&lt;p&gt;So meet-ups aren&#39;t going to work for you. I lived for most of my life (~25 years) about 2 hours train ride from Manchester. I love the little town, but there&#39;s very little meet-up scene or tech scene at all. Our meet-ups were people all starting together, and without a general core set of experienced people providing some consistency.&lt;/p&gt;

&lt;p&gt;Personally, I wouldn&#39;t hire a junior who was remote. I don&#39;t think that relationship would work out well for mentor/mentoree. You&#39;d need the entire company to be remote for that to work, and it&#39;s too much to ask for someone to be both learning everything on the job and to also have to play catch-up with company culture.&lt;/p&gt;

&lt;p&gt;So then what are the options? When I was looking I took a local white-pages/local ads and applied to all of the companies in my local area who were doing what I was interested in. I ended up working somewhere close enough to walk to work.&lt;/p&gt;

&lt;p&gt;The other option is to move to a big city with existing infrastructure. This can obviously be hard, but being surrounded with people doing similar things is difficult to put a price on. I never wanted to move to a big city, but once I did, it boosted my abilities to get things done considerably. Constant access to people and ideas change you. &lt;a href=&quot;http://www.gizmag.com/go/7613/&quot;&gt;Most people&lt;/a&gt; now live in cities.&lt;/p&gt;

&lt;p&gt;Finally, one of the best ways to distinguish yourself if you&#39;re going to aim for remote is in Open Source contributions. The process of contributing to Open Source is very similar to working as a remote developer. They both require self-motivation, clearness in your messaging and dealing with asynchronicity well.&lt;/p&gt;

&lt;h3&gt;On an Intro Email&lt;/h3&gt;

&lt;p&gt;Look at the language in the jobs page, and have your email / intro letter reflect that. When I receive very formal &quot;dear hiring manager&quot; emails it reflects badly on the applicant, &lt;a href=&quot;https://www.artsy.net/article/artsy-jobs-mobile-engineer&quot;&gt;our jobs page&lt;/a&gt; states to not worry about that, as we&#39;re not that kind of culture.&lt;/p&gt;

&lt;p&gt;An intro email is your chance to show that you understand the core value of a company. For example when I receive applications that only talk about our contributions to OSS then I wonder if they&#39;ve even studied what Artsy is, and how OSS by Default is derived from deeper values as opposed to being an end-goal in itself. If you apply to Facebook and the only thing you mention is &lt;a href=&quot;http://facebook.github.io/react-native/&quot;&gt;React-Native&lt;/a&gt; I think you&#39;d also be missing the point of Facebook. A great opener to Facebook might talk about how amazing it is that they can work on a product that pretty much everyone they meet uses, and you think it&#39;s amazing that there is now 1 billion active users a day. It shows you understand the scope of their problems, and have done your homework.&lt;/p&gt;

&lt;p&gt;Let&#39;s look at Ash&#39;s intro email:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;My name is Ash Furrow and I’m writing in regards to your mobile engineering position. I heard about the position first through Orta Therox, who spoke highly of Artsy.&lt;/p&gt;

&lt;p&gt;Upon further reading, Artsy sounded exactly like the kind of place I want to work. An ambitious goal, to change the world, with a thorough mix of math, software engineering, and art. I consider myself to be an artist, both when I code and when I am behind the lens of a camera (I like to develop my own film). I love working with companies who understand the important role of art in our society, as I did with 500px.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;10/10.&lt;/em&gt; Extremely on topic.&lt;/p&gt;

&lt;p&gt;Next, you&#39;re going to want to now talk about great of a fit you would be, how well you understand the domain and how you&#39;ve been doing similar work already.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I love how you’ve contributed back to the open source community. I am a strong believer in the power of open source, especially in the iOS community, where there has historically been a resistance to opening software. Sponsoring CocoaPods is a fantastic contribution toward the iOS community and I thank you for it. I’ve contributed back to several projects on GitHub, have written for the Teehan+Lax blog professionally, and have a selection of the apps I’ve written on my portfolio.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I know what you&#39;re thinking: &quot;Ash wasn&#39;t a junior when he applied&quot;, well, chances are you&#39;ve still got a history of things that can be applied towards an email like this. Also, flattery can get you everywhere. &quot;I&#39;ve been using your app for years, I love how it does &#39;x&#39; - have you thought of doing &#39;y&#39;?&quot;&lt;/p&gt;

&lt;p&gt;Sarah&#39;s was similar:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;First, I&#39;d just like to say I love Artsy and have been following your company since I learned of its existence two years ago. Making art accessible to the world is a problem the architects of the Internet should undoubtedly be solving and Artsy is doing so with elegance.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;10/10&lt;/em&gt; ✔&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I&#39;m currently transitioning from embedded systems to iOS development and looking for a place where I can learn a lot while making significant contributions to a product. As for my background, I just graduated from NYU with a B.S. in Electrical Engineering and completed a seven-month-long research and development internship at Canary (a home security hardware startup). While I do enjoy building hardware, I find software engineering generally more fun and in tune with my intellectual and creative preferences.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Dead on. Later on in the email, she references &lt;a href=&quot;https://en.wikipedia.org/wiki/Rosalind_E._Krauss&quot;&gt;art critics&lt;/a&gt; while discussing &lt;a href=&quot;https://en.wikipedia.org/wiki/Enumeration&quot;&gt;programming concepts&lt;/a&gt;. A great introduction email.&lt;/p&gt;

&lt;h3&gt;On a Portfolio&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;on wording&lt;/em&gt;: I use the word portfolio, to encapsulate a CV/Resume/Design Portfolio. They all have &lt;a href=&quot;http://www.diffen.com/difference/Curriculum_Vitae_vs_R%C3%A9sum%C3%A9&quot;&gt;specific meanings&lt;/a&gt;, but in this case, I mean something you attach to the email to provide the full context of your history/experiences.&lt;/p&gt;

&lt;p&gt;There are a lot of places for good, solid advice on the document you are using to persuade someone to interview you. So I&#39;ll tell you what has worked for me. I think it should be a one page document, that captures a snapshot of you. Things they must have: your name, a way to contact you and a list of things you think is relevant.&lt;/p&gt;

&lt;p&gt;You should consider what you think are qualities that you bring to the table, for some job applications I have submitted both a resume and a design portfolio. If you are particularly proud of your design work, perhaps find a way to include your app store screenshots and branding, or make your portfolio distinctive via design.&lt;/p&gt;

&lt;p&gt;Finally, consider that this is a document someone else will have to read. A dense document full of long descriptions and wordy titles is tough to read. Spend some time on making it as readable and easily digestible as possible.&lt;/p&gt;

&lt;h5&gt;On Representing Myself&lt;/h5&gt;

&lt;p&gt;I dug through my archives and found every resume I have ever created; ranging from my first as a student, through to last year.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/2007-144.jpg&quot;&gt;2007&lt;/a&gt; as a part of the WWDC Student Scholarship. It was significantly less competitive then.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/2008-general-144.jpg&quot;&gt;2008&lt;/a&gt; as a graduate applying for jobs that were not programming focused.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/2008-programming-144.jpg&quot;&gt;2008&lt;/a&gt; as a graduate applying for programming jobs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/2010-144.jpg&quot;&gt;2010&lt;/a&gt; when applying for jobs once I had stopped being a junior.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/2015-144.jpg&quot;&gt;2015&lt;/a&gt; my CV as a part of my U.S. VISA process.&lt;/li&gt;
&lt;/ul&gt;


&lt;table&gt;
  &lt;thead&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
            &lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/2007-144.jpg&quot;&gt;
                &lt;img height=&quot;200&quot; src=&quot;/images/2016-01-30-iOS-Junior-Interviews/2007-thumb.jpg&quot;&gt;
            &lt;/a&gt;
        &lt;/td&gt;
      &lt;td&gt;
            &lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/2008-general-144.jpg&quot;&gt;
                &lt;img height=&quot;200&quot; src=&quot;/images/2016-01-30-iOS-Junior-Interviews/2008-general-thumb.jpg&quot;&gt;
            &lt;/a&gt;
        &lt;/td&gt;
         &lt;td&gt;
            &lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/2008-programming-144.jpg&quot;&gt;
                &lt;img height=&quot;200&quot; src=&quot;/images/2016-01-30-iOS-Junior-Interviews/2008-programming-thumb.jpg&quot;&gt;
            &lt;/a&gt;
        &lt;/td&gt;
      &lt;td&gt;
            &lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/2010-144.jpg&quot;&gt;
                &lt;img height=&quot;200&quot; src=&quot;/images/2016-01-30-iOS-Junior-Interviews/2010-thumb.jpg&quot;&gt;
            &lt;/a&gt;
        &lt;/td&gt;
      &lt;td&gt;
            &lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/2015-144.jpg&quot;&gt;
                &lt;img height=&quot;200&quot; src=&quot;/images/2016-01-30-iOS-Junior-Interviews/2015-thumb.jpg&quot;&gt;
            &lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;You can definitely get a sense of my skill specialisations happening over the last 8 years, but the tone of how I present myself hasn&#39;t really changed.&lt;/p&gt;

&lt;p&gt;I also consider my personal web-page &lt;a href=&quot;http://orta.io&quot;&gt;orta.io&lt;/a&gt; to act as a portfolio, Ash Furrow&#39;s portfolio page has a &lt;a href=&quot;https://ashfurrow.com/portfolio/&quot;&gt;similar vibe&lt;/a&gt;.&lt;/p&gt;

&lt;h5&gt;On the team&lt;/h5&gt;

&lt;p&gt;Want to know what the resumes looked like for people applying to Artsy? I asked some of our team to send me their last resumes&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
            &lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/ash-furrow-resume.pdf&quot;&gt;
                &lt;img height=&quot;200&quot; src=&quot;/images/2016-01-30-iOS-Junior-Interviews/ash-thumbnail.jpg&quot;&gt;&lt;/br&gt;
                Ash Furrow (2013)
            &lt;/a&gt;
        &lt;/td&gt;
      &lt;td&gt;
            &lt;a href=&quot;/images/2016-01-30-iOS-Junior-Interviews/sarah-scott-resume.pdf&quot;&gt;
            &lt;img height=&quot;200&quot; src=&quot;/images/2016-01-30-iOS-Junior-Interviews/sarah-scott-resume.jpg&quot;&gt;&lt;br/&gt;
            Sarah Scott (2014)
            &lt;/a&gt;
        &lt;/td&gt;
      &lt;td&gt;
            &lt;a href=&quot;https://ortastuff.s3.amazonaws.com/artsy/maximcramer_artsy_portfolio.pdf&quot;&gt;
                &lt;img height=&quot;200&quot; src=&quot;/images/2016-01-30-iOS-Junior-Interviews/maximcramer_artsy_portfolio_thumb.jpg&quot;&gt;&lt;/br&gt;
                Maxim Cramer (2015)
            &lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;A portfolio can be whatever you want it to be. You could spend forever on a portfolio, but it&#39;s really just an exercise in restraint and prioritisation. Eventually it&#39;s been shaved to a point where you can remove nothing more.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;More infö that I&#39;ve reviewed and given a 👍:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.raywenderlich.com/54029/ios-developer-resume-examples&quot;&gt;iOS Developer Resume Examples&lt;/a&gt; - Somehow I ended up sneaking on this article too.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rooting-for-you.cenedella.com/8-minute-resume-my-guide-to-writing-your-resume-effectively-3b0b117d94a#.ouqnzegkh&quot;&gt;8 Minute Guide to Writing a Resume&lt;/a&gt; - Marc has a lot of experience in this space, plus his advice is definitely better if you&#39;re focusing on larger companies.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;On The One&lt;/h3&gt;

&lt;p&gt;So you know exactly who you are interested in applying to. One of your passions in life is to make music, and you think being a engineer at Spotify would be a dream job. How do you increase your chances?&lt;/p&gt;

&lt;p&gt;First up, you should have some experience before you apply. Apply at one or two other companies that you&#39;d also really like to work for first, test out the water. Then for Spotify, you should make sure everything is perfect for them. Write a new CV and mention your band on it, include links to your music in the bottom. Consider Maxim&#39;s portfolio above, this was obviously made specifically for an audience of Arts/Tech people, Sarah&#39;s also talks about activism and art projects. These are well-tuned portfolios for an audience of Artsy.&lt;/p&gt;

&lt;p&gt;A lot of companies have public employee get-togethers, for example at Artsy we have weekly Happy Hour in the office, or &lt;a href=&quot;https://artsy.github.io/blog/2015/08/10/peer-lab/&quot;&gt;Peer Labs&lt;/a&gt; where you can meet a lot of the people working at a company. This is a great way to mine the employees for information about the culture and to try and peek behind the curtain. In the case of Spotify, they host a lot of meet-ups, try attending some at their offices.&lt;/p&gt;

&lt;h3&gt;On Interview Preparation&lt;/h3&gt;

&lt;p&gt;So you&#39;ve got an interview, be gracious in setting up a time, it&#39;s normal for a bit of back and forth, the company probably has to find a time for a lot of people.&lt;/p&gt;

&lt;p&gt;There&#39;s a lot of value in a collection of interview questions though, one that IMO is a solid resource is &lt;a href=&quot;https://github.com/CameronBanga/iOS-Developer-and-Designer-Interview-Questions&quot;&gt;CameronBanga/iOS-Developer-and-Designer-Interview-Questions&lt;/a&gt; on GitHub. You could get asked a few of these.&lt;/p&gt;

&lt;p&gt;Be cautious with links on the internet here, some of the &lt;a href=&quot;http://www.raywenderlich.com/53962/ios-interview-questions&quot;&gt;top&lt;/a&gt; &lt;a href=&quot;http://www.geekinterview.com/Interview-Questions/iOS&quot;&gt;links&lt;/a&gt; &lt;a href=&quot;http://way2ios.com/development/ios-development-2/ios-interview-questions-with-answers/&quot;&gt;to&lt;/a&gt; &lt;a href=&quot;http://www.toptal.com/ios/interview-questions&quot;&gt;search&lt;/a&gt; here are probably not great for people starting. They aim at a different audience, or focus on minutiae that juniors probably don&#39;t know. If you want to help out there, and you&#39;re linking to this blog post on a website link it with the name include &quot;iOS interview&quot; in the text of the &lt;a href=&quot;http://answers.google.com/answers/threadview/id/141243.html&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One book that is considered the go-to for interview preparation is &lt;a href=&quot;http://www.crackingthecodinginterview.com&quot;&gt;Cracking the Coding Interview&lt;/a&gt;, it&#39;s considered a great guide to some of the computer-science-y questions you could get asked.&lt;/p&gt;

&lt;h5&gt;I didn&#39;t study Computer Science&lt;/h5&gt;

&lt;p&gt;Then I&#39;d definitely recommend Cracking the Coding Interview. I don&#39;t think this is a blocker &lt;em&gt;at all&lt;/em&gt; - we have a lot of engineers on staff who do not have a computer science degree. In our line of work, having experience of the art world can be more useful in a lot of cases. It&#39;s very likely that you&#39;ll feel a hint of &lt;a href=&quot;http://geekfeminism.wikia.com/wiki/Impostor_syndrome&quot;&gt;impostor syndrome&lt;/a&gt; - &lt;a href=&quot;https://medium.com/@aliciatweet/overcoming-impostor-syndrome-bdae04e46ec5#.ilrvfqjow&quot;&gt;you shouldn&#39;t&lt;/a&gt; - the tech industry should be (and is) begging for people who can bring interesting new contexts.&lt;/p&gt;

&lt;p&gt;During the process of setting up your interviews, you should ask what to expect from the interviews. If they are going to be whiteboards + algorithms like they do at Google/Facebook, then I think you&#39;re gonna have to hit the books.&lt;/p&gt;

&lt;h5&gt;On Mocks&lt;/h5&gt;

&lt;p&gt;If you can do Mock Interviews you should. You need an existing network in order to pull that off, but you can get real feedback that can be extremely helpful. As an employer you have to be very cautious in the way you word a rejection, in a mock interview you don&#39;t. This isn&#39;t a one-sided process, the interviewer can use the chance to try out a different technique or to improve their interviewing skills.&lt;/p&gt;

&lt;p&gt;If you don&#39;t know anyone who can do this for you, I&#39;d feel like there are two options: &lt;a href=&quot;http://www.careercup.com/interview&quot;&gt;buy a mock interview&lt;/a&gt; and befriend someone who says they&#39;re looking for someone at a meet-up - they must be interviewing so they might want a practice run too. I&#39;ve given about as many mock interviews as I have done real interviews in the last 2 years.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;More infö that I&#39;ve reviewed and given a 👍:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://macoscope.com/blog/so-you-have-a-technical-interview-at-macoscope/&quot;&gt;So You Have a Technical Interview at Macoscope&lt;/a&gt; - Again, probably a bit more than expected of a junior, but a great summary of how they do it&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.google.com/about/careers/lifeatgoogle/hiringprocess/&quot;&gt;How we hire&lt;/a&gt; - How Google&#39;s hiring process works.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;On iOS Interviews&lt;/h3&gt;

&lt;p&gt;To be at this point, a employer has already decided to invest probably something like 10 hours into you. This is spread across a few people but the point is important. To have got here, someone has to be on your side. They will have had to put in work to even get people to agree to schedule you into their day. Your mindset should reflect this, it&#39;s not you vs them. It&#39;s you and someone. Your job from here is persuading everyone else that gut feeling from that person is correct.&lt;/p&gt;

&lt;p&gt;There is no catch-all solid advice for interviews, but I can give you some of the things we talk about in Artsy.&lt;/p&gt;

&lt;p&gt;We look for &lt;a href=&quot;https://en.wikipedia.org/wiki/T-shaped_skills&quot;&gt;T shaped&lt;/a&gt; engineers, even in juniors. This means someone who has experience in a pretty wide net of things, but that they have a solid focus. This could be building their APIs for apps, writing their own blog, designing their website, automating some regular tasks or using technology for art.&lt;/p&gt;

&lt;p&gt;As a junior, the employer is looking for growth potential. Looking for people who, in the right environment could really thrive. However it&#39;s important to note, an interview only lets you know how well someone interviews. The greatest programmers can choke on interviews.&lt;/p&gt;

&lt;p&gt;You should come in with a few ideas about questions you&#39;d like to ask of the company, as interviews work both ways. Think of some specific to the space the company works, and this is a &lt;a href=&quot;https://www.theladders.com/career-newsletters/its-not-about-me-its-about-you-the-21-questions-you-need-to-ask-in-a-job-interview-june-2014&quot;&gt;great list of general questions&lt;/a&gt; to work from. You could consider them ice-brakers, or they can be used to finish up an interview. The most memorable question asked to me was &quot;Where would I work if I wasn&#39;t at Artsy?&quot; which threw me off completely, but probably told the interviewer a lot about the culture at Artsy.&lt;/p&gt;

&lt;h5&gt;How I interview Juniors&lt;/h5&gt;

&lt;p&gt;One thing I can tell you concretely though, is what I do. My interviews with juniors come in three parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A Chat&lt;/p&gt;

&lt;p&gt;I want to get someone comfortable with the interview, I&#39;ll have taken points from looking over the portfolio to explore. It will be a pretty one-sided conversation with me only trying to provide points to spring off. &quot;So tell me about when you did x&quot;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pair Programming&lt;/p&gt;

&lt;p&gt;I want to get a sense of how you use a computer and act under mentorship. So I do one of two things, depending on how work has been the last week. If there&#39;s been a pull request which seem small and contained enough from our team on one of our apps, I will pair on re-creating the pull request from scratch, without letting it be known that the PR had already been built and accepted. If there isn&#39;t, we&#39;ll take a pre-built broken app and fix it.&lt;/p&gt;

&lt;p&gt;I want to see things like; do you use Xcode shortcuts? Can you explain the code you&#39;re looking at? If I offer some advice, do you use it? Can you present ideas when we&#39;re figuring out an abstraction? Can you identify where problematic behaviour lies?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn you a thing&lt;/p&gt;

&lt;p&gt;Alright, so I&#39;ve been building up the applicant&#39;s confidence and now it&#39;s time to bring that all down. Sorry. I have been paying attention to finding out what the applicant doesn&#39;t know. Then I start asking questions about this. It doesn&#39;t really matter what the topic is, it could be threading, view controller lifecycle, code coupling, dynamic vs static dispatch, whatever. The point is that I want to understand how someone learns during a discussion. So the conversation tends to switch around, where-in I lead a conversation on the topic - try to lay foundations then experiment with questions that should require an understanding of the topic.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Here&#39;s &lt;a href=&quot;https://medium.com/@jon.lazar/my-approach-to-learning-ios-fccf943aead#.ei4yvc38k&quot;&gt;a long writeup&lt;/a&gt;, with a lot of depth (and places to jump off from) from someone who has just come out of a mock interview with me. Thanks Jon.&lt;/p&gt;

&lt;p&gt;None of this process aims to be adversarial, if someone has got this far, I really want to have a sense of how much time and attention will be required to give them some independence. I think a lot of interviewing techniques are created organically, so it&#39;s hard to provide a lot of context.&lt;/p&gt;

&lt;h3&gt;On References&lt;/h3&gt;

&lt;p&gt;References are important to everyone. When you&#39;re trying to get a sense of what someone&#39;s like on the long-term, asking their friends is a great idea. Colleagues tend to be the next best thing. We tend to ask for someone you reported to, someone who was a colleague and if you had reports one of them.&lt;/p&gt;

&lt;p&gt;Artsy puts a lot of priority on references,  Check out &lt;a href=&quot;https://www.zamiang.com/posts/post/2015/07/05/learning-from-artsy-how-to-hire-awesome-engineers/&quot;&gt;Brennan Moore&#39;s article&lt;/a&gt; on this, a lot of the behind the scenes emails afterwards uses quotes taken from references as examples of why someone should be hired. I don&#39;t think this will be unique to Artsy. References should be your cheerleaders. In an ideal world you should be looking for references like the ones we got for Maxim:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;However, if I had to fire people gradually, I&#39;d fire her last. her skill-set is so valuable, and so scarce that it&#39;s super valuable. I&#39;d fire me before her.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;She was the glue that held the team together - could talk at a different level to each contributor. Great intuition, could put in a room with anyone and they could understand how to get their bits done.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I respect that no-one is in control of other people, so yes, references are a bit of a wild card from a junior&#39;s perspective. However, hopefully you&#39;ve had a collection of positive interactions with people who can talk about that. It&#39;s not about your programming prowess at this point, it&#39;s about how you work with others and character reference. Consider listing professors, advisers or supervisors from other jobs.&lt;/p&gt;

&lt;h3&gt;About that thanks&lt;/h3&gt;

&lt;p&gt;Sending an email to say thanks for your interview seems to be the ettiquette in the US. I don&#39;t recall doing it for my interviews, and not every person I&#39;ve interviewed at Artsy has done it. When I brought up the concept recently, people mostly felt like another chore in the process. So, I&#39;d recommend doing it - but do it with a purpose. Provide a link to something you talked about during the interview and make it feel like an email with a reason to exist.&lt;/p&gt;

&lt;h3&gt;On the Aftermath&lt;/h3&gt;

&lt;p&gt;So, interviews are over. What is happening behind the scenes? After your interviews are done, there will be a flurry of behind the scenes emails. From my experience at Artsy, it probably takes a few days to get enough of a consensus around a yay/nay. Someone should be keeping the applicant up to date, even if it&#39;s a matter of &quot;not yet, but we&#39;re talking.&quot;&lt;/p&gt;

&lt;p&gt;This bit is hard, because you&#39;re in limbo, and it can take a while. I think with Sarah this took about a week and a half, from her final interviews to being able to send her an offer. Which I&#39;m sure for her weren&#39;t great, she could be so close to an offer - or weeks wasted on moving towards another. Sending &quot;How&#39;s it going?&quot; emails is totally fine if you&#39;ve not heard back in a week. It&#39;s not cool for a company to not get back to you if you have interviewed.&lt;/p&gt;

&lt;h3&gt;On the Launch Pad&lt;/h3&gt;

&lt;p&gt;OK, so you&#39;ve been given an offer. If it&#39;s a startup, you might be offered equity. If you don&#39;t know this world, that&#39;s OK, it&#39;s hard to give advice here - but &lt;a href=&quot;https://github.com/jlevy/og-equity-compensation&quot;&gt;this&lt;/a&gt; seems to be the most comprehensive resource, and this seems to be the &lt;a href=&quot;http://jvns.ca/blog/2015/12/30/do-the-math-on-your-stock-options/&quot;&gt;best starter&lt;/a&gt;. I started with no knowledge, and eventually got a reasonable understanding. If you want one sentence from me, &quot;equity is a risk, be damn sure you think the company is going to go somewhere.&quot; I opted for a chunk of equity in Artsy, but I&#39;ve worked at places where I&#39;ve taken the minimum option.&lt;/p&gt;

&lt;p&gt;Ideally you are presented with a great offer, I&#39;ve never negotiated salary and we don&#39;t do it at Artsy as it &lt;a href=&quot;https://en.wikipedia.org/wiki/Gender_pay_gap_in_the_United_States#Negotiating_salaries&quot;&gt;introduces bias&lt;/a&gt;, so I can&#39;t offer much there. But I have recieved &lt;a href=&quot;https://github.com/artsy/artsy.github.io/pull/205#discussion_r51386447&quot;&gt;some good&lt;/a&gt; advice I&#39;ll paraphrase.&lt;/p&gt;

&lt;p&gt;It&#39;s up to you whether to negotiate. In order to negotiate, you need to have an understanding of what people in similar companies/positions are. Ask people in the industry, friends and mentors. Talk in pay-ranges if that&#39;s easier. Note: The type of company, it&#39;s/your location, benefits, equity and the economy are all things that will move those ranges.&lt;/p&gt;

&lt;h3&gt;OK, so, while I have your attention, what else can I recommend?&lt;/h3&gt;

&lt;p&gt;The way in which you present yourself online will attract similar people. If you are always being negative, and it sure is easy, expect to end up surrounded with people who are similar. &lt;a href=&quot;https://realm.io/news/altconf-orta-therox-being-nice-in-open-source/&quot;&gt;Being nice is nice&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have a blog, and it&#39;s on medium, look into making/editing your own blog. &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; is the defacto go-to in that space, but I know people have enjoyed using &lt;a href=&quot;https://middlemanapp.com&quot;&gt;middleman&lt;/a&gt; and &lt;a href=&quot;http://gohugo.io&quot;&gt;hugo&lt;/a&gt;. Do not use Octopress, vanilla Jekyll will do you just fine.&lt;/p&gt;

&lt;p&gt;If you&#39;re not active on Twitter, you should start trying. Every time you think of something worth saying to someone next to you, say it to them, then say it to twitter. Show off pictures of what you&#39;re working on, reply to people with more followers than you when they ask questions, talk about code. It took me 4 years to hit my first thousand followers, hopefully you can be more interesting &lt;a href=&quot;https://twitter.com/orta/status/13912101&quot;&gt;than I was&lt;/a&gt; for a while.&lt;/p&gt;

&lt;p&gt;This article covers &lt;a href=&quot;http://blog.leif.me/2013/11/how-software-developers-use-twitter/&quot;&gt;how developers in general use twitter&lt;/a&gt; it&#39;s an interesting read. You can get a lot of value by following developers whose work you rely on, or whose &lt;a href=&quot;https://twitter.com/orta&quot;&gt;blog posts you think are awesome&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When people say GitHub is your resume, they are right and they are wrong. GitHub can help get you through the door, but you can&#39;t rely on that in your interviews. Check out the advice at the &lt;a href=&quot;http://code.dblock.org/2011/07/14/github-is-your-new-resume.html&quot;&gt;end of this post&lt;/a&gt; on how to make your GitHub look good for people looking at whether to interview you.&lt;/p&gt;

&lt;p&gt;However you can &lt;a href=&quot;https://ma.tt/2016/02/getting-a-job-after-coding-bootcamp/&quot;&gt;distinguish yourself by contributing to Open Source&lt;/a&gt;. &lt;a href=&quot;https://github.com/alloy/lowdown/pull/8&quot;&gt;Fix READMEs&lt;/a&gt;, &lt;a href=&quot;https://github.com/supermarin/ObjectiveSugar/pull/20&quot;&gt;improve documentation &lt;/a&gt; or &lt;a href=&quot;http://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen/&quot;&gt;the Pods you use&lt;/a&gt;. These slides go &lt;a href=&quot;https://speakerdeck.com/orta/contributing-to-open-source-doesnt-require-changing-the-world&quot;&gt;into other ways&lt;/a&gt; to contribute.&quot;&lt;/p&gt;

&lt;h4&gt;Some links for further reading&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://geekfeminism.wikia.com/wiki/Male_Programmer_Privilege_Checklist&quot;&gt;Male Programmers Privilege&lt;/a&gt; - The geek feminism wiki is a great resource for understand some of the  less positive aspects of a male-dominated culture.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.testdouble.com/posts/2014-12-02-the-social-coding-contract.html&quot;&gt;The Social Coding Contract&lt;/a&gt; - I&#39;d recommend this to anyone on any topic, regardless of what they were really asking.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.testdouble.com/posts/2016-01-25-an-empathetic-guide-to-git-conflicts.html&quot;&gt;Git Conflicts and Empathy&lt;/a&gt; - Understanding that a git conflict is that two people really want to do something positive.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.testdouble.com/posts/2015-06-08-finding-joy-at-work.html&quot;&gt;Finding Joy at Work&lt;/a&gt; - On the risks of being in a small company.&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;This blog&#39;s best-of for Juniors:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://artsy.github.io/blog/2016/01/13/OSS-Expectations/&quot;&gt;OSS Expectations&lt;/a&gt; - On how to talk the talk when thinking about Open Source.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen/&quot;&gt;Being a good OSS citizen&lt;/a&gt; - On how to walk the walk when contributing back.&lt;/li&gt;
&lt;li&gt;Video code-reviews: &lt;a href=&quot;http://artsy.github.io/blog/2016/01/14/eidolon-code-review/&quot;&gt;Eidolon&lt;/a&gt; / &lt;a href=&quot;http://artsy.github.io/blog/2015/11/05/Emergence-Code-Review/&quot;&gt;Emergence&lt;/a&gt; - On the gestalt of an app.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://artsy.github.io/blog/2015/09/01/Cocoa-Architecture-Dropped-Design-Patterns/&quot;&gt;Dropped Design Patterns&lt;/a&gt; - On understanding that technical decisions aren&#39;t permanent.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://artsy.github.io/blog/2015/07/06/how-to-write-unit-tests-like-a-brood-parasite/&quot;&gt;How To Write Unit Tests Like a Brood Parasite&lt;/a&gt; - On using metaphors to understand complex ideas.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://artsy.github.io/blog/2015/04/03/artsy-engineering-compensation-framework/&quot;&gt;Artsy&#39;s Engineering Compensation Framework&lt;/a&gt; - On ways in which you can rank yourself.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://artsy.github.io/blog/2015/03/31/the-culture-of-openness-artsy-mobile/&quot;&gt;The Culture of Openness in the Artsy Mobile Team&lt;/a&gt; - On how a team talks about it&#39;s culture.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://artsy.github.io/blog/2014/06/17/building-the-xcode-plugin-snapshots/&quot;&gt;Building the Xcode Plugin Snapshots&lt;/a&gt; - On how your tools can be improved, and how easy it is to get started.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://artsy.github.io/blog/2015/09/24/mvvm-in-swift/&quot;&gt;MVVM in Swift&lt;/a&gt; - On understanding that there is more than one way to skin a cat.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 30 Jan 2016 11:09:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/01/30/iOS-Junior-Interviews/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/01/30/iOS-Junior-Interviews/</guid>
        
        
        <category>interviewing</category>
        
        <category>ios</category>
        
        <category>juniors</category>
        
        <category>mobile</category>
        
      </item>
    
      <item>
        <title>Being a Good OSS Citizen</title>
        <description>&lt;p&gt;Let&#39;s take a look at the day in the life of an open source citizen: me. On our app, I was given &lt;a href=&quot;https://github.com/artsy/eigen/issues/971&quot;&gt;an issue&lt;/a&gt; that would allow users to refine what kinds of sale artworks they were looking at, and it included this &lt;em&gt;awesome&lt;/em&gt; slider control so they could set min/max price ranges.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/2016-01-28-being-a-good-open-source-citizen/design.png&#39;&gt;&lt;img src=&quot;/images/2016-01-28-being-a-good-open-source-citizen/design.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;Nice.&lt;/p&gt;

&lt;p&gt;But iOS doesn&#39;t have a slider like that built into UIKit, so I headed to &lt;a href=&quot;https://cocoapods.org&quot;&gt;CocoaPods.org&lt;/a&gt; to find something that would work for me. Searching for &quot;range slider&quot; yielded a bunch of results, and I looked through three or four of them.&lt;/p&gt;

&lt;p&gt;I picked &lt;a href=&quot;https://cocoapods.org/pods/MARKRangeSlider&quot;&gt;this one&lt;/a&gt; because it did &lt;em&gt;almost exactly&lt;/em&gt; what I needed, provided a reasonable level of customization, and had a history of development leading up to a recent v1.0.&lt;/p&gt;

&lt;p&gt;But I said it did &quot;almost exactly&quot; what I needed, which meant I&#39;d have to modify it. At this point, many developers either look for a different library or abandon the idea of using an existing library altogether and invent one themselves. That&#39;s a shame, because it&#39;s almost always faster and easier to improve an existing library than it is to build your own.&lt;/p&gt;

&lt;p&gt;So let&#39;s step through what I did to modify this library for my needs. First, I checked to see if there was an issue for my feature already opened on the repository; maybe someone else had tried this, and I could benefit from their experience! That wasn&#39;t the case, so I forked the library to my personal account and cloned my fork locally. Now I can modify the library&#39;s code and commit it to my fork.&lt;/p&gt;

&lt;p&gt;Next I add the library to my &lt;code&gt;Podfile&lt;/code&gt;, but I&#39;m clever about it.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;rb&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;MARKRangeSlider&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;../MARKRangeSlider&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This tells CocoaPods that I&#39;m &lt;em&gt;working&lt;/em&gt; on the pod, and, it is stored in a local directory (the one where I cloned my fork). This makes it a &quot;development pod&quot;, so that the files in Xcode are actually the ones I&#39;ve cloned locally.&lt;/p&gt;

&lt;p&gt;This is a really important, but subtle point. Normally, CocoaPods downloads copies of the files and stores those copies, but in this case, it refers to the existing files. It doesn&#39;t copy them at all: any changes I make to the library while working on my app are to the files I cloned. That means they can be easily committed and pushed up to my fork.&lt;/p&gt;

&lt;p&gt;That&#39;s exactly what I did. I made my changes from within the app until I was satisfied, and &lt;a href=&quot;https://github.com/ashfurrow/MARKRangeSlider/commit/aefbeb181b62c8c257a7d0ada1e75834489b1909&quot;&gt;pushed them to my fork&lt;/a&gt;, then pointed the &lt;code&gt;Podfile&lt;/code&gt; to my fork of the pod.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;rb&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;MARKRangeSlider&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://github.com/ashfurrow/MARKRangeSlider.git&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Nice. At this point, I continued on as a developer, running a &lt;code&gt;pod install&lt;/code&gt; to download the forked library with my commits as usual. I finished building the feature and &lt;a href=&quot;https://github.com/artsy/eigen/pull/1075&quot;&gt;PR&#39;d it using my fork&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-01-28-being-a-good-open-source-citizen/done.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I could&#39;ve stopped here, but that&#39;d be a shame. Someone else might want the same changes I made, and I should submit them back. I &lt;a href=&quot;https://github.com/vadymmarkov/MARKRangeSlider/pull/22&quot;&gt;opened a PR&lt;/a&gt; on the library to contribute my changes back, and I made sure to explain &lt;em&gt;why&lt;/em&gt; my changes were necessary. Because our app is open source, I was even able to link to &lt;em&gt;our&lt;/em&gt; PR to show the library author how their work was being used.&lt;/p&gt;

&lt;p&gt;The next morning, I woke up to find my PR had been merged, and after the author pushed an updated version of the library (including my changes), I updated our app&#39;s &lt;code&gt;Podfile&lt;/code&gt; once more.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;rb&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;MARKRangeSlider&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Then ran &lt;code&gt;pod update MARKRangeSlider&lt;/code&gt; so it would update &lt;em&gt;just&lt;/em&gt; that pod, and point it to the new release. I re-ran the unit tests to make sure I hadn&#39;t broken anything, and &lt;a href=&quot;https://github.com/artsy/eigen/pull/1077&quot;&gt;PR&#39;d the change&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This sounds like a lot, and having written it all out, I guess it is. But it&#39;s a series of small steps, not big ones, and I&#39;ve worked like this long enough that it&#39;s second-nature to me now.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I believe that using existing open source libraries is almost always better than writing your own, and I believe that improvements made to open source ought to be shared. Those beliefs shape my behaviour as a developer, and as a person.&lt;/p&gt;

&lt;p&gt;Making your first contribution to a project may seem scary, but we all &lt;a href=&quot;https://github.com/B-Sides/ELCSlider/pull/1&quot;&gt;start somewhere&lt;/a&gt;. It gets easier, and in time, you will become a paragon of open source citizenry.&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen/</guid>
        
        
        <category>code</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>oss</category>
        
        <category>review</category>
        
        <category>swift</category>
        
        <category>video</category>
        
      </item>
    
      <item>
        <title>Teaching Swift at Artsy</title>
        <description>&lt;p&gt;While the Artsy engineering team includes many disciplines, tech stacks, and personalities, we all share a few things in common: a respect for each other, an appreciation of art-meets-science, and a celebration of learning. These are actually traits shared with our entire company, even non-engineers. So last Summer when Orta and I had some down time, it occurred to us how we could do something super-productive that was congruent with our values: we could teach the company Swift.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;Like most project ideas, the first step was to create a &lt;a href=&quot;https://github.com/orta/Swift-at-Artsy&quot;&gt;GitHub repo&lt;/a&gt;. We made it open source because &lt;a href=&quot;http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html&quot;&gt;why not&lt;/a&gt;. Orta and I chatted and realized that to teach the company Swift, we would need two tracks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A track for newcomers who may have never programmed before.&lt;/li&gt;
&lt;li&gt;A track for anyone who could explain what &quot;object-oriented programming&quot; meant.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It was really important to us to include beginners who had no exposure to programming – the digital marketing and genoming teams specifically were keen to learn how to program.&lt;/p&gt;

&lt;p&gt;I&#39;m a big believer in using &quot;newcomer&quot; and &quot;informed&quot; to describe the two groups of developers – it helps prevent newcomers from feeling inadequate and better describes the expectations for students.&lt;/p&gt;

&lt;p&gt;We also focused on Swift-only, no iOS. That allowed us to focus on the language – which was fun because it let us focus on us learning new stuff, too – and we kept the course to five one-hour sessions (per track).&lt;/p&gt;

&lt;p&gt;Next step was obviously to create a Slack chatroom. We re-purposed the oft-neglected room dedicated to Taylor Swift and turned it into a place where anyone could ask questions and share resources. It&#39;s also a helpful place to @channel everyone to remind them about the classes.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/2016-01-26-swift-at-artsy/chatroom.png&#39;&gt;&lt;img src=&quot;/images/2016-01-26-swift-at-artsy/chatroom.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;Orta taught the beginner course and I TA&#39;d it, answering questions as he instructed and offering suggestions when I felt something should be clarified (kind of like pair-programming except for teaching). We switched roles for the informed class. Preparing course materials was done through GitHub pull requests, which integrated well into our existing workflow on the mobile team.&lt;/p&gt;

&lt;p&gt;We ran into some troubles in the first classes of both tracks: Swift 2 was in beta, and getting everyone on the correct versions of Xcode proved... difficult. Keeping them up-to-date as Xcode betas continued to be released over five weeks was also challenging. This was a problem in both tracks, but some problems were track-specific.&lt;/p&gt;

&lt;p&gt;Explaining fundamental concepts like variables and for-loops to beginners is challenging. It reminded me of when I TA&#39;d intro-to-Java courses in University (while the code then was obviously much uglier, &lt;code&gt;javac&lt;/code&gt; is arguably more user-friendly than Xcode). Having the pair-programming approach worked well to help explain these concepts.&lt;/p&gt;

&lt;p&gt;The biggest challenge with the informed class was rounding everyone up to actually attend the classes. Engineers are addicted to being busy, and like most side-projects, everyone was initially very excited about the course, but that interest dropped off quickly. Orta would help by physically going to our colleagues&#39; desks and gently reminding them.&lt;/p&gt;

&lt;p&gt;Regardless of the challenges, the course had a significant impact, both within Artsy and in the larger Swift community. Some of the course materials have been &lt;a href=&quot;https://github.com/orta/Swift-at-Artsy/blob/master/Beginners/Lesson%20One/README_ZH.md&quot;&gt;translated into Chinese&lt;/a&gt; and we regularly received suggestions (and occasionally corrections) about our content. Newcomers to programming gained insights into &lt;em&gt;what exactly engineers do&lt;/em&gt; and why bugs happen, while informed colleagues saw parallels between Swift and their own favourite languages (most often Scala). The course materials have also helped other mobile team members (who usually write only Objective-C) get started with Swift.&lt;/p&gt;

&lt;p&gt;The beginner students really appreciated &lt;a href=&quot;https://github.com/orta/Swift-at-Artsy/tree/master/Beginners/Lesson%20Three&quot;&gt;lesson three&lt;/a&gt; because we used real-world (scaled down) data structures that Artsy actually uses. We presented problems to solve – problems our colleagues were familiar with from their day-to-day work – and we showed how they can be solved with programming. &lt;a href=&quot;https://github.com/orta/Swift-at-Artsy/tree/master/Beginners/Lesson%20Four&quot;&gt;Lesson four &lt;/a&gt; was the most well-received lesson as it featured some concrete &quot;making the computer do cool stuff&quot; material.&lt;/p&gt;

&lt;p&gt;Finally, there was just a great sense of accomplishment. Orta and I had taken time during a downtime in engineering work and turned it into something that helped the company and helped the community. We got thanked internally and externally, and that felt great; helping others has a lot of tangible benefits, but feeling good about it is one of my favourites.&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/01/26/swift-at-artsy/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/01/26/swift-at-artsy/</guid>
        
        
        <category>code</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>oss</category>
        
        <category>review</category>
        
        <category>swift</category>
        
        <category>teaching</category>
        
        <category>video</category>
        
      </item>
    
      <item>
        <title>Eidolon: Code Review</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/artsy/eidolon&quot;&gt;Eidolon&lt;/a&gt; is the third app from Artsy&#39;s mobile team, and it was the &lt;a href=&quot;http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&quot;&gt;first to be developed totally in the open&lt;/a&gt;. It&#39;s often used as a reference for what an app written in Swift, or written using FRP, should look like. Given how interested the community seems to be around the app, it&#39;s about time we did a walkthrough of the code.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;This was done as a part of the engineering team&#39;s weekly lunch and learn sessions, where we get together and share what we&#39;ve been working on. Since most of you aren&#39;t Artsy engineers, and so you can&#39;t ask questions in-person, please feel free to &lt;a href=&quot;https://github.com/artsy/eidolon/issues/new&quot;&gt;open an issue&lt;/a&gt; to ask for any clarifications.&lt;/p&gt;

&lt;p&gt;Jump &lt;a href=&quot;https://www.youtube.com/watch?v=LAAMk7oLrmg&quot;&gt;to YouTube&lt;/a&gt; for the video, or click more for a smaller inline preview.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;iframe width=&#39;100%&#39; height=&#39;600&#39; src=&#39;https://www.youtube.com/embed/LAAMk7oLrmg &#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/01/14/eidolon-code-review/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/01/14/eidolon-code-review/</guid>
        
        
        <category>code</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>oss</category>
        
        <category>review</category>
        
        <category>swift</category>
        
        <category>video</category>
        
      </item>
    
      <item>
        <title>Open Expectations</title>
        <description>&lt;p&gt;The Artsy engineering team has been moving towards Open Source by Default. In 2015 the Mobile team managed to get there. Since then, we&#39;ve been writing up our process on this blog and offering advice to anyone would would ask for it.&lt;/p&gt;

&lt;p&gt;I&#39;ve been in talks with lots of companies you&#39;ve heard of, on the how and the why of this. Recently &lt;a href=&quot;https://ello.co&quot;&gt;Ello&lt;/a&gt; got in touch, and we tried to &lt;a href=&quot;https://en.wikipedia.org/wiki/Dyson_sphere&quot;&gt;capture the process&lt;/a&gt;.  They came out with a great post that I&#39;d strongly &lt;a href=&quot;https://ello.co/jayzes/post/tqLL-Z8U8GfbDySRk6wbKg&quot;&gt;recommend reading&lt;/a&gt;. I&#39;d like to try and come from the other side, and address what are the questions people ask. Consider this a FAQ for how the mobile team does/got to OSS by default.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;img src = &quot;https://d324imu86q1bqn.cloudfront.net/uploads/asset/attachment/3421690/ello-optimized-08acbd80.gif&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Really, is &lt;em&gt;everything&lt;/em&gt; Open Source?&lt;/h3&gt;

&lt;p&gt;No, and it probably never will. There are companies who are (e.g. &lt;a href=&quot;https://buffer.com/transparency&quot;&gt;Buffer&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://automattic.com&quot;&gt;Automattic&lt;/a&gt;) however Artsy is considerably less transparent in-comparison. We have code-bases that will stay closed, and we have data that could stay closed.&lt;/p&gt;

&lt;p&gt;Companies revolve around ideas, and understanding what your core value is important. A company who make money purely off selling their apps could be easily copied, and OSS by default won&#39;t work for them. Artsy is a platform, but OSS by default can work for us because a technical platform is just one aspect of what we offer.&lt;/p&gt;

&lt;h3&gt;How did we start the process?&lt;/h3&gt;

&lt;p&gt;We&#39;re lucky to have &lt;a href=&quot;http://www.forbes.com/special-report/2014/30-under-30/art-and-style.html&quot;&gt;technical&lt;/a&gt; &lt;a href=&quot;https://www.linkedin.com/in/sebastiancwilich&quot;&gt;co-founders&lt;/a&gt;, and a CTO with a strong belief in &lt;a href=&quot;http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html&quot;&gt;Open Source&lt;/a&gt;. So we had a head-start, I respect that.&lt;/p&gt;

&lt;p&gt;Like all big ideas, it started out small. We&#39;d abstract out shared concerns into libraries. This is something that anyone who has heard a little bit about Open Source can get behind. &quot;We&#39;re building on top of &lt;em&gt;x&lt;/em&gt;, so we really should give back out &lt;em&gt;x&lt;/em&gt;+&lt;em&gt;y&lt;/em&gt;&quot; it&#39;s low-risk, and potentially high reward. Getting the company on-board with your OSS libraries is about acclimatisation.&lt;/p&gt;

&lt;p&gt;This works best by taking small incremental steps. You need buy-in from everyone involved through-out the process. Moving to OSS by Default is 30% technical work and 70% political relationships. There has to be infrastructure in place in order to not leak secrets, but you also need to ensure that the entire company doesn&#39;t feel threatened by the insight offered by opening the development process. There is no shortcut here.&lt;/p&gt;

&lt;p&gt;For me, this process involved talking with everyone involved in each project. Setting aside 1-on-1 time specifically on the subject to answer question about the ramifications for OSSing it. This ranged from &quot;we will need to change the flow around &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;.&quot; to &quot;Yes, the competition will be able to see how we do &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;.&quot; I came very prepared to these meetings.&lt;/p&gt;

&lt;p&gt;For our mobile apps, we progressively introduced Open by Default to our apps based on their age. We started out by creating a whole &lt;a href=&quot;/blog/2014/11/13/eidolon-retrospective/&quot;&gt;new project&lt;/a&gt; as Open Source. Then started applying what we had learned to &lt;a href=&quot;/blog/2015/04/28/how-we-open-sourced-eigen/&quot;&gt;older&lt;/a&gt; &lt;a href=&quot;/blog/2015/08/06/open-sourcing-energy/&quot;&gt;projects&lt;/a&gt;. They had more risk, given that they were mature apps.&lt;/p&gt;

&lt;h3&gt;Couldn&#39;t someone make a business copying me?&lt;/h3&gt;

&lt;p&gt;It&#39;s also worth remembering that an app being OSS does not stop it &lt;a href=&quot;http://venturebeat.com/2014/03/30/threes-vs-2048-when-rip-offs-do-better-than-the-original-game/&quot;&gt;being copied&lt;/a&gt;. Or, well, your &lt;a href=&quot;http://www.bloomberg.com/bw/articles/2012-02-29/the-germany-website-copy-machine&quot;&gt;entire business&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Code only represents the &lt;em&gt;past to almost present&lt;/em&gt; of your business, losing a valuable colleague hurts because of their ability to move your business forwards. A &quot;fresh replacement&quot; has a while to go in terms of being able to make the change you want. Someone trying to build off your source, has to learn to understand your motivations, your aspirations and then try build what they&#39;d like around that. It&#39;s not good business sense.&lt;/p&gt;

&lt;h3&gt;License Selection&lt;/h3&gt;

&lt;p&gt;I covered this in &lt;a href=&quot;/blog/2015/12/10/License-and-You/&quot;&gt;Licensing for OSS&lt;/a&gt;. If you want the TL:DR for Apps on app stores, jump to &quot;Viral&quot;.&lt;/p&gt;

&lt;p&gt;We use the &lt;a href=&quot;https://en.wikipedia.org/wiki/MIT_License&quot;&gt;MIT license&lt;/a&gt; on all Open Source projects. It&#39;s worked out so far for us, because as a platform each individual component can exist standalone. Having a fork of all our projects does not make you a competitor to us.&lt;/p&gt;

&lt;h3&gt;I have code that &lt;em&gt;has&lt;/em&gt; to stay hidden&lt;/h3&gt;

&lt;p&gt;So do we! In the iOS world, we use API compatible Open/Closed CocoaPods that allow for us to mock out for OSS consumers and let us use &lt;a href=&quot;/blog/2014/06/20/artsys-first-closed-source-pod/&quot;&gt;private implementations&lt;/a&gt;. If you&#39;re trying to hide secret API calls, it&#39;s probably easier for someone to run a &lt;a href=&quot;http://www.charlesproxy.com&quot;&gt;proxy&lt;/a&gt; than it is to find the section of code calling it.&lt;/p&gt;

&lt;p&gt;Having the core of your application Open Source doesn&#39;t mean you cannot develop features in private. I &lt;a href=&quot;https://github.com/artsy/eigen/pull/302&quot;&gt;built a WatchOS app&lt;/a&gt; for Eigen entirely on a private repo, where once a week for 2 months I rebase&#39;d changes from the main repo. When we felt comfortable about making it known publicly we were working on it - I brought it over to a public repo and initiated the &lt;a href=&quot;https://github.com/artsy/eigen/pull/302&quot;&gt;code review&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Our expectations of OSS contributors&lt;/h3&gt;

&lt;p&gt;We don&#39;t expect people to contribute to our apps. For libraries, that&#39;s different. I think &lt;a href=&quot;https://ello.co/jayzes/post/tqLL-Z8U8GfbDySRk6wbKg&quot;&gt;Ello&#39;s write-up&lt;/a&gt; really nailed this point, so I&#39;ll just quote jayzes:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;On one hand, we have library and infrastructure code — things that are more generic and reusable. These are the sort of thing that we can more easily envision starting to grow communities around, albeit small ones.&lt;/p&gt;

&lt;p&gt;On the other hand, we have custom-built applications, which are likely to have limited utility outside of their current purpose due to size and coupling to other parts of Ello’s infrastructure (the Ello API, for one). We don’t envision these apps building much of a community around themselves in the way that most open source tools and libraries do, and see the primary value in opening them up coming as a result of increased transparency. That having been said, we’ll certainly accept pull requests that fit our product roadmap and engineering standards, should anyone feel like jumping in and contributing!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Beautiful. This is exactly how I feel, and in over a year these expectations have been met. Some of our libraries have become big, and our apps have received small feature PRs. We&#39;re pleasantly surprised when it happens, but we don&#39;t expect it.&lt;/p&gt;

&lt;h3&gt;What didn&#39;t we expect?&lt;/h3&gt;

&lt;p&gt;I didn&#39;t expect to be told face to face how many people have read, and learned from our codebases. We get around 120 unique clones of our iOS apps every week. People tell us that it&#39;s where they found a certain technique, or that they could see how the trade-offs were made for certain decisions.&lt;/p&gt;

&lt;p&gt;I also under-estimated how useful open code is in encouraging a culture of writing. Ash once quoted &lt;a href=&quot;https://twitter.com/ashfurrow/status/676814159363842048&quot;&gt;me in a tweet&lt;/a&gt; saying:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Order of importance: blog posts &gt; types &gt; tests&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;While it is a joke against functional programmers, in general; having these huge codebases gives a lot to talk about. A commit says the what, a pull request the how and a blog post gives the why. Writing about our code allows us to provide documentation for future employees with the context around how decisions were made. Nobody &lt;em&gt;wants&lt;/em&gt; to ship messy code, but a lot of the time you choose to in order to provide something positive.&lt;/p&gt;

&lt;h3&gt;How does Open Source affect security&lt;/h3&gt;

&lt;p&gt;Artsy has a &lt;a href=&quot;https://www.artsy.net/security&quot;&gt;security policy&lt;/a&gt;, with bounties and ways to report issues. From our perspective so far, having this open has not affected the reports we receive. If 1Password &lt;a href=&quot;https://teams.1password.com/white-paper/1Password%20for%20Teams%20White%20Paper.pdf&quot;&gt;can say&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We believe that openness always trumps “security through obscurity”.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Then show off their algorithms that keep passwords safe, then so long as we&#39;re careful about our keys and stick to best security practices. We seem to be doing alright.&lt;/p&gt;

&lt;h3&gt;What is a good approach to talk to the legal team?&lt;/h3&gt;

&lt;p&gt;I have a friend who works in a very large company. He told me that he was aiming to Open Source his app. He had had a few meetings with the legal team that didn&#39;t really go anywhere. After a few meetings, he explained that they weren&#39;t aiming for community-building with this, but aiming to develop in the open. This change of perspective, changed the tone of the meetings from then on in. It became much easier to start the political work necessary to even begin working on the technical aspect.&lt;/p&gt;

&lt;h3&gt;Alright, so I&#39;m gonna need ammo for these meetings.&lt;/h3&gt;

&lt;p&gt;Looking back at the last year, here&#39;s been some highlights:&lt;/p&gt;

&lt;h4&gt;Personal&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;It&#39;s gratifying to give back to communities who help you get things done.&lt;/li&gt;
&lt;li&gt;It&#39;s so much easier to talk about &lt;a href=&quot;https://github.com/artsy/eigen/issues/586&quot;&gt;technical challenges&lt;/a&gt;, and &lt;a href=&quot;/blog/2015/12/15/Automating-Testflight-Deploys/&quot;&gt;achievements&lt;/a&gt; when you can let people explore; before, the code review, and after.&lt;/li&gt;
&lt;li&gt;The code you write does not become unavailable to you when you leave the company. Carry your best ideas between jobs.&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;Company-wide&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;You can structure in a way so that contributions within your team reflect how working in the OSS community is. Lowering the barrier of entry for your team to contribute back to their dependencies. There is little cultural differences between being a high-level contributor to CocoaPods and working in the Artsy mobile team.&lt;/li&gt;
&lt;li&gt;Working in the open is a great way to raise the profiles of your team, and the individuals on it. This opens extra potential for personal growth for individuals. Not just professional.&lt;/li&gt;
&lt;li&gt;It can make it easier to hire, because you can &quot;&lt;a href=&quot;https://github.com/artsy/mobile/&quot;&gt;show&lt;/a&gt;&quot;, not &quot;&lt;a href=&quot;https://www.artsy.net/article/artsy-jobs-mobile-engineer&quot;&gt;tell&lt;/a&gt;&quot; the positives in your team culture.&lt;/li&gt;
&lt;li&gt;You open the doors to potential contributors. Those contributors could eventually become hires.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is still pretty new, there&#39;s a lot to explore in the space. The mobile team at Artsy is always happy to talk with people interested in doing it themselves. Send us an email at &lt;a href=&quot;mailto:mobile@artsy.net&quot;&gt;mobile@artsy.net&lt;/a&gt;, tweet to &lt;a href=&quot;https://twitter.com/ArtsyOpenSource&quot;&gt;@ArtsyOpenSource&lt;/a&gt; or DM me &lt;a href=&quot;https://twitter.com/orta&quot;&gt;@orta&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Jan 2016 11:09:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2016/01/13/OSS-Expectations/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2016/01/13/OSS-Expectations/</guid>
        
        
        <category>meta</category>
        
        <category>mobile</category>
        
        <category>oss</category>
        
      </item>
    
      <item>
        <title>Future Fridays</title>
        <description>&lt;p&gt;Artsy&#39;s Platform engineering team is responsible for much of our shared infrastructure and services. Some of that responsibility is naturally focused on the very near term, such as diagnosing service interruptions and fixing bugs. However, we must regularly balance that with more long-term-focused work such as evaluating new technologies, paying off technical debt, and devising foundational improvements to our platform.&lt;/p&gt;

&lt;p&gt;This is a tricky balance! Near-term work is appealing. It&#39;s well-understood, more easily scoped, and often promises a satisfying &quot;quick fix.&quot; Sometimes, there&#39;s even a customer (internal or external) eagerly awaiting the result. We recently introduced &quot;Future Fridays&quot; to help dedicate time to longer-term, open-ended work despite these urgent temptations.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;h2&gt;The Rules&lt;/h2&gt;

&lt;p&gt;The rules are simple. Each Friday, we give ourselves permission to suspend our usual work. Instead, we zoom out and try to answer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What are the patterns emerging in our work--repeated smells or obstacles--that could be addressed at the root?&lt;/li&gt;
&lt;li&gt;What new technologies might we want to have in place 6, 12, or 18 months from now?&lt;/li&gt;
&lt;li&gt;What will we need to get to 10x the scale of data, traffic, or revenue?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Finally, we try to share our goals and our results. This usually takes the form of a simple announcement in the team&#39;s chat room.&lt;/p&gt;

&lt;p&gt;Some examples of topics we&#39;ve pursued:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Migrating a slow, failure-prone component in our analytics stack to a more scalable data warehouse&lt;/li&gt;
&lt;li&gt;Learning a promising new programming language or framework&lt;/li&gt;
&lt;li&gt;Testing alternative continuous integration services&lt;/li&gt;
&lt;li&gt;Extracting email generation from our main API into a dedicated service&lt;/li&gt;
&lt;li&gt;Migrating to a more performant background queue&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;The Results&lt;/h2&gt;

&lt;p&gt;Future Friday has become a well-loved part of our weekly rhythm as a team.&lt;/p&gt;

&lt;p&gt;Throughout the week, we constantly wonder &quot;what if...&quot; (as teams like ours tend to do). Some of the more &quot;out there&quot; notions quickly enter the Future Friday parking lot. (We might even include a &lt;em&gt;#FF&lt;/em&gt; hashtag for easy searching of chat transcripts.) And then we get back to solving the problem at hand.&lt;/p&gt;

&lt;p&gt;When Friday arrives, we have a list of ideas but must weigh their potential value and radically narrow their scope to fit the time constraint.&lt;/p&gt;

&lt;h2&gt;Tips&lt;/h2&gt;

&lt;p&gt;Borrow some lessons from our Future Friday experiment:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build a backlog.&lt;/strong&gt; It took a few weeks to accumulate a healthy backlog of ideas that were both pertinent and exciting to individuals on the team. Start now!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Protect the time.&lt;/strong&gt; It&#39;s tempting to keep pushing forward your regular work (&quot;I&#39;ll just deploy that thing I was working on yesterday&quot;), but Future Friday only works if you create some slack capacity. We suspend our usual stand-up meetings, expect that folks may decline meetings or be slower to respond, and &lt;em&gt;everyone&lt;/em&gt; (including managers) participates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go your own way.&lt;/strong&gt; Work on something you&#39;re excited about. Fridays are fun and productive when everyone explores something they&#39;re personally energized about (&lt;em&gt;not&lt;/em&gt; just something their pointy-haired boss is excited about). As a result, each week&#39;s efforts are diverse (and sometimes, plain weird).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It&#39;s not &quot;20% time.&quot;&lt;/strong&gt; Fridays aren&#39;t totally open-ended. They&#39;re protected time for work that&#39;s relevant and valuable to the business, but with an explicitly longer time horizon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Call it.&lt;/strong&gt; Don&#39;t &lt;em&gt;pre&lt;/em&gt;-judge ideas, but when something doesn&#39;t pass muster, share any lessons and move on. (E.g., a platform isn&#39;t fully baked, transition costs are too high, or results don&#39;t match hype.) The bar for &lt;em&gt;exploring&lt;/em&gt; an idea is low on Friday, but our standard for &lt;em&gt;shipping&lt;/em&gt; production software is not.&lt;/p&gt;

&lt;p&gt;To our surprise, though, often the result has been exactly the opposite. Given a few undisturbed hours of attention, some ideas quickly become feasible and even production-worthy. Even more projects have hatched into full-fledged, rest-of-the-week projects, using Future Friday to overcome an initial learning curve.&lt;/p&gt;

&lt;p&gt;Now, Future Friday is anticipated each week. We&#39;ve gotten a head start on some projects that were daydreams a little while ago. And other teams have launched Future Fridays of their own.&lt;/p&gt;

&lt;p&gt;We hope you found our experiment interesting. Let us know your questions, and especially your own experiences, below!&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;P.S. &lt;a href=&quot;https://www.artsy.net/jobs&quot;&gt;Artsy is hiring&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Dec 2015 11:09:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/12/22/future-fridays/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/12/22/future-fridays/</guid>
        
        
        <category>team</category>
        
      </item>
    
      <item>
        <title>Automating TestFlight Deploys using Fastlane</title>
        <description>&lt;p&gt;I&#39;ve been a really &lt;a href=&quot;http://artsy.github.io/blog/2015/09/18/Cocoa-Architecture-Dependencies/&quot;&gt;strong supporter&lt;/a&gt; of the &lt;a href=&quot;https://fastlane.tools&quot;&gt;fastlane&lt;/a&gt; toolset. I think it fixes a lot of common developer problems, in a space that Apple doesn&#39;t really touch. The command line.&lt;/p&gt;

&lt;p&gt;We&#39;ve added hints of fastlane to our apps at different rates, &lt;a href=&quot;https://github.com/artsy/eidolon/&quot;&gt;Eidolon&lt;/a&gt; uses fastlane for everything but &lt;a href=&quot;https://github.com/artsy/eigen/&quot;&gt;Eigen&lt;/a&gt;/&lt;a href=&quot;https://github.com/artsy/energy&quot;&gt;Energy&lt;/a&gt;/&lt;a href=&quot;https://github.com/artsy/emergence&quot;&gt;Emergence&lt;/a&gt; have been pretty slow on the uptake, though they have more complicated setups, being App Store apps.&lt;/p&gt;

&lt;p&gt;When &lt;a href=&quot;https://krausefx.com/&quot;&gt;Felix&lt;/a&gt; announced &lt;a href=&quot;https://krausefx.com/blog/introducing-match-a-new-approach-to-code-signing&quot;&gt;match&lt;/a&gt; this week, I felt like he tackled a problem we face in our &lt;a href=&quot;http://artsy.net/job/mobile-engineer&quot;&gt;small dev team&lt;/a&gt;. I integrated this, only to find that it could also fix my problems with deployment. The rest of this post goes into the &quot;how I did this.&quot; You can also cheat and look at the &lt;a href=&quot;https://github.com/artsy/eigen/compare/d06270882aadec8f03927455a5229b53dd0a73c8...9eaf9082ebdcdf75f12ad2804260587e01526f2d&quot;&gt;commits&lt;/a&gt; directly.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;First up, a TLDR for &lt;a href=&quot;https://github.com/fastlane/match&quot;&gt;match&lt;/a&gt;. &lt;em&gt;match is a tool that keeps all of your code-signing setup in a private git repo.&lt;/em&gt; We currently keep them in a shared 1Password vault. By switching to using a private git repo we can can use our existing GitHub authentication for CI to provide access to the certificates for signing on circle.&lt;/p&gt;

&lt;p&gt;We use a &lt;a href=&quot;https://github.com/artsy/eigen/blob/master/Makefile&quot;&gt;Makefile&lt;/a&gt;, I know that fastlane provides an awesome tool in the form of &lt;a href=&quot;https://github.com/fastlane/fastlane#features&quot;&gt;fastlane lanes&lt;/a&gt; - but we&#39;re pretty happy with a Makefile, they&#39;re the simplest tool that does what we need.&lt;/p&gt;

&lt;p&gt;I wanted to lower the barrier for us shipping betas, so I opted to add another build step in the CI process. This step checks what branch is it, and if it&#39;s the beta branch, grab the certs, then deploy.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;deploy_if_beta_branch:
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(LOCAL_BRANCH)&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;beta&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; make certs&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; make ipa&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; make distribute&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;make certs&lt;/code&gt; is really simple, it runs: &lt;code&gt;bundle exec match appstore --readonly&lt;/code&gt; which and pulls metadata from a &lt;a href=&quot;https://github.com/artsy/eigen/blob/9eaf9082ebdcdf75f12ad2804260587e01526f2d/fastlane/Matchfile&quot;&gt;Matchfile&lt;/a&gt;. This means we can sign app store builds on CI.&lt;/p&gt;

&lt;p&gt;If you don&#39;t know what the &lt;code&gt;bundle exec&lt;/code&gt; prefix is, I&#39;d recommend reading my guide on the CocoaPods website for &lt;a href=&quot;https://guides.cocoapods.org/using/a-gemfile.html&quot;&gt;Gemfile&lt;/a&gt;s.&lt;/p&gt;

&lt;p&gt;The next step is generating an ipa, we do this with &lt;a href=&quot;https://github.com/fastlane/gym&quot;&gt;gym&lt;/a&gt; via &lt;code&gt;make ipa&lt;/code&gt; which looks like this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;ipa: set_git_properties change_version_to_date
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;gym
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;It executes some make tasks to ensure we know what git commit each build is, and we use the date to provide a faux-&lt;a href=&quot;http://semver.org&quot;&gt;semver&lt;/a&gt; for apps.&lt;/p&gt;

&lt;p&gt;Gym will build our app, according to our &lt;a href=&quot;https://github.com/artsy/eigen/blob/9eaf9082ebdcdf75f12ad2804260587e01526f2d/fastlane/GymFile&quot;&gt;Gymfile&lt;/a&gt;. Nothing too surprising in there. It will output an &lt;a href=&quot;http://apple.stackexchange.com/questions/26550/what-does-ipa-stand-for&quot;&gt;ipa&lt;/a&gt; and a &lt;a href=&quot;http://stackoverflow.com/questions/3656391/whats-the-dsym-and-how-to-use-it-ios-sdk&quot;&gt;dsym&lt;/a&gt; that &lt;code&gt;make distribute&lt;/code&gt; can handle.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;make distribute&lt;/code&gt; is a pretty easy one, we generate a CHANGELOG via Ruby, then run the command &lt;code&gt;bundle exec pilot upload -i build/Artsy.ipa&lt;/code&gt;, it will ship it to iTunes Connect after configuration from the &lt;a href=&quot;https://github.com/artsy/eigen/blob/9eaf9082ebdcdf75f12ad2804260587e01526f2d/fastlane/AppFile&quot;&gt;Appfile&lt;/a&gt;. This is great, but it goes one better. It will, by default, run a synchronous check for whether the App has finished processing.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;a href=&#39;/images/2015-12-15-Automating-Testflight-Deploys/ci-itunes-screenshot.png&#39;&gt;&lt;img src=&quot;/images/2015-12-15-Automating-Testflight-Deploys/ci-itunes-screenshot.png&quot;&gt;&lt;/a&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;date-container&#39;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;p&gt;This is awesome. I&#39;d like to add a Slack message to tell us that it&#39;s shipped too, which would be much easier if we used a &lt;a href=&quot;https://github.com/fastlane/fastlane/tree/master/docs#after_all-block&quot;&gt;Fastfile&lt;/a&gt;. We&#39;ve not entirely moved all of our apps to TestFlight, this is our first experiment in the space, we&#39;ve been really happy with Hockey, and still are. However, without trying new things we&#39;ll never be able to know what we should consider internal best practices.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Dec 2015 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/12/15/Automating-Testflight-Deploys/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/12/15/Automating-Testflight-Deploys/</guid>
        
        
        <category>ci</category>
        
        <category>devops</category>
        
        <category>ios</category>
        
        <category>mobile</category>
        
      </item>
    
      <item>
        <title>Licenses for OSS Code</title>
        <description>&lt;p&gt;As a part of our internal Lunch and Learn series, I  gave a talk to our developers with an overview of the different types of source code licenses available.&lt;/p&gt;

&lt;p&gt;We always recommend MIT within Artsy, but understanding what the other ones are and &lt;a href=&quot;http://artsy.github.io/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy/&quot;&gt;why we made&lt;/a&gt; the choices we have done is valuable.&lt;/p&gt;

&lt;p&gt;Jump &lt;a href=&quot;https://www.youtube.com/watch?v=0r7JcN3Q_LY&quot;&gt;to YouTube&lt;/a&gt; for the video, or click more for a smaller inline preview, as well as all of the speakers notes.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;iframe width=&#39;100%&#39; height=&#39;600&#39; src=&#39;https://www.youtube.com/embed/0r7JcN3Q_LY &#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;div class=&#39;meta-container&#39;&gt;&lt;header&gt;&amp;nbsp;&lt;/header&gt;&lt;/div&gt;&lt;div class=&#39;content-container&#39;&gt;&lt;div class=&#39;entry-content&#39;&gt;&lt;/p&gt;

&lt;h3&gt;Licenses For Code&lt;/h3&gt;

&lt;p&gt;Attn:&lt;em&gt;I am not a lawyer&lt;/em&gt;, but I have to care about this from an app dev perspective, and a dependency manager perspective.&lt;/p&gt;

&lt;p&gt;Recommendation for further reading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;http://choosealicense.com&lt;/li&gt;
&lt;li&gt;https://tldrlegal.com/&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We&#39;ll talk about 3 types of licenses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Permissive: MIT/BSD, used by jQuery, Rails, Artsy OSS&lt;/li&gt;
&lt;li&gt;Mostly Permissive: Apache/Mozzila, used by SVN, Firefox&lt;/li&gt;
&lt;li&gt;Copyleft: GPL, used by Git, Linux, Wordpress&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Common Components&lt;/h3&gt;

&lt;p&gt;All share one important thing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;YOU MAY USE THIS&lt;/li&gt;
&lt;li&gt;NO WARRANTY&lt;/li&gt;
&lt;li&gt;DISCLAIMER OF LIABILITY&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Which is basically the crux of how we can all actually use and write OSS without ending up bankrupt. E.g. when a major component of your infrastructure &quot;fails&quot; - it&#39;s not the fault of the author. Example: &lt;a href=&quot;https://en.wikipedia.org/wiki/Shellshock_(software_bug&quot;&gt;Shellshock&lt;/a&gt;) - no-one tried suing the maintainers of Bash.&lt;/p&gt;

&lt;h3&gt;License Free&lt;/h3&gt;

&lt;p&gt;By choosing to not include a license, you only applying your copyright to the code. All code is the copyright of someone, because creation of anything is covered by copyright. Copyright is, err, complex. Roughly speaking though, there is no contract between you and someone using your code. This means &lt;em&gt;all&lt;/em&gt; of the power is in favour of the library author. A library consumer would need to email the author and ask for permission on a case by case basis, even then there is nothing stopping a developer revoking the ability for you to use their library after the fact. It&#39;s also different depending on the country the library author is in. However in the end the default copyright is not a license, so add one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.codinghorror.com/pick-a-license-any-license/&quot;&gt;This is basically the default license for code. &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means that code on a blog could not be safe to use unless they&#39;ve declared its license, whereas for something like stack overflow all of the contents there are licensed under the Creative Commons. Which I&#39;ll talk about later.&lt;/p&gt;

&lt;p&gt;Just uploading some code to GitHub actually does put it under a license of sort, which includes the ability for someone to fork and view the code. It&#39;s explicit in the GitHub T&amp;amp;C, they could not have those features without it. Other than that though, you offer no contract with the library user.&lt;/p&gt;

&lt;h3&gt;OSI&lt;/h3&gt;

&lt;p&gt;So when we say Open Source license, we are talking about licenses that come from the Open Source Initiative. They are a pragmatic group who say whether a license should be classed as &#39;open source&#39; or not. A bit weird, but they generally just debate a lot of the legal stuff in these licenses and try to find holes so that everyone is protected. It&#39;s basically a seal of approval. There are very few licenses that are not OSI approved, the one you might know is the WTFPL - which is basically default copyright anyway.&lt;/p&gt;

&lt;p&gt;On the mobile team we requested that dependencies of ours convert from WTFPL so that we don’t have the issue mention about the public domain, we as Artsy have little protection against the library authors future wishes.&lt;/p&gt;

&lt;h3&gt;Permissive&lt;/h3&gt;

&lt;p&gt;What you think of as open source is the modern day permissive license.&lt;/p&gt;

&lt;p&gt;These are the least restrictive, and are considered &quot;business friendly.&quot; They apply very little rules between author and library consumer.&lt;/p&gt;

&lt;p&gt;People use permissive licenses because conceptually they allow the most programmer freedom to use, change and improve a library.&lt;/p&gt;

&lt;p&gt;They also protect the author, in the sense that a consumer cannot claim that the author created the product the consumer made. They protect the author from liability.&lt;/p&gt;

&lt;h4&gt;The one thing&lt;/h4&gt;

&lt;p&gt;For example someone could take your library, and rename it, then apply a different license. Not breaking any rules, unless they ignore attribution.&lt;/p&gt;

&lt;p&gt;This happened this year with &lt;a href=&quot;https://github.com/Microsoft/WinObjC&quot;&gt;WinObjC&lt;/a&gt;
Microsoft&#39;s version of Objective-C, which also aimed for API compatibility with Apple&#39;s developer frameworks. They built it up with a lot of other source code, but didn&#39;t provide attribution.&lt;/p&gt;

&lt;p&gt;https://github.com/Microsoft/WinObjC/issues/35
https://news.ycombinator.com/item?id=10024377&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The ONE SINGLE requirement of the Cocotron MIT license is that the license text, including copyright holders, remains in the source. THAT&#39;S IT, can you please manage to do that.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;Patently Permissive&lt;/h3&gt;

&lt;p&gt;Moving up in terms WRT strength of the contract, there is the permissive+patent libraries. These allow library authors to have patents on the software. This can make it more business friendly, depending on the business goals. The most common are Apache and the Mozilla Public License.&lt;/p&gt;

&lt;h3&gt;Viral&lt;/h3&gt;

&lt;p&gt;The GPL, and it&#39;s crew. Roughly speaking, they say that if you want to include any GPL&#39;d code in your projects, you need to make your entire project GPL. There is an important distinction in the GPL in that version 2, and version 3 differ in important ways. The one that I think is most important is that GPL 3 allows sub-licensing. This means that you can say &quot;I can give Artsy a license for this code under BSD terms&quot;, allowing for some flexibility in how you apply the license.&lt;/p&gt;

&lt;p&gt;It&#39;s considered viral because if you have any GPL code anywhere, then everything becomes GPL.  Rule of thumb is to avoid this license, however I&#39;d like to offer a reason why Artsy might ship GPL code.&lt;/p&gt;

&lt;p&gt;On the OSS iOS side, we release all of our apps as MIT. I could be quite worried about people shipping copies of our applications. For example there could be fake versions of the Artsy app on the App Store, or competitors could use it to bootstrap. If I was very, very worried I would ship it as GPL 3 with an MIT sublicense to Artsy. This means that anyone who ships a copy of our app to the app store without our express permission for a sublicense that allows DRM.&lt;/p&gt;

&lt;p&gt;Generally though we don’t need to do this because we have the ability to revoke an app’s access to the API, meaning it cannot talk to Artsy, and our apps are pretty useless at that point.&lt;/p&gt;

&lt;h3&gt;Creative Commons&lt;/h3&gt;

&lt;p&gt;So, the Creative Commons is a license on content like videos, images and corpuses of text. They are not OSI approved, and &lt;a href=&quot;https://wiki.creativecommons.org/wiki/Frequently_Asked_Questions#Can_I_use_a_Creative_Commons_license_for_software.3F&quot;&gt;actively recommend&lt;/a&gt; that people use an OSI license for code. This is because software licenses have more to care about: distribution, compilation  and working with other license / patents. Things that you don&#39;t have to deal with WRT other types of content.&lt;/p&gt;

&lt;p&gt;All CC-licensed code requires attribution of &lt;a href=&quot;http://blog.stackoverflow.com/2009/06/attribution-required/&quot;&gt;some sort&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In CocoaPods all the design assets are released under CC, but all the code is BSD.&lt;/p&gt;

&lt;h2&gt;Twitter Q &amp;amp; A&lt;/h2&gt;

&lt;h3&gt;Can I re-license after the fact?&lt;/h3&gt;

&lt;p&gt;So, have you wondered why sometimes you have to sign a CLA ( contributors license agreement ) to work on a repo? Relicensing is one of these things. Let&#39;s take 3 examples.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;VLC&lt;/em&gt; - Wanted to put an app on the app store, VLC was GPL. As each contributor owned their contributions if one single party who had contributed to the codebase didn&#39;t agree with putting an app on the store then they couldn&#39;t ship. It took an extra year and a half to get VLC re-licensed to get on the store.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Swift&lt;/em&gt; - New language by Apple, they &lt;em&gt;specifically&lt;/em&gt; ensure that people keep the rights to their contributions. This means Apple are not special. They cannot decide to suddenly switch license if Google decide it to be the new language for Android. There is no self destruct button.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Solaris&lt;/em&gt; - When Sun got bought by Oracle a bunch of projects got canned, one of the ways that they were able to do this and to nuke the code was because they owned all the copyrights to every contribution made to the codebases owned by Sun. They closed the source for the entire OS. It was totally within their rights.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=10669891&quot;&gt;Sources&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=-zRN7XLCRhc&quot;&gt;History of Solaris&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Do I need to include a copyright banner on every file?&lt;/h3&gt;

&lt;p&gt;No, it&#39;s possible that if it&#39;s likely that specific files will be used outside of the project ( e.g. your code is not totally atomic ) then it&#39;s valuable to note the license multiple times. However as long as a license is shipped with the code then you&#39;re good, if that license states something to the effect of “this software and associated documentation files (the &quot;Software&quot;)”.&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Dec 2015 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/12/10/License-and-You/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/12/10/License-and-You/</guid>
        
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>oss</category>
        
        <category>review</category>
        
        <category>video</category>
        
      </item>
    
      <item>
        <title>Using Docker and Dusty for Development</title>
        <description>&lt;p&gt;When I first proposed using Docker for development, and began doing my work that way, there were some doubts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Doesn&#39;t it seem like a lot of trouble to set up Docker to get my work done?&lt;/li&gt;
&lt;li&gt;Isn&#39;t it easier to use &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; to install the services and database servers I need?&lt;/li&gt;
&lt;/ul&gt;


&lt;!-- more --&gt;


&lt;p&gt;At Artsy, our main API aka Gravity uses MongoDB, Solr, Elasticsearch, and memcached. In development, we use &lt;a href=&quot;http://mailcatcher.me/&quot;&gt;Mailcatcher&lt;/a&gt; so we can view emails. When a new software engineer starts, that person studies a big Getting Started document, and spends most of a day to get everything installed and configured. Not only do they need to get the software installed, figuring out all of the environment variables that need to be set up can take some time too. While we have good documentation, it is still a tedious and repetitive process that takes up the time of our new employee, and more experienced developers who need to answer questions.&lt;/p&gt;

&lt;p&gt;Now that Gravity has been dockerized, getting set up consists of a one-time install of &lt;a href=&quot;https://www.docker.com/docker-toolbox&quot;&gt;Docker Toolbox&lt;/a&gt; followed by running&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;&lt;span class=&#39;line&#39;&gt;docker-compose build &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker-compose up
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;in the root directory of the checked-out repo. Here is a simplified version of our &lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;docker-compose&lt;/a&gt; setup. Because we run a web server and a delayed_job process, &lt;code&gt;docker-compose.yml&lt;/code&gt; uses a &lt;code&gt;common.yml&lt;/code&gt; file for shared setup:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;yaml&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;gravity&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;MEMCACHE_SERVERS&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;memcached&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;SOLR_URL&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;http://solr4:8983/solr/gravity&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;MONGO_HOST&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;mongodb&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ELASTICSEARCH_URL&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;elasticsearch:9200&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;SMTP_PORT&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;1025&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;SMTP_ADDRESS&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;mailcatcher&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;env_file&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;.env&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;.env&lt;/code&gt; file is used for secrets such as Amazon Web Services credentials we don&#39;t want to put into the git repository.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;docker-compose.yml&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;31&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;32&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;33&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;34&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;35&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;36&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;37&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;38&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;39&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;40&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;41&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;42&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;43&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;44&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;45&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;46&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;47&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;48&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;49&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;50&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;51&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;yaml&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;mongodb&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;mongo:2.4&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;bash -c &amp;quot;rm -f /data/db/mongod.lock; mongod --smallfiles --quiet --logpath=/dev/null&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;27017:27017&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;solr4&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;artsy/solr4&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;memcached&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;memcached&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;elasticsearch&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;artsy/elasticsearch&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;9200:9200&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;9300:9300&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;common.yml&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;gravity&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;script/rails s -b 0.0.0.0 -p 80&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;80:80&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;.:/app&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;elasticsearch&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;mongodb&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;memcached&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;solr4&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;mailcatcher&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;dj&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;common.yml&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;gravity&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;bundle exec rake jobs:work&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;.:/app&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;elasticsearch&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;mongodb&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;memcached&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;solr4&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;mailcatcher&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;zolweb/docker-mailcatcher&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1080:1080&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;The command for the MongoDB section removes a lock file that can remain in place sometimes when the container is killed. Do not use that in production! We mount the local directory into the container with a &lt;code&gt;volumes:&lt;/code&gt; command, so that local changes are reloaded in the running containers.&lt;/p&gt;

&lt;p&gt;Recently, &lt;a href=&quot;https://github.com/ashkan18&quot;&gt;Ashkan Nasseri&lt;/a&gt; began to move our delayed jobs from &lt;a href=&quot;https://github.com/collectiveidea/delayed_job_mongoid&quot;&gt;delayed_job_mongoid&lt;/a&gt; to &lt;a href=&quot;http://sidekiq.org/&quot;&gt;sidekiq&lt;/a&gt;, which brings in Redis and another process that needs to run during development. Since we are using Docker, all we have to do is add a couple of new sections to our &lt;code&gt;docker-compose.yml&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;yaml&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;redis&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;6379:6379&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;sidekiq&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;common.yml&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;gravity&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;bundle exec sidekiq&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;.:/app&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;elasticsearch&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;mongodb&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;memcached&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;solr4&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;redis&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;and add this line to &lt;code&gt;common.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;yaml&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;REDIS_URL&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;redis://redis&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;The next time someone runs &lt;code&gt;docker-compose up&lt;/code&gt;, this will cause a one-time download of a redis image, and then it brings up the additional sidekiq service.&lt;/p&gt;

&lt;p&gt;For development which involves multiple applications in separate git repositories, we use &lt;a href=&quot;http://dusty.gc.com/&quot;&gt;Dusty&lt;/a&gt;, which was created by &lt;a href=&quot;https://gc.com/&quot;&gt;GameChanger&lt;/a&gt;. Some of the advantages of using Dusty include the use of NFS (which performs much better than shared volumes in VirtualBox), and a built-in nginx proxy along with modifications to your &lt;code&gt;/etc/hosts&lt;/code&gt; file so that you can more easily connect to your applications.&lt;/p&gt;

&lt;p&gt;With Dusty, you set up services, apps, and bundles of apps with YAML files. Here is a repo with &lt;a href=&quot;https://github.com/gamechanger/dusty-example-specs&quot;&gt;sample Dusty specs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our MongoDB service is defined as:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;yaml&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;# services/mongo2.yml&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;mongo:2.4&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/persist/persistentMongo:/data/db&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;entrypoint&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sh&amp;quot;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;rm&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-f&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/data/db/mongod.lock;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mongod&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--smallfiles&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--quiet&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--logpath=/dev/null&amp;quot;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;27017:27017&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;It&#39;s not necessary to expose the ports, but in case we want to connect directly to the MongoDB instance with the &lt;code&gt;mongo&lt;/code&gt; command without shelling into a container, we need it to be available on our Docker VM&#39;s IP address.&lt;/p&gt;

&lt;p&gt;Our Gravity app&#39;s Dusty YAML file is:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;31&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;32&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;33&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;34&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;35&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;36&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;37&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;38&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;39&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;yaml&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;# apps/gravity.yml&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;github.com/artsy/gravity&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/app&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;depends&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;mongo2&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;memcached&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;solr4&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;es15&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;mailcatcher&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;redis&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;apps&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;radiation&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;host_forwarding&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;host_name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;gravity&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;host_port&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;container_port&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;RADIATION_URL&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;http://radiation&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;MONGO_HOST&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;mongo2&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;MEMCACHE_SERVERS&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;memcached&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;SOLR_URL&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;http://solr4:8983/solr/gravity&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ELASTICSEARCH_URL&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;es15:9200&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;SMTP_ADDRESS&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;mailcatcher&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;SMTP_PORT&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;1025&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;REDIS_URL&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;redis://redis&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;bundle install -j 10&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;bundle exec rake db:client_applications:create_all&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;bundle exec rake db:admin:create&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;always&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;rails s -b 0.0.0.0 -p 80&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;depends:&lt;/code&gt; configuration is similar to the &lt;a href=&quot;https://docs.docker.com/compose/compose-file/#links&quot;&gt;links&lt;/a&gt; functionality of docker-compose. It makes sure that those applications (as defined in &lt;code&gt;apps/*.yml&lt;/code&gt;) are running, and sets up &lt;code&gt;/etc/hosts&lt;/code&gt; in the containers to allow your applications to refer to other services using their hostnames.&lt;/p&gt;

&lt;p&gt;For now, Dusty doesn&#39;t have a way of sharing common setup like &lt;code&gt;common.yml&lt;/code&gt; above, so there are similar configurations for our Sidekiq and Delayed Job workers.&lt;/p&gt;

&lt;p&gt;Dusty uses bundles for clusters of applications that need to work together. An example bundle, for a CMS application that needs many APIs, is:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;yaml&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;# apps/volt.yml&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Volt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;apps&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;tangentApi&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;radiation&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;superposition&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;gravity&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;volt&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;We bring up that cluster of applications with&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;&lt;span class=&#39;line&#39;&gt;dusty bundles activate volt
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;dusty up
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;As we have added new services over time, using Docker and Dusty to bring clusters of apps together has made it much easier for developers to work on projects without having to spend time on installation and configuration. Having Docker configuration in the repo also serves as good (and up-to-date) documentation of how a given application is configured and its dependencies. It is also much less resource-intensive compared to using virtual machines configured with Vagrant or another provisioning tool. All of our Docker applications and services can run in a single VM. If you are developing on Linux, you don&#39;t even need a VM!&lt;/p&gt;

&lt;p&gt;We are also starting to use Docker to run integrated testing across multiple applications using Selenium. That will be covered in a future blog post.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Dec 2015 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/12/09/docker-for-development/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/12/09/docker-for-development/</guid>
        
        
        <category>development</category>
        
        <category>docker</category>
        
      </item>
    
      <item>
        <title>Upgrading to RxSwift</title>
        <description>&lt;p&gt;When we &lt;a href=&quot;http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/&quot;&gt;built Eidolon last year&lt;/a&gt;, Swift was still pre-1.0 and we couldn&#39;t rely on the wide variety of available Swift libraries we enjoy today. I wanted to build it using functional reactive programming, because that&#39;s how I believe &lt;a href=&quot;https://realm.io/news/altconf-ash-furrow-functional-reactive-swift/&quot;&gt;everyone should write software&lt;/a&gt;, but there were no Swift-based FRP libraries at the time. As a compromise, I used ReactiveCocoa&#39;s Objective-C API (the Swift API was months away from an alpha).&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;The choice to use an Objective-C API – one that heavily relies on the runtime – limited us in terms of what Swift features we could use. We had a lot of closures use &lt;code&gt;AnyObject!&lt;/code&gt; as parameter types, requiring constant checks for &lt;code&gt;nil&lt;/code&gt; and conditional casts to specific types. It was a real nightmare. We had a lot of code that looked like this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;castObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WhateverType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;castObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thingWeAreMappingTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeSensibleMissingValue&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Swift 2&#39;s &lt;code&gt;guard&lt;/code&gt; statements helped clean this up, but the fundamental problem was that we were using an FRP library not suited for Swift.&lt;/p&gt;

&lt;p&gt;While we had &lt;a href=&quot;https://github.com/ashfurrow/Swift-RAC-Macros&quot;&gt;built replacements&lt;/a&gt; for the Objective-C runtime features that weren&#39;t available in Swift, we knew that a migration away from RAC&#39;s Objective-C API would eventually be necessary.&lt;/p&gt;

&lt;p&gt;I used a bit of down-time recently to tackle the problem, starting with some small bits and pieces before dedicating two weeks to finish it. Here we go!&lt;/p&gt;

&lt;h3&gt;Benefits&lt;/h3&gt;

&lt;p&gt;The key benefits of using a Swift-based FRP framework include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using the type-checker to catch bugs at compile-time.&lt;/li&gt;
&lt;li&gt;Writing fewer lines of code.&lt;/li&gt;
&lt;li&gt;Writing more expressive code.&lt;/li&gt;
&lt;li&gt;Having fun with the type checker and protocol extensions.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When Apple announced Swift, they stressed how safe of a language it was. Now that we were moving to a Swift-based FRP framework, we would finally benefit from those safety features.&lt;/p&gt;

&lt;p&gt;This makes new features easier and faster to build. It gives me more confidence when I make a new deploy that things won&#39;t break. And like I mentioned above, it&#39;s just a lot more fun to write Swift with Swift-based frameworks.&lt;/p&gt;

&lt;h3&gt;Process&lt;/h3&gt;

&lt;p&gt;When we wrote Eidolon, ReactiveCocoa was more-or-less the only iOS FRP library around. That&#39;s fine, because ReactiveCocoa is &lt;em&gt;awesome&lt;/em&gt;. But today, there are a variety of frameworks and &lt;a href=&quot;https://ashfurrow.com/blog/reactivecocoa-vs-rxswift/&quot;&gt;they&#39;re &lt;em&gt;all&lt;/em&gt; awesome&lt;/a&gt;. So we have a choice to make.&lt;/p&gt;

&lt;p&gt;Sticking with ReactiveCocoa would mean that we could make a gradual transition (there&#39;s a bridge between the Objective-C and Swift APIs). This is &lt;em&gt;kind of&lt;/em&gt; a benefit, but also kind of a drawback. I don&#39;t really trust myself enough to move off of Objective-C&#39;s API completely if a bridge is there – it&#39;s just too tempting to leave some parts of the app using the old API.&lt;/p&gt;

&lt;p&gt;So instead I decided to not consider the existing code. I asked myself: &quot;If I were choosing an FRP library today for a &lt;em&gt;brand-new&lt;/em&gt; app, which one would I choose?&quot;&lt;/p&gt;

&lt;p&gt;The answer to that question is &lt;a href=&quot;https://github.com/ReactiveX/RxSwift&quot;&gt;RxSwift&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;RxSwift is a Swift implementation of the &lt;a href=&quot;http://reactivex.io&quot;&gt;ReactiveX APIs&lt;/a&gt;, which bring a few great benefits. The API is well-defined and unlikely to include breaking changes, there are reference implementations for Rx in other languages, and tutorials/resources for other Rx frameworks apply directly to this library. There is some extra overhead from having to interact with a larger community, and &lt;a href=&quot;http://stackoverflow.com/questions/32542846/reactivecocoa-vs-rxswift-pros-and-cons/32581824#32581824&quot;&gt;there are technical distinctions&lt;/a&gt; that might influence your decision. Ultimately, though, I chose RxSwift because I&#39;ve found their community much more pleasant to interact with.&lt;/p&gt;

&lt;p&gt;I started the process by &lt;a href=&quot;https://github.com/artsy/eidolon/commit/8e6e86d733e36d3c0b3db581019d09296d04cd68&quot;&gt;removing ReactiveCocoa and adding RxSwift to our Podfile&lt;/a&gt;. Of course, that made the &lt;em&gt;entire app break&lt;/em&gt;, which was fine.&lt;/p&gt;

&lt;p&gt;I was working off a &quot;develop&quot; branch, so having the app in an uncompilable state for a few weeks would be no problem.&lt;/p&gt;

&lt;p&gt;Then the remaining process was simple: find a compiler error, fix it, and find a new one. 27 days later, &lt;a href=&quot;https://github.com/artsy/eidolon/commit/8e6e86d733e36d3c0b3db581019d09296d04cd68&quot;&gt;we merged the changes into master&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The process was prioritized in the following way:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get the app compiling again.&lt;/li&gt;
&lt;li&gt;Get the app more-or-less working (no crashes for common use cases).&lt;/li&gt;
&lt;li&gt;Get the unit tests compiling again.&lt;/li&gt;
&lt;li&gt;Get the unit tests &lt;em&gt;completing&lt;/em&gt; without crashing.&lt;/li&gt;
&lt;li&gt;Get the unit tests &lt;em&gt;passing&lt;/em&gt; (locally and on CI).&lt;/li&gt;
&lt;li&gt;Thoroughly test the app to verify it still works properly.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;We&#39;re currently wrapping up the final stage, but I expect to release a new build for production use later this week.&lt;/p&gt;

&lt;h3&gt;Biggest Challenges&lt;/h3&gt;

&lt;p&gt;The biggest challenges were keeping an eye on the end result. When you go for so long without being able to see the benefits of your work, it&#39;s easy to get discouraged.&lt;/p&gt;

&lt;p&gt;This is the first major app I&#39;ve written in Swift with FRP, so there were new patterns and practices I had to learn. Checking in with the RxSwift team helped a lot, with a lot of assistance from &lt;a href=&quot;https://twitter.com/bontoJR&quot;&gt;Junior&lt;/a&gt; in particular. Making the changes in the open also &lt;a href=&quot;https://github.com/artsy/eidolon/pull/569#commitcomment-14632425&quot;&gt;let others provide feedback on our progress&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the biggest challenges was the structure of the existing code. Our bid-fulfillment process shares &lt;em&gt;a lot&lt;/em&gt; of state – much of it in ways that we wouldn&#39;t write today. But I didn&#39;t want to increase the scope of the transition to RxSwift to &lt;em&gt;also&lt;/em&gt; include removing all shared state from the app – scope creep is really dangerous when your project already spans weeks. It was hard to resist this temptation, but I feel it worked out for the best.&lt;/p&gt;

&lt;h3&gt;Things That Were Easier than Expected&lt;/h3&gt;

&lt;p&gt;Things generally went easier than I had anticipated. Using a new library for the first time in production, I had a persistent fear that I would get close to completing the transition, but some fundamental misunderstanding of mine would completely undermine all my work. This turned out to be mild impostor syndrome – with a few small exceptions, the app worked correctly as soon as it compiled 🎉&lt;/p&gt;

&lt;p&gt;I tried to get rid of &lt;code&gt;dynamic&lt;/code&gt; properties in views, controllers, and view models, but left them on models to use KVO with &lt;code&gt;rx_observe&lt;/code&gt;. I tried not to use KVO a lot, and instead rely on &lt;code&gt;Variable&lt;/code&gt; properties, which wrap a value in a type that can be observed. I&#39;m still finding a balance between these two approaches, but this is largely a personal preference.&lt;/p&gt;

&lt;p&gt;A common pattern became defining a private &lt;code&gt;Variable&lt;/code&gt; and a public &lt;code&gt;Observable&lt;/code&gt;, which would constrain the state (a common theme in FRP).&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;_password&lt;/code&gt; is now the read/write property accessible only within the type, while &lt;code&gt;password&lt;/code&gt; is a publicly read-only &lt;code&gt;Observable&lt;/code&gt;. This pattern takes a bit of typing, so I&#39;m still looking for a way to further abstract it. Maybe a Swift preprocessor would help.&lt;/p&gt;

&lt;h3&gt;Lessons Learned&lt;/h3&gt;

&lt;p&gt;The biggest lesson I learned was not about RxSwift specifically, but more about how to use the type system to &lt;a href=&quot;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;stay DRY&lt;/a&gt;. For example, I was writing this kind of code in our unit tests &lt;em&gt;a lot&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expiryDatesAreValidSignal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asBlocking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;(By &quot;a lot&quot;, I mean that I had to write this code twice before deciding to find a better way.)&lt;/p&gt;

&lt;p&gt;So I wrote an extension to the &lt;code&gt;ObservableType&lt;/code&gt; protocol that would abstract this unit-testing code into a reusable function and operator.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equalFirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Equatable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;expectedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatcherFunc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatcherFunc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualExpression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failureMessage&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;n&quot;&gt;failureMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postfixMessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;equal &amp;lt;\(expectedValue)&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualExpression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;evaluate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toBlocking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actualValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedValue&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Equatable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Expectation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equalFirst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;So now my unit tests&#39; expectations look like this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;swift&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expiryDatesAreValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Nice – way better.&lt;/p&gt;

&lt;p&gt;This is just one example – one that &lt;a href=&quot;https://github.com/artsy/eidolon/issues/570&quot;&gt;we will be moving into its own library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Swift&#39;s type system is really, really powerful. &lt;a href=&quot;https://github.com/artsy/eidolon/blob/cb31168fa29dcc7815fd4a2e30e7c000bd1820ce/Kiosk/UIKit+Rx.swift&quot;&gt;Here&lt;/a&gt; are some RxSwift-specific extensions we added to UIKit, and &lt;a href=&quot;https://github.com/artsy/eidolon/blob/cb31168fa29dcc7815fd4a2e30e7c000bd1820ce/Kiosk/App/SwiftExtensions.swift#L22-L56&quot;&gt;here&lt;/a&gt; are some general Swift extensions that we&#39;ve found helpful.&lt;/p&gt;

&lt;p&gt;There&#39;s a danger in going overboard, of course. A few times, I was tempted to make an extension on string-convertible &lt;code&gt;Variable&lt;/code&gt;s to make them themselves string-convertible, for example. That might make &lt;em&gt;writing&lt;/em&gt; code easier, but its functionality would not be obvious when &lt;em&gt;reading&lt;/em&gt; it later on.&lt;/p&gt;

&lt;p&gt;I tried to keep changes like this as obvious and simple as possible, and every addition was peer-reviewed by Orta.&lt;/p&gt;

&lt;h3&gt;Community Impact&lt;/h3&gt;

&lt;p&gt;Throughout the course of the transition to RxSwift, &lt;a href=&quot;https://github.com/ReactiveX/RxSwift/pulls?utf8=%E2%9C%93&amp;amp;q=is%3Apr+author%3Aashfurrow&quot;&gt;I made a few contributions to the framework&lt;/a&gt;, but the things I wanted to add were outside the immediate scope of the project maintainers&#39; vision. Totally understandable. &lt;a href=&quot;https://github.com/ReactiveX/RxSwift/issues/265&quot;&gt;With their assistance&lt;/a&gt;, Orta and I and others helped to create a &lt;a href=&quot;https://github.com/RxSwiftCommunity&quot;&gt;new organization for community-run, RxSwift-based libraries&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now RxSwift can stay lean and focused while the community has a dedicated space to improve all of our ideas, together. &lt;a href=&quot;https://github.com/RxSwiftCommunity/NSObject-Rx&quot;&gt;One library&lt;/a&gt; I wrote during this project is already under the organization&#39;s umbrella, with &lt;a href=&quot;https://github.com/RxSwiftCommunity/contributors/issues/4&quot;&gt;another on the way&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Helping to create a new organization gave me an opportunity to practice my community-building skills. It was exciting to &lt;a href=&quot;https://github.com/RxSwiftCommunity/contributors&quot;&gt;re-apply Moya&#39;s contributor guidelines&lt;/a&gt; in a new setting, helping to set a positive tone for a growing community. I had a lot of guidance from Orta and Eloy, who of course have &lt;a href=&quot;https://cocoapods.org&quot;&gt;done this before&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Making positive changes to the developer community – and, on a larger scale, to the world – is something I&#39;ve &lt;a href=&quot;https://ashfurrow.com/blog/building-my-career/&quot;&gt;decided to pursue as my career&lt;/a&gt;. I wouldn&#39;t have come to that conclusion if it weren&#39;t for the thoughtfulness and generosity of my colleagues and of the RxSwift community.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This transition project has been exciting, but at times it has been exhausting, too. While I&#39;m &lt;a href=&quot;https://github.com/artsy/eidolon/pull/569&quot;&gt;glad it&#39;s over&lt;/a&gt;, the past few weeks have impacted my life in a significant – and positive – way. I&#39;ve never been more excited to be doing what I&#39;m doing, and to be working in the growing open source Swift community. Thank you, everyone.&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Dec 2015 12:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2015/12/08/reactive-cocoa-to-rxswift/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2015/12/08/reactive-cocoa-to-rxswift/</guid>
        
        
        <category>ios</category>
        
        <category>mobile</category>
        
        <category>mvvm</category>
        
        <category>open source</category>
        
        <category>swift</category>
        
      </item>
    
  </channel>
</rss>
