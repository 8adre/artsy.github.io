<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artsy Engineering</title>
    <description></description>
    <link>http://artsy.github.io/</link>
    <atom:link href="http://artsy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 03 Dec 2019 06:27:47 +0000</pubDate>
    <lastBuildDate>Tue, 03 Dec 2019 06:27:47 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Building tools with empathy</title>
        <description>&lt;p&gt;As engineers, we&#39;re surrounded by problems. There are the problems to be solved that differentiate our business,
but there are also countless problems related solely with how we do work every day. It&#39;s those little things, the
daily annoyances, that can be some of the most rewarding problems to solve. It&#39;s not always about changing the
world or revolutionizing an industry.&lt;/p&gt;

&lt;p&gt;Solving the minor frustrations can change your coworkers&#39; day for the better and that&#39;s a powerful feeling.&lt;/p&gt;

&lt;p&gt;It&#39;s also a task that should be taken on with the same care and consideration that you&#39;d give to your users. Just
as we don&#39;t (or shouldn&#39;t) rush into product work without considering it from multiple angles, neither should we
dive into a workflow nor build a tool for our team without considering the risks and impact.&lt;/p&gt;

&lt;p&gt;In this post I&#39;m going to explore how to think about building tools with empathy and how we can maximize our impact
while minimizing disruptions.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Understand.the.problem&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Understand the problem&lt;/h2&gt;

&lt;a name=&quot;Understand.the.user&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Understand the user&lt;/h2&gt;

&lt;a name=&quot;Know.the.risks&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Know the risks&lt;/h2&gt;

&lt;a name=&quot;Set.it.up.for.success&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Set it up for success&lt;/h2&gt;

&lt;a name=&quot;Over-communicate&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Over-communicate&lt;/h2&gt;

&lt;p&gt;There&#39;s an important lesson about change that I&#39;ve learned recently. Often, the communication surrounding a change
is what dictates its perception. Great work can be soured by poor communication.&lt;/p&gt;

&lt;p&gt;If you&#39;re to this point then you should have an idea of what you&#39;re doing, why you&#39;re doing it, who it helps, and
what may go wrong.&lt;/p&gt;

&lt;a name=&quot;Ship.it&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Ship it&lt;/h2&gt;

&lt;a name=&quot;You.are.not.your.work&quot;&gt;&lt;/a&gt;
&lt;h2&gt;You are not your work&lt;/h2&gt;

&lt;p&gt;I&#39;ve saved this for last because it&#39;s a topic that I&#39;ve struggled with a lot. When you&#39;re doing work you care about
it&#39;s easy to form personal attachments to that work. It&#39;s an expression of your self that you&#39;ve put out in the
world hoping to create a positive impact. Inevitably though, things don&#39;t always work out how you expect. Maybe it
fails in a spectacular way... or maybe someone just doesn&#39;t like it. Whatever the case may be it can be hard not to
hear feedback about your work as feedback about you. If you&#39;ve felt this before or you&#39;re feeling it now I just
want say, It&#39;s okay. Your feelings are valid. Feel what you feel, but then remember: You&#39;re more than just your
work. That setback is just an opportunity to learn and improve. It&#39;s just a tiny pebble from the mountain of work
you&#39;ll put out into the world.&lt;/p&gt;

&lt;p&gt;The only failures are experiences that we don&#39;t learn from. So take that experience if it comes and give it the
time it needs. Reflect on it, feel it, and then think about what you could do better, learn from the experience,
and move past it. The next thing you do will be better for this experience.&lt;/p&gt;

&lt;a name=&quot;Wrapping.up&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;Now you know what you&#39;re building. You know who you&#39;re building it for and what their needs are. You have, to the
best of your knowledge, an understanding of what pitfalls to avoid. You&#39;ve invested in the project so that it has
everything it needs to live on past your tenure. You&#39;ve told your teammates all about it, showed it off in every
possible venue, and shipped it out to the world.&lt;/p&gt;

&lt;p&gt;And with that friends, I bid you adieu.&lt;/p&gt;

&lt;p&gt;Go out and build great things.&lt;/p&gt;

&lt;p&gt;As my friends at Artsy always say, you&#39;ve got this.&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Dec 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/12/03/building-tools-with-empathy/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/12/03/building-tools-with-empathy/</guid>
        
        
        <category>culture</category>
        
        <category>people</category>
        
        <category>road and bridges</category>
        
        <category>tools</category>
        
      </item>
    
      <item>
        <title>Diagnosing our Radiation Problems</title>
        <description>&lt;p&gt;Email! Electronic mail! What a concept! Like many companies, Artsy has built products on top of email, but this is
a decision that (like many companies) Artsy periodically regrets. But overall, our email systems work well!&lt;/p&gt;

&lt;p&gt;But what about when it doesn&#39;t? Well that&#39;s what today&#39;s blog post is about: what happens when things break and you
don&#39;t know why?&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;I have learned a lot
&lt;a href=&quot;https://artsy.github.io/blog/2018/05/30/my-first-week-on-call/&quot;&gt;since my first on-call shift&lt;/a&gt;, but going on call
still gives me a little stage fright. As I start a shift, I&#39;m on the look-out for things that might break, and soon
after starting a recent on-call shift, &quot;breaking&quot; is exactly what things did.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-11-07-diagnosing-our-radiation-problems/alert.png&quot; alt=&quot;Screenshot of Slack alert&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We got an automated alert on Slack that one of our email services, code-named &quot;Radiation&quot;, had really high response
times. We &lt;em&gt;then&lt;/em&gt; received an alert that too many requests to Radiation were failing completely. Yikes. The next
twenty two hours was a deep dive into Heroku, New Relic, Rails, and PostgreSQL, all to isolate the problem and
produce a solution.&lt;/p&gt;

&lt;p&gt;The nice thing about email, as a protocol, is that it&#39;s based on a store-and-forward concept. That means that if a
message delivery fails, email servers will try again later (typically with an exponential backoff). SendGrid, our
email processor, has built their REST API around this same store-and-forward concept. While the Radiation server
was unresponsive, SendGrid wouldn&#39;t receive successful HTTP responses from the webhook deliveries, so it would
attempt to re-deliver the failing emails later. Email deliveries would be delayed, but the emails themselves would
not be dropped. We wasted no time addressing the problem, but we were also confident that once we fixed the issue,
the data would be okay.&lt;/p&gt;

&lt;p&gt;After the alert, Ashkan (Radiation&#39;s point-person) and I communicated with our colleagues (engineers and affected
non-engineers) about the problem. With the help of Chung-Yi, we began investigating the immediate problem (with a
focus on &lt;em&gt;mitigating&lt;/em&gt; it, rather than necessarily &lt;em&gt;fixing&lt;/em&gt; it). Oh, we tried it all: spinning up more Heroku Dynos
to handle requests, increasing concurrency on the individual Dynos, restarting Redis and PostgreSQL stores. Each
time, things would work briefly before the Radiation API would begin timing out again. More accurately, the
requests sent to Radiation were taking longer than the Heroku router was giving them (30 seconds) before the router
gave up and timed out the request. We started examining the Radiation code and database (keeping our &lt;em&gt;ion the
prize&lt;/em&gt;: mitigation).&lt;/p&gt;

&lt;p&gt;Ashkan investigated slow database queries. We added new PostgreSQL indexes to speed up queries, and restructured
others to avoid expensive joins. Unfortunately, all this accomplished was extending the time after a Dyno reboot
that things would work (before beginning to timeout again). Because
&lt;a href=&quot;https://artsy.github.io/blog/2017/05/30/database-encryption/&quot;&gt;Artsy stores emails as encrypted-at-rest&lt;/a&gt;, it was
difficult to pinpoint which exact message could be causing the timeouts. And Radiation itself didn&#39;t have much in
the way of logging, which would normally help us debug the problem.&lt;/p&gt;

&lt;p&gt;It was frustrating to try to fix something but only manage to improve how long it took to break again. We had
enhanced Radiation&#39;s performance to the point where it was taking 10 minutes after a Dyno reboot to begin timing
out again, up from 30 seconds at the beginning of the incident. Despite an afternoon and evening spent trying to
fix the problem, we were stuck. We decided that the best course of action was a good night&#39;s sleep; we would ask
for help in the morning.&lt;/p&gt;

&lt;p&gt;The next day, Ashkan and I got &lt;em&gt;up and atom&lt;/em&gt; to address the problem. We brought my on-call partner Devon up to
speed, detailing the incident symptoms and what we had tried so far. While Devon and Ashkan worked on additional
logging and new timeout strategies, I took another approach.&lt;/p&gt;

&lt;p&gt;Artsy has been moving to &lt;a href=&quot;https://www.datadoghq.com&quot;&gt;DataDog&lt;/a&gt; for server performance monitoring, but Radiation was
still using &lt;a href=&quot;https://newrelic.com&quot;&gt;New Relic&lt;/a&gt;. My background is in iOS app development and I had never really dug
into New Relic before, but I &lt;em&gt;am&lt;/em&gt; very experienced at profiling iOS applications, and the Ruby and Objective-C
runtimes have more in common than they have have differences. I used New Relic to profile a production Radiation
Dyno for five minutes and, to our collective surprise, we found that more than 90% of CPU time was being spent in
&lt;a href=&quot;https://github.com/thoughtbot/griddler/blob/ff2ad16949bf5190f93df1a3e83eb0192f136c6d/app/controllers/griddler/emails_controller.rb#L4-L10&quot;&gt;an innocuous function of a dependency&lt;/a&gt;,
the open source library &lt;a href=&quot;https://github.com/thoughtbot/griddler&quot;&gt;Griddler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Artsy uses Griddler to parse and sanitize emails that we receive from &lt;a href=&quot;https://sendgrid.com&quot;&gt;SendGrid&lt;/a&gt;. Griddler
contained the problematic code, which was responsible for parsing email responses from threaded replies. So if an
email body received by Radiation looks like this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;&#39;&gt;&lt;span class=&#39;line&#39;&gt;This is the most recent reply in this email conversation.
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;On September 28th, 2019, Someone Else Wrote:
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;[The rest of the email thread]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Then Griddler parses out the string &quot;This is the most recent reply in this email conversation.&quot; for Radiation to
process. This is really important because some of the threads in Radiation are &lt;em&gt;thousands&lt;/em&gt; of emails long. In fact,
I learned that Radiation has Artsy&#39;s largest production database.&lt;/p&gt;

&lt;p&gt;Griddler does this processing via regular expressions. Ashkan had the insight to look for existing issues from
other Griddler users who ran into similar problems, and to our delight,
&lt;a href=&quot;https://github.com/thoughtbot/griddler/pull/310&quot;&gt;we found a pull request&lt;/a&gt; that appeared to address the &lt;em&gt;exact&lt;/em&gt;
issue that we were having.&lt;/p&gt;

&lt;p&gt;It turns out that emails with large amounts of repeated newline characters would totally stall Griddler&#39;s regex.
Heroku&#39;s router would timeout any request after 30 seconds, but would leave the Ruby code churning on that regex.
That would leave the Rails server unable to respond to subsequent HTTP requests, causing more timeouts. And because
of email&#39;s store-and-forward nature, SendGrid would begin sending more problematic emails pretty quickly after any
Radiation reboot. A small change to add a regex group was all that was necessary to fix the issue.&lt;/p&gt;

&lt;p&gt;Phew! We forked Griddler to Artsy&#39;s GitHub organization and applied the change from the pull request. We were
concerned about security implications of using a different regex, but my
&lt;a href=&quot;https://artsy.github.io/blog/2018/02/06/apogee-technical-retrospective/&quot;&gt;previous work in regular expressions&lt;/a&gt;
helped me vet the change. We pointed Radiation&#39;s Gemfile to Artsy&#39;s fork and deployed the change.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-11-07-diagnosing-our-radiation-problems/heroku.png&quot; alt=&quot;Screenshot of Heroku Dashboard, indicating a drop in load&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, we waited. Would the system start timing out again? It took a half hour for any of us to breathe a sigh of
relief. But things appeared to be stable: response times were normal and Dyno load dropped precipitously. Our
&lt;em&gt;Curie&lt;/em&gt; worked. (Okay, enough radiation puns.)&lt;/p&gt;

&lt;p&gt;During our weekly incident review, Devon guided the rest of our team through our incident response and what we
learned. Radiation is now in a much better state, so that future problems will be easier to track down. We
responded to the Griddler pull request, encouraging the maintainers to merge the commit so other teams would avoid
this problem. The incident review meeting explored a number of options to mitigate future issues, including
migrating Radiation to our Kubernetes cluster, and Sam (our VP of Engineering) suggested writing this post. So here
we are.&lt;/p&gt;

&lt;p&gt;Ashkan also followed up with peer feedback for Devon, Chung-Yi, and myself. In part, it read:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It&#39;s rare and odd to say dealing with incident was fun, but with your help it actually was productive and fun.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Which, honestly? One of my proudest accomplishments at Artsy.&lt;/p&gt;

&lt;p&gt;In the end, we solved the problem and restored access to our email systems in under 24 hours. We kept our cool, we
communicated effectively with our non-engineering colleagues, and we learned a lot. What more could you want from a
Radiation incident?&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Nov 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/11/14/diagnosing-our-radiation-problems/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/11/14/diagnosing-our-radiation-problems/</guid>
        
        
        <category>best practices</category>
        
        <category>culture</category>
        
        <category>databases</category>
        
        <category>email</category>
        
        <category>encryption</category>
        
        <category>people</category>
        
        <category>team</category>
        
      </item>
    
      <item>
        <title>CSS is Hard and Other Things I Learned Working on the 2019 Artsy Vanguard</title>
        <description>&lt;p&gt;The Artsy Vanguard is an annual editorial series where we feature up-and-coming, notable, and praiseworthy artists
and their contributions to the art world. 2019 was the second year that Artsy published this special feature,
although we have been publishing custom editorial segments multiple times per year since 2015.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In this post, I’ll discuss my recent experience working on the
&lt;a href=&quot;https://www.artsy.net/series/artsy-vanguard-2019&quot;&gt;2019 Artsy Vanguard&lt;/a&gt; editorial feature. I’ll start by
introducing the technology stack behind our articles and then discuss what I learned from both a team/organization
and technical perspective.&lt;/em&gt;&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;An.Introduction.to.Artsy.Editorial&quot;&gt;&lt;/a&gt;
&lt;h1&gt;An Introduction to Artsy Editorial&lt;/h1&gt;

&lt;p&gt;Typically our editorial works fall under one of five or so categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/article/artsy-editorial-hip-hop-legend-q-tip-shares-diverse-art-collection&quot;&gt;Standard articles&lt;/a&gt;,
which have the same layout, but whose content could broadly relate to any of the primary categories Artsy’s
editors tend to cover.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/news&quot;&gt;News content&lt;/a&gt; consisting of an infinitely scrolling feed of the latest newsworthy
events in the art world.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/series/artsy-editors-future-art&quot;&gt;Sponsored&lt;/a&gt; and non-sponsored editorial features that may
be a &lt;a href=&quot;https://www.artsy.net/article/artsy-editorial-rise-fall-internet-art-communities&quot;&gt;standalone&lt;/a&gt; publication
or a &lt;a href=&quot;https://www.artsy.net/series/how-to-be-an-artist&quot;&gt;part of a larger related series&lt;/a&gt; of features.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.artsy.net/series/artsy-editors-future-art-carrie-mae-weems&quot;&gt;Video editorial series&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For more information on Artsy&#39;s editorals, check out this
&lt;a href=&quot;https://artsy.github.io/blog/2019/03/05/custom-editorial-features/&quot;&gt;blog post&lt;/a&gt; written by Senior Software Engineer
&lt;a href=&quot;https://artsy.github.io/author/eve/&quot;&gt;Eve Essex&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To maintain consistency and standardization in terms of user experience design, layout, and page interactivity
options of the editorials that we offer, we use an internal content management service.
&lt;a href=&quot;http://pages.artsy.net/rs/609-FDY-207/images/Gallery%20Guide%20to%20Artsy%20Writer.pdf&quot;&gt;Artsy Writer&lt;/a&gt; enables our
editorial team to publish content to the main Artsy website without having to collaborate with our engineering
organization. (Yay software!) Given that it is designed to handle the layout of the different types of editorial
features that we offer in a uniform way, highly customized editorials like the
&lt;a href=&quot;https://www.artsy.net/series/artsy-vanguard-2019&quot;&gt;2019 Artsy Vanguard&lt;/a&gt; or
&lt;a href=&quot;https://www.artsy.net/article/artsy-editorial-people-defined-visual-culture-2018&quot;&gt;2018 Year in Visual Culture&lt;/a&gt;
require quite a bit of planning and cross-team collaboration, as well as customized software development to support
the features that deviate from our current layouts.&lt;/p&gt;

&lt;p&gt;Creating the 2019 Artsy Vanguard was truly a company-wide effort! I’m pretty new to Artsy, having only joined last
summer, so some of the work I did on Artsy Vanguard was around understanding our existing framework for routing
article content from &lt;a href=&quot;https://github.com/artsy/positron&quot;&gt;Positron&lt;/a&gt;, Artsy’s editorial API, to
&lt;a href=&quot;https://github.com/artsy/force&quot;&gt;Force&lt;/a&gt;, the code that powers our &lt;a href=&quot;https://www.artsy.net/&quot;&gt;production site&lt;/a&gt;. On the
Engineering side, I collaborated with the project’s technical lead Eve, a senior engineer with years of experience
working in these code repositories. There were several key stakeholders, including, but certainly not limited to, a
lead project manager, lead visuals editor, designers, content writers, as well as the
&lt;a href=&quot;http://wax-studios.com/&quot;&gt;external design firm&lt;/a&gt; that delivered the initial design concept and video content used
for the series.&lt;/p&gt;

&lt;a name=&quot;Learnings&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Learnings&lt;/h1&gt;

&lt;p&gt;Vanguard was an exciting project, but as with any software endeavor, it came with its own share of learnings and
difficulties.&lt;/p&gt;

&lt;a name=&quot;L.strong.1..Splitting.time.between.two.teams.is.hard..strong.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;&lt;strong&gt;1. Splitting time between two teams is hard&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;My team, Grow, is responsible for the development and maintenance of Engineering software related to increasing
user engagement with Artsy’s products. Some of our most notable projects include
&lt;a href=&quot;http://files.artsy.net/documents/artsy-bmw-city-guide.pdf&quot;&gt;City Guide&lt;/a&gt;, an iOS feature built in collaboration with
BMW, detailing art shows and partner fairs in several major international cities,
&lt;a href=&quot;https://www.artsy.net/collections&quot;&gt;collections&lt;/a&gt; and &lt;a href=&quot;https://www.artsy.net/collect&quot;&gt;collection hubs&lt;/a&gt; offering
prospective art buyers more comprehensive ways to explore works and artists of interest, and of course the
&lt;a href=&quot;https://www.artsy.net/articles&quot;&gt;Artsy Editorial&lt;/a&gt;, home to all of our editorial content. We typically work in
two-week sprint cycles, aiming to produce a planned set of deliverables during that time, and collaborating between
other developers on the team, a designer, product manager, data scientist, and technical team leader.&lt;/p&gt;

&lt;p&gt;Given that this project involved collaboration from several teams and stakeholders outside of Engineering, we
decided to manage it as a project separate from the rest of the deliverables the Grow team did during the sprints.
This meant I had to split my time between team meetings for Vanguard work and team meetings for Grow. I would keep
the Grow team up to date on the Vanguard work we were doing but it felt like I was in a liminal space between the
two teams. In addition to attending weekly cross-team Vanguard standups, I attended daily Vanguard engineering
standups to align with Eve on the work that we needed to produce. In the interest of protecting my time and not
attending 3 different team standups in a single day, I posted updates to the Grow team via Slack to keep everyone
updated on the progress of our work. Despite our best intentions, it’s difficult to work on two teams at once and
feel fully committed to either.&lt;/p&gt;

&lt;a name=&quot;L.strong.2..Estimation.is.Hard..strong.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;&lt;strong&gt;2. Estimation is Hard&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Due to the way this project was organized, we allotted 1.5 sprint cycles to complete the engineering work. However,
this time allotment was decided on before we had received the completed design specifications from the design firm.
This posed a set of interesting challenges in the sense that the Grow team committed to delivering a feature by a
predetermined deadline without having all of the information needed to understand the full scope of the project. As
with any engineering project, there are often unknown unknowns, those pesky little gotchas that surface as work
commences on a project, but that cannot always be predicted. This presented an interesting lesson in learning how
to estimate the amount of work required to deliver a minimum viable product and reduce the scope to meet certain
deadlines.&lt;/p&gt;

&lt;p&gt;Given the limited amount of time to deliver some fairly complex designs, it was clear that we would have to reduce
some of the technical complexity in order to meet the deadline. This is pretty standard in agile development, but
this was the first time that I was in a position of having to deliver this &quot;bad news&quot;. It is difficult to tell team
members that a feature is not going to be able to shipped as initially expected, but these are the sort of
concessions that have to be made sometimes in order to deliver a viable product. Fortunately, I was fully supported
by my managers, tech lead, and colleagues in having to deliver the news that we were not going to be able to
deliver a feature identical to the one given to us by the design firm. From this experience, I learned that making
accurate estimations about how much work a project actually involves is hard, relying on agile as a rule makes it
easier, communicating early and often when there’s any uncertainty around delivering a feature by deadline is
critical, and working with team members that value candor, flexibility, communication, and iteration is empowering.&lt;/p&gt;

&lt;a name=&quot;L.strong.3..CSS.is.Hard..strong.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;&lt;strong&gt;3. CSS is Hard&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;I get excited about implementing visually delightful designs, and Artsy Vanguard’s 2019 designs did not
disappoint. There were two key components that involved interesting CSS approaches:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 1. Mixed Blending Mode to handle the inversion of the side frame text when it appeared over different
backgrounds&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 2. Creating the visual effect of &lt;code&gt;.mp4&lt;/code&gt; videos nested inside of SVG shapes&lt;/strong&gt;&lt;/p&gt;

&lt;a name=&quot;Mixed.Blend.Mode&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Mixed Blend Mode&lt;/h2&gt;

&lt;p&gt;Mixed blend mode is a CSS property that handles blending the colors of overlapping elements. In this case, we
wanted to create the effect of inverting the colors of the static side frame text when they overlapped with either
the white background, the black SVG shapes, or the SVG videos.&lt;/p&gt;

&lt;p&gt;This inverted color effect also needed to be applied to the text of the editorial content when it overlapped with
the black SVG background, when it extended past the SVG background onto a white background, and when the current
article was in an expanded state.&lt;/p&gt;

&lt;p&gt;I found &lt;a href=&quot;https://css-tricks.com/almanac/properties/m/mix-blend-mode/&quot;&gt;CSS-Tricks&lt;/a&gt; and the
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode&quot;&gt;Mozilla Developer’s Network&lt;/a&gt; documentation super
helpful in understanding the various blending properties. Since the designs for Vanguard involved a fairly simple
blending mode of inverting black and white, the mix-blend-mode difference property was how we created the effect of
inverting the black text against the various backgrounds it overlapped with. The blend mode property works by
calculating the rgb color value of the text, and the background-color of the underlying element, and using that
value to determine what colors to render. This inverse calculation also creates the “solarized” effect when the
black side frame text renders over the video-in-SVG.&lt;/p&gt;

&lt;p&gt;In the original design specifications, the static text framing the page was intended to render black over a white
background, white over a black background, and white over the video-in-SVG. In order to achieve that effect, we
would have needed to apply the &lt;code&gt;difference&lt;/code&gt; mix-blend-mode property when the text overlapped with a black or white
background, and color-dodge when it overlapped with a video-in-SVG background. However, given it is not possible to
assign multiple blending modes to a fixed element we had to deviate from the original design specifications.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-11-04-css-is-hard-and-vanguard-2019-learnings/mbb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ts&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FrameText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Sans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;fixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;mix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mode&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;




&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ts&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InvertedText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;mix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isMobile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;normal&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;difference&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)};&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;will&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;a name=&quot;Video-in-SVG&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Video-in-SVG&lt;/h2&gt;

&lt;p&gt;In the article series you might have noticed that each of the article subsections begins with a different polygonal
shape, which serves as a visual indicator to readers that they are viewing an article either the &lt;em&gt;Emerging&lt;/em&gt;, &lt;em&gt;Newly
Established&lt;/em&gt;, or &lt;em&gt;Getting Their Due&lt;/em&gt; sections. You might have also noticed that each article subseries starts with
a video clip nested inside of one of these corresponding polygon shapes. These are what I refer to as video-in-SVG.
Nothing too in-depth here, but I’ll offer up the initial approach to how this effect was implemented as well as the
final solution.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-11-04-css-is-hard-and-vanguard-2019-learnings/getting-their-due.gif&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/2019-11-04-css-is-hard-and-vanguard-2019-learnings/getting-their-due-img.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Initially, I attempted to implement this using the
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject&quot;&gt;Foreign Object&lt;/a&gt; SVG element and adding a
&lt;a href=&quot;https://css-tricks.com/almanac/properties/c/clip-path/&quot;&gt;Clip Path&lt;/a&gt; CSS property with the to the div element
wrapping the video. In both approaches the video component stopped respecting the responsiveness of the page, which
created an undesirable layout effect of having a huge video on screens smaller than 600 pixels wide, and
disproportionate sizing relative to the rest of the components in the article series.&lt;/p&gt;

&lt;p&gt;In order to achieve the desired effect, the component was refactored to make the SVG &quot;blob&quot; a sibling of the video
wrapped inside a parent div with a fixed height. The parent div received a height equal to 100% of the viewport
width divided by the video’s aspect ratio--16:9. This prevents the video from being visible outside the borders of
the SVG. Et voila!&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ts&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SubseriesWrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;direction&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;cm&quot;&gt;/* 16 x 9 aspect ratio */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;




&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;html&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;SubseriesWrapper&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;SubseriesSVGWrapper&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;viewBox=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0 0 1600 900&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/2000/svg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;FFF&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;100vw&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;M0,0V900H1600V0ZM1489.83,896.43,146.61,805.5,47.2,182.84,320,4.17l874.07,86,360.06,148Z&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;VanguardSubseriesVideoWrapper&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;lt;VanguardSubseriesVideo&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;autoPlay&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;muted&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;playsInline&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;controls=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{false}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{props.url}&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/VanguardSubseriesVideoWrapper&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/SubseriesSVGWrapper&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/SubseriesWrapper&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;a name=&quot;Final.Thoughts&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Final Thoughts&lt;/h1&gt;

&lt;p&gt;One of the biggest non-technical takeaways for me was the importance of becoming skilled at thinking like a product
manager while approaching engineering work. Engineers that do this well are adept at balancing many
responsibilities–scoping out the amount of engineering work involved in producing a deliverable, communicating
technical information to non-technical team members, managing expectations and (sometimes) competing interests when
working on cross-teams projects, gracefully informing stakeholders that the scope of a project will have to be
limited in order to deliver an MVP, among others. Doing these things well is hard, and furthermore not something we
learn in computer science or engineering programs; yet is a requisite, in my opinion, to be an effective engineer.
I’m grateful for the opportunity to have collaborated with others on this year’s Artsy Vanguard and to have been
given the chance to develop these skills.&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/10/29/css-is-hard-and-vanguard-2019-learnings/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/10/29/css-is-hard-and-vanguard-2019-learnings/</guid>
        
        
        <category>agile</category>
        
        <category>artsy vanguard</category>
        
        <category>collection hubs</category>
        
        <category>collections</category>
        
        <category>css</category>
        
        <category>design</category>
        
        <category>editorial</category>
        
        <category>learnings</category>
        
        <category>mixed-blend-mode</category>
        
        <category>people</category>
        
        <category>svg</category>
        
        <category>teams</category>
        
      </item>
    
      <item>
        <title>Kubernetes and Hokusai</title>
        <description>&lt;p&gt;When I joined Artsy Engineering a few months ago, I had roughly zero knowledge of Kubernetes. I&#39;d heard the term
thrown around a few times, but had no idea how it worked or what it was used for.&lt;/p&gt;

&lt;p&gt;Kubernetes is still a bit of a mystery to me, but I&#39;m able to do a lot of Kubernetes operations quickly and easily
thanks to an open-source tool developed at Artsy: &lt;a href=&quot;https://github.com/artsy/hokusai&quot;&gt;Hokusai&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post, I&#39;ll give some background on &lt;a href=&quot;https://kubernetes.io&quot;&gt;Kubernetes&lt;/a&gt;, a brief history of Hokusai, a
description of its functionality, and some pointers for how to get started using it.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;What.is.Kubernetes.&quot;&gt;&lt;/a&gt;
&lt;h1&gt;What is Kubernetes?&lt;/h1&gt;

&lt;p&gt;On a high level, Kubernetes is a tool designed to &lt;em&gt;orchestrate containers at scale.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let&#39;s break that down a bit. First, some helpful vocab:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Container&lt;/strong&gt;: Effectively code + all necessary dependencies for an application. A
&lt;a href=&quot;https://www.docker.com/resources/what-container&quot;&gt;&quot;standardized unit of software&quot;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pods&lt;/strong&gt;: A group of one or more containers. One container per pod is the most common use case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deployment&lt;/strong&gt;: A Kubernetes component (read: program) that provides declarative updates to pods and manages their
lifecycles (i.e. creating new pods when new code is rolled out, rolling back to an earlier state, scaling up to
more pods, etc.).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Node&lt;/strong&gt;: A physical or virtual machine that runs a pod or pods.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cluster&lt;/strong&gt;: A node or group of nodes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Container orchestration&lt;/strong&gt;: A systemized approach to managing containers. Allows for things like auto-scaling,
easy rollouts and rollbacks, and automation of container downtime (i.e. something goes wrong in your process and
causes your app to crash; a new container gets spun up immediately so that your app doesn&#39;t go down).&lt;/p&gt;

&lt;p&gt;Sources: &lt;a href=&quot;https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/&quot;&gt;Kubernetes docs&lt;/a&gt;,
&lt;a href=&quot;https://www.infoworld.com/article/3268073/what-is-kubernetes-your-next-application-platform.html&quot;&gt;Infoworld&lt;/a&gt;,
&lt;a href=&quot;https://www.docker.com/resources/what-container&quot;&gt;Docker docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kubernetes, in a general sense, allows you to configure the containers in which your application will run. With a
properly configured Kubernetes cluster, this makes it easy to scale applications up or down as needed to deal with
traffic patters, maintain a zero-downtime deployment, and more. Very cool.&lt;/p&gt;

&lt;p&gt;To sum up the structure of applications running on Kubernetes: clusters contain nodes which contain pods (which are
managed by deployments) which contain containers. This can be tricky to wrap your head around without
experimentation and personal experience—Hokusai aims to simplify the ways in which a developer can interact with
applications running on Kubernetes.&lt;/p&gt;

&lt;a name=&quot;What.is.Hokusai.&quot;&gt;&lt;/a&gt;
&lt;h1&gt;What is Hokusai?&lt;/h1&gt;

&lt;p&gt;When Artsy&#39;s Engineering team was contemplating a move to Kubernetes from Heroku, we had beef with a few things.&lt;/p&gt;

&lt;p&gt;For one, we wanted to be able to do a few core things simply and easily using the command line. While Kubernetes
has a robust API and CLI tooling using &lt;a href=&quot;https://kubernetes.io/docs/reference/kubectl/overview/&quot;&gt;kubectl&lt;/a&gt;, it&#39;s also
very complex. We wanted to be able to quickly and easily do the things we were used to doing with Heroku; we
preferred &lt;code&gt;heroku logs&lt;/code&gt; to &lt;code&gt;kubectl logs [POD]&lt;/code&gt; (where we would have to either look up or know the specific pod
name we wanted, even though pods are being spun up and taken down all the time).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://helm.sh&quot;&gt;Helm&lt;/a&gt;, the de-facto package manager for Kubernetes, also didn&#39;t quite fit our needs. Helm is
great for big, complex implementations with Kubernetes, and it&#39;s very useful for managing releases. Artsy
Engineering wanted something that didn&#39;t involve quite as many complex charts, and we&#39;re not as concerned as some
orgs with versioned releases since our focus is mostly on web apps.&lt;/p&gt;

&lt;p&gt;Basically, we wanted our commands to be application-level instead of pod- or node-level. We wanted a little more
abstraction than was offered by &lt;code&gt;kubectl&lt;/code&gt;, and a little less than Helm.&lt;/p&gt;

&lt;p&gt;And there was the issue of review apps. Review apps are basically standalone versions of an application that fall
completely outside a normal production pipeline. They allow you to test big or scary changes in functionality
without even putting them on a staging instance (which could affect other developers&#39; work or be deployed
accidentally).&lt;/p&gt;

&lt;p&gt;Kubernetes doesn&#39;t support review apps out of the box. There are some add-ons that offer them, but at the time
Artsy was looking to switch, I don&#39;t think they existed or were widespread.&lt;/p&gt;

&lt;p&gt;Thus was born Hokusai: a tool that makes interacting with applications deployed on Kubernetes from the command line
simple. Need logs? &lt;code&gt;hokusai production logs&lt;/code&gt;. Need to run a rake task? &lt;code&gt;hokusai staging run &#39;rake db:migrate&#39;&lt;/code&gt;. Or
want to set up a review app? There are a
&lt;a href=&quot;https://github.com/artsy/hokusai/blob/master/docs/Review_Apps.md&quot;&gt;few steps involved&lt;/a&gt;, but you can have a
fully-featured copy of your app up and running in a few minutes.&lt;/p&gt;

&lt;p&gt;The end of this post has a larger cheatsheet for handy Hokusai commands, but for now, let&#39;s talk about how you can
use it yourself.&lt;/p&gt;

&lt;a name=&quot;How.can.I.set.up.Hokusai.with.my.project.&quot;&gt;&lt;/a&gt;
&lt;h1&gt;How can I set up Hokusai with my project?&lt;/h1&gt;

&lt;p&gt;I should begin by noting that Hokusai is developed to work with AWS—if your application is running on a different
provider, you might have to hold off on Hokusai for now :( (or
&lt;a href=&quot;https://github.com/artsy/hokusai&quot;&gt;open a PR in Hokusai&lt;/a&gt; yourself!) We do aim to support more clouds in the future,
and Hokusai mostly interacts directly with Kubernetes or Docker APIs.&lt;/p&gt;

&lt;p&gt;Installing hokusai is super easy! You can see full instructions in the README on
&lt;a href=&quot;https://github.com/artsy/hokusai&quot;&gt;GitHub&lt;/a&gt;, but if you&#39;re already set up with Python, pip, Docker, Docker Compose,
and Git, you can do a quick install of Hokusai packed by &lt;a href=&quot;https://www.pyinstaller.org/&quot;&gt;PyInstaller&lt;/a&gt; with Homebrew:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;&#39;&gt;&lt;span class=&#39;line&#39;&gt;$ brew tap artsy/formulas
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;$ brew install hokusai&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;There&#39;s more robust directions
&lt;a href=&quot;https://github.com/artsy/hokusai/blob/master/docs/Getting_Started.md&quot;&gt;in the Hokusai repo&lt;/a&gt;, but the very short
version is that &lt;code&gt;hokusai setup&lt;/code&gt; handles most of the basics (creation of a Dockerfile, a config folder, and a few
other bits and bobs). From there, you can customize according to the needs of your project. It&#39;s also possible to
write boilerplate templates to share with developers in your organization—you can see Artsy&#39;s
&lt;a href=&quot;https://github.com/artsy/artsy-hokusai-templates&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You should also check out Ash&#39;s &lt;a href=&quot;https://artsy.github.io/blog/2018/01/24/kubernetes-and-hokusai/&quot;&gt;great post&lt;/a&gt; on
setting up a new Hokusai project—he runs through the process of setting up a new Rails application with Hokusai in
an easy-to-follow way that also details small hitches he ran into along the way.&lt;/p&gt;

&lt;a name=&quot;What.s.next.for.Hokusai.&quot;&gt;&lt;/a&gt;
&lt;h1&gt;What&#39;s next for Hokusai?&lt;/h1&gt;

&lt;p&gt;As Hokusai has grown and changed over the years (the GH repo was created in November 2016!), a few things have
changed.&lt;/p&gt;

&lt;p&gt;For one, it&#39;s been increasingly used in coordination with CircleCI. Hokusai has made it really easy to standardize
a lot of application configuration across Artsy&#39;s applications. We have
&lt;a href=&quot;https://github.com/artsy/orbs/blob/master/src/hokusai&quot;&gt;CircleCI orbs&lt;/a&gt; set up for Hokusai specifically, which
standardize the way Hokusai is invoked in our CI, among other things. Given how helpful it&#39;s been to have a single
source of CircleCI config for many of our apps, we&#39;re pondering the idea of a central source for Kubernetes Hokusai
config. In other words, we&#39;d like to have a &quot;baseline&quot; for things like deployments—something that could be
overriden as necessary in specific projects but would make spinning up new projects easy. This would effectively
allow Hokusai to support functionality similar to Helm&#39;s &lt;a href=&quot;https://helm.sh/docs/chart_template_guide/&quot;&gt;templates&lt;/a&gt;,
but in a way that can be consumed across project repos.&lt;/p&gt;

&lt;a name=&quot;Hokusai.and.beyond&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Hokusai and beyond&lt;/h1&gt;

&lt;p&gt;Personally, Hokusai has been very useful to me as a kind of &quot;training wheels&quot; for Kubernetes. To be able to quickly
and easily start interacting with Kubernetes, even as a complete Kubernetes noob, was very empowering and helped me
be less intimidated by it. As I&#39;ve spent more time interacting with Hokusai, I&#39;ve started to understand what&#39;s
going on behind the scenes, and I&#39;ve found myself poking around in the Kubernetes docs more than once. I&#39;m excited
to keep learning more about Kubernetes and to start contributing to Hokusai!&lt;/p&gt;

&lt;p&gt;Hokusai significantly lowers the barriers to interacting with Kubernetes apps and centralizes the complexity
inherent in doing so. It&#39;s been invaluable in transitioning our engineering team to working with Kubernetes. If you
or your organization are in the midst of a similar transition—or if you have a sharp divide in Kubernetes knowledge
and comfort within your team—we suggest giving it a try! Our issues are open for bug reports and feature requests,
and we certainly welcome PRs with improvements.&lt;/p&gt;

&lt;a name=&quot;Appendix.A:.Useful.Hokusai.commands&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Appendix A: Useful Hokusai commands&lt;/h2&gt;

&lt;p&gt;These are the commands I find myself using on a regular basis. If you&#39;re playing around with Hokusai, you can also
run most commands with &lt;code&gt;--help&lt;/code&gt; to get more information on their usage.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hokusai [production|staging] env get&lt;/code&gt;: Print all of the environment variables from your application&#39;s pod&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hokusai [production|staging] env set &quot;ENV=value&quot;&lt;/code&gt;: Set an environment variable on your application&#39;s pod&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hokusai [production|staging] run &#39;rake db:migrate&#39;&lt;/code&gt;: run a Rails migration&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hokusai [production|staging] run &#39;bundle exec rails c&#39; --tty&lt;/code&gt;: Open a Rails console for your app (I have this
one aliased to &lt;code&gt;hokusai-[production|staging]-console&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hokusai [production|staging] refresh&lt;/code&gt;: Refresh the application&#39;s deployment by recreating its containers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hokusai build&lt;/code&gt;: Build your application&#39;s Docker image as defined in a &lt;code&gt;hokusai/build.yml&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hokusai test&lt;/code&gt;: Boot a test environment and run a test suite as defined in &lt;code&gt;hokusai/test.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hokusai pipeline gitcompare --org-name [org]&lt;/code&gt;: Spits out a URL for a git comparison between production and
staging images&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hokusai pipeline gitlog&lt;/code&gt;: Print a git log for commits between the image deployed on production and the image on
staging. Handy if you need to get the SHA of a staged commit quickly, e.g. for rollback purposes (?)&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/10/18/kubernetes-and-hokusai/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/10/18/kubernetes-and-hokusai/</guid>
        
        
        <category>artsy</category>
        
        <category>beginners</category>
        
        <category>engineering</category>
        
        <category>hokusai</category>
        
        <category>k8s</category>
        
        <category>kubernetes</category>
        
      </item>
    
      <item>
        <title>Unbearable Lightness of Refactoring</title>
        <description>&lt;p&gt;As engineers we are constantly in the process of building new features and improving our existing ones. Nowadays, with the help of tools and processes like code reviews one could argue the quality of the code being written has risen. At Artsy a pull request normally has one Assignee and possibly one or more Reviewers, so why do we still do a lot of refactoring?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;There is no means of testing which decision is better, because there is no basis for comparison. We live everything as it comes, without warning, like an actor going on cold. And what can life be worth if the first rehearsal for life is life itself?&lt;/p&gt;

&lt;p&gt;― Milan Kundera, &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Unbearable_Lightness_of_Being&quot;&gt;The Unbearable Lightness of Being&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Part of me wants to end this blogpost by Kundra’s quote, but for now let&#39;s get deeper.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;L.The.Refactor.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;&quot;The Refactor&quot;&lt;/h2&gt;

&lt;p&gt;Recently we&#39;ve started adding &lt;a href=&quot;https://stripe.com/docs/strong-customer-authentication&quot;&gt;Strong Customer Authentication (SCA)&lt;/a&gt; support to one of our services. This service is relatively young in our stack and very well-reviewed. While the original code and approach looked nice and simple, as this service naturally grew and we started adding more logic to it, things got more and more complicated. During SCA support efforts, we realized it&#39;s time to refactor. The code I was trying to refactor was less than a year old and &lt;a href=&quot;https://twitter.com/davidwalshblog/status/953663412013293569&quot;&gt;originally written, well... by me&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Should I be worried? Embarrassed? Well, not really. As engineers, when we build things we tend to look at current state of affairs, and we attempt to predict the future as much as possible. But the future is always changing, moving. SCA feature we were about to add to our existing logic weren&#39;t a requirement a year ago (a year ago I didn&#39;t know what SCA was). So first thing, &lt;strong&gt;never be embarrassed about refactoring&lt;/strong&gt;, because the thing you&#39;re working on is often entirely unknown and you can&#39;t expect to get something unknown totally right the first time around. Looked at it in this light, refactoring is healthy.&lt;/p&gt;

&lt;a name=&quot;Lets.Get.More.Specific&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Lets Get More Specific&lt;/h3&gt;

&lt;p&gt;Back to our SCA change, we ended up having some discussions about how to improve our already complicated logic in a way that easily supports future updates. We started by trying to separate the different steps that an order has to go through to fully get submitted and try to simplify it, weighing the pros and cons of each approach. While pretty much all of our solutions would have some disadvantages, we managed to find our best option and started refactoring. Without getting too technical, lets look at the actual change.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c1&quot;&gt;## before refactor&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;submit!&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line_items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;commission_fee_cents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_commission_fee_cents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;totals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BuyOrderTotals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;   &lt;span class=&quot;c1&quot;&gt;# set totals&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hold!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;InsufficientInventoryError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failed_inventory?&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;c1&quot;&gt;# in case of failed transaction, we need to rollback this block,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;c1&quot;&gt;# but still need to add transaction, so we raise an ActiveRecord::Rollback&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rollback&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failed_payment?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requires_action?&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;c1&quot;&gt;# set payment&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transactions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;no&quot;&gt;PostTransactionNotificationJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perform_later&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FailedTransactionError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:charge_authorization_failed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failed_payment?&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requires_action?&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;c1&quot;&gt;# because of an issue with `ActiveRecord::Rollback` we have to force a reload here&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;c1&quot;&gt;# rollback does not clean the model and calling update on it will raise error&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;external_charge_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;external_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;no&quot;&gt;Exchange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dogstatsd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;******&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PaymentRequiresActionError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action_data&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;In the original solution, we wrapped all of our changes in a database transaction within &lt;code&gt;order.submit!&lt;/code&gt; to have a lock on that record. This was all good since we would ensure data integrity provided by database transaction. This way we ensure updates to &lt;code&gt;order&lt;/code&gt; and &lt;code&gt;line_items&lt;/code&gt; happen only in case of success. A failure in this block would rollback all changes which is good 👍&lt;/p&gt;

&lt;p&gt;But things got complicated once some of the changes in the block &lt;em&gt;should&lt;/em&gt; have been preserved, even in case of rollback. Specifically we want to make sure a &lt;code&gt;transaction&lt;/code&gt; is stored on the &lt;code&gt;order&lt;/code&gt; if it payment fails or requires action.
We found out that we can use &lt;code&gt;raise ActiveRecord::Rollback&lt;/code&gt; which is a specific exception in Rails that only bubbles up in the surrounding transaction and does not get thrown outside of the block. This already makes things super complicated.&lt;/p&gt;

&lt;p&gt;In order to make our code less complicated, we did a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We delegated more responsibility to a service class,&lt;code&gt;OrderProcessor&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Instead of wrapping all code in one transaction, we now optimistically &lt;code&gt;submit&lt;/code&gt; the order at the beginning and in case anything went wrong, we revert the changes.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OrderProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ValidationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validation_error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valid?&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;advance_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:submit!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deduct_inventory&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;revert!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;InsufficientInventoryError&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_totals!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hold&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;store_transaction&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failed_payment?&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;revert!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FailedTransactionError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:charge_authorization_failed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requires_action?&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;revert!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;no&quot;&gt;Exchange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dogstatsd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;******&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PaymentRequiresActionError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action_data&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;n&quot;&gt;order_processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on_success&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Well, this at least is a lot more readable.&lt;/p&gt;

&lt;a name=&quot;Get.The.Change.to.Production&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Get The Change to Production&lt;/h3&gt;

&lt;p&gt;The next question is how to get this to production. We tried to isolate this specific refactoring by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open a PR that only focuses on our refactoring&lt;/li&gt;
&lt;li&gt;Make sure in the PR above we don&#39;t touch any API level tests and make sure all these tests still pass. This would give us more confidence that we are not impacting our existing clients.&lt;/li&gt;
&lt;li&gt;Review and merge refactoring PR and test on staging.&lt;/li&gt;
&lt;li&gt;Deploy everything in current pipeline to isolate the refactor deploy.&lt;/li&gt;
&lt;li&gt;Deploy the refactoring PR to production.&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;How.Did.It.Go.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;How Did It Go?&lt;/h2&gt;

&lt;p&gt;This plan worked for us, for the most part. We ended up having to rollback the deploy since we found a bug in a non-API part of our app. From this we learned that even if we already have tests written in different layers of our app, we still need to verify them and make sure they cover all cases. Relying too much on existing tests can often lead to trouble -- verify!&lt;/p&gt;

&lt;a name=&quot;Our.learnings&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Our learnings&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Don&#39;t be afraid of refactors. They are natural and a healthy engineering tool / practice.&lt;/li&gt;
&lt;li&gt;Ensure that refactor PR&#39;s only include refactor-related changes. It&#39;s often tempting to fix other things along the way, but those fixes can take place in follow-up PRs.&lt;/li&gt;
&lt;li&gt;Don&#39;t rely only on existing tests. Refactoring is a great opportunity to review and verify your tests. Verify them and make sure they cover all scenarios.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Curious about the PR? At Artsy we believe in &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#open-source-by-default&quot;&gt;Open Source By Default&lt;/a&gt;, so check out the code &lt;a href=&quot;https://github.com/artsy/exchange/pull/475/files&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Sep 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/09/10/unbearable-lightness-of-refactoring/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/09/10/unbearable-lightness-of-refactoring/</guid>
        
        
        <category>community</category>
        
        <category>culture</category>
        
        <category>refactoring</category>
        
      </item>
    
      <item>
        <title>Server-Rendering Responsively</title>
        <description>&lt;p&gt;We use server-side rendering (SSR) to deliver every page you hit on &lt;a href=&quot;https://artsy.net&quot;&gt;artsy.net&lt;/a&gt;. We decided on
using SSR for many reasons, amongst them performance.
&lt;a href=&quot;https://artsy.github.io/blog/2013/11/30/rendering-on-the-server-and-client-in-node-dot-js/&quot;&gt;We wrote about this all the way back in 2013&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;We&#39;ve also built our site using responsive design, so you get a browsing experience optimized for your device.&lt;/p&gt;

&lt;p&gt;Combining SSR and responsive design is a non-trivial problem. There are many concerns to manage, and they are
sometimes in conflict with each other. We server render for performance reasons, but we also want to be sure our
app is performant when your browser takes over, all while optimizing for accessibility and SEO.&lt;/p&gt;

&lt;p&gt;This article describes the tools we use on &lt;a href=&quot;https://artsy.net&quot;&gt;artsy.net&lt;/a&gt; to combine SSR and responsive design.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Tool.1:..code.styled-system..code.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Tool 1: &lt;a href=&quot;https://styled-system.com&quot;&gt;&lt;code&gt;styled-system&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;We handle the majority of responsive styling differences with
&lt;a href=&quot;https://styled-system.com/responsive-styles&quot;&gt;&lt;code&gt;styled-system&lt;/code&gt;&lt;/a&gt;. This has been a really great addition to our
toolbox. Here&#39;s a component that would render a &lt;code&gt;div&lt;/code&gt; (&lt;code&gt;Box&lt;/code&gt;) with a width of 50% for small screens, 75% for
medium-sized screens, and 100% for anything larger:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;xml&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Box&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[&amp;quot;50%&amp;quot;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;quot;75%&amp;quot;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;quot;100%&amp;quot;]}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  ...
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Box&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Another example:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;xml&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Flex&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;flexDirection=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[&amp;quot;column&amp;quot;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;quot;row&amp;quot;]}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Box&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;px=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{40}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;background=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;black10&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    ...
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Box&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Box&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;While only one property in this example is specifying an array of values to be used at different breakpoints, all
of those properties &lt;em&gt;can&lt;/em&gt; take an array for different breakpoints. As developers, we love this experience. We can
apply subtle differences to components across breakpoints with very little code and effort.&lt;/p&gt;

&lt;p&gt;We use &lt;a href=&quot;https://styled-system.com&quot;&gt;&lt;code&gt;styled-system&lt;/code&gt;&lt;/a&gt; extensively within
&lt;a href=&quot;https://palette.artsy.net/&quot;&gt;our design system&lt;/a&gt;. You can
&lt;a href=&quot;https://github.com/artsy/reaction/blob/32de03fe526355258655ded510d23335a456b9ce/src/Components/NavBar/Menus/MoreNavMenu.tsx#L23-L28&quot;&gt;poke around our source&lt;/a&gt;
to see how much we&#39;ve embraced &lt;a href=&quot;https://styled-system.com&quot;&gt;&lt;code&gt;styled-system&lt;/code&gt;&lt;/a&gt;&#39;s responsive styles.&lt;/p&gt;

&lt;p&gt;There&#39;s one type of challenge with building a responsive app that &lt;a href=&quot;https://styled-system.com&quot;&gt;&lt;code&gt;styled-system&lt;/code&gt;&lt;/a&gt;
can&#39;t solve: when we need to emit different layouts across different breakpoints. In this case, we need something
that can render very different component sub-trees. We couldn&#39;t find an approach that satisfied our needs, so we
wrote our own.&lt;/p&gt;

&lt;a name=&quot;Tool.2:..code..artsy.fresnel..code.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Tool 2: &lt;a href=&quot;https://github.com/artsy/fresnel&quot;&gt;&lt;code&gt;@artsy/fresnel&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;First off, an announcement: we&#39;ve just released &lt;a href=&quot;https://github.com/artsy/fresnel&quot;&gt;&lt;code&gt;@artsy/fresnel&lt;/code&gt;&lt;/a&gt; version 1.0!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/artsy/fresnel&quot;&gt;&lt;code&gt;@artsy/fresnel&lt;/code&gt;&lt;/a&gt; allows you to define a set of breakpoint widths, then
declaratively render component sub-trees when those breakpoints are met. It looks something like this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;xml&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Media&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;at=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;xs&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;MobileLayout&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Media&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Media&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;greaterThan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;xs&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;NonMobileLayout&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Media&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;In this example, we&#39;re emitting the &lt;code&gt;MobileLayout&lt;/code&gt; component for devices at or below our &lt;code&gt;xs&lt;/code&gt; breakpoint, and the
&lt;code&gt;NonMobileLayout&lt;/code&gt; for devices greater than our &lt;code&gt;xs&lt;/code&gt; breakpoint. You can imagine that the &lt;code&gt;MobileLayout&lt;/code&gt; and
&lt;code&gt;NonMobileLayout&lt;/code&gt; components contain complicated sub-trees, with more significant differences than
&lt;a href=&quot;https://styled-system.com&quot;&gt;&lt;code&gt;styled-system&lt;/code&gt;&lt;/a&gt; could handle.&lt;/p&gt;

&lt;a name=&quot;How.it.works&quot;&gt;&lt;/a&gt;
&lt;h3&gt;How it works&lt;/h3&gt;

&lt;p&gt;The first important thing to note is that when server-rendering with
&lt;a href=&quot;https://github.com/artsy/fresnel&quot;&gt;&lt;code&gt;@artsy/fresnel&lt;/code&gt;&lt;/a&gt;, &lt;strong&gt;all&lt;/strong&gt; breakpoints get rendered by the server. Each &lt;code&gt;Media&lt;/code&gt;
component is wrapped by plain CSS that will only show that breakpoint if it matches the user&#39;s current browser
size. This means that the client can accurately start rendering the HTML/CSS &lt;em&gt;while&lt;/em&gt; it receives it, which is long
before the React application has booted. This improves perceived performance for end-users.&lt;/p&gt;

&lt;p&gt;Why not just the breakpoint that the current device needs? Because we can&#39;t &lt;em&gt;accurately&lt;/em&gt; identify which breakpoint
your device needs on the server. We could use a library to sniff the browser &lt;code&gt;user-agent&lt;/code&gt;, but those aren&#39;t always
accurate, and they wouldn&#39;t give us all the information we need to know when we are server-rendering.&lt;/p&gt;

&lt;p&gt;If you&#39;re interested, you can
&lt;a href=&quot;https://github.com/artsy/reaction/issues/1367&quot;&gt;read the issue that originally inspired us to build &lt;code&gt;@artsy/fresnel&lt;/code&gt;&lt;/a&gt;.
One of the neat things about Artsy being &lt;a href=&quot;/series/open-source-by-default/&quot;&gt;open-source by default&lt;/a&gt; is that you can
see decisions being made and libraries being built &lt;em&gt;as they happen&lt;/em&gt;; not just after they&#39;re complete.&lt;/p&gt;

&lt;a name=&quot;Tool.3:..code..artsy.detect-responsive-traits..code.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Tool 3: &lt;a href=&quot;https://github.com/artsy/detect-responsive-traits&quot;&gt;&lt;code&gt;@artsy/detect-responsive-traits&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I mentioned above that it&#39;s difficult to accurately detect devices by user agent to identify which breakpoint to
render. We didn&#39;t want this to be our primary strategy for combining SSR with responsive design.&lt;/p&gt;

&lt;p&gt;But with &lt;a href=&quot;https://github.com/artsy/fresnel&quot;&gt;&lt;code&gt;@artsy/fresnel&lt;/code&gt;&lt;/a&gt; as our primary approach, we felt that we could make
some further optimizations with user agent detection. In the event that we don&#39;t know your device by its user
agent, we&#39;ll still render all breakpoints on the server. But if we are certain you are on a device that only ever
needs a subset of the breakpoints, we only render those on the server. This saves a bit of rendering time; more
importantly it reduces the number of bytes sent over the wire.&lt;/p&gt;

&lt;p&gt;We really wanted to not maintain our own list of user agents. Alas, we found that none of the existing user agent
detection libraries surfaced all the information we needed in a single resource. We needed to know the minimum
width for a browser on a given device, and if it was resizable, and to what dimensions it was resizable. If any
existing libraries &lt;em&gt;did&lt;/em&gt; have this data, they didn&#39;t provide it to us easily.&lt;/p&gt;

&lt;p&gt;So we did some experimentation, given the browsers and devices we knew we needed to support. And yeah...we
(reluctantly) created our own user-agent detection library,
&lt;a href=&quot;https://github.com/artsy/detect-responsive-traits&quot;&gt;@artsy/detect-responsive-traits&lt;/a&gt;. We&#39;re using this to determine
if your browser is likely going to use only the mobile breakpoint of our app, in which case we don&#39;t have to also
render the desktop version. The library is currently targeting only the browsers and devices we support on
&lt;a href=&quot;artsy.net&quot;&gt;artsy.net&lt;/a&gt;, but
&lt;a href=&quot;https://github.com/artsy/detect-responsive-traits&quot;&gt;we&#39;re always open to contributions&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;We aren&#39;t doing any detection of desktop browsers. They are more resizable than mobile browsers, and we are more
concerned with mobile users getting less content sent over their 3G connection.&lt;/p&gt;

&lt;a name=&quot;Why.didn.t.you.___.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Why didn&#39;t you ___?&lt;/h2&gt;

&lt;p&gt;Those are our primary tools for combining SSR with responsive design! They work well for us. We considered many
many other options along the way. Here are a couple:&lt;/p&gt;

&lt;a name=&quot;L.code.react-media..code..or..code.react-responsive..code.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;https://github.com/ReactTraining/react-media&quot;&gt;&lt;code&gt;react-media&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://github.com/contra/react-responsive&quot;&gt;&lt;code&gt;react-responsive&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;We investigated both &lt;a href=&quot;https://github.com/ReactTraining/react-media&quot;&gt;&lt;code&gt;react-media&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&quot;https://github.com/contra/react-responsive&quot;&gt;&lt;code&gt;react-responsive&lt;/code&gt;&lt;/a&gt;, but found that they didn&#39;t approach the SSR side
of the problem as deeply as we needed.&lt;/p&gt;

&lt;p&gt;We also weren&#39;t fans of the imperative API in &lt;a href=&quot;https://github.com/ReactTraining/react-media&quot;&gt;&lt;code&gt;react-media&lt;/code&gt;&lt;/a&gt;. We
started with a similar API when building &lt;a href=&quot;https://github.com/artsy/fresnel&quot;&gt;&lt;code&gt;@artsy/fresnel&lt;/code&gt;&lt;/a&gt;, but found ourselves
inhibited by the restriction that only one branch can be rendered. This contradicted our strategy of emitting all
breakpoints from the server.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;https://github.com/contra/react-responsive&quot;&gt;&lt;code&gt;react-responsive&lt;/code&gt;&lt;/a&gt;, we didn&#39;t like that it relied on user agent
detection as its primary method of handling SSR.&lt;/p&gt;

&lt;a name=&quot;Rely.solely.on.CSS&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Rely solely on CSS&lt;/h3&gt;

&lt;p&gt;As mentioned before, we render all breakpoints from the server and hide the non-matching branches with CSS. The
issue with this approach, when combined with React, is that after
&lt;a href=&quot;https://reactjs.org/docs/react-dom.html#hydrate&quot;&gt;hydration&lt;/a&gt; you have many components that are mounted and rendered
unnecessarily. There&#39;s a performance hit you take for rendering components your user isn&#39;t seeing, but even worse
is the potential for duplicate side-effects.&lt;/p&gt;

&lt;p&gt;Imagine a component that, when rendered, emits a call to an analytics service. If this component exists in both a
mobile and desktop branch, you&#39;re now double-stuffing your analytics. Hopefully your analytics service is smart
enough to count only one call, but it&#39;s still a bad idea to duplicate components that have side-effects.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/artsy/fresnel&quot;&gt;&lt;code&gt;@artsy/fresnel&lt;/code&gt;&lt;/a&gt; will only client-render the breakpoint that matches your
browser dimensions, so you don&#39;t have to worry about duplicate side-effects.&lt;/p&gt;

&lt;a name=&quot;What.s.left.to.solve.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What&#39;s left to solve?&lt;/h2&gt;

&lt;p&gt;Our SSR and responsive design toolbox does a lot of things well. We get great performance from both the server and
client. Our site looks great on any device.&lt;/p&gt;

&lt;p&gt;We do have some SEO concerns, though. Since we&#39;re server-rendering multiple breakpoints, it&#39;s likely that search
engine bots are seeing double the content on our pages. We &lt;em&gt;think&lt;/em&gt; this is okay.
&lt;a href=&quot;https://youtu.be/WsgrSxCmMbM&quot;&gt;Google WebMasters&lt;/a&gt; says it&#39;s okay. We haven&#39;t noticed any awful side-effects from
this yet, but SEO is a bit of a dark art, yeah?&lt;/p&gt;

&lt;a name=&quot;Our.advice&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Our advice&lt;/h2&gt;

&lt;p&gt;Responsive design is hard, especially when layouts change significantly between desktop and mobile. Server-side
rendering in React is hard to get right, period. Combining SSR with responsive design compounds the challenges.&lt;/p&gt;

&lt;p&gt;At the end of the day, you should do everything you can to limit layout differences between mobile and desktop. Use
responsive props from &lt;a href=&quot;https://styled-system.com&quot;&gt;&lt;code&gt;styled-system&lt;/code&gt;&lt;/a&gt;. Play around with &lt;code&gt;flexbox&lt;/code&gt; and
&lt;code&gt;flex-direction&lt;/code&gt;, start learning about CSS &lt;code&gt;grid&lt;/code&gt;, and use CSS &lt;code&gt;@media&lt;/code&gt; queries when you can. If you absolutely
must render different views on different breakpoints, render all the UI and hide what&#39;s not needed for that
breakpoint. You want your users to see the right content as quickly as possible. Send them HTML and CSS from your
server that their client can use.&lt;/p&gt;
</description>
        <pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/05/24/server-rendering-responsively/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/05/24/server-rendering-responsively/</guid>
        
        
        <category>html</category>
        
        <category>react</category>
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>Why Projects Need Code Names</title>
        <description>&lt;p&gt;Before I joined Artsy, I worked at companies where software projects tended to have meaningful, predictable names. If we were building a system for flagging media uploads, it might be called &lt;code&gt;media-review&lt;/code&gt;. In many cases, our code repositories&#39; names matched the main product&#39;s branding or even the company&#39;s name. Life was simple and there was no risk of ambiguity.&lt;/p&gt;

&lt;p&gt;At Artsy, our systems have peculiar code names like &lt;em&gt;Gravity&lt;/em&gt;, &lt;em&gt;Pulse&lt;/em&gt;, and &lt;em&gt;Vortex&lt;/em&gt;. There&#39;s a persistent learning curve as you contribute to different repositories or as new services get created. Numerous times, I&#39;ve wondered: are code names worth the trouble?&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;img src=&quot;/images/2019-05-10-why-projects-need-codenames/github_projects.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To be clear, &lt;em&gt;any&lt;/em&gt; project naming scheme works in small quantities. Personal projects or libraries for public release should probably just be named for clarity and find-ability. Code names start to offer benefits as a team grows and a product evolves over the longer term:&lt;/p&gt;

&lt;p&gt;Code names embrace that &lt;strong&gt;we don&#39;t necessarily know the fit or scope of a system when it&#39;s first conceived&lt;/strong&gt;. To &lt;em&gt;not&lt;/em&gt; employ code names would require accurately predicting a system&#39;s eventual function. A project named &lt;code&gt;artsy-admin&lt;/code&gt; starts to grate when we make the architectural decision to split apart management utilities or introduce more fine-grained administrative roles. An &lt;code&gt;artwork-taxonomy&lt;/code&gt; label loses meaning when that system expands to include less structured tags&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Branding shifts, products pivot, and companies merge.&lt;/strong&gt; Project code names introduce a level of indirection between what engineers build and the labels, URLs, or brands that end users experience. Over a long enough period, these external or superficial changes &lt;em&gt;will&lt;/em&gt; happen and risk introducing confusion or just subtle misalignment between form and function. As with software design in general, abstractions can be a powerful tool to &lt;a href=&quot;https://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;separate concerns&lt;/a&gt;. Ask yourself: what code changes might be required if your company were to spin off your product or be merged into an acquirer?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Language is important&lt;/strong&gt;, and not just for communication but for shaping our thoughts and assumptions. We frequently find ourselves debating which system should serve as the authority for a given domain model or where to implement a new feature, and project names that overlap with these topics (e.g., &lt;code&gt;search&lt;/code&gt;, &lt;code&gt;images&lt;/code&gt;, &lt;code&gt;suggestions&lt;/code&gt;) would predispose us to certain decisions. Code names free us to focus on the architectural and organizational merits instead.&lt;/p&gt;

&lt;p&gt;We like to &lt;strong&gt;have fun at work&lt;/strong&gt; and it&#39;s more joyful to proclaim that &quot;Torque is in the wild&quot; than &quot;data-sync has been deployed.&quot; Over time these names gain mythologies and personalities within the team and organization.&lt;/p&gt;

&lt;p&gt;With this in mind, how should you choose a naming scheme?&lt;/p&gt;

&lt;a name=&quot;Rules.for.a.project.naming.scheme&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Rules for a project naming scheme&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Avoid implicit value judgments like &quot;new,&quot; &quot;next,&quot; or &quot;modern.&quot; We&#39;ve all witnessed today&#39;s hot project become next year&#39;s unloved albatross.&lt;/li&gt;
&lt;li&gt;Choose a code name scheme that isn&#39;t directly related to your technology or business. A flower business using flower names is cute, but breaks down when you want to build a feature that &lt;em&gt;actually&lt;/em&gt; is about tulips.&lt;/li&gt;
&lt;li&gt;Everyone should be able to participate, so avoid industry lingo or obscure terminology. Funny story: I work at an art start-up but don&#39;t know enough artists to name my projects that way. I struggle even more to pronounce the few projects that are.&lt;/li&gt;
&lt;li&gt;There should be lots of choices. You&#39;ll regret choosing to name your projects after &quot;decathlon sports&quot; or &quot;days of the week&quot; when your team inevitably transitions to microservices.&lt;/li&gt;
&lt;li&gt;Names should be unique within a company and--ideally--beyond the company&#39;s scope. You wouldn&#39;t want your &lt;code&gt;marketing-site&lt;/code&gt; repository to conflict with a contributor&#39;s &lt;code&gt;marketing-site&lt;/code&gt; repository from another organization. Github projects, S3 buckets, Heroku application names, and published libraries all benefit from being globally unique.&lt;/li&gt;
&lt;li&gt;Bonus points for choosing a rich enough scheme that names can subtly relate to each system&#39;s function. At Artsy, we use physics terms for code names, so our e-commerce back-end is called &lt;a href=&quot;https://github.com/artsy/exchange&quot;&gt;Exchange&lt;/a&gt; and a command line utility for developers is called &lt;a href=&quot;https://github.com/artsy/momentum&quot;&gt;Momentum&lt;/a&gt;. A shipping service might be called &lt;em&gt;Weight&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Example code name schemes: animals, movies, sea creatures, cartoon/TV characters, woodworking tools, celebrities (but get legal advice before borrowing living individuals&#39; names). &lt;a href=&quot;https://wiki.ubuntu.com/DevelopmentCodeNames&quot;&gt;Ubuntu&lt;/a&gt; gets extra mileage by combining adjectives with animal names. &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_Apple_codenames&quot;&gt;Apple&lt;/a&gt; has used wine, cats, and California geography. &lt;a href=&quot;https://en.wikipedia.org/wiki/Android_%28operating_system%29&quot;&gt;Google&lt;/a&gt; likes dessert.&lt;/p&gt;

&lt;a name=&quot;Finally&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Finally&lt;/h2&gt;

&lt;p&gt;These days, I&#39;ve embraced Artsy&#39;s use of physics terms for project names. There continues to be some head-scratching as new engineers navigate codebases and encounter these terms or just struggle to identify the system responsible for a given site or feature. (This isn&#39;t shocking, since code names were probably adapted from more secretive environments like the military.) As your code names multiply and projects come and go, a glossary becomes essential. I suggest creating a simple document that maps projects&#39; code names to descriptions, URL destinations, hosting environments, and teams.&lt;/p&gt;

&lt;p&gt;See also:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.codinghorror.com/whats-in-a-project-name/&quot;&gt;What&#39;s in a Project Name?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://royal.pingdom.com/the-developer-obsession-with-code-names-186-interesting-examples/&quot;&gt;The Developer Obsession With Code Names, 186 Interesting Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 10 May 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/05/10/why-projects-need-codenames/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/05/10/why-projects-need-codenames/</guid>
        
        
        <category>engineering</category>
        
        <category>git</category>
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>Rosalind and The Art Genome Project</title>
        <description>&lt;p&gt;We recently bade a fond farewell to two &lt;a href=&quot;https://code.dblock.org&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;http://orta.io&quot;&gt;the&lt;/a&gt; champions of our “open source by default” ethos, but
this spirit lives on at Artsy.&lt;/p&gt;

&lt;p&gt;Today we open-source one of our key metadata apps, and explain how it fits into Artsy’s ecosystem.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Open.source.by.default....or.at.least.eventually&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Open source by default… or at least eventually&lt;/h2&gt;

&lt;p&gt;Even when we don’t start a project by building in the open, we encourage ourselves to question why that is so. Can
we go ahead and open things up? If the answer is no (and it might be), are we clear on why not?&lt;/p&gt;

&lt;p&gt;We’ve even added a &lt;a href=&quot;https://github.com/artsy/peril-settings/pull/96&quot;&gt;light bit of process&lt;/a&gt; to promote this kind of questioning. Our robots will periodically
trawl our GitHub org and file an issue against any closed-source repo that doesn’t include a rationale for its
closed nature in the project README.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&quot;illustration&quot;&gt;
  &lt;img alt=&quot;Peril issue&quot; src=&quot;/images/2019-05-09-rosalind/issue.png&quot;  /&gt;
  &lt;figcaption&gt;Robot would like to have a word with you&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;One of our repos got this &lt;a href=&quot;https://github.com/artsy/rosalind/issues/179&quot;&gt;treatment&lt;/a&gt; recently. I’m the point person on this project, and while I considered
adding a rationale of “&lt;em&gt;primary author will die of acute impostor syndrome if this repo is open-sourced, he will
just stop living&lt;/em&gt; 😅,” instead we’ve gone ahead and made this repo public.&lt;/p&gt;

&lt;p&gt;Meet &lt;a href=&quot;https://github.com/artsy/rosalind&quot;&gt;Rosalind&lt;/a&gt;, an admin app for large-batch genoming operations on Artsy’s database of artworks.&lt;/p&gt;

&lt;a name=&quot;The.Art.Genome.Project..and.the.Genome.Team&quot;&gt;&lt;/a&gt;
&lt;h2&gt;The Art Genome Project, and the Genome Team&lt;/h2&gt;

&lt;p&gt;Rosalind is a close cousin of &lt;a href=&quot;https://github.com/artsy/helix&quot;&gt;Helix&lt;/a&gt;, our original dedicated genoming app. (That project is private for
now, but was described by &lt;a href=&quot;https://artsy.github.io/author/sarahweir/&quot;&gt;Sarah&lt;/a&gt; in an an &lt;a href=&quot;/blog/2015/04/08/creating-a-dynamic-single-page-app-for-our-genome-team-using-react&quot;&gt;earlier blog post&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;What’s genoming, you ask, and what’s it got to do with art?&lt;/p&gt;

&lt;p&gt;Artsy’s discovery and recommendation capabilites are powered in large part by &lt;a href=&quot;https://www.artsy.net/about/the-art-genome-project&quot;&gt;The Art Genome Project&lt;/a&gt;,
a comprehensive system of classification that uses our homegrown art-historical controlled vocabulary to describe
the artists and artworks in our database. (Here’s an &lt;a href=&quot;https://www.artsy.net/article/the-art-genome-project-seven-facts-about-the-art-genome-project&quot;&gt;explainer&lt;/a&gt; and our full list of
&lt;a href=&quot;https://www.artsy.net/categories&quot;&gt;categories&lt;/a&gt;. You can even view a &lt;a href=&quot;https://github.com/artsy/the-art-genome-project&quot;&gt;structured data export&lt;/a&gt; of the “genes” which make
up our controlled vocabulary.)&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&quot;illustration&quot;&gt;
  &lt;img alt=&quot;Helix&quot; src=&quot;/images/2019-05-09-rosalind/helix.png&quot;  /&gt;
  &lt;figcaption&gt;Screenshot of Helix, an app for genoming artists and artworks, and an early foray into React&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;For a long time, our team of art historians — the Genome Team — bore sole responsibility for applying this
vocabulary, using Helix, to the artworks that entered our platform. This was always a daunting task, and only
became more so as our network of partner galleries and institutions continued to grow and upload more artworks.&lt;/p&gt;

&lt;p&gt;Artsy is now home to over 1,000,000 artworks by over 100,000 artists, described by over 1,000 genes. A few years
ago, it became clear to us that in order to continue applying high-quality metadata at scale, we were going to need
some new processes and some new tools.&lt;/p&gt;

&lt;p&gt;On the process side, we decided to share a simplified genoming interface with our gallery partners, so that they
could start contributing the metadata that would be most relevant to our audience of collectors. We called it
“Partner Applied Categories.”&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&quot;illustration&quot;&gt;
  &lt;img alt=&quot;Partner applied categories&quot; src=&quot;/images/2019-05-09-rosalind/cms-pac.png&quot;  /&gt;
  &lt;figcaption&gt;Partner Applied Categories interface from Artsy’s partner CMS, showing choices for works of photography&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Note that this is a tiny subset of our full genome vocabulary, and that values are applied as on/off, versus the
more nuanced 0-100 score that our own Genome Team would apply.&lt;/p&gt;

&lt;p&gt;This was a good step, a fundamental building block in scaling artwork metadata on our platform, but it created new
problems as well as new opportunities.&lt;/p&gt;

&lt;p&gt;This is where Rosalind came in.&lt;/p&gt;

&lt;a name=&quot;About.Rosalind&quot;&gt;&lt;/a&gt;
&lt;h2&gt;About Rosalind&lt;/h2&gt;

&lt;p&gt;We started work on this tool in earnest in early 2017, at a time when we felt an internal need for the ability to,
among other things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Perform boolean searches against our database of artworks using The Art Genome Project’s vocabulary – a general
purpose superpower that would be useful for our art historians, our editorial team, and our collector relations
and marketing teams, among others&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make large-batch modifications to artworks’ genomes (whether genomed by us, or by our gallery partners via
Partner Applied Categories), in order to maintain metadata quality&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The user experience we built looks something like this:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&quot;illustration&quot;&gt;
  &lt;img alt=&quot;Rosalind session&quot; src=&quot;/images/2019-05-09-rosalind/rosalind.gif&quot; style=&quot;outline: solid 1px #eee&quot; /&gt;
  &lt;figcaption&gt;A sample admin interaction in Rosalind&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Under the hood this is a Rails 5 application that talks to our core API server and our Elasticsearch cluster on the
backend, and serves up a React single page app on the frontend.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&quot;illustration&quot;&gt;
  &lt;img alt=&quot;Rosalind architecture&quot; src=&quot;/images/2019-05-09-rosalind/architecture.png&quot; /&gt;
  &lt;figcaption&gt;Bird’s eye view of Rosalind’s architecture&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Among the tactical goals of this project were to support heavy-duty admin workflows by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;offering a featureful interface tailored to power users&lt;/li&gt;
&lt;li&gt;adding a useful complement of keyboard navigation capabilities&lt;/li&gt;
&lt;li&gt;making it as blazingly fast as possible&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That last goal led to the somewhat quirky decision to have Rosalind talk to the Elasticsearch cluster directly,
instead of making a search request to our core API server.&lt;/p&gt;

&lt;p&gt;While this entails some risk of drift from our accumulated search best practices as encapsulated in our API, in
reality this has not been a problem yet. Rosalind’s search needs are fairly straightforward and using
Elasticsearch’s REST API has been working out just fine. And it is fast as heck.&lt;/p&gt;

&lt;p&gt;Although the project was mostly built out in early 2017, we’ve periodically revisited it for upkeep and
maintenance. Along the way we’ve ridden some of the larger trends in the React+Rails ecosystem, as well as internal
trends.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We started out on &lt;a href=&quot;https://github.com/mipearson/webpack-rails&quot;&gt;webpack-rails&lt;/a&gt;, an early pioneer in nudging Rails away from the Asset Pipeline
provided by Sprockets, and toward Webpack&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We &lt;a href=&quot;https://github.com/artsy/rosalind/pull/157&quot;&gt;migrated&lt;/a&gt; over to the &lt;a href=&quot;https://github.com/rails/webpacker&quot;&gt;Webpacker&lt;/a&gt; gem once that became a core Rails concern&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We &lt;a href=&quot;https://github.com/artsy/rosalind/pull/158&quot;&gt;migrated&lt;/a&gt; from RSpec feature specs to &lt;a href=&quot;https://guides.rubyonrails.org/testing.html#system-testing&quot;&gt;Rails system tests&lt;/a&gt;, after that was
rolled out&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We experimented with adopting &lt;a href=&quot;https://github.com/artsy/reaction&quot;&gt;Reaction&lt;/a&gt;, our shared internal React component library&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We more recently switched to using &lt;a href=&quot;https://github.com/artsy/palette&quot;&gt;Palette&lt;/a&gt;, our nascent design system library&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;After being in maintenance mode for a couple of years, we’re excited to start up new feature work again, and plan
to bring even more bits of the &lt;a href=&quot;https://artsy.github.io/series/omakase&quot;&gt;Artsy Omakase&lt;/a&gt; into this project. Maybe this project will even be a
good proving ground for &lt;a href=&quot;https://github.com/prettier/plugin-ruby&quot;&gt;prettier-ruby&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Whatever happens, Rosalind will continue to play an important role in maintaining Artsy’s high-quality metadata and
in making Artsy the best online destination for art.&lt;/p&gt;
</description>
        <pubDate>Thu, 09 May 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/05/09/rosalind/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/05/09/rosalind/</guid>
        
        
        <category>open source</category>
        
        <category>oss</category>
        
        <category>rails</category>
        
        <category>react</category>
        
        <category>the art genome project</category>
        
      </item>
    
      <item>
        <title>Artsy Writing Office Hours</title>
        <description>&lt;p&gt;Welcome back to my series on writing for engineers. In the last post, we discussed &lt;a href=&quot;https://ashfurrow.com/blog/technical-writing-on-the-web/&quot;&gt;technical writing on the
web&lt;/a&gt; from an individual&#39;s perspective: how do you get started? how do you leverage the web? how do you
improve? In today&#39;s post, I want to change directions; instead of focusing on how &lt;em&gt;individuals&lt;/em&gt; write, we&#39;ll
discuss how &lt;em&gt;teams&lt;/em&gt; write.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;To get started, I want to return the quote that opened up my first post. When
&lt;a href=&quot;https://open.nytimes.com/five-questions-with-orta-therox-d5bb9659c50b&quot;&gt;interviewed by the New York Times developer blog&lt;/a&gt;,
Artsy alumnus &lt;a href=&quot;https://twitter.com/orta&quot;&gt;Orta&lt;/a&gt; said:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;One of my colleagues, Ash Furrow, is really the powerhouse behind improving the state of our public
documentation. He runs weekly writing workshops internally and always encourages achievements as being
post-worthy. Sometimes the best practice is to have someone who cares encouraging you. It works for me.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This post is going to pick this quote apart, but first I want to address something upfront:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you&#39;re thinking about helping others write, then you should do it&lt;/strong&gt;. Having the desire to help others write is
the only qualification for &lt;em&gt;actually helping&lt;/em&gt;. You might think that in order to help others write, you should first
become a proficient writer yourself. This is backwards. I became the writing powerhouse that Orta mentions &lt;em&gt;by
helping others write&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let&#39;s think about this in terms of coding. When you help teach someone, &lt;em&gt;you also&lt;/em&gt; learn a lot. Assisting others
solidifies concepts &lt;em&gt;for you&lt;/em&gt; and helps &lt;em&gt;you&lt;/em&gt; hone your own skills. We recognize that engineers are ready to mentor
other engineers long before they become &lt;em&gt;experts&lt;/em&gt;; indeed, it&#39;s usually &lt;em&gt;through mentoring&lt;/em&gt; that they become
experts.&lt;/p&gt;

&lt;p&gt;This is how writing works, too.&lt;/p&gt;

&lt;p&gt;Engineering teams really benefit from having a culture of writing (and of sharing knowledge in general). To
summarize the benefits of teams which write:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generally speaking, documentation is important – but writing and maintaining it is difficult. A team culture of
writing can help make it easier.&lt;/li&gt;
&lt;li&gt;Public blog posts increase a team&#39;s reputation, which makes it easier for the team to hire (and onboard) new
members.&lt;/li&gt;
&lt;li&gt;Teaching and learning from colleagues helps &lt;a href=&quot;https://ashfurrow.com/blog/building-better-software-by-building-better-teams/&quot;&gt;cultivate a sense of psychological safety&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I don&#39;t want to go into detail about the benefits here, but if you&#39;d like to learn more, you can check out &lt;a href=&quot;https://www.youtube.com/watch?v=SjjvnrqDjpM&quot;&gt;this
talk&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;400&quot; src=&quot;https://www.youtube.com/embed/SjjvnrqDjpM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;Okay let&#39;s dive in.&lt;/p&gt;

&lt;a name=&quot;Just.Show.Up&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Just Show Up&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;[Ash] runs weekly writing workshops.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Most of success is honestly just showing up. By itself, having a time and space set aside for colleagues to come
and write every week has pushed the team culture towards valuing writing. But it took time.&lt;/p&gt;

&lt;p&gt;Six months after I started running weekly office hours, no one was really showing up. One or two people here and
there, but that was it. Orta said that he&#39;d have cancelled the event by then, due to lack of interest. Here&#39;s the
thing, though: the value of the writing office hours transcends just what gets written. Having a weekly place to
come to write tells the team that &lt;em&gt;writing is important&lt;/em&gt;. It says something, to have writing office hours, even if
no one shows up.&lt;/p&gt;

&lt;p&gt;At first, writing office hours were aspirational. That&#39;s okay. There are still weeks where no one shows up. That&#39;s
okay, too. Besides, even if no one showed up, &lt;em&gt;I&lt;/em&gt; still got an hour to write, so it was definitely worth my time.&lt;/p&gt;

&lt;p&gt;But Orta had a point: people weren&#39;t showing up, so I looked at that problem. I asked around and it turned out that
people were interested in &lt;em&gt;sharing knowledge&lt;/em&gt; but weren&#39;t always keen to write a blog post. So I changed my
approach.&lt;/p&gt;

&lt;p&gt;Nowadays when I announce the writing office hours at our &lt;a href=&quot;https://github.com/artsy/README/blob/master/events/open-standup.md&quot;&gt;weekly engineering standup&lt;/a&gt;, I am clear that it
isn&#39;t &lt;em&gt;just&lt;/em&gt; for writing. I now let people know that this is a place where they can come for help with whatever
knowledge-sharing they&#39;re interested in. Let&#39;s take a look at a few examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An engineer wanted to speak at a conference, so they brought their ideas and we outlined a talk proposal.&lt;/li&gt;
&lt;li&gt;A product manager wanted to document how Artsy&#39;s product team works, so we worked on turning that documentation
into a public blog post.&lt;/li&gt;
&lt;li&gt;An engineer was planning an architecture review meeting to get the team up to speed on how some of our systems
worked. They brought their slides and we went through the presentation together; I gave some feedback on what
worked well and what was unclear.&lt;/li&gt;
&lt;li&gt;An engineer had an idea for a blog post, but the post was too big and they felt overwhelmed. They brought their
outline and we worked to break it into several smaller posts.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So you can see that writing office hours grew to include more than just writing. And as the event helped more
people accomplish their knowledge-sharing goals, I folded those success stories into my weekly standup pitch.&lt;/p&gt;

&lt;p&gt;I also knew I needed to make it easier to write blog posts. Lots of engineers wanted to write, but had a difficult
time starting. To help, I created some &lt;a href=&quot;https://artsy.github.io/blog/2017/12/01/engineering-blog-post-templates/&quot;&gt;engineering blog post templates&lt;/a&gt; to kick-start new blog posts.
Sometimes, engineers just didn&#39;t know where to go to write a new blog post, so I did some pairing and lunch&amp;amp;learns
demonstrating the blog&#39;s setup.&lt;/p&gt;

&lt;p&gt;I still call the event &quot;writing office hours&quot; because it rolls of the tongue better than &quot;knowledge-sharing office
hours&quot;, but that&#39;s basically what they&#39;ve become!&lt;/p&gt;

&lt;a name=&quot;Frame.Deliverables.as.Blog.Posts&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Frame Deliverables as Blog Posts&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;[Ash] always encourages achievements as being post-worthy.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Here&#39;s my take: engineering work should be approached &lt;em&gt;primarily as a learning opportunity&lt;/em&gt;. A traditional
engineering project might be structured around building some product, but my approach is to structure it around how
to &lt;em&gt;learn&lt;/em&gt; how to build some product. As a team learns how to build it, the product is a natural consequence of
that learning. If you&#39;re familiar with my talk on &lt;a href=&quot;https://ashfurrow.com/blog/building-compassionate-software/&quot;&gt;building compassionate software&lt;/a&gt;, this will sound familiar.
It&#39;s also reflected in Artsy&#39;s &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#psychological-safety&quot;&gt;psychological safety engineering principle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A byproduct of this framing of work in terms of &lt;em&gt;learning&lt;/em&gt; experiences is that it lends itself naturally to framing
work as &lt;em&gt;teaching&lt;/em&gt; experiences (ie: blog posts or other knowledge-sharing). So if you&#39;re writing a new feature, or
fixing a difficult bug, or building a whole new app, then you should be thinking about the blog post as a
deliverable for that project. At least I do, anyway. The benefit of my approach is that others don&#39;t need to share
my views on teaching and learning – as long as I&#39;m there to support them, we can work together to share what they
inevitably learn. We&#39;ll touch more on this in the next section.&lt;/p&gt;

&lt;p&gt;A really common response I get to &quot;hey have you thought about writing a blog post about this?&quot; is that &quot;this isn&#39;t
really worth writing a post about.&quot; I disagree. Even if a subject has been written about before, it has never been
written about from &lt;em&gt;your perspective&lt;/em&gt;. And short posts are valuable, too – just think about how often you&#39;ll be
searching for an answer to a question and find a short, simple blog post that&#39;s unblocked you. Here is a selection
of short, focused posts from the Artsy blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://artsy.github.io/blog/2015/11/05/Using-OCR-To-Fix-A-Hilarious-Bug/&quot;&gt;Using OCR To Fix a Hilarious Bug&lt;/a&gt; (bug fix becomes a blog post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen/&quot;&gt;Being a Good OSS Citizen&lt;/a&gt; (an open source pull request becomes a blog post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://artsy.github.io/blog/2018/01/19/upgrading-volt-to-circleci-two/&quot;&gt;Upgrading Volt to CircleCI 2.0&lt;/a&gt; (an infrastructure upgrade becomes a blog post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://artsy.github.io/blog/2018/08/24/How-to-debug-jest-tests/&quot;&gt;How To Debug Jest Tests&lt;/a&gt; (learning a tool becomes a blog post)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As you can see, each of these are small posts that represent significant engineering effort. Our time is valuable,
and only through sharing what we learn (&lt;a href=&quot;https://ashfurrow.com/blog/contemporaneous-blogging/&quot;&gt;as we learn it&lt;/a&gt;) can we really honour the title of
&lt;em&gt;engineer&lt;/em&gt;.&lt;/p&gt;

&lt;a name=&quot;Caring.is.Sharing&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Caring is Sharing&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;Sometimes the best practice is to have someone who cares encouraging you.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yup, this is the part of the post where I talk about feelings. I don&#39;t think you can effectively lead &lt;em&gt;anything&lt;/em&gt; –
not a blog, not a team – without caring about the people around you.&lt;/p&gt;

&lt;p&gt;Another way I tried to increase attendance to writing office hours was to reach out to colleagues one-on-one to
offer my help (and mention the office hours). The first thing I did was look for engineers who &lt;em&gt;wanted&lt;/em&gt; to write
more. Artsy uses &lt;a href=&quot;https://lattice.com&quot;&gt;Lattice&lt;/a&gt; to help employees accomplish their goals, so I looked for anyone who had shared a goal
related to knowledge-sharing. I found a few and reached out to them to offer my help achieve those goals.&lt;/p&gt;

&lt;p&gt;But that was just a one-off way to find people interested in writing; what I wanted to build was an ongoing way to
encourage more blog posts. I found this &lt;em&gt;one weird trick&lt;/em&gt;: just pay attention to what people were working on.
That&#39;s it. If I heard that someone had experimented with a new technology, or shipped a new feature, or solved an
interesting bug, I would contact them privately to ask if they&#39;d be interested in writing a post about it.
Sometimes over Slack, sometimes in person.&lt;/p&gt;

&lt;p&gt;Over the years, I&#39;ve perfected my pitch:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Emphasize the learning experience they&#39;ve gone through: &quot;That must have been a difficult
feature/bug/investigation. Good job figuring it out!&quot;&lt;/li&gt;
&lt;li&gt;Ask them if they&#39;ve thought about writing a blog post (in a lot of cases, they had!): &quot;Have you thought about
writing a blog post about this? The engineering blog would be a great spot, or you could use your personal blog.&quot;&lt;/li&gt;
&lt;li&gt;Describe the value of writing: &quot;Lots of people have faced this same issue – a blog post would be really valuable
to the whole web developer community!&quot;&lt;/li&gt;
&lt;li&gt;Offer to help and tell them about weekly writing office hours: &quot;I run writing office hours every Wednesday at
2:00, but feel free to ping me directly if I can help out before then.&quot;&lt;/li&gt;
&lt;li&gt;Emphasize that, while I&#39;m here to help, there is no pressure to write: &quot;No pressure, of course! I know you&#39;re
busy with such-and-such project.&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Pitching them is only the first step – I&#39;d then create recurring reminders in OmniFocus to follow-up with every few
weeks. I&#39;d DM them to ask how the post was going and if I could help get them to the next step. So if they were
still working on an outline, I&#39;d offer to help them finish it. Or if they had an outline and were working on
filling it out, I&#39;d offer to read what they had so far and give feedback. It really depended on the person and
their goals. At two reminders, I&#39;d offer to stop reminding them if it wasn&#39;t helpful. After five or so reminders,
with no progress, I&#39;d quietly drop them from my OmniFocus list. No shame.&lt;/p&gt;

&lt;p&gt;It might sound like a lot of work, but it&#39;s actually just a few small recurring tasks. With a little care and the
right system for managing my own time, I might spend 10 minutes a week following up with people. The important part
is just caring about the person and their knowledge-sharing goals (whatever they are).&lt;/p&gt;

&lt;p&gt;I would estimate that my success rate was about 50%. That&#39;s pretty great, actually! Some blog posts just didn&#39;t go
anywhere, and that&#39;s okay. Everyone is busy. Some were months-long journeys that &lt;em&gt;did&lt;/em&gt; eventually get posted. But
some blog posts grew to be much more than blog posts – in one case, it grew to an entire working group of engineers
who are now investing in everyone&#39;s capacity to grow as an engineer.&lt;/p&gt;

&lt;p&gt;Like I said earlier, writing office hours became about more than &lt;em&gt;just&lt;/em&gt; writing.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;We saw in the &lt;a href=&quot;https://ashfurrow.com/blog/technical-writing-on-the-web/&quot;&gt;last post&lt;/a&gt; how to become a proficient technical writer. We saw in this post how to nurture
a culture of writing on a team. It&#39;s an ongoing process – as I learn more, I&#39;ll be sure to share what I learn with
all of you. Take care.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/05/06/technical-writing-for-teams/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/05/06/technical-writing-for-teams/</guid>
        
        
        <category>culture</category>
        
        <category>writing</category>
        
      </item>
    
      <item>
        <title>Orta&#39;s best of</title>
        <description>&lt;p&gt;Today is my last day at Artsy, it&#39;s been 8 years and I figured a nice way to book-end my time here is to make a
post that tries to talk over &lt;a href=&quot;https://artsy.github.io/author/orta/&quot;&gt;the last ~90 blog posts I&#39;ve shipped&lt;/a&gt;. My posts
tell the story of a junior-ish engineering solving problems on successive larger scales, until their decisions
impact whole industries.&lt;/p&gt;

&lt;p&gt;These posts cover so many topics that the right way to give them justice is to try group them in terms of general
themes and provide a larger context about why they were written.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;I used to occasionally write before I came to Artsy, but inside the environment of Artsy&#39;s Engineering team I could
consider it &lt;em&gt;&quot;work work&quot;&lt;/em&gt; and not just &lt;em&gt;&quot;things I should do, but in my own spare time.&quot;&lt;/em&gt; Writing for Artsy on the
blog is &lt;a href=&quot;https://artsy.github.io/blog/2019/01/30/why-we-run-our-blog/&quot;&gt;very similar to writing code in our repos&lt;/a&gt;, you assign an editor (thanks &lt;a href=&quot;https://github.com/artsy/artsy.github.io/pulls?utf8=%E2%9C%93&amp;amp;q=is%3Aclosed+is%3Apr+author%3Aorta+&quot;&gt;Ash&lt;/a&gt; for
taking the lion&#39;s share!) and request reviews. This lowered the barriers considerably.&lt;/p&gt;

&lt;a name=&quot;Career.Growth&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Career Growth&lt;/h1&gt;

&lt;p&gt;I started working at Artsy with about 2-3 years of professional programming experience at the end of 2011. When
people ask about how career progression tends to work I TLDR it as:
&lt;/br&gt;&lt;code&gt;Feature -&amp;gt; Section of Codebase -&amp;gt; Codebase -&amp;gt; Codebases -&amp;gt; Systems -&amp;gt; Businesses -&amp;gt; Industry&lt;/code&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;This echoes how Artsy used to handle &lt;a href=&quot;https://artsy.github.io/blog/2016/09/10/Help!-I&#39;m-becoming-Post-Junior/&quot;&gt;an IC career ladder&lt;/a&gt; (&lt;a href=&quot;https://github.com/artsy/README/blob/master/careers/ladder.md&quot;&gt;current&lt;/a&gt;). At that
point I joined, I sat somewhere around &lt;code&gt;Section of Codebase&lt;/code&gt;. Each progression is more responsibility, and can
sometimes be about making decisions and not necessarily being the person to put the work in.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2012 - Building Features&lt;/strong&gt; - &lt;br/&gt;&lt;a href=&quot;https://artsy.github.io/blog/2012/09/13/on-grid-thumbnails/&quot;&gt;On Grid Thumbnails&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2012/05/11/on-making-it-personal--in-iOS-with-searchbars/&quot;&gt;On Making It Personal in iOS with
Searchbars&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2013 - Creating Libraries&lt;/strong&gt; - &lt;br/&gt;&lt;a href=&quot;https://artsy.github.io/blog/2013/04/10/aranalytics/&quot;&gt;ARAnalytics - Analytics for iOS Apps&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2013/03/29/musical-chairs/&quot;&gt;Musical Chairs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2014 - Supporting Team Infra&lt;/strong&gt; - &lt;br/&gt;&lt;a href=&quot;https://artsy.github.io/blog/2014/08/08/CocoaPods-Caching/&quot;&gt;Using CocoaPods Caching with Travis CI&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2014/06/17/building-the-xcode-plugin-snapshots/&quot;&gt;Building the Xcode
Plugin Snapshots&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2014/06/11/testing-core-data-migrations/&quot;&gt;Testing Core Data Migrations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2015 - Long term iOS Software Architecture and OSS&lt;/strong&gt; - &lt;br/&gt;&lt;a href=&quot;https://artsy.github.io/blog/2015/09/18/Cocoa-Architecture-Dependencies/&quot;&gt;Dependencies&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/09/01/Cocoa-Architecture-Dropped-Design-Patterns/&quot;&gt;Dropped Design Patterns&lt;/a&gt;,
&lt;a href=&quot;https://artsy.github.io/blog/2015/08/24/Cocoa-Architecture-Hybrid-Apps/&quot;&gt;Hybrid Apps&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/08/19/Cocoa-Architecture-Switchboard-Pattern/&quot;&gt;ARSwitchboard&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/08/15/Cocoa-Architecture-Router-Pattern/&quot;&gt;ARRouter&lt;/a&gt; and &lt;a href=&quot;https://artsy.github.io/blog/2015/08/06/open-sourcing-energy/&quot;&gt;Open Sourcing Energy&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/04/28/how-we-open-sourced-eigen/&quot;&gt;How we Open
Source&#39;d Eigen&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2015/12/10/License-and-You/&quot;&gt;Licenses for OSS Code&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2016 - Consolidating web + iOS&lt;/strong&gt; - &lt;br/&gt;&lt;a href=&quot;https://artsy.github.io/blog/2016/08/24/On-Emission/&quot;&gt;On our implementation of React Native&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/06/19/graphql-for-mobile/&quot;&gt;GraphQL for iOS
Developers&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/08/15/vscode/&quot;&gt;Using VS Code for JavaScript&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2016/11/14/JS-Glossary/&quot;&gt;JavaScript Glossary for
2017&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2017 - Process at Scale (OSS/All of Artsy)&lt;/strong&gt; - &lt;br/&gt;&lt;a href=&quot;https://artsy.github.io/blog/2017/10/10/C4Q-QandA/&quot;&gt;C4Q&amp;amp;A&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2017/09/04/Introducing-Peril/&quot;&gt;Introducing Peril to the Artsy Org&lt;/a&gt;,
&lt;a href=&quot;https://artsy.github.io/blog/2017/06/30/danger-one-oh-again/&quot;&gt;Danger&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2017/04/14/artsy-technology-stack-2017/&quot;&gt;Artsy&#39;s Technology Stack, 2017&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2018 - Cementing Artsy Culture&lt;/strong&gt; - &lt;br/&gt;JavaScriptures (&lt;a href=&quot;https://artsy.github.io/blog/2018/05/01/JavaScriptures-1-React/&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/05/02/JavaScriptures-2-TypeScript/&quot;&gt;TypeScript&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/06/15/JavaScriptures-4.2-Local-State/&quot;&gt;Tooling&lt;/a&gt;,
&lt;a href=&quot;https://artsy.github.io/blog/2018/06/13/JavaScriptures-4.1-Relay/&quot;&gt;Relay&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/06/15/JavaScriptures-4.2-Local-State/&quot;&gt;Local State&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/05/04/JavaScriptures-3-Styled-Components/&quot;&gt;Styled Components&lt;/a&gt;), &lt;a href=&quot;https://artsy.github.io/blog/2018/10/18/long-term-highlights/&quot;&gt;Engineering Highlights&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2018/06/03/Announcing-Artsy-x-React-Native/&quot;&gt;Announcing:
Artsy x React Native&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2019 - Archivist&lt;/strong&gt; - &lt;br/&gt;&lt;a href=&quot;https://artsy.github.io/blog/2019/04/11/on-an-rfcs-process/&quot;&gt;Why we added an RFC process to Artsy&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2019/04/10/omakase-relay/&quot;&gt;Why does Artsy use Relay?&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2019/01/30/why-we-run-our-blog/&quot;&gt;Why
We Run Our Own Blog&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2019/04/04/peril-architecture-deep-dive/&quot;&gt;Peril Architecture Deep Dive&lt;/a&gt; &amp;amp; this post.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;iOS&quot;&gt;&lt;/a&gt;
&lt;h1&gt;iOS&lt;/h1&gt;

&lt;p&gt;While I was originally expecting to be working on Ruby apps at Artsy, I very quickly ended up working on our iOS
app &lt;a href=&quot;https://folio.artsy.net&quot;&gt;Artsy Folio&lt;/a&gt; and eventually owned it post-1.0. This makes sense because I had a few years of macOS
native experience and I knew the project lead (&lt;a href=&quot;https://twitter.com/benjaminjackson&quot;&gt;Ben Jackson&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Over time, I grew to own the iOS team at Artsy. In doing so I became a manager with 3-4 reports and tried to really
make a name for Artsy&#39;s iOS team in the industry. We built more apps, and started to need to think through our
larger I found our &lt;a href=&quot;https://www.artsy.net/article/artsy-jobs-mobile-engineer&quot;&gt;old job posting&lt;/a&gt; from just before we consolidated with web. It echoes a lot of the
idea on how I framed our team&#39;s responsibilities being in that we should build Artsy in a way that improves the
industry for everyone too.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2015/09/18/Cocoa-Architecture-Dependencies/&quot;&gt;Dependencies&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/09/01/Cocoa-Architecture-Dropped-Design-Patterns/&quot;&gt;Dropped Design Patterns&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/08/24/Cocoa-Architecture-Hybrid-Apps/&quot;&gt;Hybrid Apps&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/08/19/Cocoa-Architecture-Switchboard-Pattern/&quot;&gt;ARSwitchboard&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2015/08/15/Cocoa-Architecture-Router-Pattern/&quot;&gt;ARRouter&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think the pinnacle of my writing in this phase comes from a collaboration with the entire iOS team the magazine
&lt;a href=&quot;https://www.objc.io/&quot;&gt;obcj.io&lt;/a&gt; - &lt;a href=&quot;https://www.objc.io/issues/22-scale/artsy/&quot;&gt;iOS at Scale: Artsy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As we hired, it became important to find ways to teach each other how our native codebases work. So, we have a set
of open codebase walk-throughs which explain the high level architecture and occasionally deep-dive on specific
features.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Code Review: &lt;a href=&quot;https://artsy.github.io/blog/2015/11/05/Emergence-Code-Review/&quot;&gt;Emergence&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/02/11/Code-Review-Energy/&quot;&gt;Energy&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/02/12/Code-Review-Energy-Sync/&quot;&gt;Energy Sync&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As we started to adopt React Native at Artsy, we really needed a different structure for our entire team and
technology stack. We had to re-think how we build apps, interact with the open community and what we were as
engineers.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2016/08/24/On-Emission/&quot;&gt;On our implementation of React Native&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2017/02/05/Retrospective-Swift-at-Artsy/&quot;&gt;Retrospective: Swift at Artsy&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2017/07/06/React-Native-for-iOS-devs/&quot;&gt;Intro to React
Native for an iOS Developer&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/03/17/two-years-of-react-native/&quot;&gt;React Native, 2 years later&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/04/17/making-a-components-pod/&quot;&gt;Making a React Native Components
Pod&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2019/03/17/three-years-of-react-native/&quot;&gt;React Native at Artsy, 3 years later&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Re-defining ourselves as native engineers who support JavaScript via our iOS silos was tricky, I think both
&lt;a href=&quot;https://ashfurrow.com/blog/learning-from-other-programming-communities/&quot;&gt;Ash&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://www.youtube.com/watch?v=zqnJBksguVI&quot;&gt;Maxim&lt;/a&gt; have great write-ups on the topic. For me, the move to the
JavaScript came at a perfect time: the iOS community was fragmenting because of competing dependency managers and
the introduction of Swift which made infrastructure work less valuable.&lt;/p&gt;

&lt;p&gt;We still needed to be up-to-date with the latest tools and ideas from the native world, but mainly from &quot;iOS as
Platform&quot; instead of features development (though my non-technical &lt;a href=&quot;https://artsy.github.io/blog/2018/03/18/ar/&quot;&gt;ARKit post&lt;/a&gt; is a great read).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2017/07/31/fastlane-travis-weekly-deploys/&quot;&gt;Deploying your app on a weekly basis via fastlane + Travis CI&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2017/04/05/what-is-fastlane-match/&quot;&gt;What is fastlane match?&lt;/a&gt;,
&lt;a href=&quot;https://artsy.github.io/blog/2019/01/05/its-time-to-use-spm/&quot;&gt;It&#39;s time to use Swift Package Manager&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/10/14/Accessing-the-Source-Code-from-your-Simulator/&quot;&gt;Accessing the app&#39;s Source Code from your Simulator&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/05/03/podspec-checksums/&quot;&gt;Why
does my team&#39;s Podfile.lock Podspec checksums change?&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/03/05/iOS-Code-Injection/&quot;&gt;Code Injection for Xcode&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2014/06/20/artsys-first-closed-source-pod/&quot;&gt;Artsy&#39;s
first closed source Pod&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/01/21/cocoapods-keys-and-CI/&quot;&gt;CocoaPods-Keys and CI&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;JavaScript&quot;&gt;&lt;/a&gt;
&lt;h1&gt;JavaScript&lt;/h1&gt;

&lt;p&gt;To get experience in JavaScript, I took one of my large open source projects and &lt;a href=&quot;https://artsy.github.io/blog/2017/06/30/danger-one-oh-again/&quot;&gt;re-create it from
scratch&lt;/a&gt;. Which eventually turned into &lt;a href=&quot;https://artsy.github.io/blog/2017/09/04/Introducing-Peril/&quot;&gt;Peril&lt;/a&gt;, which solves &lt;a href=&quot;https://artsy.github.io/blog/2018/06/18/On-Obsessive-Statelessness/&quot;&gt;some interesting
problems&lt;/a&gt; at Artsy and in the rest of my OSS work.&lt;/p&gt;

&lt;p&gt;For Artsy, we needed to consider: What is the right tech to build for both React Native and React on web? We had a
good guess &lt;a href=&quot;https://artsy.github.io/blog/2017/02/05/Front-end-JavaScript-at-Artsy-2017/&quot;&gt;back in 2016&lt;/a&gt; and that slowly evolved over the course of a few years into what we now call
the &lt;a href=&quot;https://www.youtube.com/watch?v=1Z3loALSVQM&quot;&gt;Artsy Omakase&lt;/a&gt;. Making sure that the rest of the team agreed, and that new people could go see our
reasoning was important when making foundations which could last 5-10 years.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2017/02/05/Front-end-JavaScript-at-Artsy-2017/&quot;&gt;Exploration: Front-end JavaScript at Artsy in 2017&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/08/15/vscode/&quot;&gt;Using VS Code for JavaScript&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/06/19/graphql-for-mobile/&quot;&gt;GraphQL
for iOS Developers&lt;/a&gt;, JavaScriptures (&lt;a href=&quot;https://artsy.github.io/blog/2018/05/01/JavaScriptures-1-React/&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/05/02/JavaScriptures-2-TypeScript/&quot;&gt;TypeScript&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/06/15/JavaScriptures-4.2-Local-State/&quot;&gt;Tooling&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/06/13/JavaScriptures-4.1-Relay/&quot;&gt;Relay&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/06/15/JavaScriptures-4.2-Local-State/&quot;&gt;Local
State&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/05/04/JavaScriptures-3-Styled-Components/&quot;&gt;Styled Components&lt;/a&gt;), &lt;a href=&quot;https://artsy.github.io/blog/2019/04/10/omakase-relay/&quot;&gt;Why does Artsy use Relay?&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;Open.Source&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Open Source&lt;/h1&gt;

&lt;p&gt;Artsy had a rich relationship with Open Source before I arrived, and I devoted a lot of time and effort to making
this world-class. There is an entire blog post on how Artsy became &lt;a href=&quot;https://artsy.github.io/blog/2019/04/29/how-did-artsy-become-oss-by-default/&quot;&gt;Open Source by Default&lt;/a&gt;, but I made sure
to make it easy for people interested in following Artsy&#39;s footsteps. I believe the world will be a lot richer as
more people work in the open.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2016/01/13/OSS-Expectations/&quot;&gt;Open Expectations&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2017/01/04/OSS-FAQ/&quot;&gt;Open Source FAQ for Engineers&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/12/10/License-and-You/&quot;&gt;Licenses for OSS Code&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/08/06/open-sourcing-energy/&quot;&gt;Open
Sourcing Energy&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2015/04/28/how-we-open-sourced-eigen/&quot;&gt;How we Open Source&#39;d Eigen&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/09/06/Milestone-on-OSS-by-Default/&quot;&gt;Helping the Web Towards OSS by
Default&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2018/08/21/OSS-by-Default-Docs/&quot;&gt;Open Source by Default: Docs&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;Teaching&quot;&gt;&lt;/a&gt;
&lt;h1&gt;Teaching&lt;/h1&gt;

&lt;p&gt;To quote myself:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Open Source is important to me because I grew up outside of an urban center in Britain where I had very little in
the way of community mentorship. Open Source gave me the ability to see how difficult things were built. I moved
from being a beginner to an intermediate programmer by reading the source code that others had opened up.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;→ &lt;a href=&quot;https://open.nytimes.com/five-questions-with-orta-therox-d5bb9659c50b&quot;&gt;5 Questions with Orta Therox&lt;/a&gt; &lt;em&gt;(open.nytimes.com)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I use Open Source, and Artsy&#39;s leverage, to help make sure that the next generation of programmers feel like they
have so much more insight into how we build hard things. I know it&#39;s not easy getting started, so I&#39;ve tried to
take common questions and wrap them up into larger sets of documentation on how I went through those phases.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://artsy.github.io/blog/2016/01/30/iOS-Junior-Interviews/&quot;&gt;Interviewing, applying and getting your first job in iOS&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/09/10/Help!-I&#39;m-becoming-Post-Junior/&quot;&gt;Help! I&#39;m becoming
Post-Junior&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2016/11/14/JS-Glossary/&quot;&gt;JavaScript Glossary for 2017&lt;/a&gt;, &lt;a href=&quot;https://artsy.github.io/blog/2017/10/10/C4Q-QandA/&quot;&gt;C4Q&amp;amp;A&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://artsy.github.io/blog/2018/01/10/C4Q-QandA-two/&quot;&gt;C4Q&amp;amp;A 2&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;So..What.Next.&quot;&gt;&lt;/a&gt;
&lt;h1&gt;So, What Next?&lt;/h1&gt;

&lt;p&gt;If you want to keep on top of what I&#39;m up-to, I&#39;m starting &lt;a href=&quot;https://buttondown.email/orta&quot;&gt;a personal mailing list&lt;/a&gt;. You should join, it&#39;ll
be roughly monthly - so pretty low key.&lt;/p&gt;

&lt;p&gt;Well, I built a system for doing guest posts in this blog, so maybe I&#39;ll appear again on this blog now that I can&#39;t
write &quot;we&quot; when talking about Artsy. In the mean time there&#39;s a lot of engineers at Artsy writing really cool
things!&lt;/p&gt;

&lt;p align=&quot;right&quot;&gt;&lt;code&gt;./orta&lt;/code&gt;&lt;/br&gt;&lt;code&gt;x&lt;/code&gt;&lt;/p&gt;



</description>
        <pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2019/05/03/ortas-best-of/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2019/05/03/ortas-best-of/</guid>
        
        
        <category>everything</category>
        
      </item>
    
  </channel>
</rss>
