<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artsy Engineering</title>
    <description></description>
    <link>http://artsy.github.io/</link>
    <atom:link href="http://artsy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 19 Nov 2018 17:53:47 +0000</pubDate>
    <lastBuildDate>Mon, 19 Nov 2018 17:53:47 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Calling the Elevator from Slack</title>
        <description>&lt;p&gt;Artsy&#39;s New York HQ occupies four top floors of &lt;a href=&quot;http://401broadway.com&quot;&gt;401 Broadway&lt;/a&gt;, located in historic Tribeca at the intersection of Broadway &amp;amp; Canal St., famous for its sellers of fake designer bags. Five elevators carry you up to our breathtaking views, albeit slowly.&lt;/p&gt;

&lt;p&gt;Despite having been fully rebuilt in the last few years these machines are simply too few for the too many people working in the building. The lobby gets packed in the morning. The floors are crowded with coworkers waiting for an elevator to go to lunch around noon. Elevators make all local stops.&lt;/p&gt;

&lt;p&gt;Because everything is a technology problem, I decided to improve this situation during our fall hackathon by building a Slack bot to call the elevator. Slack it, keep working for a few minutes, then dash out when you hear the elevator &quot;ding&quot;, collectively gaining hours of productivity!&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Pressing.the.Button&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Pressing the Button&lt;/h3&gt;

&lt;p&gt;The first challenge in building an elevator bot was pressing the call button. The elevators didn&#39;t have an API and it&#39;s unlikely that the building would have let me rewire the controls. I found the excellent &lt;a href=&quot;https://www.switch-bot.com&quot;&gt;Switch Bot&lt;/a&gt; and bought one for $29. With battery-powered button attached to the wall I could call the elevator from my desk using my iPhone, over Bluetooth. The bot pushed the button for me. Genius!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018-11-17-calling-the-elevator-from-slack/elevator-button.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;a name=&quot;Calling.the.Elevator.with.Curl&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Calling the Elevator with Curl&lt;/h3&gt;

&lt;p&gt;By adding a $49.- SwitchBot Hub I managed to wire my bot to a &lt;a href=&quot;https://ifttt.com/maker_webhooks&quot;&gt;IFTTT web hook&lt;/a&gt;. This involved creating a new applet, configuring the &lt;em&gt;if&lt;/em&gt; to receive a web hook called &quot;elevator-on-25&quot; and a &lt;em&gt;then&lt;/em&gt; to press a SwitchBot button.&lt;/p&gt;

&lt;p&gt;IFTTT web hooks can be triggered with a &lt;code&gt;GET&lt;/code&gt; or a &lt;code&gt;POST&lt;/code&gt;. The URL to &lt;code&gt;POST&lt;/code&gt; to is a bit difficult to find and is located in &lt;a href=&quot;https://ifttt.com/services/maker_webhooks/settings&quot;&gt;Maker Webhook Settings&lt;/a&gt; and looks like &lt;code&gt;https://maker.ifttt.com/use/your-key&lt;/code&gt;. If you navigate to that URL you will see a UI that gives you a convenient &lt;code&gt;curl&lt;/code&gt; shortcut, eg. &lt;code&gt;curl -X POST https://maker.ifttt.com/trigger/call-elevator-on-25/with/key/your-key&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I could now call the elevator with &lt;code&gt;curl&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018-11-17-calling-the-elevator-from-slack/elevator-doors.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that when the SwitchBot Hub worked (it required a few reboots and iPhone app restarts), it only worked with a 2.4G Wifi.&lt;/p&gt;

&lt;a name=&quot;Calling.the.Elevator.from.Slack&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Calling the Elevator from Slack&lt;/h3&gt;

&lt;p&gt;As someone who had invested excessive amounts of time into Slack bots (I co-maintain the &lt;a href=&quot;https://github.com/slack-ruby&quot;&gt;slack-ruby organization&lt;/a&gt; and run half a dozen bots in production, including the &lt;a href=&quot;https://www.playplay.io&quot;&gt;very popular ping-pong leaderboard bot&lt;/a&gt;) my initial reaction was to roll out a full blown bot service to press elevator buttons.&lt;/p&gt;

&lt;p&gt;Fortunately, I was running out of time and looked for an easier solution. Slack&#39;s Outgoing WebHooks can &lt;code&gt;POST&lt;/code&gt; to an URL in a response to a random command in any Slack channel. I configured &quot;call elevator on 25&quot; to &lt;code&gt;POST&lt;/code&gt; to IFTTT in a few seconds. My mission was accomplished without writing a line of code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018-11-17-calling-the-elevator-from-slack/slack-outgoing-webhook.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another IFTTT web hook would send a message to Slack saying that the elevator was on its way.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018-11-17-calling-the-elevator-from-slack/call-elevator-on-25.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mission accomplished!&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Nov 2018 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2018/11/17/calling-the-elevator-from-slack/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2018/11/17/calling-the-elevator-from-slack/</guid>
        
        
        <category>elevators</category>
        
        <category>hackathon</category>
        
        <category>ifttt</category>
        
        <category>slack</category>
        
      </item>
    
      <item>
        <title>Where art thou, my error?</title>
        <description>&lt;p&gt;&lt;em&gt;Note: This is the text of a presentation given at &lt;a href=&quot;https://graphql-finland.fi&quot;&gt;GraphQL Finland 2018&lt;/a&gt;, as such the
language may in some cases be slightly awkward for a blog post. You can find those slides on
&lt;a href=&quot;https://speakerdeck.com/alloy/where-art-thou-my-error&quot;&gt;Speaker Deck&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;GraphQL is still in its early stages and thus these are very exciting times, indeed! Traditionally the GraphQL team
has taken the approach of defining the bare minimum in the specification that was deemed needed and otherwise
letting the community come-up with defining problems and experimenting with solutions for those. One such example
is how metadata about the location in the graph where errors occurred during execution were &lt;a href=&quot;https://github.com/facebook/graphql/pull/230&quot;&gt;added to the
specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is great in the sense that we still have the ability, as a community, to shape the future of a GraphQL
specification that we all &lt;em&gt;want&lt;/em&gt; to use, but on the other hand it also means that we may need to spend significant
amounts of time on thinking about these problems and iterating. Seeing as we all strive to have backwards
compatible schemas, it’s of great importance that we know of the various iterations that people have experimented
with and what the outcome was.&lt;/p&gt;

&lt;p&gt;This is our story of thinking about and working with errors, thus far.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;NOTE: Throughout this talk I’ll use ‘query execution’ to indicate executing a GraphQL document, be it a query or
mutation operation. I have a hard time relating to ‘document execution’, mostly because I don’t see others using
it, but perhaps I’ve just missed it. Come at me, at the bar, and set me straight!&lt;/p&gt;

&lt;a name=&quot;Errors.vs.errors&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Errors vs errors&lt;/h2&gt;

&lt;p&gt;First of all, I want to take a step back and talk about errors in general. The nomenclature around these can get
confusing, suffice to say that during this session we’ll talk about these two types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Errors that occur during query execution, that were unexpected, and &lt;em&gt;could&lt;/em&gt; lead to corrupted data. We’ll refer
to these as (top-level) ‘GraphQL errors’, going forward.&lt;/p&gt;

&lt;p&gt;These could be due to hardware failures, such as running out of memory or disk space, network failures, or
unexpected upstream data etc.&lt;/p&gt;

&lt;p&gt;When these occur, &lt;code&gt;graphql-js&lt;/code&gt; will return &lt;code&gt;null&lt;/code&gt; for the field that triggered the error and serialize the error
into the top-level &lt;code&gt;errors&lt;/code&gt; list, next to the successful response &lt;code&gt;data&lt;/code&gt;. (Presumably other implementations
follow this reference implementation.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;json&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;quot;artwork&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;artist&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Vincent van Gogh&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;quot;leftEarSize&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;quot;errors&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;An unexpected error occurred&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;artwork&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;artist&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;leftEarSize&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Exceptions to these are errors that are &lt;em&gt;known&lt;/em&gt; to occur and are expected to be handled by the user of an API.
We’ll refer to these as ‘exceptions’, going forward.&lt;/p&gt;

&lt;p&gt;By default these are treated equally by &lt;code&gt;graphql-js&lt;/code&gt; to top-level GraphQL errors, if uncaught.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We will &lt;strong&gt;not&lt;/strong&gt; be speaking about errors that occur &lt;em&gt;outside&lt;/em&gt; of query execution, such as network failures reaching
the GraphQL server, parsing a syntactically incorrect document, or passing variables that don’t satisfy the
type-system; as these will all lead to a query being rejected wholesale and are solve-able using traditional means,
such as a &lt;code&gt;4xx&lt;/code&gt; HTTP status code or &lt;code&gt;5xx&lt;/code&gt; in some cases.&lt;/p&gt;

&lt;a name=&quot;What.is.the.problem.we...re.trying.to.solve.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What is the problem we’re trying to solve?&lt;/h2&gt;

&lt;p&gt;Because with GraphQL we’re usually requesting data for multiple resources, there may be a situation where some
fields resolve successfully and some may fail. This is also why, when using an HTTP transport layer, the advice is
to always respond with a HTTP 200 (ok) status. Determining how to process the response is left up to the client.&lt;/p&gt;

&lt;p&gt;So how &lt;em&gt;do&lt;/em&gt; we model errors in such a way that they can be meaningful and in context of their origin?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What if you want to render partial data?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Maybe the failed data is unrelated to other components that you were also requesting data for.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018-10-19-where-art-thou-my-error/partial-data-unrelated-annotated.png&quot; alt=&quot;Unrelated component&quot; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Or the data that failed was part of a list and other entries can still be rendered just fine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018-10-19-where-art-thou-my-error/partial-data-list-annotated.png&quot; alt=&quot;Partial list data&quot; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Or what if you’d (additionally) like to communicate the error in your interface?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When the query is in response to a mutation and you’d like to communicate input validation failures.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018-10-19-where-art-thou-my-error/mutation-validation-error.png&quot; alt=&quot;Surface validation error&quot; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Possible.solutions&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Possible solutions&lt;/h2&gt;

&lt;a name=&quot;Top-level.GraphQL.errors.and.treating.an.entire.response.as.unusable.when.such.errors.exist&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Top-level GraphQL errors and treating an entire response as unusable when such errors exist&lt;/h3&gt;

&lt;p&gt;Some clients, such as Apollo and Relay Classic, have made the decision to reject a response entirely, by default,
if any top-level GraphQL errors exist. This is because clients can really only fully assume that the response data
is incomplete, not whether or not your application could handle that case.&lt;/p&gt;

&lt;p&gt;This may be an ok solution when you’re starting out or all the requested data is part of a single holistic view,
but it quickly breaks down when you want a little more than that.&lt;/p&gt;

&lt;a name=&quot;Top-level.GraphQL.errors.with.extra.metadata&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Top-level GraphQL errors with extra metadata&lt;/h3&gt;

&lt;p&gt;GraphQL errors only have a single field in &lt;a href=&quot;https://facebook.github.io/graphql/draft/#sec-Errors&quot;&gt;the specification&lt;/a&gt; to provide context around the cause of
the error, which is the &lt;code&gt;message&lt;/code&gt; field. However, &lt;a href=&quot;https://facebook.github.io/graphql/draft/#sec-Response-Format&quot;&gt;the specification&lt;/a&gt; also defines a top-level
&lt;code&gt;extensions&lt;/code&gt; key, which may hold a map of freeform data for the schema implementors to extend the protocol however
they see fit.&lt;/p&gt;

&lt;p&gt;Apollo Server 2.0, for instance, &lt;a href=&quot;https://blog.apollographql.com/full-stack-error-handling-with-graphql-apollo-5c12da407210&quot;&gt;introduced standardized errors&lt;/a&gt; you can throw from your
resolvers, which end up being serialized into the &lt;code&gt;extensions&lt;/code&gt; map. An example they give is for bad user input:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserInputError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;apollo-server&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolvers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zipCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;c1&quot;&gt;// do custom validation for user inputs&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;validationErrors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isValidZipCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zipCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;validationErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zipCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;This is not a valid zipcode&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;validationErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserInputError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Failed to get events due to validation errors&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;validationErrors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;c1&quot;&gt;// actually query events here and return successfully&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getEventsByZipcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zipCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Seeing as these extensions are freeform, however, this builds an &lt;strong&gt;implicit&lt;/strong&gt; contract between the server and
client that then needs to be abstracted away by additional client code. This is unfortunate, when you think about
it, because GraphQL is meant to explicitly express shapes of data.&lt;/p&gt;

&lt;p&gt;The Apollo team acknowledges this by adding:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;While convenient, the weakness of this approach is that the format of the validation error messages is not
captured by your schema, making it brittle to changes. Unless you maintain tight control of both server and
client, you should keep the error responses as simple as possible.&lt;/p&gt;

&lt;p&gt;For mutations, it can be worthwhile defining these validation errors as first class citizens within your schema.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;(Which we’ll address next.)&lt;/p&gt;

&lt;a name=&quot;Make..mutation..error.metadata.part.of.schema.as.separate.fields&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Make (mutation) error metadata part of schema as separate fields&lt;/h3&gt;

&lt;p&gt;One &lt;a href=&quot;https://www.apollographql.com/docs/guides/schema-design.html#mutation-responses&quot;&gt;commonly suggested approach&lt;/a&gt; around mutations is to define status metadata on the
response type next to the field of the affected entity. For example, a response type could look like:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UpdateArtworkMutationResponse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artwork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artwork&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Here there’s a boolean that indicates success, an extra message that sheds context on the situation when a failure
occurs, and finally the &lt;code&gt;artwork&lt;/code&gt; that an update was attempted to be made to.&lt;/p&gt;

&lt;p&gt;Adding these fields to the same namespace makes sense when we’re thinking of the failure case, but what about the
success case? Do we really need a &lt;code&gt;success&lt;/code&gt; boolean to indicate that updates to the &lt;code&gt;artwork&lt;/code&gt; were made? What
purpose serves the &lt;code&gt;message&lt;/code&gt; field, other than possibly being a sign of an overly positive schema that sends you
happy messages?&lt;/p&gt;

&lt;p&gt;Finally, this approach only really works for mutations, as their return type acts as a distinct root type to start
a query from. It would be hard to imagine how to apply this to queries.&lt;/p&gt;

&lt;a name=&quot;Make.error.metadata.part.of.schema.as.separate.field&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Make error metadata part of schema as separate field&lt;/h3&gt;

&lt;p&gt;Similarly, &lt;a href=&quot;https://itnext.io/the-definitive-guide-to-handling-graphql-errors-e0c58b52b5e1&quot;&gt;another suggested approach&lt;/a&gt; is to add an additional &lt;code&gt;error&lt;/code&gt; field to the type in
question, which then describes the error that occurred. The previous example could be rewritten like so:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GenericError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UpdateArtworkMutationResponse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GenericError&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artwork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artwork&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;If &lt;code&gt;error&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;, something went wrong. This cleans up the namespace a bit, but more importantly this
approach can be applied to queries too:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PublishedArtworkNotification&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artwork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artwork&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PublishedArtworkNotificationsPayload&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GenericError&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;notifications&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PublishedArtworkNotification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;publishedArtworkNotificationsPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PublishedArtworkNotificationsPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Neat.&lt;/p&gt;

&lt;p&gt;However, and this may just be our use-case, we don’t have partial data at these stages. We’ve either resolved the
data or we have an error. Hence, this approach would mean we’d always have an unneeded &lt;code&gt;null&lt;/code&gt; field, which pollutes
the namespace of the type unnecessarily.&lt;/p&gt;

&lt;p&gt;Side-note: if you don’t control the server schema, and are using a client that can extend a server schema on the
client, you could try to retrofit top-level GraphQL errors to these suggested error fields into the schema where
they occurred based on the error &lt;code&gt;path&lt;/code&gt;, as shown &lt;a href=&quot;https://github.com/facebook/relay/issues/1913#issuecomment-358636018&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;Recap&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Recap&lt;/h2&gt;

&lt;p&gt;So to quickly recap, ideally we want a solution to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use GraphQL: Utilize GraphQL to explicitly describe the error data.&lt;/li&gt;
&lt;li&gt;In context: Present the error data exactly where the error occurred in the schema.&lt;/li&gt;
&lt;li&gt;All operations: Work for both mutations and queries.&lt;/li&gt;
&lt;li&gt;Explicit status: Be concise and encourage ‘clean’ types; that is, no pollution of namespaces with fields only
needed in some cases.&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Make.exceptions.first-class.citizens.of.your.schema&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Make exceptions first-class citizens of your schema&lt;/h3&gt;

&lt;p&gt;To that end, the final approach we’ll be discussing, and the one that we at Artsy have started adopting, is to give
exceptions their own type and return those instead of the success type, when they occur. To do this we make use of
a union of both the success and the exception type (or multiples thereof) and then query for those.&lt;/p&gt;

&lt;p&gt;The benefits are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can further model the exception in an explicit and introspect-able way.&lt;/p&gt;

&lt;p&gt;For example, in the case of an HTTP failure to an upstream service, your exception type could include an integer
status-code field and document it as such.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artwork&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTPError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArtworkOrError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artwork&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTPError&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artworkOrError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArtworkOrError&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;




&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artworkOrError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mona-lisa&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artwork&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTPError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;statusCode&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;You know exactly where the exception occurred in the graph.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artworksOrErrors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ArtworkOrError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artist&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;




&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;leonardo-da-vinci&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;artworksOrErrors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artwork&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTPError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;statusCode&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;You can use it for both mutations and queries.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UpdateArtworkMutationResponse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artworkOrError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArtworkOrError&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;All fields will always be captured in the single &lt;code&gt;artworkOrError&lt;/code&gt; field &lt;em&gt;or&lt;/em&gt;, if no information about the error
is needed, you simply don’t query for it and get back &lt;code&gt;null&lt;/code&gt; instead.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artworkOrError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mona-lisa&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artwork&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;a name=&quot;How.we.encode.it.into.our.schema&quot;&gt;&lt;/a&gt;
&lt;h2&gt;How we encode it into our schema&lt;/h2&gt;

&lt;p&gt;I should preface this by clearly stating that while have been thinking about this problem for a while now, only
recently have we started rolling these changes out into our schema, so some of these are not yet discoverable in
&lt;a href=&quot;http://github.com/artsy/metaphysics&quot;&gt;our open-source GraphQL service&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;Types&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Types&lt;/h3&gt;

&lt;p&gt;As shown before, we define a union of the actual result type &lt;em&gt;and&lt;/em&gt; the error type. However, we additionally (will)
define a set of error interfaces, which make it possible for clients to query for errors in a more generic way.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTPError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTPErrorType&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTPError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artwork&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArtworkOrError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artwork&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTPErrorType&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artworkOrError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArtworkOrError&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;We can now still query as shown in the earlier examples:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artworkOrError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mona-lisa&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artwork&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTPError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;statusCode&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;…but we can now also have generic error components that would query like so:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artworkOrError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mona-lisa&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artwork&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GenericErrorComponent&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GenericHTTPErrorComponent&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;fragment&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GenericErrorComponent&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;fragment&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GenericHTTPErrorComponent&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTPError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;statusCode&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;For the record, we have &lt;em&gt;not&lt;/em&gt; yet put these interfaces into production, so the nomenclature is not set in stone yet
and I’d love to hear your input on this. Is &lt;code&gt;Error&lt;/code&gt; &lt;em&gt;too&lt;/em&gt; generic to use as the base error type? Is there a nicer
naming pattern that would allow us to avoid having to suffix concrete types of an error interface with &lt;code&gt;...Type&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Side-note: there’s &lt;a href=&quot;https://github.com/facebook/graphql/pull/373&quot;&gt;an RFC&lt;/a&gt; to the GraphQL specification that would make it possible to
have interfaces implement other interfaces, thus removing the need to keep repeating the fields of
super-interfaces. This RFC has recently been moved to the draft stage, yay!&lt;/p&gt;

&lt;a name=&quot;Field.naming&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Field naming&lt;/h3&gt;

&lt;p&gt;As you may have noticed, we’re calling these fields &lt;code&gt;something&lt;/code&gt; &lt;em&gt;or&lt;/em&gt; &lt;code&gt;error&lt;/code&gt;. We are mostly doing this to stay
backwards compatible with our existing schema. While we could certainly add exception types to existing union
fields, we can’t change a single type field into a union type field without breaking compatibility.&lt;/p&gt;

&lt;p&gt;Instead we may now have 2 versions of a given field:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;one with the single type field which is nullable, in case an exception occurred&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mona-lisa&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;and another that has the error union type&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artworkOrError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mona-lisa&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artwork&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTPError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;statusCode&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This duplication is slightly unfortunate, from a clean schema design perspective, but it’s similar to an existing
pattern in the community. For instance, many schemas provide 2 ways to retrieve lists:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;one as an immediate list:&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artworks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Artwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;and one as a ‘connection’ (as defined by the &lt;a href=&quot;https://facebook.github.io/relay/graphql/connections.htm&quot;&gt;Relay Connection specification&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArtworkEdge&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artwork&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArtworksConnection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ArtworkEdge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;artworksConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArtworksConnection&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;So the jury is still out on whether or not that’s a bad way to name things. We’ll have to see after using this for a
while.&lt;/p&gt;

&lt;a name=&quot;Downside.of.using.a.union&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Downside of using a union&lt;/h3&gt;

&lt;p&gt;One notable downside is that GraphQL scalar types can &lt;em&gt;not&lt;/em&gt; be included in unions. Thus, if you have scalar fields
that could lead to exceptions, you will have to ‘box’ those in object types.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;js&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArtworkPurchasableBox&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArtworkPurchasableOrError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArtworkPurchasableBox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTPError&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Artwork&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;currentlyPurchasableOrError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArtworkPurchasableOrError&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;This is definitely a case where the pattern of defining 2 fields, one with and one without exception types, comes
in handy. Having to always query through the box type is inelegant, to put it softly.&lt;/p&gt;

&lt;p&gt;Side-note: there actually is &lt;a href=&quot;https://github.com/facebook/graphql/issues/215&quot;&gt;an open RFC&lt;/a&gt; to the specification to allow scalars in unions, but
it’s still in stage 0 and is in need of a champion in order to proceed. We may end up trying to do so, based on our
actual experiences with these cases where they may need to be boxed.&lt;/p&gt;

&lt;a name=&quot;Example.of.how.we.consume.query.errors&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Example of how we consume query errors&lt;/h3&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;31&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;32&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;33&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;34&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;35&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;36&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;37&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;38&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;39&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;40&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ts&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OrderStatus_order&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;__generated__/OrderStatus_order.graphql&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;react&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createFragmentContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graphql&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;react-relay&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Props&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;OrderStatus_order&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OrderStatus&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;React.SFC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;orderStatusOrError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;orderStatusOrError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__typename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;OrderStatus&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orderStatusOrError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deliveryDispatched&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Your order has been dispatched.&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Your order has not been dispatched yet.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orderStatusOrError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;unpublished&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Please contact gallery services.&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;An&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unexpected&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;occurred&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orderStatusOrError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OrderStatusContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createFragmentContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;OrderStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;graphql&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;fragment&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OrderStatus_order&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;orderStatusOrError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;__typename&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OrderStatus&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;nx&quot;&gt;deliveryDispatched&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OrderError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;a name=&quot;Example.of.how.we.consume.mutation.errors&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Example of how we consume mutation errors&lt;/h3&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;17&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;18&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;19&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;20&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;21&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;22&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;23&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;24&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;25&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;26&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;27&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;28&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;29&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;30&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;31&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;32&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;33&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;34&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;35&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;36&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;37&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;38&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;39&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;40&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;41&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;42&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;43&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;44&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;45&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;46&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;47&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;48&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;49&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;50&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;51&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;52&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;53&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;54&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;55&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;56&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;57&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;58&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;59&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ts&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SubmitOrder_order&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;__generated__/SubmitOrder_order.graphql&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SubmitOrderMutation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;__generated__/SubmitOrderMutation.graphql&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;found-relay&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;react&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commitMutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createFragmentContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graphql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RelayProp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;react-relay&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Props&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;SubmitOrder_order&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;relay&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;RelayProp&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;Router&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SubmitOrder&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;React.SFC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;commitMutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SubmitOrderMutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;relay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;mutation&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;graphql&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;nx&quot;&gt;mutation&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SubmitOrderMutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$input&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;SubmitOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;submitOrder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;$input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;              &lt;span class=&quot;nx&quot;&gt;orderStatusOrError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                &lt;span class=&quot;nx&quot;&gt;__typename&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OrderStatus&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                  &lt;span class=&quot;nx&quot;&gt;submitted&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OrderError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                  &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                  &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;orderID&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;props.order.id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;nx&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;submitOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;orderStatusOrError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orderStatusOrError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__typename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;OrderStatus&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;              &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orderStatusOrError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submitted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;submitted&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;pending&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;              &lt;span class=&quot;nx&quot;&gt;orderStatusOrError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;unpublished&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Please contact gallery services.&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;                &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;An&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unexpected&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;occurred&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orderStatusOrError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SubmitOrderContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createFragmentContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;SubmitOrder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;nx&quot;&gt;graphql&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;nx&quot;&gt;fragment&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SubmitOrder_order&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;      &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;




&lt;!--

### Show example of factory code that produces both single and union typed fields

TODO

--&gt;


&lt;a name=&quot;Final.thoughts&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;As stated before, we having only recently begun rolling out these changes into our production schema. However, much
thought and experimentation has gone into this to ensure we will be able to address all of &lt;em&gt;our&lt;/em&gt; needs, at least.&lt;/p&gt;

&lt;p&gt;I would love to hear other people’s thoughts on this and definitely feedback if they try to adopt it themselves. As
a community we should openly iterate together, as much as possible, as we try to make the future of GraphQL a great
one and put legit questions to ‘REST’ ;)&lt;/p&gt;

&lt;p&gt;For now, I’ll leave you with this message from some internet ‘rando’:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;@alloy That diff makes a lot of sense to me. I&#39;ve also seen user errors as a field on the mutation result, but I
like that union makes it explicit that there was either success or failure and in the case of failure provides
rich information that&#39;s in your app&#39;s domain.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;-- &lt;a href=&quot;https://twitter.com/leeb/status/1020054709694943232&quot;&gt;Lee Byron&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Oct 2018 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2018/10/19/where-art-thou-my-error/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2018/10/19/where-art-thou-my-error/</guid>
        
        
        <category>api</category>
        
        <category>design</category>
        
        <category>graphql</category>
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>The Hows and Whys of Pair Programming</title>
        <description>&lt;p&gt;&lt;em&gt;Why pair program? As new engineers join Artsy, we&#39;ve been experimenting with different programming cultures - Yuki
came from Pivotal Labs where they have a strong pair programming culture and introduced it at Artsy - it&#39;s been
about a year and a half and we&#39;re all really loving the changes he&#39;s introduced.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I asked Yuki if he&#39;d pair program with me on a blog, post on Pair Programming, and this is it. He&#39;s going to
dive into what pair programming is, why you should do it, what are good mental models to think about, the techniques
you can use to make it work, what hardware you might need and how Yuki persuaded so many of us to start doing it
more often.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;mdash; Orta&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Why.pair.program.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Why pair program?&lt;/h2&gt;

&lt;p&gt;The idea of pair programming came from a very popular book called &lt;a href=&quot;https://www.goodreads.com/book/show/67833.Extreme_Programming_Explained&quot;&gt;Extreme Programming Explained: Embrace
Change&lt;/a&gt;. Code review has been a good practice in software development for decades. Many organizations have
adopted it, but XP (Extreme Programming) literally takes this &lt;strong&gt;more extremely&lt;/strong&gt; - what if the engineer sitting next
to you is reviewing your code as soon as you write it? This requires two engineers to simultaneously pay attention
to the code that&#39;s being written, discuss implementation details, and sometimes socialize. That&#39;s how pair
programming was born.&lt;/p&gt;

&lt;p&gt;Pair programming seems as easy as it sounds, and to some extent that&#39;s true. However, with just a few key points
you&#39;ll be able to make your pairing session much more valuable.&lt;/p&gt;

&lt;p&gt;To think about when pairing is most valuable, let&#39;s think about code review first. Modern software organizations
have implemented a process where engineers send pull requests to get reviews on GitHub (or whatever tool your
organization uses for reviewing code). This is a very powerful process, but most of us have probably experienced a
situation where a pull request with &lt;a href=&quot;https://github.com/artsy/reaction/pull/1114#discussion_r209354107&quot;&gt;a very simple change created a very long discussion&lt;/a&gt;. Sometimes
that&#39;s because of your lack of context in the work you are doing. Sometimes it&#39;s because you are working on a
system you are unfamiliar with. Your co-worker left a lot of comments on your pull request, and you had to push a lot
of extra commits, or even re-wrote the entire pull request. That&#39;s when pairing becomes very valuable to your team.&lt;/p&gt;

&lt;p&gt;Another good example is on-boarding new hires. Coming from an agile consultancy and a photo-product company, I was
nowhere close to an Art expert when I joined Artsy. This was the time I wanted to question not just technical
questions, but also very basic questions about art. How do people find and purchase artworks? Who actually sells
artworks? What is an art fair? And auctions? &lt;a href=&quot;https://medium.com/artsy-blog/what-it-feels-like-to-work-in-a-supportive-environment-for-female-engineers-3c994a001007&quot;&gt;Christina Thompson&lt;/a&gt;, on the other hand, has been at
Artsy for more than two years. She also has strong experience in agile software development and practices, including
pair-programming. Naturally, we started pairing to familiarize myself both with the code base and basic knowledge
about Art on my first week at Artsy.&lt;/p&gt;

&lt;a name=&quot;When.not.to.pair.program.&quot;&gt;&lt;/a&gt;
&lt;h3&gt;When not to pair program?&lt;/h3&gt;

&lt;p&gt;This post is about pair-programming, so why even talk about when not to pair-program? Well, while it’s a powerful tool,
it&#39;s not a silver bullet we can utilize to solve all software problems. As we all deal with complex, long-standing
pull requests, there are also simple changes that don&#39;t require a lot of discussions. Occasionally, your pull request
is very long with a full of deprecated method names. Sometimes, you and your pair both feel stuck because none of you
have context or knowledge about what you are addressing. Whenever you are not feeling as productive as you think you
should be, then you don’t have to pair. Sometimes it may make sense for two of you to do research individually and
check in later to share findings and learnings. In an occasional case, even swapping a pair is also a good way to make
the entire team more productive.&lt;/p&gt;

&lt;p&gt;So what is the key point that makes a pair-programming session successful? I believe pair-programming works best when
there is a fair amount of knowledge gap between two people. One is coding and teaching simultaneously, and the
other is reviewing and learning simultaneously. Here the crucial part is &lt;em&gt;teaching&lt;/em&gt;. It is easy, especially for more
seasoned developers, to ignore the opportunity to share thoughts and knowledge with new hires, losing productivity
they could&#39;ve gained by pairing. Joining a new company is always scary, and pair-programming with a new hire will
reduce a lot of &quot;I wasn&#39;t sure about X&quot; moments new hires might have encountered. At the same time, as mentioned above,
pair-programming is not a silver bullet. It is important to be able to use pair-programming as a tool in your toolbox
to solve a particular issue in your engineering team.&lt;/p&gt;

&lt;a name=&quot;What.You.ll.Need.to.Pair.Program&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What You&#39;ll Need to Pair Program&lt;/h2&gt;

&lt;p&gt;The minimum you need is a computer and the ability to communicate, but let&#39;s look at what an optimal pair
programming setup looks like.&lt;/p&gt;

&lt;a name=&quot;Offline&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Offline&lt;/h3&gt;

&lt;p&gt;If you and the other engineer are in the same physical space, then you should aim to have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One computer set up as a workstation.&lt;/li&gt;
&lt;li&gt;Two sets of keyboards, mice and monitors attached.&lt;/li&gt;
&lt;li&gt;A spare computer for researching on the side.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This gives you the ability to iterate and switch responsibilities at the speed of thought. If you have the resources
and space, then setting up a place where any 2 engineers can drop a laptop down and be productive instantly will
reduce a lot of the setup friction.&lt;/p&gt;

&lt;a name=&quot;Remote&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Remote&lt;/h3&gt;

&lt;p&gt;The minimum you would need in this case is a video chat system like Skype, Google Hangouts or Slack Calls. Given
that all of these support screen sharing too, then you can easily replicate two people sitting next to each other
with one computer.&lt;/p&gt;

&lt;p&gt;It&#39;s worth noting that remote pairing requires stable internet, and with high bandwidth. We&#39;ve both had situations
in the past where we&#39;ve had to abort pairing sessions due to internet un-reliability.&lt;/p&gt;

&lt;p&gt;In the past, we used to use ScreenHero a lot, because of it&#39;s great support for multiple mice and keyboards, but
&lt;a href=&quot;https://slack.com/screenhero&quot;&gt;ScreenHero was bought by slack&lt;/a&gt; and those feature aren&#39;t available for everyone.&lt;/p&gt;

&lt;p&gt;A lot of our pairing is done via the built-in Slack screen sharing. There&#39;s a newcomer to the scene though!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://visualstudio.microsoft.com/services/live-share&quot;&gt;VS Code&#39;s LiveShare&lt;/a&gt; gives you the ability to share an IDE: it can handle voice
chat, sharing server ports and sharing terminal sessions with a very  minimal amount of setup.&lt;/p&gt;

&lt;p&gt;We wrote the initial draft of this post in-person, in an Artsy meeting room writing and talking in real-time.
If you&#39;ve not seen Live Share, we posted a video of a &lt;a href=&quot;https://twitter.com/ArtsyOpenSource/status/1034555778210910209&quot;&gt;workshop we ran&lt;/a&gt; at Artsy on YouTube.&lt;/p&gt;

&lt;a name=&quot;Attribution&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Attribution&lt;/h3&gt;

&lt;p&gt;One way to encourage pair programming is by providing insight to others about when you&#39;re working as a pair. A great
technique for this is to use &lt;a href=&quot;https://github.com/git-duet/git-duet/&quot;&gt;&lt;code&gt;git-duet&lt;/code&gt;&lt;/a&gt;. Git Duet is a tool which extends git to make it easy to share
attribution among contributors. It does this by having a central list of people&#39; emails, you set up a pairing
session, then use &lt;code&gt;git duet-commit&lt;/code&gt; to replace &lt;code&gt;git commit&lt;/code&gt; and the attribution shared.&lt;/p&gt;

&lt;p&gt;You can get started with:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew tap git-duet/tap
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install git-duet
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;You&#39;ll then need to set up a &lt;code&gt;~/.git-authors&lt;/code&gt; file which is a map of people&#39;s names to emails:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;yaml&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Orta Therox; orta&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;af&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Ash Furrow; ash&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;md&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Matt Dole;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;artsymail.com&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;email_addresses&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;md&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;mdole7@gmail.com&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;The format for each pair is &lt;code&gt;[tag]: [Name]; [email-prefix]&lt;/code&gt;. This works in combination with the &lt;code&gt;email:domain&lt;/code&gt; as
the default email address host for someone. So it would infer that Ash Furrow&#39;s email is &lt;code&gt;ash@artsymail.com&lt;/code&gt;.
If they&#39;ve not set up that email yet, then you can use &lt;code&gt;email_addresses:&lt;/code&gt; to provide overrides.&lt;/p&gt;

&lt;p&gt;Now your config is set up, you can start using it. In your terminal you can use &lt;code&gt;git duet ot af&lt;/code&gt; to start a session
with Orta and Ash.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;~/d/p/a/j/a/metaphysics  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git duet ot af
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;GIT_AUTHOR_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Orta Therox&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;GIT_AUTHOR_EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;orta@artsymail.com&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;GIT_COMMITTER_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Ash Furrow&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;GIT_COMMITTER_EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ash@artsymail.com&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Now you just have to remember to use &lt;code&gt;git duet-commit&lt;/code&gt; instead of &lt;code&gt;git commit&lt;/code&gt; for our work. If you forget, you can
use &lt;code&gt;git duet-commit --amend&lt;/code&gt; to overwrite the last commit with a duet commit instead.&lt;/p&gt;

&lt;a name=&quot;Where.to.go.from.here.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Where to go from here?&lt;/h2&gt;

&lt;p&gt;Pair-programming is a fantastic way to collaborate. If your organization hasn&#39;t incorporated it yet, I would highly recommend doing so. At Artsy, we&#39;ve been experimenting with pair-programming for quite a long time, but this is only the start. We haven&#39;t figured out the form of pair-programming that works best for us, and it&#39;ll probably never end (and it&#39;s a good thing). There are also a lot more to think about that didn&#39;t get into this blog post, such as mental model one should have while pairing and techniques that keep you focused. We will re-visit once we gain more feedback and iterate on our pairing process.&lt;/p&gt;

&lt;p&gt;If you&#39;re looking to find more resources on pair programming&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Joe Moore&#39;s &lt;a href=&quot;http://remotepairprogramming.com/&quot;&gt;Remote Pair Programming&lt;/a&gt; is a great place to start. He&#39;s been working at Pivotal Labs for over a decade.&lt;/li&gt;
&lt;li&gt;Tuple’s &lt;a href=&quot;https://tuple.app/pair-programming-guide/&quot;&gt;Pair Programming Guide&lt;/a&gt; is a good work in progress at centralizing a lot of information.&lt;/li&gt;
&lt;/ul&gt;


&lt;!-- 
Notes:

- http://www.extremeprogramming.org/rules/pair.html --&gt;




&lt;!-- Appendix
  - Ways in which you can encourage more pairing?
  - Techniques for introducing it into your team
  - Good resources? Further reading
  - Do we do it as much as we&#39;d want?
  - Mental model
    - Remind your pair of what to work on
    - Speak up while pairing
    - Take breaks often
    - Show appreciation
  - Techniques
    - driver and navigator
    - ping-pong pairing
  - What companies provides a good best examples?
--&gt;

</description>
        <pubDate>Fri, 19 Oct 2018 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2018/10/19/pair-programming/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2018/10/19/pair-programming/</guid>
        
        
        <category>culture</category>
        
        <category>pairing</category>
        
      </item>
    
      <item>
        <title>Engineering Highlights</title>
        <description>&lt;p&gt;Engineering is an inherently long-term process. The Artsy engineering team has been around for 7 years, and that&#39;s
quite a lot of time to get things done. We use software that keeps track of changes over time thanks to source
control, but tools like git only help keep track of small passages of time. I want to keep track of events that
could take months to ship.&lt;/p&gt;

&lt;p&gt;We&#39;ve been doing a lot of long-term introspection as a team in 2018. Externally, this has been visible through
things like opening our docs and creating our engineering principles. I&#39;m expanding on this with an idea that I
took from my work in building large open source projects: &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/highlights.md#readme&quot;&gt;Highlight docs&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;I&#39;ve been the main contributor for &lt;a href=&quot;https://danger.systems/&quot;&gt;Danger&lt;/a&gt; and &lt;a href=&quot;https://github.com/danger/peril&quot;&gt;Peril&lt;/a&gt; for about three years, working mostly solo, and it can
be hard to feel like you&#39;re actually getting things done. There&#39;s an infinite backlog of people&#39;s requests for
improvements, and polite mentions of the flaws in your work. So, as a counter-balance it&#39;s nice to take stock of
events you&#39;re proud of. I initially mocked this out as &lt;a href=&quot;https://github.com/danger/peril/issues/235&quot;&gt;an issue in the peril repo&lt;/a&gt; but when I
re-applied the idea to the whole of Artsy I used our existing open documentation repo &lt;a href=&quot;https://github.com/artsy/README/&quot;&gt;&lt;code&gt;artsy/README&lt;/code&gt;&lt;/a&gt;
instead.&lt;/p&gt;

&lt;p&gt;The core idea isn&#39;t complicated, however it&#39;s somewhat time-consuming and requires collaborators. I used the best
method I know for getting a lot of people&#39;s attention: spamming slack threads asking folks what were some of their
highlights. I used these to fuel the main arcs of the doc.&lt;/p&gt;

&lt;p&gt;A lot of the time, just starting something like this and putting some effort in up-front means others will start to
participate. The trickiest part was finding the right definitive links for a particular event. Ideally we have open
links (so people without private GitHub access (internally and externally) can enjoy them) but sometimes the right
link is private and that&#39;s ok. It&#39;s not open source by diktat.&lt;/p&gt;

&lt;p&gt;Trying to find the right balance between an &quot;Artsy&quot; event vs an &quot;Engineering&quot; event can sometimes be a bit vague,
but I like to believe that more is more. It&#39;s about pointing out important events, so more is always a net
positive. With that in mind, here&#39;s a few of ours, the rest is a click away:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/highlights.md#readme&quot;&gt;&lt;img src=&quot;/images/highlights/highlights.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think I&#39;m going to make one of these with every new large scale project I work on, I kinda wish we had one for
the Artsy iOS app now. Maybe I&#39;m going to need to do that now. Ergh, this is what I get for writing blog posts.&lt;/p&gt;

&lt;p&gt;I&#39;d love to see some other companies or OSS projects using this idea - let me know in the comments if you are!&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2018/10/18/long-term-highlights/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2018/10/18/long-term-highlights/</guid>
        
        
        <category>concepts</category>
        
        <category>culture</category>
        
        <category>engineering</category>
        
        <category>meta</category>
        
        <category>teams</category>
        
      </item>
    
      <item>
        <title>A History of Artsy&#39;s Web Frontend</title>
        <description>&lt;p&gt;As Artsy Engineering grows in 2018, we have so many newcomers looking for context: they want to understand the
systems they&#39;ll be working in day-to-day. Awesome! But it&#39;s not enough to understand the systems themselves, it&#39;s
often helpful to understand the &lt;em&gt;history&lt;/em&gt; of how we ended up where we are.&lt;/p&gt;

&lt;p&gt;Frontend web development has changed a &lt;em&gt;lot&lt;/em&gt; during Artsy&#39;s existence, and it continues to advance at a blistering
pace. It&#39;s easy to get caught up in the churn of frameworks and languages and tools, so I want to use this post as
an opportunity to contextualize each transition that Artsy&#39;s web presence has made over the past seven years. We&#39;ve
changed technologies, but we&#39;ve tried to do so with care and attention. Documenting these decisions is important
(and is ideally done &lt;a href=&quot;https://ashfurrow.com/blog/contemporaneous-blogging/&quot;&gt;contemporaneously&lt;/a&gt;), but even with the best documentation, &lt;a href=&quot;https://github.com/artsy/artsy.github.io/pull/489#discussion_r221301472&quot;&gt;sometimes our own documentation
is unclear to us&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In an effort to help contextualize our web frontend (which is &lt;a href=&quot;https://github.com/artsy/force&quot;&gt;open source&lt;/a&gt;), this blog post will document
the major transitions that Artsy&#39;s web presence has made over the past seven years. Let&#39;s begin!&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Backbone...CoffeeScript&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Backbone + CoffeeScript&lt;/h2&gt;

&lt;p&gt;Artsy as you know it today began as a standard Rails application. We ran &lt;code&gt;git init&lt;/code&gt; in January 2011, which coupled
our backend API to our web frontend, but since our frontend was just a fancy user interface for our API, this
worked for over two years. The web app itself was a kind of simplified MVC – controller logic lived inside the
views and models dealt with backend communication and notifying the view of state changes. For CSS, we used the
SASS CSS preprocessor. The Rails backend served initial pages that were then populated with follow-up API calls
made on the client-side. At a &lt;em&gt;very&lt;/em&gt; high level, this isn&#39;t &lt;em&gt;that&lt;/em&gt; different from what we do today with React.&lt;/p&gt;

&lt;p&gt;Our site was built with a framework called &lt;a href=&quot;http://backbonejs.org&quot;&gt;Backbone&lt;/a&gt;, which was really well-suited for our needs at the time.
From their documentation:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Philosophically, Backbone is an attempt to discover the minimal set of data-structuring (models and collections)
and user interface (views and URLs) primitives that are generally useful when building web applications with
JavaScript. In an ecosystem where overarching, decides-everything-for-you frameworks are commonplace, and many
libraries require your site to be reorganized to suit their look, feel, and default behavior — Backbone should
continue to be a tool that gives you the &lt;em&gt;freedom&lt;/em&gt; to design the full experience of your web application.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As an outsider to the web at that time, I can&#39;t comment too heavily on Backbone. It seems like the freedom
(emphasis theirs) that they describe is a freedom from tangled jQuery code everywhere. I think our definition of
freedom on the web frontend has evolved since then, but that&#39;s just my feeling.&lt;/p&gt;

&lt;p&gt;The other key component to our web frontend was &lt;a href=&quot;https://coffeescript.org&quot;&gt;CoffeeScript&lt;/a&gt;. According to its documentation, &quot;CoffeeScript is
a little language that compiles into JavaScript&quot;, which was pretty important at the time. JavaScript in 2011 was
very different from JavaScript today. The CoffeeScript docs also state that &quot;JavaScript has always had a gorgeous
heart&quot;, which I&#39;m not sure I&#39;d agree with to be honest, but the CoffeeScript project really shows how a handful of
engineers working to improve something they care about can change an entire industry. While I don&#39;t think
contemporary JavaScript would have gotten as good as it has without CoffeeScript, it&#39;s a bit anachronistic to see
it used today.&lt;/p&gt;

&lt;p&gt;Our goal as a (very small!) engineering team at the time was to keep our moving parts to a minimum.
Rails+SASS+CoffeeScript+Backbone helped us achieve that goal, and we couldn&#39;t have gotten this far without the help
of those projects.&lt;/p&gt;

&lt;a name=&quot;Ezel..amp..Friends&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Ezel &amp;amp; Friends&lt;/h2&gt;

&lt;p&gt;In November 2013, we split our web frontend from the API backend. You can read
&lt;a href=&quot;2013_review&quot;&gt;all the details in this blog post&lt;/a&gt;, but the story is summarized nicely as &quot;moving from a single
monolithic application to modular Backbone apps that run in Node and the browser and consume our external API.&quot;
This move from monolith to modular systems continues to influence day-to-day work on the Artsy Engineering team.&lt;/p&gt;

&lt;p&gt;We had already started moving away from a typical Rails app by moving our API to &lt;a href=&quot;https://github.com/ruby-grape/grape&quot;&gt;Grape&lt;/a&gt; in order to support an
iOS application. The monolith also had some clear drawbacks including severe page load times, maintaining
duplicated backend and frontend UI templates, slow test suites, and poor developer productivity. We took the
project of building our mobile web frontend, m.artsy.net (still known as &quot;martsy&quot; internally) as an opportunity to
address these problems.&lt;/p&gt;

&lt;p&gt;We built our new site with &lt;a href=&quot;https://github.com/ruby-grape/grape&quot;&gt;Node.js&lt;/a&gt; since it allowed us to share and consolidate our server/client rendering
code. We split out areas of concern into separate &quot;apps&quot;, with their own bundled CSS/JS to help page load times. We
server-side rendered above-the-fold content and used client-side JS to load the rest, which helped SEO and user
experience. We took a &lt;a href=&quot;http://getbem.com/introduction/&quot;&gt;BEM&lt;/a&gt;-like approach to our CSS, which helped developer productivity. Our technical
decisions were driven primarily by our desire to create great user experiences.&lt;/p&gt;

&lt;p&gt;And because we are an open source by default organization, we collected these approaches into an open source
project called &lt;a href=&quot;https://github.com/artsy/ezel&quot;&gt;Ezel&lt;/a&gt;. While our main app used this Ezel approach, other new web apps – CMS systems for our
partners, auction-management systems for our admins, etc – were built on new internal tools to share assets and
code across the apps. We experimented a lot; we got pretty good at sharing resources across codebases. Most of our
web projects started on Heroku before moving to heavier-duty deployments as needed. Our frontend mindset at the
time (2015) was focused on getting to a stable, predictable stack. However... we started experimenting with React
around the same time.&lt;/p&gt;

&lt;p&gt;CoffeeScript and Backbone were still working for us, and we still use them in production in many systems. However,
the state of the art in web development moved on. When I joined the auctions team and helped maintain one of our
CoffeeScript+Backbone apps, I was &lt;em&gt;very&lt;/em&gt; confused about how data flowed from one part of the app to another, across
languages, with a lot of magic happening. I think that&#39;s typical in these kinds of apps – &quot;convention over
configuration&quot; is a good mantra &lt;em&gt;if&lt;/em&gt; you can expect that incoming engineers are familiar with the conventions.
That&#39;s just not the case anymore.&lt;/p&gt;

&lt;p&gt;By 2016, we had &lt;a href=&quot;http://artsy.github.io/blog/2015/04/08/creating-a-dynamic-single-page-app-for-our-genome-team-using-react/&quot;&gt;experimented with React&lt;/a&gt; and followed up with &lt;a href=&quot;http://artsy.github.io/blog/2016/08/09/the-tech-behind-live-auction-integration/&quot;&gt;another app built with the
technology&lt;/a&gt;. React (and Redux) were very well-suited for our realtime auction bidding UI, and would later
prove helpful in our &lt;a href=&quot;https://github.com/artsy/positron&quot;&gt;editorial CMS&lt;/a&gt;. These experiences helped prove the technology was ready for
production use &lt;em&gt;and&lt;/em&gt; convinced us that React was great at reducing the complexities of building user interfaces
(the realtime nature of our auctions product was particularly well-suited for Redux&#39;s state management; it was our
first from-scratch React app).&lt;/p&gt;

&lt;p&gt;When the Artsy business require us to make changes to how we build software, like splitting up our monolith, we try
to take full advantage of those changes to improve how we work, which means evaluating new tools. Adopting Node.js
and Ezel wouldn&#39;t make sense today, but at the time, they helped us scale up Artsy&#39;s business without the same
scaling up of our engineering resources. Ezel helped us do more with less, which is still an important criteria we
use for evaluating new tools.&lt;/p&gt;

&lt;a name=&quot;React&quot;&gt;&lt;/a&gt;
&lt;h2&gt;React&lt;/h2&gt;

&lt;p&gt;By 2017, the divisions between our mobile frontend and web frontend teams had been totally dissolved (as they
should – the division between mobile and web developers is a false dichotomy). Our &lt;a href=&quot;http://artsy.github.io/blog/2017/04/14/artsy-technology-stack-2017/&quot;&gt;2017 tech stack
post&lt;/a&gt; discusses this in depth, but our goal was really to unify the paradigm that frontend engineers
at Artsy use to build user interfaces, whether that&#39;s on mobile or web. React and React Native were our answer to
that challenge.&lt;/p&gt;

&lt;p&gt;On the web side of things, however, Artsy had another challenge. Sure, React is great, and sure, it&#39;s how we want
to build user interfaces, but how do we get there? We&#39;re not fans of large rewriting projects, so we opted for what
we call an &quot;incremental revolution&quot; approach. We built a library called &lt;a href=&quot;https://github.com/artsy/stitch&quot;&gt;Stitch&lt;/a&gt; that would let us mount React
components inside our existing app. Using this approach, we could migrate to React component-by-component. We&#39;ve
been using Stitch in production for over a year and have been very happy with its approach; you can read more
details of integrating it into our main frontend app &lt;a href=&quot;http://artsy.github.io/blog/2017/09/05/Modernizing-Force/&quot;&gt;in this blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today, principal React work takes place in &lt;a href=&quot;https://github.com/artsy/reaction&quot;&gt;a shared components repo&lt;/a&gt;. We share these components across
several of our web apps using Stitch. We have been pretty pleased with the results! But our dive into React is only
just beginning. The community is moving quickly to figure out what best practices make sense in the React paradigm,
and we&#39;re a part of that. We are evaluating technologies like &lt;a href=&quot;https://www.styled-components.com&quot;&gt;styled-components&lt;/a&gt; and &lt;a href=&quot;https://jxnblk.com/styled-system/&quot;&gt;styled-system&lt;/a&gt; to create
a universal design system within Artsy. The area is under very active development, so I&#39;ll save details for a
future blog post.&lt;/p&gt;

&lt;p&gt;I can&#39;t go too much further without talking about GraphQL. v1 of our API (REST) is still in use around much of
Artsy and, despite the best efforts of some of our engineers, v2 of our API (&lt;a href=&quot;http://stateless.co/hal_specification.html&quot;&gt;HAL&lt;/a&gt;) hasn&#39;t gained significant
internal use yet. Instead, we found ourselves building a &lt;a href=&quot;https://graphql.org&quot;&gt;GraphQL&lt;/a&gt; server to orchestrate API calls to our
existing APIs. This confers many benefits, which I describe from a mobile perspective in some detail &lt;a href=&quot;https://ashfurrow.com/blog/the-spirit-of-moya/&quot;&gt;here&lt;/a&gt;.
The key thing to understand about our GraphQL server, &lt;a href=&quot;https://github.com/artsy/metaphysics/&quot;&gt;which is open source&lt;/a&gt;, is that it is under the
stewardship of our frontend engineers, not our platform engineers. That&#39;s not to say that our platform team isn&#39;t
involved with its development – in fact, they&#39;ve been key to scaling it up – but Artsy frontend engineers created
the server to help us build better UIs, and while the technology is still very new, we continue to see it pay
dividends.&lt;/p&gt;

&lt;p&gt;Okay so remember earlier when I said that we dissolved our mobile team? Well, I was on that team and it wasn&#39;t like
our mobile engineers all learned how Artsy does web – we brought our culture and tools with us and, together with
our web colleagues, have built an integrated engineering team that&#39;s greater than the sum of its parts. One thing
that was important to mobile engineers was type safety, so we had to have a conversation about JavaScript.&lt;/p&gt;

&lt;p&gt;On its own, JavaScript can&#39;t guarantee type safety. We investigated two options: &lt;a href=&quot;http://www.typescriptlang.org&quot;&gt;TypeScript&lt;/a&gt; and &lt;a href=&quot;https://flow.org&quot;&gt;Flow&lt;/a&gt;. &lt;a href=&quot;http://artsy.github.io/blog/2017/02/05/Front-end-JavaScript-at-Artsy-2017/&quot;&gt;This
blog post&lt;/a&gt; goes into detail about our decision, but tl;dr we chose TypeScript. We have been building (and
helping to build) tools &lt;a href=&quot;https://github.com/relay-tools/relay-compiler-language-typescript&quot;&gt;relay-compiler-language-typescript&lt;/a&gt; to take full advantage of interoperability
between TypeScript types and GraphQL types through &lt;a href=&quot;https://facebook.github.io/relay/&quot;&gt;Relay&lt;/a&gt;, as well as using Babel 7 to migrate existing projects
to TypeScript incrementally, which you can read about in more detail &lt;a href=&quot;https://artsy.github.io/blog/2017/11/27/Babel-7-and-TypeScript/&quot;&gt;here&lt;/a&gt;. It&#39;s all very exciting – you
can read more on how Relay and GraphQL interoperate &lt;a href=&quot;http://artsy.github.io/blog/2018/07/25/Relay-Networking-Deep-Dive/&quot;&gt;in this blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We started building software in React not because it was trendy, but because it helped our engineering team deliver
more value to the business. It&#39;s been a huge success, but not without its costs. We&#39;ve tried to mitigate those
costs by using tools like Stitch to migrate apps to React incrementally, and through spreading knowledge of how our
stack through internal knowledge-sharing like &lt;a href=&quot;http://artsy.github.io/series/javascriptures/&quot;&gt;JavaScriptures&lt;/a&gt;. While the transition to React has had its costs,
&lt;em&gt;not&lt;/em&gt; moving would also be costly, too.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Since I joined Artsy, I&#39;ve seen us continually investing in tooling that helps us build better software. The
results of this culture-of-continuous-improvement speak for themselves: with fewer than 30 engineers total, we
support a growing company with a suite of software built for many canvasses &lt;em&gt;and&lt;/em&gt; we have an outsized impact on the
software industry relative to our size. Our frontend web stack is just one facet of our evolving technology –
there&#39;s lots of exciting stuff on the backend, too (&lt;a href=&quot;https://github.com/artsy/hokusai&quot;&gt;for example...&lt;/a&gt;). Through my research for this blog
post, I learned a lot about what drives technological decisions on our team. From humble beginnings as a Rails app,
to CoffeeScript and Bootstrap, to React and GraphQL, Artsy Engineering has evolved our frontend software to achieve
a quality worthy of art – both from the user&#39;s perspective and from the developer&#39;s. I&#39;m very excited about what&#39;s
coming next, and I can&#39;t wait to share it with you. Have a great day!&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Oct 2018 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2018/10/04/artsy-frontend-history/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2018/10/04/artsy-frontend-history/</guid>
        
        
        <category>architecture</category>
        
        <category>best practices</category>
        
        <category>ezel</category>
        
        <category>force</category>
        
        <category>javascript</category>
        
        <category>react</category>
        
      </item>
    
      <item>
        <title>Stamping the commit SHA into the ENV vars of a running Docker-based app</title>
        <description>&lt;p&gt;For what feels like the last 3-6 months, I&#39;ve been trying to figure out how to know what the commit is for the
Docker runtime in Peril. Roughly: every master commit on Peril triggers a Docker image on Docker Hub for the
environment in which JavaScript is running. There&#39;s a lag between creating the commit, having the image ready on
Docker Hub, and Peril using the new image. There&#39;s also space for these automated systems to go wrong, so I&#39;d like
to be able to be certain in logging.&lt;/p&gt;

&lt;p&gt;I&#39;ve thrown a lot of commits and time every few weeks at this, so now that I&#39;ve figured it out, I&#39;ll give you an
idea of what I needed to do to make it work in a micro-post.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; You need a custom build step, to do this, you need to create a file &lt;code&gt;hooks/build&lt;/code&gt; in your repo:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;13&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;14&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env sh&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# This is so we can get the commit into the build log of a Dangerfile runner&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# These come from https://docs.docker.com/docker-cloud/builds/advanced/&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# For debugging all env vars&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;# printenv&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;c&quot;&gt;#  Convert the location &amp;quot;/Dockerfile&amp;quot; to &amp;quot;Dockerfile&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;nv&quot;&gt;FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;nv&quot;&gt;$BUILD_PATH&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tail -c +2&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -z &lt;span class=&quot;s2&quot;&gt;&amp;quot;${DOCKER_TAG}&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  docker build --build-arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;COMMIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git rev-parse --short HEAD&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; --build-arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BRANCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SOURCE_BRANCH&lt;/span&gt; -t &lt;span class=&quot;nv&quot;&gt;$IMAGE_NAME&lt;/span&gt; -f &lt;span class=&quot;nv&quot;&gt;$FILE&lt;/span&gt; .
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  docker build --build-arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;COMMIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git rev-parse --short HEAD&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; --build-arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BRANCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DOCKER_TAG&lt;/span&gt; -t &lt;span class=&quot;nv&quot;&gt;$IMAGE_NAME&lt;/span&gt; -f &lt;span class=&quot;nv&quot;&gt;$FILE&lt;/span&gt; .
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;There&#39;s a list of examples in &lt;a href=&quot;https://github.com/thibaultdelor/testAutobuildHooks&quot;&gt;this repo&lt;/a&gt; - though the build
one is too simple for our needs here. If you need something that&#39;s not there, then remove the comment marker before
&lt;code&gt;printenv&lt;/code&gt; to the script to see
&lt;a href=&quot;https://github.com/danger/peril/commit/61f447d13476fee9fa0686225ff3ca76d416088f&quot;&gt;what env vars&lt;/a&gt; are available
(&lt;a href=&quot;https://hub.docker.com/r/dangersystems/peril/builds/benoxzftncgdsmwugr9bpjn/&quot;&gt;here&#39;s an example build&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Edit your &lt;code&gt;Dockerfile&lt;/code&gt; to take the additional arguments &lt;code&gt;COMMIT&lt;/code&gt; and &lt;code&gt;BRANCH&lt;/code&gt; from &lt;code&gt;ARG&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;11&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;diff&#39;&gt;&lt;span class=&#39;line&#39;&gt;MAINTAINER Orta Therox
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ ARG BRANCH=&amp;quot;master&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ ARG COMMIT=&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ LABEL branch=${BRANCH}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ LABEL commit=${COMMIT}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;ADD . /app
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;WORKDIR /app
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ # Now set it as an env var&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ ENV COMMIT_SHA=${COMMIT}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ ENV COMMIT_BRANCH=${BRANCH}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Err, that should be everything. I mean, I did call it a micro-post. Trying to implement this has broken the Peril
runner a bunch of times on staging, so I&#39;m mainly just helping out other docker newbies.&lt;/p&gt;

&lt;p&gt;Some links that helped me get there:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/docker/hub-feedback/issues/600&quot;&gt;Add git commit hash to ENV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/docker/hub-feedback/issues/508#issuecomment-243968310&quot;&gt;Feature request: Build args on docker hub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elasticdog/tiddlywiki-docker/commit/993c7e9e8d5207d110270458f0f18839656ca126&quot;&gt;Inject Git source commit metadata into the image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/docker-hub/github/&quot;&gt;Configure automated builds from GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Remember folks, Ash says you should &lt;a href=&quot;https://ashfurrow.com/blog/contemporaneous-blogging/&quot;&gt;write as you learn&lt;/a&gt;, so
write up those small wins.&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2018/09/10/Dockerhub-Stamping-Commits/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2018/09/10/Dockerhub-Stamping-Commits/</guid>
        
        
        <category>docker</category>
        
        <category>env-vars</category>
        
        <category>peril</category>
        
      </item>
    
      <item>
        <title>How To Debug Jest Tests</title>
        <description>&lt;p&gt;Hey there! My name is Anson and I work on the Platform team at Artsy. Recently, we faced an issue where a certain &lt;a href=&quot;https://github.com/airbnb/enzyme&quot;&gt;Enzyme&lt;/a&gt; test we wrote using mock tracking was failing, but we couldn&#39;t figure out why. Luckily, with some help from &lt;a href=&quot;/author/orta&quot;&gt;Orta&lt;/a&gt; and some clever thinking, we figured out what was going on.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;We thought it was an issue with the mock testing library we had written. We tried to fix the problem by sprinkling &lt;code&gt;console.log&lt;/code&gt; calls throughout the test, but it was still hard to figure out what was going on, especially without knowing how to peek into the properties of certain objects.&lt;/p&gt;

&lt;p&gt;Instead, &lt;a href=&quot;/author/orta&quot;&gt;Orta&lt;/a&gt; suggested we used the Chrome Node DevTools. Since the Enzyme test is run via &lt;code&gt;yarn jest&lt;/code&gt;, yarn is acting as a frontend for running the Enzyme test with Node. This means that we can use the Chrome Node DevTools as a debugger to run the Enzyme test. This was super useful since the one thing we needed was to be able to peek inside certain objects to see what they looked like and how they were failing. It was a much faster, more methodical way to approach debugging this test. Here are the steps we took:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, insert a new line in your test where you think it might be failing and type &lt;code&gt;debugger&lt;/code&gt;. This will serve as a break point for the debugger to stop at.&lt;/li&gt;
&lt;li&gt;Open up Chrome and type in the address bar : &lt;code&gt;chrome://inspect&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click on &quot;Open dedicated DevTools for Node&quot;&lt;/li&gt;
&lt;li&gt;In your terminal, instead of typing &lt;code&gt;yarn jest &amp;lt;path_to_test&amp;gt;&lt;/code&gt;, type this:&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;&lt;span class=&#39;line&#39;&gt;node --inspect node_modules/.bin/jest --runInBand &amp;lt;path_to_test&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Or you can add it to your &lt;code&gt;package.json&lt;/code&gt; as a script:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;diff&#39;&gt;&lt;span class=&#39;line&#39;&gt;  {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    &amp;quot;scripts&amp;quot; : {
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+    &amp;quot;test:debug&amp;quot;: &amp;quot;node --inspect node_modules/.bin/jest --runInBand&amp;quot;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;    }
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;  }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Which you can then run as &lt;code&gt;yarn test:debug &amp;lt;path_to_test&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Voila! Your test should now be running in the Chrome debugger. And you get your handy console to poke around all sorts of stuff!&lt;/p&gt;

&lt;p&gt;You also have the option of using this with Jest&#39;s &lt;code&gt;--watch&lt;/code&gt; mode in order easily re-run tests, after changes to app or test code.&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;&lt;span class=&#39;line&#39;&gt;node --inspect node_modules/.bin/jest --watch --runInBand &amp;lt;path_to_test&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Now simply hit Enter in the terminal running your Jest process anytime you want to re-run your currently selected specs. You&#39;ll be dropped right back into the Chrome debugger.&lt;/p&gt;

&lt;p&gt;You might be wondering how this fixed our tests. Well, turns out that we missed a &lt;code&gt;jest.unmock()&lt;/code&gt; call at the top of the test file. &lt;em&gt;Facepalm.&lt;/em&gt; To prevent this from biting other developers in the future, &lt;a href=&quot;/author/orta&quot;&gt;Orta&lt;/a&gt; whipped up a &lt;a href=&quot;https://github.com/artsy/reaction/pull/1174&quot;&gt;pull request&lt;/a&gt; to add a rule in our TypeScript linter, check it out!&lt;/p&gt;

&lt;p&gt;Either way, in the future, this will probably be my first step in debugging non-obvious issues in tests, if only to eliminate possible sources of the issues. I&#39;m glad I was able to learn with &lt;a href=&quot;/author/orta&quot;&gt;Orta&lt;/a&gt; about a methodical way to debug test failures. Hope this helps, and happy hacking!&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Aug 2018 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2018/08/24/How-to-debug-jest-tests/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2018/08/24/How-to-debug-jest-tests/</guid>
        
        
        <category>jest</category>
        
        <category>node.js</category>
        
        <category>testing</category>
        
        <category>tooling</category>
        
      </item>
    
      <item>
        <title>Defining Our Engineering Guiding Principles</title>
        <description>&lt;p&gt;The Artsy Engineering team recently underwent the process of defining our guiding principles; you can read through the pull request &lt;a href=&quot;https://github.com/artsy/meta/pull/41&quot;&gt;here&lt;/a&gt; and the finished principles &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md&quot;&gt;here&lt;/a&gt;. In this blog post, I&#39;d like to use our experience of defining these to answer the following questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why define engineering guiding principles?&lt;/li&gt;
&lt;li&gt;What makes principles different from company values?&lt;/li&gt;
&lt;li&gt;How to define guiding principles?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Let&#39;s dive in.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Why.Define.Engineering.Principles.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Why Define Engineering Principles?&lt;/h2&gt;

&lt;p&gt;Artsy&#39;s CEO has a &lt;a href=&quot;https://www.artsy.net/article/carter-cleveland-why-define-company-values&quot;&gt;blog post&lt;/a&gt; that discusses why you should define company values and, unsurprisingly, a lot of the same rationale applies to an engineering team&#39;s guiding principles. In summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Undefined principles lead to cultural debt (similar to technical debt, but in terms of a team&#39;s culture).&lt;/li&gt;
&lt;li&gt;Defined values lead to greater empowerment (engineers feel safe making decisions on their own, based on the principles).&lt;/li&gt;
&lt;li&gt;Defined values reduce the risk of unconscious bias (we help our decisions get made consistently).&lt;/li&gt;
&lt;li&gt;Values are your brand (this is true for Artsy Engineering, but our &lt;a href=&quot;https://github.com/artsy&quot;&gt;contributions&lt;/a&gt; to the software industry are also a significant part of brand).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think each of these reasons applies to defining guiding principles as well. Over the past four years, I&#39;ve seen the Artsy Engineering team encounter situations related to the reasons outlined above and, while the company values have helped us navigate disagreement, they haven&#39;t been entirely satisfactory.&lt;/p&gt;

&lt;p&gt;The two biggest shortcomings of the values have been an &lt;strong&gt;inconsistent practice&lt;/strong&gt; and a &lt;strong&gt;difficulty making team-based decisions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Artsy Engineering supports the business primarily through product teams, which each have their own responsibilities and KPIs. Over time, different teams have developed their own subculture. In earnest, I think this is really cool, but it &lt;em&gt;has&lt;/em&gt; eventually led to two teams taking radically different approaches to similar problems, or even repeating work that another team is already working on.&lt;/p&gt;

&lt;p&gt;That missing consistency also led to difficulties making team-based decisions: how can teams make decisions &lt;em&gt;as a team&lt;/em&gt; without having a clear set of guidelines with which to evaluate a decision? As I&#39;ll explain in the next section, the Artsy company values often left us without a clear answer.&lt;/p&gt;

&lt;a name=&quot;What.Makes.Guiding.Principles.Different.from.Company.Values.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What Makes Guiding Principles Different from Company Values?&lt;/h2&gt;

&lt;p&gt;Artsy&#39;s &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#artsy-values&quot;&gt;five core values&lt;/a&gt; are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Art meets Science&lt;/li&gt;
&lt;li&gt;People are Paramount&lt;/li&gt;
&lt;li&gt;Quality Worthy of Art&lt;/li&gt;
&lt;li&gt;Positive Energy&lt;/li&gt;
&lt;li&gt;Openness&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Those have been an incredibly useful framework for guiding Artsy&#39;s growth, for three years now. They&#39;re good values. But they are &lt;em&gt;very&lt;/em&gt; general, designed specifically to be inclusive of every member of, and every team in, our company.&lt;/p&gt;

&lt;p&gt;That can lead to challenges when applying the values to specific teams, including engineering. In our day-to-day work, the values can help guide our general actions (being positive in pull request reviews, for example), but lack the specifics necessary to drive decision-making on a team level. The values also sometimes conflict with one another, and navigating those conflicts is difficult without a set of down-to-Earth guiding principles.&lt;/p&gt;

&lt;p&gt;Let&#39;s take a look at an example. &quot;Quality Worthy of Art&quot; is a really great value – personally, it motivates me to build software that would be worthy of hanging in a studio or gallery. However, the process of &lt;em&gt;getting&lt;/em&gt; to that quality is often very messy; we might try one approach, switch to another, ship with &lt;code&gt;TODO&lt;/code&gt; comments left in, etc. Real artists ship, after all. When &lt;a href=&quot;http://artsy.github.io/series/open-source-by-default/&quot;&gt;developing software in the open&lt;/a&gt;, which value wins? The openness value, or the quality value?&lt;/p&gt;

&lt;p&gt;Our CEO has encouraged the company to lean into these tensions and use them to grow and learn together, which was a motivating factor in defining our guiding principles.&lt;/p&gt;

&lt;a name=&quot;How.to.Define.Guiding.Principles.&quot;&gt;&lt;/a&gt;
&lt;h2&gt;How to Define Guiding Principles?&lt;/h2&gt;

&lt;p&gt;This is a very tricky question, since so much of the answer for Artsy Engineering is specific to us at Artsy (your process will necessarily be different) and specific to our team &lt;em&gt;within&lt;/em&gt; Artsy (engineers make up less than 15% of Artsy&#39;s employee headcount). Orta helped define the values by looking at &lt;a href=&quot;https://www.objc.io/issues/22-scale/artsy/&quot;&gt;artefact&#39;s of our mobile team&#39;s culture&lt;/a&gt; (since our mobile team &lt;em&gt;did&lt;/em&gt; have a strong culture) and by talking to engineers privately to ask them for input. That was only half the work, though.&lt;/p&gt;

&lt;p&gt;Orta opened &lt;a href=&quot;https://github.com/artsy/meta/pull/41&quot;&gt;the pull request&lt;/a&gt; with the guiding principles that he had synthesized from past documentation and from conversations with engineers, but explicitly marked the PR as a work-in-progress. The values he had were a good starting point, but we iterated extensively on them. We also added many more that had been missed by Orta&#39;s starting work (we had to start somewhere, after all). The whole process took about two weeks, and I learned a lot about how other engineers work at Artsy.&lt;/p&gt;

&lt;p&gt;Most of my experience at Artsy has been engineering front-end systems, and through the process of defining these principles, I learned a lot about how our back-end engineers work. We don&#39;t always work in the same way (remember, tensions?) but I value those differences; we have so much to learn from each other! Now with the guidelines, I&#39;ll be able to appreciate the back-end perspective.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So with all that said, what are the Artsy Engineering Guiding Principles? You can read the &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md&quot;&gt;current principles here&lt;/a&gt; (they are a living set of guidelines), but the principles we decided on are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open Source by Default&lt;/li&gt;
&lt;li&gt;Own Your Dependencies&lt;/li&gt;
&lt;li&gt;Incremental Revolution&lt;/li&gt;
&lt;li&gt;Being Nice is Nice&lt;/li&gt;
&lt;li&gt;Minimum Viable Process&lt;/li&gt;
&lt;li&gt;Leverage Your Impact&lt;/li&gt;
&lt;li&gt;De-silo Engineers&lt;/li&gt;
&lt;li&gt;Build for 10x&lt;/li&gt;
&lt;li&gt;Done Means Done&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I encourage you to read the document for explanations of what each of these mean.&lt;/p&gt;

&lt;p&gt;Day-to-day, I don&#39;t expect &lt;em&gt;that&lt;/em&gt; much to change now that we have these defined. But the differences they make will be key to the longevity and growth of our engineering team&#39;s culture.&lt;/p&gt;

&lt;p&gt;Remember that earlier example of openness-vs-quality? That is answered explicitly by the principles. The principles are &lt;em&gt;actionable&lt;/em&gt;, they are &lt;em&gt;specific&lt;/em&gt;, and they are &lt;em&gt;ours&lt;/em&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Aug 2018 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2018/08/22/engineering-guiding-principles/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2018/08/22/engineering-guiding-principles/</guid>
        
        
        <category>concepts</category>
        
        <category>culture</category>
        
        <category>engineering</category>
        
        <category>meta</category>
        
        <category>teams</category>
        
      </item>
    
      <item>
        <title>Open Source by Default: Docs</title>
        <description>&lt;p&gt;Artsy is growing up. We have thousands of subscriber galleries paying 3 to 4 figure monthly fees. As we&#39;re starting
to see a real market-fit, and have started to mature our organization. For example, this year we introduced product
managers into our 8 year old company to help us figure out how to build the right things. We actually started having
open headcount on Engineering again, for the first time &lt;em&gt;in years&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As a part of maturing, our team has really had to start considering how to make parts of our culture explicit
instead of implicit. We have new, awesome folks wanting to understand why things are the way they are as well as
folk who are raising up to new responsibilities only to find them completely un-documented.&lt;/p&gt;

&lt;p&gt;In-part, having a consistent team for so long hasn&#39;t made it worth the time to document things everyone knows, but
growth is very happy to disrupt that balance. Now we&#39;re shipping documentation updates weekly, to all sorts of
places. In trying to write an awesome document, which I&#39;ll cover later, I looked at how we had consolidated our
documentation over the last few years, and saw that we had fragmented due the tensions around wanting to write
publicly.&lt;/p&gt;

&lt;p&gt;This post covers that tension, and how we came about to the new docs setup.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Fragmentation&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Fragmentation&lt;/h2&gt;

&lt;p&gt;Prior to today, we had 4 main repos for documentation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🔒 &lt;code&gt;artsy/potential&lt;/code&gt; (2015) - Our onboarding repo, and general docs hub&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/mobile&quot;&gt;&lt;code&gt;artsy/mobile&lt;/code&gt;&lt;/a&gt; (2015) - The mobile team&#39;s repo&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/guides&quot;&gt;&lt;code&gt;artsy/guides&lt;/code&gt;&lt;/a&gt; (2016) - A place for standards and guides&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/meta&quot;&gt;&lt;code&gt;artsy/meta&lt;/code&gt;&lt;/a&gt; (2017) - Externally-facing docs for non-Artsy folk&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Now we have two:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🔒 &lt;code&gt;artsy/potential&lt;/code&gt; - Support docs, and private documentation&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artsy/README&quot;&gt;&lt;code&gt;artsy/README&lt;/code&gt;&lt;/a&gt; - Documentation Hub, split into sections&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When we created potential, it started as an open repo with the focus of on-boarding information. Over time it&#39;s
scope grew to cover more general team, repo and setup documentation. We ended up debating whether it should be a
private repo instead though.&lt;/p&gt;

&lt;p&gt;The key arguments for closing it were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are sensitive things we want to document&lt;/li&gt;
&lt;li&gt;We can to write about info which lives in other private repos with full context&lt;/li&gt;
&lt;li&gt;By making potential private we could have one, authoritative source of truth for Artsy engineering newcomers&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These are all great, reasonable arguments and so we made the repo private - but with hindsight, closing the repo
split contributors to our documentation. For example, the mobile team split moved their documentation into separate
repo the week potential was made private. The web team used the blog, or kept notes in a per-project basis.
Culturally, potential was considered the domain of our platform team. The platform team had the most cross-cutting
concerns, and were also the team with the strongest need for documenting private information like domain models,
outages, system failures, server access details and contact details.&lt;/p&gt;

&lt;p&gt;By 2016, we had successfully &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#de-silo-engineers&quot;&gt;de-silo&#39;d&lt;/a&gt; mobile engineering at Artsy via React Native, so the mobile team
wasn&#39;t a centralized team with resources anymore. This meant that new docs shouldn&#39;t really live inside the
artsy/mobile repo. The front-end teams had been using the blog posts and public gists to keep track of
documentation, which isn&#39;t really a good pattern. GitHub gists get lost, and blog posts aren&#39;t living documents.&lt;/p&gt;

&lt;p&gt;This eventually caused enough dissonance that the front-end folk called it quits and started a new docs repo. Our
discussion on what we want a GraphQL schema to look like definitely didn&#39;t fit in the &lt;a href=&quot;https://github.com/artsy/mobile&quot;&gt;&lt;code&gt;artsy/mobile&lt;/code&gt;&lt;/a&gt; repo and
we wanted to share it with the other GraphQL folk we were talking to, so having it in a private repo didn&#39;t make
sense. We couldn&#39;t do editorial review against a gist, and we eventually just started a new documentation repo:
&lt;a href=&quot;https://github.com/artsy/guides&quot;&gt;&lt;code&gt;artsy/guides&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once we had a space, then new docs started coming. We documented the RFC process, and how to run retrospectives in
the guides repo. As a guide on &lt;em&gt;how-to-do-x&lt;/em&gt; - these all made sense. What didn&#39;t make sense was that we were
regularly repeating ourselves when talking about Artsy Engineering to the public.&lt;/p&gt;

&lt;p&gt;There wasn&#39;t a good space for that in mobile nor guides, and so a new repo was created: &lt;a href=&quot;https://github.com/artsy/meta&quot;&gt;&lt;code&gt;artsy/meta&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Soon, this became the home of docs from anyone that preferred writing in the public. &lt;a href=&quot;https://github.com/artsy/meta&quot;&gt;&lt;code&gt;artsy/meta&lt;/code&gt;&#39;s&lt;/a&gt; domain
was vague enough that anyone could document any internal processes as being something externally facing. For example
documentation on how to run &lt;a href=&quot;https://github.com/artsy/README/blob/master/playbooks/running-lunch-and-learn.md#running-a-lunch--learn&quot;&gt;our Lunch &amp;amp; Learn&lt;/a&gt;, or &lt;a href=&quot;https://github.com/artsy/README/blob/master/events/open-standup.md#dev-team-standup-at-artsy&quot;&gt;Open Stand-up&lt;/a&gt;.&lt;/p&gt;

&lt;a name=&quot;Open.Docs.by.Default&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Open Docs by Default&lt;/h2&gt;

&lt;p&gt;This came to an inflection point when I joined the platform team, and felt the need to write cross-team
documentation that really didn&#39;t fit with of our existing domains for documentation. I believe in &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#leverage-your-impact&quot;&gt;leveraging my
impact&lt;/a&gt;, so any time writing docs should be industry grade-stuff, not only available to those lucky enough to
be in &lt;a href=&quot;https://www.artsy.net/jobs#engineering&quot;&gt;our GitHub org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So I spent some time debating the merits of our current infrastructure for docs:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;diff&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ New folk know to start at artsy/potential&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ The platform team have a private space for writing any private details about architecture and security&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ The wiki is well used as a source for all information on our engineering support process&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gd&quot;&gt;- By having our primary source of docs being private, we fragmented into many sources&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gd&quot;&gt;- New people have to figure out what team may have wrote docs to guess where docs might be&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gd&quot;&gt;- The number of contributors is low to artsy/potential&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;I wanted to imagine what a world looked like where the docs were &lt;a href=&quot;https://github.com/artsy/README/blob/master/culture/engineering-principles.md#open-source-by-default&quot;&gt;open by default&lt;/a&gt;. So, I consulted our
friends in openness: &lt;a href=&quot;https://buffer.com&quot;&gt;Buffer&lt;/a&gt;. I found that they had &lt;a href=&quot;https://github.com/bufferapp/README&quot;&gt;&lt;code&gt;bufferapp/README&lt;/code&gt;&lt;/a&gt; - which looked an awful lot
like what I was thinking.&lt;/p&gt;

&lt;p&gt;I wondered about if we moved Artsy to have an open space for the initial docs, and treated potential as it&#39;s private
sidekick:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;diff&#39;&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ New folk know to start at artsy/README&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ We can migrate all sources of docs into one place&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ artsy/potential can still be used as a place for writing private details&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ Our methodology for docs aligns with our methodology for source code&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gi&quot;&gt;+ By consolidating, we can improve working via scripts/tooling to make it feel good&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gd&quot;&gt;- It gives up on the idea that you can have a single source of documentation&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gd&quot;&gt;- You have to be a bit more cautious about what you write in docs&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;&lt;span class=&quot;gd&quot;&gt;- It&amp;#39;s a bunch of work, and you have to deprecate a lot of docs and handle re-directs for URLs&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;I opted to use our &lt;a href=&quot;https://github.com/artsy/README/blob/master/playbooks/rfcs.md&quot;&gt;RFC process&lt;/a&gt; to discuss the idea of splitting, yet consolidating, documentation. We talked
about it for two weeks with some great points for and against. Mostly summed up above, but we also discussed the
idea of moving private docs into &lt;a href=&quot;https://www.notion.so/&quot;&gt;notion.so&lt;/a&gt;. We&#39;re still figuring out what the scope of notion is in&lt;/p&gt;

&lt;p&gt;The RFC passed and I started work on a new docs hub last weekend. It was a nice shallow task I could do to keep my
mind busy. It&#39;d been a hard week.&lt;/p&gt;

&lt;p&gt;I wasn&#39;t aiming to rock the boat, so I created a new private repo on GitHub ( turns out we were at our GitHub limit
for private repos, so I &lt;a href=&quot;https://github.com/artsy/node-artsy-licenses/&quot;&gt;open sourced another&lt;/a&gt; to give us a free private slot - hah ) and &lt;a href=&quot;https://github.com/artsy/README/pull/1&quot;&gt;made a PR&lt;/a&gt;.
This &lt;a href=&quot;https://github.com/artsy/README/pull/1&quot;&gt;artsy/README#1&lt;/a&gt; outlined my thoughts on how the merge can work, and gave a chance for others to say &quot;this
doc shouldn&#39;t be public.&quot;&lt;/p&gt;

&lt;p&gt;I focused on making minimal changes, but on making sure that all docs were back up to date with whatever they were
covering. However, I set up tooling like &lt;a href=&quot;https://prettier.io&quot;&gt;prettier&lt;/a&gt;, &lt;a href=&quot;https://github.com/typicode/husky#husky---&quot;&gt;commit-hooks&lt;/a&gt; for tables of contents and &lt;a href=&quot;https://danger.systems&quot;&gt;danger&lt;/a&gt; to
make life easier for anyone wanting to make larger changes, see the &lt;a href=&quot;https://github.com/artsy/README/blob/master/CONTRIBUTING.md&quot;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once the opening PR was merged, I converted the repo to be public, sent off PRs closing &lt;a href=&quot;https://github.com/artsy/meta/pull/45&quot;&gt;meta&lt;/a&gt;, &lt;a href=&quot;https://github.com/artsy/guides/pull/8&quot;&gt;guide&lt;/a&gt;
and &lt;a href=&quot;https://github.com/artsy/mobile/pull/106&quot;&gt;mobile&lt;/a&gt;, then marked them as archived, and started debating how to announce that this happened. What
better form than a blog post? So I started writing:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Artsy is growing up. We have
thou&lt;img src=&quot;/images/ossdocs/small_blinking_text_cursor_by_neripixu-d6lwqe9.gif&quot; height=28 width=4 style=&quot;width:4px; margin:0; top:5px; margin-left:2px;&quot;&gt;&lt;/p&gt;&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 21 Aug 2018 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2018/08/21/OSS-by-Default-Docs/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2018/08/21/OSS-by-Default-Docs/</guid>
        
        
        <category>artsy</category>
        
        <category>culture</category>
        
        <category>docs</category>
        
        <category>potential</category>
        
      </item>
    
      <item>
        <title>Context Switching</title>
        <description>&lt;p&gt;Programming generally requires getting into a good &lt;a href=&quot;https://en.wikipedia.org/wiki/Flow_(psychology)&quot;&gt;flow state&lt;/a&gt; and working on a tricky problem for some time.
In the last 2 years, most of my work at Artsy (and in the OSS world) has been less about longer-term building of
hard things, but working on many smaller tasks across a lot of different areas.&lt;/p&gt;

&lt;p&gt;Somehow, during this period I managed to end up in the top of &quot;most active&quot; &lt;a href=&quot;https://gist.github.com/paulmillr/2657075&quot;&gt;GitHub members&lt;/a&gt;, I feel like a
lot of this is due to doing &lt;a href=&quot;http://artsy.github.io/series/open-source-by-default/&quot;&gt;Open Source by Default&lt;/a&gt; at Artsy and second to being good at context switching. I
want to try and talk though some of my techniques for handling context switching, as well as a bit of philosophy
around adopting and owning your tools.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;a name=&quot;Shallow.and.Wide.Work&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Shallow and Wide Work&lt;/h2&gt;

&lt;p&gt;I want to encourage as many people as possible to work on fun, deep-flow projects at Artsy. One of the most
successful ways of achieving this, that I&#39;ve found, is to spend most of my time working on shallower tasks. An
example from my last few weeks is hiring. The communication aspects require dozens of emails and internal updates
that can&#39;t be scheduled into safe blocks. &lt;em&gt;(&lt;a href=&quot;https://www.artsy.net/jobs#engineering&quot;&gt;Totally related BTW, we&#39;re hiring&lt;/a&gt;.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For programming work I have a few techniques for trying to accomplish a lot of shallow tasks across many repos.&lt;/p&gt;

&lt;p&gt;Start off by making yourself accountable to someone. For my OSS, this tends to either be &lt;a href=&quot;https://github.com/orta/cocoapods-fix-react-native#contributing-back&quot;&gt;setting expectations&lt;/a&gt;
in README or using &lt;a href=&quot;https://github.com/danger/danger-js/blob/master/VISION.md#danger-for-js&quot;&gt;a VISION&lt;/a&gt; file. For Artsy work we have product managers and engineers who own the
projects I&#39;m contributing to. For this blog post, it&#39;s my &lt;a href=&quot;http://artsy.github.io/author/chris/&quot;&gt;buddy Chris&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I would then strive to get &lt;em&gt;anything&lt;/em&gt; out, this could be a work-in-progress PR or via declaratively via
&lt;a href=&quot;https://tom.preston-werner.com/2010/08/23/readme-driven-development.html&quot;&gt;README-driven-development&lt;/a&gt;. Part of this is because you might end up being dragged off into something else,
and another is that you&#39;re less likely to grok the domain better than your reviewers. Whilst not every change is an
improvement, every improvement adds up - even in small increments.&lt;/p&gt;

&lt;p&gt;One way to instantly get rich domain knowledge is by pairing with someone who is more involved. This is a perfect
way to understand how decisions were made and provides great insight into how someone works on a project. While
pairing, you might also find additional ways to improve the daily workflow for someone else too!&lt;/p&gt;

&lt;p&gt;Trying to have a shallow and wide understanding of many systems means accepting that you can&#39;t know the finer
details about how everything works. You want to know when really big interesting things are happening, but most work
should be iterative and less relevant to external folk like you.&lt;/p&gt;

&lt;p&gt;With this in mind you can change your perspective to aim for having overviews on many things, but not get bogged
down in the useful discussion.&lt;/p&gt;

&lt;p&gt;Techniques for this are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Making a custom stream of updates and not being too concerned about reading every single one of them. For Artsy,
with many contributors and contexts - I create slack channels like: &lt;code&gt;#front-end-ios-notifs&lt;/code&gt;,
&lt;code&gt;#front-end-web-notifs&lt;/code&gt;, &lt;code&gt;#orta-misc-notifs&lt;/code&gt; and business specific ones like &lt;code&gt;#consignments-notifs&lt;/code&gt; that contain
PR or Issue information creation from GitHub but nothing with more details. I do the same but smaller for Danger
and CocoaPods.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I set &lt;a href=&quot;https://get.slack.help/hc/en-us/articles/201398467-Set-up-keyword-notifications&quot;&gt;Slack keywords&lt;/a&gt; to key GitHub repo names, or internal facing app names that I care about. This
means I don&#39;t have to monitor every channel.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I don&#39;t read my email. All 13,489 of them right now. I read the subjects and decide if it&#39;s worth reading. Every
few months I declare inbox zero so others are less distracted by the number.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The tricky thing with this sort of work is trying not to be a blocker for someone else. A lot of this is about being
cautious about what you strive to help with, and about finding ways to boost others asynchronously. Am I good at
this? Sometimes. It&#39;s easier in OSS thanks to the the limited liability clauses, but in work-work that can be hard.&lt;/p&gt;

&lt;p&gt;When my contributions are larger and I know the domain well, for example in a front-end JavaScript project, I am
willing to take longer than I&#39;d like to ensure that it is reference level quality. A recent example came up in a
retrospective last month when an engineering team at Artsy said that one of &lt;a href=&quot;https://github.com/artsy/emission/tree/master/src/lib/Components/Consignments&quot;&gt;my projects&lt;/a&gt; was a key
reference for testing and React Native form handling for them. Pulling off this can definitely take longer than
expected, but if you&#39;re not going to be the one maintaining it then holding yourself to a higher standard is worth
it.&lt;/p&gt;

&lt;a name=&quot;Deep.Automation&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Deep Automation&lt;/h2&gt;

&lt;p&gt;Remove as much ambiguity as possible for discussion. Project tools like &lt;a href=&quot;https://prettier.io&quot;&gt;prettier&lt;/a&gt; really help focus code review
away from the petty formatting issues. Linters like &lt;a href=&quot;https://github.com/palantir/tslint&quot;&gt;tslint&lt;/a&gt;, &lt;a href=&quot;https://eslint.org&quot;&gt;eslint&lt;/a&gt; and &lt;a href=&quot;https://www.github.com/bbatsov/rubocop&quot;&gt;rubocop&lt;/a&gt; remove another series of
discussion points. When you find yourself surprised by a cultural rule for a codebase, add &lt;a href=&quot;https://danger.systems&quot;&gt;a danger&lt;/a&gt; rule
so you and others have it codified. Use tools like &lt;a href=&quot;https://github.com/typicode/husky&quot;&gt;husky&lt;/a&gt; and &lt;a href=&quot;https://github.com/okonet/lint-staged&quot;&gt;lint-staged&lt;/a&gt; to get that feedback when you&#39;re
still in a development context. Danger can even run as a &lt;a href=&quot;http://danger.systems/js/tutorials/fast-feedback.html&quot;&gt;git-hook/husky task&lt;/a&gt; too, so that feedback
can be &lt;em&gt;blazing&lt;/em&gt; too.&lt;/p&gt;

&lt;p&gt;You can automate via tools, sure, but you can also encourage independent work via documentation.(TO DO: saves your
time, but isn&#39;t &quot;automation&quot;) If something is confusing enough that, as an outsider, you don&#39;t get it without
asking, you should start adding documentation. I can&#39;t tell you what that looks like because it&#39;s different
per-project, but at least try to make it so the next person doesn&#39;t need to ask.&lt;/p&gt;

&lt;p&gt;I strive to use my time on a project to encourage more consolidation, in the case of front-end that&#39;s moving closer
to &lt;a href=&quot;https://www.youtube.com/watch?v=1Z3loALSVQM&quot;&gt;the Artsy omakase&lt;/a&gt;. In the case of servers that could be encouraging new APIs to use GraphQL, or to adopt
some of our newer ideas about schema management.&lt;/p&gt;

&lt;a name=&quot;Impact.per.Keystroke&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Impact per Keystroke&lt;/h2&gt;

&lt;p&gt;I&#39;m a firm believer in customising your environment. Does that suck for pair programming? Yes. Can we deal with it?
Yes. I&#39;m gong to assume you&#39;re on a Mac. An out of the box Mac comes with some solid developer tools, and Apple are
good at &lt;a href=&quot;http://artsy.github.io/blog/2017/02/05/Retrospective-Swift-at-Artsy/#Developer.Experience&quot;&gt;taking&lt;/a&gt; some of the communities good ideas and giving it to everyone.&lt;/p&gt;

&lt;p&gt;However, there&#39;s definitely space for independent apps. Here&#39;s a list of apps broken into genres. You should be
running at least one from each genre, and have it&#39;s features deeply committed to memory. The ones in bold are what I
use.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Window Management: &lt;a href=&quot;https://manytricks.com/moom/&quot;&gt;&lt;strong&gt;Moom&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;http://magnet.crowdcafe.com&quot;&gt;Magnet&lt;/a&gt;,
&lt;a href=&quot;https://www.spectacleapp.com&quot;&gt;Spectacles&lt;/a&gt;, &lt;a href=&quot;http://mizage.com/divvy/&quot;&gt;Divvy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Effective Keyboard Shortcuts: &lt;a href=&quot;https://shortcatapp.com&quot;&gt;&lt;strong&gt;Shortcat&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://keytty.com&quot;&gt;Keytty&lt;/a&gt;,
&lt;a href=&quot;https://vimium.github.io&quot;&gt;Vimium&lt;/a&gt;/&lt;a href=&quot;https://github.com/guyht/vimari&quot;&gt;&lt;strong&gt;Vimari&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clipboard Manager: &lt;a href=&quot;https://www.alfredapp.com&quot;&gt;&lt;strong&gt;Alfred&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://tapbots.com/pastebot/&quot;&gt;Pastebot&lt;/a&gt;,
&lt;a href=&quot;http://www.keyboardmaestro.com/main/&quot;&gt;Keyboard Meastro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Recently changed files: &lt;a href=&quot;http://www.ironicsoftware.com/fresh/&quot;&gt;&lt;strong&gt;Fresh&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&quot;http://www.ironicsoftware.com/fresh/&quot;&gt;&lt;strong&gt;Alfred&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Text Snippets: &lt;a href=&quot;https://www.alfredapp.com&quot;&gt;&lt;strong&gt;Alfred&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://textexpander.com/&quot;&gt;TextExpander&lt;/a&gt;, macOS System
Settings&lt;/li&gt;
&lt;li&gt;Terminal: &lt;a href=&quot;https://iterm2.com&quot;&gt;&lt;strong&gt;iTerm 2&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://hyper.is&quot;&gt;Hyper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Learning Keyboard Shortcuts: &lt;a href=&quot;https://www.mediaatelier.com/CheatSheet/&quot;&gt;&lt;strong&gt;CheatSheet&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Shell: &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;Oh my ZSH&lt;/a&gt;, &lt;strong&gt;&lt;a href=&quot;http://fishshell.com&quot;&gt;Fish&lt;/a&gt; +
&lt;a href=&quot;https://fisherman.github.io&quot;&gt;Fisherman&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Simple&lt;/em&gt; Note Taking: &lt;a href=&quot;http://brettterpstra.com/projects/nvalt/&quot;&gt;&lt;strong&gt;nvalt&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&quot;https://culturedcode.com/things/&quot;&gt;&lt;strong&gt;Things&lt;/strong&gt;&lt;/a&gt;, Notes.app, &lt;a href=&quot;https://evernote.com&quot;&gt;Evernote&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Use native apps by default, they are better for your time. Native apps will usually conform to the &lt;a href=&quot;https://developer.apple.com/design/human-interface-guidelines/macos/overview/themes/&quot;&gt;Human Interface
Guidelines&lt;/a&gt;, which means logical shortcuts and great accessibility support. This is good because tools like
&lt;a href=&quot;https://shortcatapp.com&quot;&gt;Shortcat&lt;/a&gt; rely on that.&lt;/p&gt;

&lt;p&gt;Electron-y apps made the most sense when there is a big
&lt;a href=&quot;https://unix.stackexchange.com/questions/137820/whats-the-difference-of-the-userland-vs-the-kernel&quot;&gt;user-land&lt;/a&gt;
customization scene. So, basically if there&#39;s a community around extending the app (&lt;a href=&quot;https://hyper.is&quot;&gt;Hyper&lt;/a&gt; is a
reasonable example, &lt;a href=&quot;https://code.visualstudio.com&quot;&gt;Visual Studio Code&lt;/a&gt; and &lt;a href=&quot;https://atom.io&quot;&gt;Atom&lt;/a&gt; are the best
example) then Electron apps make sense.&lt;/p&gt;

&lt;p&gt;Some highlights for non-native apps are &lt;a href=&quot;https://mailplaneapp.com&quot;&gt;Mailplane&lt;/a&gt; and
&lt;a href=&quot;https://code.visualstudio.com&quot;&gt;Visual Studio Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Every second you&#39;re at a computer you should be feeling like it&#39;s 1-2-3 hotkeys away from whatever you want to do
next. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your terminal should be a &lt;a href=&quot;https://www.youtube.com/watch?v=ETskRNFeuGM&quot;&gt;single keypress away&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/orta/keyboard_shortcuts#using-a-mac&quot;&gt;Learn the keys for OS X&lt;/a&gt; so you can jump/delete words&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=4CRbJwOctMo&quot;&gt;Resize/move windows with modal commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.neat.io/bee/&quot;&gt;Making a new Jira ticket with a hotkey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/images/context-switching/sketch.mov&quot;&gt;Open any recent file per-app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://krausefx.com/blog/use-custom-shortcuts-for-every-application&quot;&gt;Use a shortcut for every Mac app you use regularly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;App-wise there&#39;s always more all of us can do, but constant improvement is key to getting there.&lt;/p&gt;

&lt;p&gt;I think it&#39;s worth stressing here that I believe in paying for my tools. I want to support independent devs, and my
time is worth orders of magnitude more than the cost of entry for this software. There may be similar versions of
what I noted above for free, they could be open source too - but I&#39;d rather have more people working on our tools
full-time than people doing it in their spare-time.&lt;/p&gt;

&lt;a name=&quot;Terminal.Context.Switching&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Terminal Context Switching&lt;/h2&gt;

&lt;p&gt;macOS&#39;s UNIX underpinnings mean that a lot of common GUI activities have a CLI counter-part. To handle regular
context switching in the terminal you&#39;ll need to customise the shell to give you information as you arrive in a new
context. Things that I find useful in a shell are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What folder am I in?&lt;/li&gt;
&lt;li&gt;Is it a git repo?&lt;/li&gt;
&lt;li&gt;What branch am I on, or are there existing changes?&lt;/li&gt;
&lt;li&gt;Did the last command fail?&lt;/li&gt;
&lt;li&gt;Sometimes, what version of node/ruby is setup for this project?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think it&#39;s also really useful to be able to jump between many development folders, you can use
&lt;a href=&quot;https://github.com/rupa/z&quot;&gt;&lt;strong&gt;z&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/wting/autojump&quot;&gt;j&lt;/a&gt; or
&lt;a href=&quot;https://github.com/iridakos/goto&quot;&gt;goto&lt;/a&gt; for this. Or set up some custom
&lt;a href=&quot;https://shapeshed.com/unix-alias/&quot;&gt;aliases&lt;/a&gt; for the most common folders.&lt;/p&gt;

&lt;p&gt;As you&#39;ll be spending a good chunk of time, it&#39;s worth feeling comfortable that you know a few of the flags for
&lt;code&gt;cd&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;rm&lt;/code&gt;, &lt;code&gt;cat&lt;/code&gt;, &lt;code&gt;touch&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt;. Ideally, you have tab completion set up, and
&lt;a href=&quot;https://stackoverflow.com/questions/6205157/iterm-2-how-to-set-keyboard-shortcuts-to-jump-to-beginning-end-of-line#10485061&quot;&gt;natural keybindings&lt;/a&gt;
set up in your terminal input.&lt;/p&gt;

&lt;a name=&quot;Regular.Re-tooling&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Regular Re-tooling&lt;/h2&gt;

&lt;p&gt;Take the time every few years to re-think your previous decisions, I try to start from scratch every 2-3 years, I&#39;m
writing this on a MacBook that&#39;s a week old and I&#39;ve still not installed something from all of the above categories.
It&#39;s a good time to re-evaluate your software priorities as your personal/professional aims/responsibilities change.&lt;/p&gt;

&lt;p&gt;A pattern I aim to strive for with tools is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start with overkill to learn what you need.&lt;/li&gt;
&lt;li&gt;Migrate to smaller and simpler once you know what you want.&lt;/li&gt;
&lt;/ul&gt;


&lt;a name=&quot;Small.and.Often&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Small and Often&lt;/h2&gt;

&lt;p&gt;It&#39;s not a very traditional way to work as a programmer, but it fits my personality type and can really rack up the
commits and contributions across the board. Being able to quickly jump contexts makes a lot more sense in the node
ecosystem - where the boundaries between projects can be as small as per-function.&lt;/p&gt;

&lt;p&gt;Working this way can make it really hard to monitor what you&#39;ve done on a regular basis, a technique I&#39;ve used to
stay on top of is &lt;a href=&quot;https://github.com/kamranahmedse/git-standup&quot;&gt;git-standup&lt;/a&gt; and a dev folder structure that corresponds to &lt;a href=&quot;https://twitter.com/orta/status/1028764128310185984&quot;&gt;areas of work&lt;/a&gt;. For
example, here&#39;s what a week roughly looks like on a slow week for Danger/Peril for me:&lt;/p&gt;

&lt;div class=&#39;bogus-wrapper&#39;&gt;&lt;notextile&gt;&lt;figure class=&#39;code&#39;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#39;line-number&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;5&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;6&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;7&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;8&lt;/span&gt;
&lt;span class=&#39;line-number&#39;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#39;code&#39;&gt;&lt;pre&gt;&lt;code class=&#39;sh&#39;&gt;&lt;span class=&#39;line&#39;&gt;~/dev/projects/danger
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;❯ git standup -m &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt; -d 7
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;/Users/orta/dev/projects/danger/hazmat/peril
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;c1d6893 - Update danger &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; days ago&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;Orta Therox&amp;gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;/Users/orta/dev/projects/danger/danger-js
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;a90d74c - Version bump, and peril fix &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; days ago&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;Orta Therox&amp;gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;f4836a1 - Version bump &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; days ago&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;Orta Therox&amp;gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;fbbcc1c - Adds a create/update label &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; to the github utils func &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; days ago&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;Orta Therox&amp;gt;
&lt;/span&gt;&lt;span class=&#39;line&#39;&gt;702e51d - More dep updates &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt; days ago&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;Orta Therox&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;


&lt;p&gt;Working this way requires trust from others that you&#39;re doing things that are valuable, which can be tricky when
your responses to &quot;what did you get up to yesterday&quot; end up being a bit ephemeral. Tools like &lt;code&gt;git-standup&lt;/code&gt; help on
the code front, and &lt;a href=&quot;https://www.rescuetime.com&quot;&gt;RescueTime&lt;/a&gt; can help you understand how much time you&#39;ve spent in greenhouse.&lt;/p&gt;

&lt;p&gt;It&#39;s your time, you should use it fastly.&lt;/p&gt;

&lt;p&gt;Do you have any useful ideas for speeding up context switching? I&#39;m open to improvements.&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate>
        <link>http://artsy.github.io/blog/2018/08/10/On-Context-Switching/</link>
        <guid isPermaLink="true">http://artsy.github.io/blog/2018/08/10/On-Context-Switching/</guid>
        
        
        <category>concepts</category>
        
        <category>danger</category>
        
        <category>shortcuts</category>
        
        <category>tooling</category>
        
      </item>
    
  </channel>
</rss>
